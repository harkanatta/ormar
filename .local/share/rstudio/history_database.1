1729695829274:version
1729695837450:library(networkD3)
1729695844361:library(digest)
1729695846887:library(networkD3)
1729695852694:install.packages(networkD3)
1729695857537:install.packages('networkD3')
1729695881429:library(networkD3)
1729695925456:install.packages("rlang")
1729696013590:library(networkD3)
1729696079416:remove.packages("rlang")
1729696164265:install.packages("rlang")
1729696182936:library(networkD3)
1729765685575:sessionInfo()
1729765874527:library(lubridate)
1729765896365:library(plyr)
1729765907115:library(tidyverse)
1729765914787:library(magrittr)
1729766107917:library('DT')
1729766113844:library(rLandsat)
1729766121538:library('rlang')
1729766462236:sessionInfo()
1729766651115:library(lubridate)
1729766651404:library(dplyr)
1729766651847:# Get current date and extract the day of the week
1729766651847:current_date <- today()
1729766651848:day_of_week <- wday(current_date, label = TRUE, abbr = FALSE)
1729766651850:# Create a sequence of dates for a specific week
1729766651850:start_date <- as.Date("2024-10-21")
1729766651850:week_dates <- start_date + 0:6
1729766651851:# Use lubridate to get days of the week from dates
1729766651851:days_of_week <- wday(week_dates, label = TRUE, abbr = FALSE)
1729766651851:# Create a data frame with dplyr to hold the dates and their corresponding days of the week
1729766651851:week_df <- tibble(Date = week_dates, Day_of_Week = days_of_week)
1729766651854:# Print the data frame
1729766651854:print(week_df)
1729766722515:sessionInfo()
1729766752284:.libPaths()
1729769376232:list.dirs()
1729770096432:list.dirs()
1729776623195:list.dirs()
1729776635040:list.dirs(recursive = T)
1729782132574:# Load required packages
1729782132575:library(dplyr)
1729782132764:library(ggplot2)
1729782133133:library(vegan)
1729782143443:install.packages('vegan')
1729782266217:richness <- specnumber(df %>% select(-stod, -Artal))
1729782273282:library(vegan)
1729782274994:# Load cleaned data
1729782274994:df <- readRDS("data/cleaned_data.rds")
1729782276514:# Calculate species richness and diversity indices
1729782276515:richness <- specnumber(df %>% select(-stod, -Artal))
1729782277078:shannon <- diversity(df %>% select(-stod, -Artal), index = "shannon")
1729782277467:simpson <- diversity(df %>% select(-stod, -Artal), index = "simpson")
1729782288161:df
1729782448154:# Load cleaned data
1729782448155:df <- readRDS("data/cleaned_data.rds")
1729782450514:df
1729782466331:# Calculate species richness and diversity indices
1729782466331:richness <- specnumber(df %>% select(-stod, -Artal))
1729782676619:# Exploratory Data Analysis
1729782676619:# Load required packages
1729782676619:library(dplyr)
1729782676619:library(ggplot2)
1729782676620:library(vegan)
1729782676620:library(tidyr)
1729782676664:# Load cleaned data
1729782676664:df <- readRDS("data/cleaned_data.rds")
1729782676674:# Prepare data for diversity calculations
1729782676674:species_matrix <- df %>%
1729782676674:select(species, sample_id, density) %>%
1729782676674:pivot_wider(names_from = species, values_from = density, values_fill = 0) %>%
1729782676674:select(-sample_id)
1729782686400:oad required packages
1729782699436:library(dplyr)
1729782699436:library(ggplot2)
1729782699436:library(vegan)
1729782699437:library(tidyr)
1729782699437:# Load cleaned data
1729782699437:df <- readRDS("data/cleaned_data.rds")
1729782699446:# Prepare data for diversity calculations
1729782699446:species_matrix <- df %>%
1729782699446:select(species, sample_id, density) %>%
1729782699447:pivot_wider(names_from = species, values_from = density, values_fill = 0) %>%
1729782699447:select(-sample_id)
1729782708601:# Create diversity dataframe
1729782708602:diversity_df <- df %>%
1729782708602:select(sample_id, year, station) %>%
1729782708602:distinct() %>%
1729782708602:mutate(
1729782708602:Richness = richness,
1729782708602:Shannon = shannon,
1729782708602:Simpson = simpson
1729782708603:)
1729782717849:# Prepare data for diversity calculations
1729782717849:species_matrix <- df %>%
1729782717849:select(species, sample_id, density) %>%
1729782717850:pivot_wider(names_from = species, values_from = density, values_fill = 0) %>%
1729782717850:select(-sample_id)
1729782877980:# Exploratory Data Analysis
1729782877980:# Load required packages
1729782877981:library(dplyr)
1729782877981:library(ggplot2)
1729782877981:library(vegan)
1729782877982:library(tidyr)
1729782877982:# Load cleaned data
1729782877982:df <- readRDS("data/cleaned_data.rds")
1729782877990:# Prepare data for diversity calculations
1729782877991:species_matrix <- df %>%
1729782877991:select(species, sample_id, density) %>%
1729782877991:pivot_wider(names_from = species, values_from = density, values_fill = 0) %>%
1729782877991:select(-sample_id)
1729782896497:df
1729782951785:df <- df %>%
1729782951785:mutate(density = as.numeric(density))  # Ensure density is numeric
1729782953041:# Prepare data for diversity calculations
1729782953042:species_matrix <- df %>%
1729782953042:select(species, sample_id, density) %>%
1729782953042:pivot_wider(names_from = species, values_from = density, values_fill = list(density = 0)) %>%
1729782953042:select(-sample_id)
1729782973417:rlang::last_trace()
1729783022483:# Load cleaned data
1729783022483:df <- readRDS("data/cleaned_data.rds")
1729783023458:# Ensure density is numeric
1729783023458:df <- df %>%
1729783023458:mutate(density = as.numeric(density))  # Ensure density is numeric
1729783024602:# Prepare data for diversity calculations
1729783024602:species_matrix <- df %>%
1729783024602:select(species, sample_id, density) %>%
1729783024602:pivot_wider(names_from = species, values_from = density, values_fill = 0) %>%
1729783024602:select(-sample_id)
1729783063603:# Load cleaned data
1729783063603:df <- readRDS("data/cleaned_data.rds")
1729783064587:# Prepare data for diversity calculations
1729783064588:species_matrix <- df %>%
1729783064588:select(species, sample_id, density) %>%
1729783064588:pivot_wider(names_from = species, values_from = density, values_fill = 0) %>%
1729783064588:select(-sample_id)
1729783083690:str(df)
1729783100777:df <- readRDS("data/cleaned_data.rds")
1729783100787:# Prepare data for diversity calculations
1729783100787:species_matrix <- df %>%
1729783100787:select(species, sample_id, density) %>%
1729783100787:pivot_wider(names_from = species, values_from = density, values_fill = 0) %>%
1729783100787:select(-sample_id)
1729783103067:rlang::last_trace()
1729783179561:df
1729783188824:table*
1729783201842:table(df$density)
1729783212202:summary(df$density)
1729783244732:df %>%
1729783244732:select(species, sample_id, density) %>%
1729783244733:pivot_wider(names_from = species, values_from = density, values_fill = list(density = 0)) %>%
1729783244733:select(-sample_id)
1729783266747:species_matrix <- df %>%
1729783266747:select(species, sample_id, density) %>%
1729783266747:pivot_wider(names_from = species, values_from = density, values_fill = 0) %>%
1729783266747:select(-sample_id)
1729783289913:species_matrix <- df %>%
1729783289914:select(species, sample_id, density) %>%
1729783289914:pivot_wider(names_from = species, values_from = density, values_fill = list(density = 0)) %>%
1729783289914:select(-sample_id)
1729783332845:species_matrix <- df %>%
1729783332845:select(species, sample_id, density) %>%
1729783332845:pivot_wider(
1729783332845:names_from = species,
1729783332845:values_from = density,
1729783332845:values_fill = 0,
1729783332846:values_fn = sum
1729783332846:)
1729783347819:# Calculate species richness and diversity indices
1729783347819:richness <- specnumber(species_matrix)
1729783348788:shannon <- diversity(species_matrix, index = "shannon")
1729783349356:simpson <- diversity(species_matrix, index = "simpson")
1729783354859:richness
1729783395099:species_matrix
1729783427044:species_matrix_numeric <- species_matrix %>%
1729783427044:select(-sample_id) %>%
1729783427044:mutate(across(everything(), as.numeric))
1729783427069:# Calculate species richness and diversity indices
1729783427069:richness <- specnumber(species_matrix_numeric)
1729783427072:shannon <- diversity(species_matrix_numeric, index = "shannon")
1729783427074:simpson <- diversity(species_matrix_numeric, index = "simpson")
1729783436098:shannon
1729783475490:species_matrix_numeric
1729845158028:# Prepare data for diversity calculations
1729845158029:species_matrix <- df %>%
1729845158029:select(species, sample_id, density) %>%
1729845158029:pivot_wider(
1729845158029:names_from = species,
1729845158029:values_from = density,
1729845158029:values_fill = 0,
1729845158030:values_fn = sum
1729845158030:) %>%
1729845158030:column_to_rownames(var = "sample_id") %>%
1729845158030:mutate(across(everything(), as.numeric))
1729845197389:# Prepare data for diversity calculations
1729845197389:species_matrix <- df %>%
1729845197389:select(species, sample_id, density) %>%
1729845197389:pivot_wider(
1729845197389:names_from = species,
1729845197390:values_from = density,
1729845197390:values_fill = 0,
1729845197390:values_fn = sum
1729845197390:) %>%
1729845197390:dplyr::column_to_rownames(var = "sample_id") %>%
1729845197390:mutate(across(everything(), as.numeric))
1729845395162:# Prepare data for diversity calculations
1729845395162:species_matrix <- df %>%
1729845395162:select(species, sample_id, density) %>%
1729845395162:pivot_wider(
1729845395162:names_from = species,
1729845395163:values_from = density,
1729845395163:values_fill = 0,
1729845395163:values_fn = sum
1729845395163:) %>%
1729845395163:tibble::column_to_rownames(var = "sample_id") %>%
1729845395163:mutate(across(everything(), as.numeric))
1729845402328:# Calculate species richness and diversity indices
1729845402329:richness <- specnumber(species_matrix)
1729845404073:shannon <- diversity(species_matrix, index = "shannon")
1729845404275:simpson <- diversity(species_matrix, index = "simpson")
1729845411615:richness
1729845416801:# Create diversity dataframe
1729845416801:diversity_df <- df %>%
1729845416801:select(sample_id, year, station) %>%
1729845416801:distinct() %>%
1729845416801:mutate(
1729845416801:Richness = richness,
1729845416801:Shannon = shannon,
1729845416802:Simpson = simpson
1729845416802:)
1729845496466:str(richness);str(shannon);str(simpson)
1729845533303:df
1729845757561:diversity_df
1729845787049:species_matrix
1729845867609:str(df)
1729846052484:# Load required packages
1729846052485:library(dplyr)
1729846052485:library(ggplot2)
1729846052486:library(vegan)
1729846052486:library(tidyr)
1729846052487:library(tibble)  # For column_to_rownames()
1729846052501:# Assuming df is already loaded
1729846052501:# Prepare data for diversity calculations
1729846052501:species_matrix <- df %>%
1729846052501:select(species, sample_id, density) %>%
1729846052501:pivot_wider(
1729846052501:names_from = species,
1729846052502:values_from = density,
1729846052502:values_fill = 0,
1729846052502:values_fn = sum
1729846052502:) %>%
1729846052502:column_to_rownames(var = "sample_id") %>%
1729846052502:mutate(across(everything(), as.numeric))
1729846052532:# Calculate species richness and diversity indices
1729846052532:richness <- specnumber(species_matrix)
1729846052535:shannon <- diversity(species_matrix, index = "shannon")
1729846052537:simpson <- diversity(species_matrix, index = "simpson")
1729846052540:# Create diversity dataframe
1729846052540:diversity_df <- data.frame(
1729846052540:sample_id = rownames(species_matrix),
1729846052540:Richness = richness,
1729846052540:Shannon = shannon,
1729846052540:Simpson = simpson
1729846052540:) %>%
1729846052540:left_join(
1729846052540:df %>%
1729846052540:select(sample_id, year, station) %>%
1729846052540:distinct(),
1729846052541:by = "sample_id"
1729846052541:)
1729846052549:# Create output directory if it doesn't exist
1729846052549:if(!dir.exists("output")) {
1729846052549:dir.create("output")
1729846052549:}
1729846052551:# Plot diversity indices
1729846052551:richness_plot <- ggplot(diversity_df, aes(x = year, y = Richness, color = station, group = station)) +
1729846052551:geom_line() +
1729846052551:geom_point() +
1729846052551:theme_minimal() +
1729846052551:labs(title = "Species Richness Over Time by Station",
1729846052551:x = "Year",
1729846052552:y = "Species Richness")
1729846052574:shannon_plot <- ggplot(diversity_df, aes(x = year, y = Shannon, color = station, group = station)) +
1729846052574:geom_line() +
1729846052574:geom_point() +
1729846052574:theme_minimal() +
1729846052574:labs(title = "Shannon Diversity Over Time by Station",
1729846052574:x = "Year",
1729846052574:y = "Shannon Diversity Index")
1729846052582:# Save plots
1729846052582:ggsave("output/richness_plot.png", richness_plot, width = 10, height = 6)
1729846053318:ggsave("output/shannon_plot.png", shannon_plot, width = 10, height = 6)
1729846053933:# Summary statistics
1729846053934:summary_stats <- diversity_df %>%
1729846053934:group_by(year, station) %>%
1729846053934:summarise(
1729846053934:Mean_Richness = mean(Richness),
1729846053934:SD_Richness = sd(Richness),
1729846053934:Mean_Shannon = mean(Shannon),
1729846053934:SD_Shannon = sd(Shannon),
1729846053934:.groups = 'drop'
1729846053935:)
1729846053942:# Save summary statistics
1729846053942:write.csv(summary_stats, "output/diversity_summary_stats.csv", row.names = FALSE)
1729846053949:# Boxplots for richness and Shannon diversity by year
1729846053949:richness_boxplot <- ggplot(diversity_df, aes(x = as.factor(year), y = Richness)) +
1729846053949:geom_boxplot() +
1729846053949:theme_minimal() +
1729846053950:labs(title = "Species Richness Distribution by Year",
1729846053950:x = "Year",
1729846053950:y = "Species Richness")
1729846053956:shannon_boxplot <- ggplot(diversity_df, aes(x = as.factor(year), y = Shannon)) +
1729846053957:geom_boxplot() +
1729846053957:theme_minimal() +
1729846053957:labs(title = "Shannon Diversity Distribution by Year",
1729846053957:x = "Year",
1729846053957:y = "Shannon Diversity Index")
1729846053962:# Save boxplots
1729846053962:ggsave("output/richness_boxplot.png", richness_boxplot, width = 10, height = 6)
1729846054401:ggsave("output/shannon_boxplot.png", shannon_boxplot, width = 10, height = 6)
1729846054800:# Species accumulation curve
1729846054801:species_accum <- specaccum(species_matrix)
1729846054820:# Save species accumulation plot
1729846054821:png("output/species_accumulation.png", width = 800, height = 600)
1729846054860:plot(species_accum, ci.type = "poly", col = "blue", lwd = 2, ci.lty = 0, ci.col = "lightblue",
1729846054860:xlab = "Number of Samples", ylab = "Species Richness",
1729846054860:main = "Species Accumulation Curve")
1729846054876:dev.off()
1729846054899:# Top 10 most abundant species
1729846054899:top_species <- df %>%
1729846054899:group_by(species) %>%
1729846054899:summarise(total_abundance = sum(density)) %>%
1729846054899:slice_max(order_by = total_abundance, n = 10)
1729846054905:# Bar plot of top 10 species
1729846054906:top_species_plot <- ggplot(top_species, aes(x = reorder(species, total_abundance), y = total_abundance)) +
1729846054906:geom_bar(stat = "identity") +
1729846054906:coord_flip() +
1729846054906:theme_minimal() +
1729846054906:labs(title = "Top 10 Most Abundant Species",
1729846054906:x = "Species",
1729846054906:y = "Total Abundance")
1729846054912:# Save top species plot
1729846054912:ggsave("output/top_species_plot.png", top_species_plot, width = 10, height = 6)
1729846156418:diversity_df
1729846344954:# Load required packages
1729846344955:library(dplyr)
1729846344955:library(ggplot2)
1729846344955:library(vegan)
1729846344956:library(tidyr)
1729846344956:library(tibble)  # For column_to_rownames()
1729846344956:df <- readRDS("data/cleaned_data.rds")
1729846344966:# Prepare data for diversity calculations
1729846344966:species_matrix <- df %>%
1729846344966:select(species, sample_id, density) %>%
1729846344966:pivot_wider(
1729846344966:names_from = species,
1729846344966:values_from = density,
1729846344967:values_fill = 0,
1729846344967:values_fn = sum
1729846344967:) %>%
1729846344967:column_to_rownames(var = "sample_id") %>%
1729846344967:mutate(across(everything(), as.numeric))
1729846345017:# Calculate species richness and diversity indices
1729846345017:richness <- specnumber(species_matrix)
1729846345024:shannon <- diversity(species_matrix, index = "shannon")
1729846345027:simpson <- diversity(species_matrix, index = "simpson")
1729846345030:# Create diversity dataframe
1729846345031:diversity_df <- data.frame(
1729846345031:sample_id = rownames(species_matrix),
1729846345031:Richness = richness,
1729846345031:Shannon = shannon,
1729846345031:Simpson = simpson
1729846345031:) %>%
1729846345031:left_join(
1729846345031:df %>%
1729846345031:select(sample_id, year, station) %>%
1729846345031:distinct(),
1729846345031:by = "sample_id"
1729846345031:)
1729846345040:# Create output directory if it doesn't exist
1729846345040:if(!dir.exists("output")) {
1729846345040:dir.create("output")
1729846345040:}
1729846345041:# Plot diversity indices
1729846345041:richness_plot <- ggplot(diversity_df, aes(x = year, y = Richness, color = station, group = station)) +
1729846345041:geom_line() +
1729846345041:geom_point() +
1729846345041:theme_minimal() +
1729846345042:labs(title = "Species Richness Over Time by Station",
1729846345042:x = "Year",
1729846345042:y = "Species Richness")
1729846345053:shannon_plot <- ggplot(diversity_df, aes(x = year, y = Shannon, color = station, group = station)) +
1729846345053:geom_line() +
1729846345053:geom_point() +
1729846345053:theme_minimal() +
1729846345053:labs(title = "Shannon Diversity Over Time by Station",
1729846345054:x = "Year",
1729846345054:y = "Shannon Diversity Index")
1729846345063:# Save plots
1729846345063:ggsave("output/richness_plot.png", richness_plot, width = 10, height = 6, bg = "white")
1729846345583:ggsave("output/shannon_plot.png", shannon_plot, width = 10, height = 6, bg = "white")
1729846346008:# Summary statistics
1729846346008:summary_stats <- diversity_df %>%
1729846346008:group_by(year, station) %>%
1729846346009:summarise(
1729846346009:Mean_Richness = mean(Richness),
1729846346009:SD_Richness = sd(Richness),
1729846346009:Mean_Shannon = mean(Shannon),
1729846346009:SD_Shannon = sd(Shannon),
1729846346009:.groups = 'drop'
1729846346009:)
1729846346016:# Save summary statistics
1729846346016:write.csv(summary_stats, "output/diversity_summary_stats.csv", row.names = FALSE)
1729846346024:# Boxplots for richness and Shannon diversity by year
1729846346024:richness_boxplot <- ggplot(diversity_df, aes(x = as.factor(year), y = Richness)) +
1729846346024:geom_boxplot() +
1729846346024:theme_minimal() +
1729846346024:labs(title = "Species Richness Distribution by Year",
1729846346024:x = "Year",
1729846346025:y = "Species Richness")
1729846346030:shannon_boxplot <- ggplot(diversity_df, aes(x = as.factor(year), y = Shannon)) +
1729846346030:geom_boxplot() +
1729846346030:theme_minimal() +
1729846346030:labs(title = "Shannon Diversity Distribution by Year",
1729846346030:x = "Year",
1729846346030:y = "Shannon Diversity Index")
1729846346034:# Save boxplots
1729846346034:ggsave("output/richness_boxplot.png", richness_boxplot, width = 10, height = 6, bg = "white")
1729846346363:ggsave("output/shannon_boxplot.png", shannon_boxplot, width = 10, height = 6, bg = "white")
1729846346688:# Species accumulation curve
1729846346688:species_accum <- specaccum(species_matrix)
1729846346775:# Save species accumulation plot
1729846346775:png("output/species_accumulation.png", width = 800, height = 600)
1729846346776:plot(species_accum, ci.type = "poly", col = "blue", lwd = 2, ci.lty = 0, ci.col = "lightblue",
1729846346776:xlab = "Number of Samples", ylab = "Species Richness",
1729846346776:main = "Species Accumulation Curve")
1729846346781:dev.off()
1729846346804:# Top 10 most abundant species
1729846346804:top_species <- df %>%
1729846346804:group_by(species) %>%
1729846346804:summarise(total_abundance = sum(density)) %>%
1729846346804:slice_max(order_by = total_abundance, n = 10)
1729846346810:# Bar plot of top 10 species
1729846346810:top_species_plot <- ggplot(top_species, aes(x = reorder(species, total_abundance), y = total_abundance)) +
1729846346810:geom_bar(stat = "identity") +
1729846346810:coord_flip() +
1729846346810:theme_minimal() +
1729846346810:labs(title = "Top 10 Most Abundant Species",
1729846346810:x = "Species",
1729846346810:y = "Total Abundance")
1729846346815:# Save top species plot
1729846346815:ggsave("output/top_species_plot.png", top_species_plot, width = 10, height = 6, bg = "white")
1729846448553:str(df)
1729846470443:df <- readRDS("data/cleaned_data.rds") %>% filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3"))
1729846489466:# Prepare data for diversity calculations
1729846489466:species_matrix <- df %>%
1729846489466:select(species, sample_id, density) %>%
1729846489466:pivot_wider(
1729846489466:names_from = species,
1729846489466:values_from = density,
1729846489467:values_fill = 0,
1729846489467:values_fn = sum
1729846489467:) %>%
1729846489467:column_to_rownames(var = "sample_id") %>%
1729846489467:mutate(across(everything(), as.numeric))
1729846490377:# Calculate species richness and diversity indices
1729846490377:richness <- specnumber(species_matrix)
1729846490978:shannon <- diversity(species_matrix, index = "shannon")
1729846491300:simpson <- diversity(species_matrix, index = "simpson")
1729846491651:# Create diversity dataframe
1729846491652:diversity_df <- data.frame(
1729846491652:sample_id = rownames(species_matrix),
1729846491652:Richness = richness,
1729846491652:Shannon = shannon,
1729846491652:Simpson = simpson
1729846491652:) %>%
1729846491652:left_join(
1729846491652:df %>%
1729846491653:select(sample_id, year, station) %>%
1729846491653:distinct(),
1729846491653:by = "sample_id"
1729846491653:)
1729846498400:# Create output directory if it doesn't exist
1729846498400:if(!dir.exists("output")) {
1729846498400:dir.create("output")
1729846498400:}
1729846500064:# Plot diversity indices
1729846500064:richness_plot <- ggplot(diversity_df, aes(x = year, y = Richness, color = station, group = station)) +
1729846500065:geom_line() +
1729846500065:geom_point() +
1729846500065:theme_minimal() +
1729846500065:labs(title = "Species Richness Over Time by Station",
1729846500065:x = "Year",
1729846500065:y = "Species Richness")
1729846501353:shannon_plot <- ggplot(diversity_df, aes(x = year, y = Shannon, color = station, group = station)) +
1729846501353:geom_line() +
1729846501354:geom_point() +
1729846501354:theme_minimal() +
1729846501354:labs(title = "Shannon Diversity Over Time by Station",
1729846501354:x = "Year",
1729846501354:y = "Shannon Diversity Index")
1729846502833:# Save plots
1729846502833:ggsave("output/richness_plot.png", richness_plot, width = 10, height = 6, bg = "white")
1729846503200:ggsave("output/shannon_plot.png", shannon_plot, width = 10, height = 6, bg = "white")
1729846505057:# Summary statistics
1729846505058:summary_stats <- diversity_df %>%
1729846505058:group_by(year, station) %>%
1729846505058:summarise(
1729846505058:Mean_Richness = mean(Richness),
1729846505058:SD_Richness = sd(Richness),
1729846505058:Mean_Shannon = mean(Shannon),
1729846505059:SD_Shannon = sd(Shannon),
1729846505059:.groups = 'drop'
1729846505059:)
1729846506329:# Save summary statistics
1729846506329:write.csv(summary_stats, "output/diversity_summary_stats.csv", row.names = FALSE)
1729846507859:# Boxplots for richness and Shannon diversity by year
1729846507859:richness_boxplot <- ggplot(diversity_df, aes(x = as.factor(year), y = Richness)) +
1729846507860:geom_boxplot() +
1729846507860:theme_minimal() +
1729846507860:labs(title = "Species Richness Distribution by Year",
1729846507860:x = "Year",
1729846507860:y = "Species Richness")
1729846508656:shannon_boxplot <- ggplot(diversity_df, aes(x = as.factor(year), y = Shannon)) +
1729846508657:geom_boxplot() +
1729846508657:theme_minimal() +
1729846508657:labs(title = "Shannon Diversity Distribution by Year",
1729846508657:x = "Year",
1729846508657:y = "Shannon Diversity Index")
1729846509443:# Save boxplots
1729846509443:ggsave("output/richness_boxplot.png", richness_boxplot, width = 10, height = 6, bg = "white")
1729846509781:ggsave("output/shannon_boxplot.png", shannon_boxplot, width = 10, height = 6, bg = "white")
1729846510095:# Species accumulation curve
1729846510095:species_accum <- specaccum(species_matrix)
1729846510685:# Save species accumulation plot
1729846510685:png("output/species_accumulation.png", width = 800, height = 600)
1729846510924:plot(species_accum, ci.type = "poly", col = "blue", lwd = 2, ci.lty = 0, ci.col = "lightblue",
1729846510924:xlab = "Number of Samples", ylab = "Species Richness",
1729846510924:main = "Species Accumulation Curve")
1729846511252:dev.off()
1729846511653:# Top 10 most abundant species
1729846511653:top_species <- df %>%
1729846511653:group_by(species) %>%
1729846511653:summarise(total_abundance = sum(density)) %>%
1729846511653:slice_max(order_by = total_abundance, n = 10)
1729846511972:# Bar plot of top 10 species
1729846511972:top_species_plot <- ggplot(top_species, aes(x = reorder(species, total_abundance), y = total_abundance)) +
1729846511972:geom_bar(stat = "identity") +
1729846511972:coord_flip() +
1729846511972:theme_minimal() +
1729846511972:labs(title = "Top 10 Most Abundant Species",
1729846511972:x = "Species",
1729846511972:y = "Total Abundance")
1729846512714:# Save top species plot
1729846512715:ggsave("output/top_species_plot.png", top_species_plot, width = 10, height = 6, bg = "white")
1729848347976:?rarefy()
1729849782932:KolgrTaxa <- read_csv(file("data/processed/KolgrTaxa.csv", encoding = "UTF-8"), na = "empty")
1729849790115:library(dplyr)
1729849790117:library(ggplot2)
1729849790117:library(vegan)
1729849790117:library(tidyr)
1729849790118:library(tibble)  # For column_to_rownames()
1729849790118:KolgrTaxa <- read_csv(file("data/processed/KolgrTaxa.csv", encoding = "UTF-8"), na = "empty")
1729849820523:# Load required packages
1729849820523:library(readr)
1729849822276:KolgrTaxa <- read_csv(file("data/processed/KolgrTaxa.csv", encoding = "UTF-8"), na = "empty")
1729849826490:taxa_to_remove <- c(
1729849826490:"Foraminifera",
1729849826490:"Nematoda",
1729849826490:"Cirripedia",
1729849826490:"Porifera",
1729849826491:"Cnidaria",
1729849826491:"Bryozoa",
1729849826491:"Sipuncula",
1729849826491:"Platyhelminthes",
1729849826491:"Nemertea",
1729849826492:"Oligochaeta",
1729849826492:"Ostracoda"
1729849826492:)
1729849829538:# Filter out the specified taxa using if_all()
1729849829539:KolgrTaxa <- KolgrTaxa %>%
1729849829539:filter(if_all(where(is.character), ~ !. %in% taxa_to_remove))
1729849832690:remove_list <- paste(c(
1729849832690:"nýsestir",
1729849832691:"ungviði",
1729849832691:"ungv",
1729849832691:"ungv.",
1729849832691:"juv",
1729849832691:"harpacticoida"
1729849832691:), collapse = '|')
1729849835458:remove_ind <- lapply(strsplit(remove_list , "\\|")[[1]] , \(x) grep(x , KolgrTaxa$gamalt , fixed = T)) |>
1729849835459:unlist() |>
1729849835459:unique()
1729849837882:ekkiungvidi <- KolgrTaxa[-remove_ind,]
1729849840900:df <- ekkiungvidi %>%
1729849840900:mutate(Artal = factor(Artal)) %>%
1729849840900:dplyr::filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1729849840900:group_by(Artal, stod, Flokkun) %>%
1729849840900:summarise(N = sum(Nfm), .groups = "drop") %>%
1729849840900:arrange(N)
1729850220812:str(df)
1729851019526:KolgrTaxa <- read_csv(file("data/processed/KolgrTaxa.csv", encoding = "UTF-8"), na = "empty")
1729851019761:taxa_to_remove <- c(
1729851019761:"Foraminifera",
1729851019761:"Nematoda",
1729851019761:"Cirripedia",
1729851019761:"Porifera",
1729851019762:"Cnidaria",
1729851019762:"Bryozoa",
1729851019762:"Sipuncula",
1729851019762:"Platyhelminthes",
1729851019762:"Nemertea",
1729851019762:"Oligochaeta",
1729851019762:"Ostracoda"
1729851019762:)
1729851019762:# Filter out the specified taxa using if_all()
1729851019762:KolgrTaxa <- KolgrTaxa %>%
1729851019762:filter(if_all(where(is.character), ~ !. %in% taxa_to_remove))
1729851019773:remove_list <- paste(c(
1729851019773:"nýsestir",
1729851019773:"ungviði",
1729851019773:"ungv",
1729851019773:"ungv.",
1729851019774:"juv",
1729851019774:"harpacticoida"
1729851019774:), collapse = '|')
1729851019774:remove_ind <- lapply(strsplit(remove_list , "\\|")[[1]] , \(x) grep(x , KolgrTaxa$gamalt , fixed = T)) |>
1729851019774:unlist() |>
1729851019774:unique()
1729851019778:ekkiungvidi <- KolgrTaxa[-remove_ind,]
1729851019779:df <- ekkiungvidi  %>%
1729851019779:rename(
1729851019779:species = Flokkun,
1729851019779:sample_id = id,
1729851019779:year = Artal,
1729851019780:station = stod,
1729851019780:subdivision = skipting,
1729851019780:count = N,
1729851019780:density = Nu
1729851019780:)
1729851051937:df
1729851076395:# Prepare data for diversity calculations
1729851076396:species_matrix <- df %>%
1729851076396:select(species, sample_id, density) %>%
1729851076396:pivot_wider(
1729851076397:names_from = species,
1729851076397:values_from = density,
1729851076397:values_fill = 0,
1729851076397:values_fn = sum
1729851076397:) %>%
1729851076397:column_to_rownames(var = "sample_id") %>%
1729851076398:mutate(across(everything(), as.numeric))
1729851078243:# Calculate species richness and diversity indices
1729851078243:richness <- specnumber(species_matrix)
1729851078574:shannon <- diversity(species_matrix, index = "shannon")
1729851078878:simpson <- diversity(species_matrix, index = "simpson")
1729851079592:# Create diversity dataframe
1729851079592:diversity_df <- data.frame(
1729851079592:sample_id = rownames(species_matrix),
1729851079592:Richness = richness,
1729851079593:Shannon = shannon,
1729851079593:Simpson = simpson
1729851079593:) %>%
1729851079593:left_join(
1729851079593:df %>%
1729851079593:select(sample_id, year, station) %>%
1729851079593:distinct(),
1729851079594:by = "sample_id"
1729851079594:)
1729851081418:# Create output directory if it doesn't exist
1729851081418:if(!dir.exists("output")) {
1729851081419:dir.create("output")
1729851081419:}
1729851082539:# Plot diversity indices
1729851082540:richness_plot <- ggplot(diversity_df, aes(x = year, y = Richness, color = station, group = station)) +
1729851082540:geom_line() +
1729851082540:geom_point() +
1729851082540:theme_minimal() +
1729851082540:labs(title = "Species Richness Over Time by Station",
1729851082540:x = "Year",
1729851082541:y = "Species Richness")
1729851083418:shannon_plot <- ggplot(diversity_df, aes(x = year, y = Shannon, color = station, group = station)) +
1729851083419:geom_line() +
1729851083419:geom_point() +
1729851083419:theme_minimal() +
1729851083419:labs(title = "Shannon Diversity Over Time by Station",
1729851083419:x = "Year",
1729851083419:y = "Shannon Diversity Index")
1729851084178:# Save plots
1729851084178:ggsave("output/richness_plot.png", richness_plot, width = 10, height = 6, bg = "white")
1729851084762:ggsave("output/shannon_plot.png", shannon_plot, width = 10, height = 6, bg = "white")
1729851085132:# Summary statistics
1729851085132:summary_stats <- diversity_df %>%
1729851085132:group_by(year, station) %>%
1729851085132:summarise(
1729851085132:Mean_Richness = mean(Richness),
1729851085132:SD_Richness = sd(Richness),
1729851085133:Mean_Shannon = mean(Shannon),
1729851085133:SD_Shannon = sd(Shannon),
1729851085133:.groups = 'drop'
1729851085133:)
1729851085411:# Save summary statistics
1729851085412:write.csv(summary_stats, "output/diversity_summary_stats.csv", row.names = FALSE)
1729851086060:# Boxplots for richness and Shannon diversity by year
1729851086060:richness_boxplot <- ggplot(diversity_df, aes(x = as.factor(year), y = Richness)) +
1729851086060:geom_boxplot() +
1729851086060:theme_minimal() +
1729851086060:labs(title = "Species Richness Distribution by Year",
1729851086060:x = "Year",
1729851086060:y = "Species Richness")
1729851086581:shannon_boxplot <- ggplot(diversity_df, aes(x = as.factor(year), y = Shannon)) +
1729851086581:geom_boxplot() +
1729851086581:theme_minimal() +
1729851086581:labs(title = "Shannon Diversity Distribution by Year",
1729851086581:x = "Year",
1729851086581:y = "Shannon Diversity Index")
1729851087292:# Save boxplots
1729851087292:ggsave("output/richness_boxplot.png", richness_boxplot, width = 10, height = 6, bg = "white")
1729851087692:ggsave("output/shannon_boxplot.png", shannon_boxplot, width = 10, height = 6, bg = "white")
1729851088656:# Species accumulation curve
1729851088656:species_accum <- specaccum(species_matrix)
1729851089140:# Save species accumulation plot
1729851089140:png("output/species_accumulation.png", width = 800, height = 600)
1729851089643:plot(species_accum, ci.type = "poly", col = "blue", lwd = 2, ci.lty = 0, ci.col = "lightblue",
1729851089643:xlab = "Number of Samples", ylab = "Species Richness",
1729851089643:main = "Species Accumulation Curve")
1729851090068:dev.off()
1729851090484:# Top 10 most abundant species
1729851090485:top_species <- df %>%
1729851090485:group_by(species) %>%
1729851090485:summarise(total_abundance = sum(density)) %>%
1729851090485:slice_max(order_by = total_abundance, n = 10)
1729851090892:# Bar plot of top 10 species
1729851090893:top_species_plot <- ggplot(top_species, aes(x = reorder(species, total_abundance), y = total_abundance)) +
1729851090893:geom_bar(stat = "identity") +
1729851090893:coord_flip() +
1729851090893:theme_minimal() +
1729851090893:labs(title = "Top 10 Most Abundant Species",
1729851090893:x = "Species",
1729851090893:y = "Total Abundance")
1729851091220:# Save top species plot
1729851091220:ggsave("output/top_species_plot.png", top_species_plot, width = 10, height = 6, bg = "white")
1729852514424:str(result)
1729852531883:result <- df %>%
1729852531883:# First, apply the subdivision to the count
1729852531884:mutate(adjusted_count = count * subdivision) %>%
1729852531884:# Calculate the correct number of samples and total area for each station-year combination
1729852531884:group_by(station, year) %>%
1729852531884:mutate(
1729852531884:n_samples = n_distinct(sample_id),
1729852531884:grab_area = case_when(
1729852531885:year == 1999 ~ 0.0225,
1729852531885:TRUE ~ 0.04
1729852531885:),
1729852531885:total_area = grab_area * n_samples
1729852531885:) %>%
1729852531885:ungroup() %>%
1729852531885:# Now group by station, year, and species to get total counts
1729852531886:group_by(station, year, species) %>%
1729852531886:summarise(
1729852531886:original_total_count = sum(count),
1729852531886:adjusted_total_count = sum(adjusted_count),
1729852531886:n_samples = first(n_samples),  # Use the previously calculated n_samples
1729852531886:total_area = first(total_area),  # Use the previously calculated total_area
1729852531887:.groups = 'keep'
1729852531887:) %>%
1729852531887:# Calculate densities
1729852531887:mutate(
1729852531887:original_density = original_total_count / total_area,
1729852531888:adjusted_density = adjusted_total_count / total_area,
1729852531888:density_difference = adjusted_density - original_density,
1729852531888:density_ratio = adjusted_density / original_density
1729852531888:) %>%
1729852531888:# Ungroup
1729852531889:ungroup()
1729852540252:str(result)
1729864460563:diversity_df
1729864579164:# Plot diversity indices
1729864579164:richness_plot <- diversity_df %>%
1729864579164:filter(!year == 1999 & station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1729864579165:ggplot(aes(x = year, y = Richness, color = station, group = station)) +
1729864579165:geom_line() +
1729864579165:geom_point() +
1729864579165:theme_minimal() +
1729864579165:labs(title = "Species Richness Over Time by Station",
1729864579165:x = "Year",
1729864579166:y = "Species Richness")
1729864579181:shannon_plot <- diversity_df %>%
1729864579181:filter(!year == 1999 & station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1729864579181:ggplot(aes(x = year, y = Shannon, color = station, group = station)) +
1729864579181:geom_line() +
1729864579181:geom_point() +
1729864579181:theme_minimal() +
1729864579182:labs(title = "Shannon Diversity Over Time by Station",
1729864579182:x = "Year",
1729864579182:y = "Shannon Diversity Index")
1729864579189:# Save plots
1729864579189:ggsave("output/richness_plot.png", richness_plot, width = 10, height = 6, bg = "white")
1729864579660:ggsave("output/shannon_plot.png", shannon_plot, width = 10, height = 6, bg = "white")
1729865371802:str(df)
1729866207882:install.packages()
1729866213042:install.packages('BBI')
1729866589391:# various Benthic Biotic Indices (BBI) for different years and stations. It then creates heatmaps to visualize these indices. This provides a good overview of the ecological status of the benthic communities over time and across different sampling sites.
1729866589391:library(BBI)
1729866595291:BBIlisti <- list()
1729866595987:BBIastand <- list()
1729866597780:nEQR <- list()
1729866601010:for (i in unique(df$year)) {
1729866601010:my_BBI <- df %>%
1729866601010:filter(!year == 1999 & station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1729866601010:filter(year == i) %>%
1729866601010:filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1729866601011:group_by(year, station, species) %>%
1729866601011:summarise(count = sum(count), .groups = 'drop') %>%
1729866601011:select(-year) %>%
1729866601011:pivot_wider(names_from = station, values_from = count) %>% BBI()
1729866601011:# calculating nEQR values and ecological quality status
1729866601011:BBIlisti[[i]] <- as.data.frame(cbind(my_BBI$BBI, year=i))
1729866601011:BBIastand[[i]] <- my_BBI$BBIclass
1729866601012:nEQR[[i]] <- as.data.frame(nEQR(my_BBI$BBI)[1])
1729866601012:}
1729866645245:my_BBI
1729866692651:rass <- do.call(rbind,plyr::compact(nEQR))
1729866694114:names(rass) <- c("nAMBI","nISI","nNSI","nNQI1","nShannon","nEQR")
1729866706338:install.packages(plyr)
1729866713209:install.packages('plyr')
1729866721162:rass <- do.call(rbind,plyr::compact(nEQR))
1729866727355:names(rass) <- c("nAMBI","nISI","nNSI","nNQI1","nShannon","nEQR")
1729866729409:rass
1729866758715:i
1729866844819:BBIlisti <- list()
1729866845339:BBIastand <- list()
1729866845818:nEQR <- list()
1729866848626:DF13_17 <- df %>%
1729866848627:filter(!year == 1999 & station %in% c("C4", "A7", "B5", "B8", "E4", "E3"))
1729866870370:for (i in unique(DF13_17$year)) {
1729866870370:my_BBI <- DF13_17 %>%
1729866870370:filter(year == i) %>%
1729866870370:filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1729866870370:group_by(year, station, species) %>%
1729866870371:summarise(count = sum(count), .groups = 'drop') %>%
1729866870371:select(-year) %>%
1729866870371:pivot_wider(names_from = station, values_from = count) %>% BBI()
1729866870371:# calculating nEQR values and ecological quality status
1729866870371:BBIlisti[[i]] <- as.data.frame(cbind(my_BBI$BBI, year=i))
1729866870371:BBIastand[[i]] <- my_BBI$BBIclass
1729866870372:nEQR[[i]] <- as.data.frame(nEQR(my_BBI$BBI)[1])
1729866870372:}
1729866875355:rass <- do.call(rbind,plyr::compact(nEQR))
1729866875820:names(rass) <- c("nAMBI","nISI","nNSI","nNQI1","nShannon","nEQR")
1729866878243:mm <- as.matrix(rass, ncol = 7)
1729866881289:mm
1729866895252:myind <- rass %>%
1729866895253:dplyr::select(nAMBI, nISI, nNSI, nNQI1, nShannon, nEQR) %>%
1729866895253:#dplyr::select(nNQI1, nAMBI, nShannon) %>%
1729866895253:#dplyr::select(nNQI1, nEQR, nISI) %>%
1729866895253:#dplyr::select(nNQI1) %>%
1729866895254:as.matrix()
1729866896194:myind %>%
1729866896194:heatmap.2(dendogram = "row", srtCol=0,   adjCol = c(0.5,1))
1729866968659:library(gplots)
1729866976018:install.packages("gplots")
1729866984212:library(gplots)
1729866991017:myind %>%
1729866991017:heatmap.2(dendogram = "row", srtCol=0,   adjCol = c(0.5,1))
1729867045859:myind
1729867075577:BBIlisti
1729867089586:my_BBI
1729867114369:i
1729867131856:unique(DF13_17$year)
1729867143600:sort(unique(DF13_17$year))
1729867162769:for (i in sort(unique(DF13_17$year))) {
1729867162770:my_BBI <- DF13_17 %>%
1729867162770:filter(year == i) %>%
1729867162770:filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1729867162770:group_by(year, station, species) %>%
1729867162770:summarise(count = sum(count), .groups = 'drop') %>%
1729867162771:select(-year) %>%
1729867162771:pivot_wider(names_from = station, values_from = count) %>% BBI()
1729867162771:# calculating nEQR values and ecological quality status
1729867162771:BBIlisti[[i]] <- as.data.frame(cbind(my_BBI$BBI, year=i))
1729867162771:BBIastand[[i]] <- my_BBI$BBIclass
1729867162772:nEQR[[i]] <- as.data.frame(nEQR(my_BBI$BBI)[1])
1729867162772:}
1729867221450:my_BBI
1729867223688:i
1729867358409:myind
1729867473916:rass <- do.call(rbind, plyr::compact(nEQR))
1729867473918:names(rass) <- c("nAMBI", "nISI", "nNSI", "nNQI1", "nShannon", "nEQR")
1729867473918:rass$Year <- as.numeric(rownames(rass))
1729867473919:# Melt the data for easier plotting
1729867473919:rass_melted <- rass %>%
1729867473919:pivot_longer(cols = -Year, names_to = "Index", values_to = "Value")
1729867473926:# Create a matrix for heatmap
1729867473926:heatmap_matrix <- rass %>%
1729867473926:select(-Year) %>%
1729867473926:as.matrix()
1729867480578:heatmap_matrix
1729867501573:color_palette <- colorRampPalette(c("red", "yellow", "green"))(100)
1729867501576:# Create heatmap
1729867501576:png("output/BBI_heatmap.png", width = 800, height = 600, res = 100)
1729867501578:heatmap.2(heatmap_matrix,
1729867501578:main = "Benthic Biotic Indices Over Time",
1729867501578:xlab = "Indices",
1729867501578:ylab = "Year",
1729867501578:col = color_palette,
1729867501578:scale = "none",
1729867501578:key = TRUE,
1729867501579:keysize = 1.5,
1729867501579:density.info = "none",
1729867501579:trace = "none",
1729867501579:Rowv = FALSE,
1729867501579:Colv = FALSE,
1729867501579:dendrogram = "none",
1729867501580:margins = c(5, 5),
1729867501580:cexRow = 1.2,
1729867501580:cexCol = 1.2,
1729867501580:srtCol = 45,
1729867501580:adjCol = c(1, 1),
1729867501580:cellnote = round(heatmap_matrix, 2),
1729867501581:notecol = "black",
1729867501581:notecex = 0.8,
1729867501581:labRow = rownames(heatmap_matrix),
1729867501581:labCol = colnames(heatmap_matrix))
1729867501624:dev.off()
1729867578308:ggplot(rass_melted, aes(x = Year, y = Value, color = Index, group = Index)) +
1729867578309:geom_line() +
1729867578309:geom_point() +
1729867578309:theme_minimal() +
1729867578309:labs(title = "Trends in Benthic Biotic Indices",
1729867578309:x = "Year",
1729867578309:y = "Index Value") +
1729867578309:theme(legend.position = "bottom")
1729867578607:ggsave("output/BBI_trends.png", width = 10, height = 6)
1729867651980:rass <- do.call(rbind, plyr::compact(nEQR))
1729867651983:names(rass) <- c("nAMBI", "nISI", "nNSI", "nNQI1", "nShannon", "nEQR")
1729867651983:rass$Year <- as.numeric(rownames(rass))
1729867651984:# Check for missing values
1729867651984:print(summary(rass))
1729867651989:# Melt the data for easier plotting
1729867651989:rass_melted <- rass %>%
1729867651989:pivot_longer(cols = -Year, names_to = "Index", values_to = "Value")
1729867651994:# Check for missing values in melted data
1729867651994:print(sum(is.na(rass_melted$Value)))
1729867651995:# Remove rows with NA values
1729867651995:rass_melted_clean <- rass_melted %>% filter(!is.na(Value))
1729867651997:# Create line plot for trends
1729867651997:ggplot(rass_melted_clean, aes(x = Year, y = Value, color = Index, group = Index)) +
1729867651997:geom_line() +
1729867651997:geom_point() +
1729867651997:theme_minimal() +
1729867651997:labs(title = "Trends in Benthic Biotic Indices",
1729867651997:x = "Year",
1729867651998:y = "Index Value") +
1729867651998:theme(legend.position = "bottom")
1729867717122:rass <- do.call(rbind, plyr::compact(nEQR))
1729867717124:names(rass) <- c("nAMBI", "nISI", "nNSI", "nNQI1", "nShannon", "nEQR")
1729867717125:# Instead of converting rownames, create Year column directly from the names
1729867717125:rass$Year <- as.numeric(names(plyr::compact(nEQR)))
1729867780578:rass <- do.call(rbind, plyr::compact(nEQR))
1729867780581:names(rass) <- c("nAMBI", "nISI", "nNSI", "nNQI1", "nShannon", "nEQR")
1729867780581:# Create Year column based on the sequence of years in your study (2013-2017)
1729867780582:rass <- rass %>%
1729867780582:mutate(Year = rep(2013:2017, each = 6))  # Assuming 6 stations per year
1729867780584:# Melt the data for easier plotting
1729867780584:rass_melted <- rass %>%
1729867780584:pivot_longer(cols = -Year, names_to = "Index", values_to = "Value")
1729867780589:# Create line plot for trends with improved formatting
1729867780589:ggplot(rass_melted, aes(x = Year, y = Value, color = Index, group = Index)) +
1729867780589:geom_line(size = 1) +
1729867780589:geom_point(size = 3) +
1729867780589:theme_minimal() +
1729867780589:scale_x_continuous(breaks = 2013:2017) +  # Show all years
1729867780589:scale_y_continuous(limits = c(0, 1)) +  # Set y-axis limits
1729867780590:scale_color_brewer(palette = "Set2") +  # Use colorblind-friendly palette
1729867780590:labs(title = "Trends in Benthic Biotic Indices (2013-2017)",
1729867780590:x = "Year",
1729867780590:y = "Index Value",
1729867780590:color = "Biotic Index") +
1729867780590:theme(
1729867780591:legend.position = "bottom",
1729867780591:plot.title = element_text(size = 14, face = "bold"),
1729867780591:axis.title = element_text(size = 12),
1729867780591:axis.text = element_text(size = 10),
1729867780591:legend.text = element_text(size = 10)
1729867780591:)
1729867822900:summary_stats <- rass_melted %>%
1729867822900:group_by(Year, Index) %>%
1729867822900:summarise(
1729867822900:Mean = mean(Value, na.rm = TRUE),
1729867822901:SD = sd(Value, na.rm = TRUE),
1729867822901:Min = min(Value, na.rm = TRUE),
1729867822901:Max = max(Value, na.rm = TRUE),
1729867822901:n = n(),
1729867822901:.groups = 'drop'
1729867822901:) %>%
1729867822902:arrange(Year, desc(Mean))
1729867826154:summary_stats
1729868006914:rass <- do.call(rbind, plyr::compact(nEQR))
1729868006917:names(rass) <- c("nAMBI", "nISI", "nNSI", "nNQI1", "nShannon", "nEQR")
1729868006917:# Create row labels combining station names and years
1729868006918:stations <- rep(c("C4", "A7", "B5", "B8", "E4", "E3"), length(unique(DF13_17$year)))
1729868006918:years <- rep(sort(unique(DF13_17$year)), each = 6)
1729868006919:row_labels <- paste(stations, years, sep = " - ")
1729868006919:# Create a matrix for heatmap
1729868006919:heatmap_matrix <- rass %>%
1729868006920:select(-Year) %>%
1729868006920:as.matrix()
1729868036523:# Prepare data for heatmap
1729868036524:rass <- do.call(rbind, plyr::compact(nEQR))
1729868036529:names(rass) <- c("nAMBI", "nISI", "nNSI", "nNQI1", "nShannon", "nEQR")
1729868036530:# Create row labels combining station names and years
1729868036530:stations <- rep(c("C4", "A7", "B5", "B8", "E4", "E3"), length(unique(DF13_17$year)))
1729868036530:years <- rep(sort(unique(DF13_17$year)), each = 6)
1729868036530:row_labels <- paste(stations, years, sep = " - ")
1729868036531:# Create a matrix for heatmap
1729868036531:heatmap_matrix <- as.matrix(rass)
1729868036531:rownames(heatmap_matrix) <- row_labels
1729868036532:# Define color palette
1729868036532:color_palette <- colorRampPalette(c("red", "yellow", "green"))(100)
1729868036533:# Create heatmap
1729868036533:png("output/BBI_heatmap.png", width = 800, height = 800, res = 100)
1729868036534:heatmap.2(heatmap_matrix,
1729868036534:main = "Benthic Biotic Indices by Station and Year",
1729868036534:xlab = "Indices",
1729868036534:ylab = "",
1729868036534:col = color_palette,
1729868036535:scale = "none",
1729868036535:key = TRUE,
1729868036535:keysize = 1.5,
1729868036535:density.info = "none",
1729868036535:trace = "none",
1729868036535:Rowv = FALSE,
1729868036536:Colv = FALSE,
1729868036536:dendrogram = "none",
1729868036536:margins = c(5, 8),
1729868036536:cexRow = 0.9,
1729868036536:cexCol = 1.2,
1729868036536:srtCol = 45,
1729868036537:adjCol = c(1, 1),
1729868036537:cellnote = round(heatmap_matrix, 2),
1729868036537:notecol = "black",
1729868036537:notecex = 0.7,
1729868036537:labRow = row_labels,
1729868036537:labCol = colnames(heatmap_matrix))
1729868036568:dev.off()
1729868136739:# Prepare data for heatmap
1729868136739:rass <- do.call(rbind, plyr::compact(nEQR))
1729868136741:names(rass) <- c("nAMBI", "nISI", "nNSI", "nNQI1", "nShannon", "nEQR")
1729868136742:# Create row labels combining station names and years
1729868136742:stations <- rep(c("C4", "A7", "B5", "B8", "E4", "E3"), length(unique(DF13_17$year)))
1729868136742:years <- rep(sort(unique(DF13_17$year)), each = 6)
1729868136742:row_labels <- paste(stations, years, sep = " - ")
1729868136743:# Create a matrix for heatmap
1729868136743:heatmap_matrix <- as.matrix(rass)
1729868136743:rownames(heatmap_matrix) <- row_labels
1729868136743:# Define color palette
1729868136744:color_palette <- colorRampPalette(c("red", "yellow", "green"))(100)
1729868136745:# Create heatmap
1729868136745:png("output/BBI_heatmap.png", width = 800, height = 800, res = 100)
1729868136745:heatmap.2(heatmap_matrix,
1729868136746:main = "Benthic Biotic Indices by Station and Year",
1729868136746:xlab = "Indices",
1729868136746:ylab = "",
1729868136746:col = color_palette,
1729868136746:scale = "none",
1729868136746:key = TRUE,
1729868136747:keysize = 1.5,
1729868136747:density.info = "none",
1729868136747:trace = "none",
1729868136747:Rowv = FALSE,
1729868136747:Colv = FALSE,
1729868136747:dendrogram = "row",
1729868136748:margins = c(5, 8),
1729868136748:cexRow = 0.9,
1729868136748:cexCol = 1.2,
1729868136748:srtCol = 45,
1729868136748:adjCol = c(1, 1),
1729868136748:cellnote = round(heatmap_matrix, 2),
1729868136748:notecol = "black",
1729868136749:notecex = 0.7,
1729868136749:labRow = row_labels,
1729868136749:labCol = colnames(heatmap_matrix))
1729868136775:dev.off()
1729868157339:# Prepare data for heatmap
1729868157339:rass <- do.call(rbind, plyr::compact(nEQR))
1729868157341:names(rass) <- c("nAMBI", "nISI", "nNSI", "nNQI1", "nShannon", "nEQR")
1729868157342:# Create row labels combining station names and years
1729868157342:stations <- rep(c("C4", "A7", "B5", "B8", "E4", "E3"), length(unique(DF13_17$year)))
1729868157342:years <- rep(sort(unique(DF13_17$year)), each = 6)
1729868157342:row_labels <- paste(stations, years, sep = " - ")
1729868157343:# Create a matrix for heatmap
1729868157343:heatmap_matrix <- as.matrix(rass)
1729868157343:rownames(heatmap_matrix) <- row_labels
1729868157344:# Define color palette
1729868157344:color_palette <- colorRampPalette(c("red", "yellow", "green"))(100)
1729868157345:# Create heatmap
1729868157345:png("output/BBI_heatmap.png", width = 800, height = 800, res = 100)
1729868157345:heatmap.2(heatmap_matrix,
1729868157346:main = "Benthic Biotic Indices by Station and Year",
1729868157346:xlab = "Indices",
1729868157346:ylab = "",
1729868157346:col = color_palette,
1729868157346:scale = "none",
1729868157346:key = TRUE,
1729868157347:keysize = 1.5,
1729868157347:density.info = "none",
1729868157347:trace = "none",
1729868157347:Rowv = T,
1729868157347:Colv = FALSE,
1729868157347:dendrogram = "row",
1729868157348:margins = c(5, 8),
1729868157348:cexRow = 0.9,
1729868157348:cexCol = 1.2,
1729868157348:srtCol = 45,
1729868157348:adjCol = c(1, 1),
1729868157348:cellnote = round(heatmap_matrix, 2),
1729868157349:notecol = "black",
1729868157349:notecex = 0.7,
1729868157349:labRow = row_labels,
1729868157349:labCol = colnames(heatmap_matrix))
1729868157391:dev.off()
1729868655930:nEQR
1729868664332:str(nEQR)
1729868861372:# Calculate Benthic Biotic Indices (BBI) for each year and station
1729868861372:calculate_biotic_indices <- function(data) {
1729868861372:# Validate input data
1729868861372:required_cols <- c("year", "station", "species", "count")
1729868861372:stopifnot(
1729868861373:all(required_cols %in% colnames(data)),
1729868861373:"No data provided" = nrow(data) > 0
1729868861373:)
1729868861373:# Define target stations
1729868861374:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1729868861374:# Initialize lists to store results
1729868861374:indices_list <- list()
1729868861374:# Calculate indices for each year
1729868861375:for (current_year in sort(unique(data$year))) {
1729868861375:# Prepare data for BBI calculation
1729868861375:year_data <- data %>%
1729868861375:filter(year == current_year,
1729868861375:station %in% target_stations) %>%
1729868861375:group_by(station, species) %>%
1729868861376:summarise(count = sum(count), .groups = 'drop') %>%
1729868861376:pivot_wider(names_from = station,
1729868861376:values_from = count,
1729868861376:values_fill = 0)
1729868861377:# Calculate BBI indices
1729868861377:bbi_results <- BBI(year_data)
1729868861377:# Store results
1729868861377:indices_list[[as.character(current_year)]] <- list(
1729868861378:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1729868861378:classification = bbi_results$BBIclass,
1729868861378:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1729868861378:)
1729868861378:}
1729868861379:return(indices_list)
1729868861379:}
1729868861379:# Apply the function to the filtered dataset
1729868861379:DF13_17 <- df %>%
1729868861379:filter(!year == 1999 &
1729868861380:station %in% c("C4", "A7", "B5", "B8", "E4", "E3"))
1729868861383:biotic_indices <- calculate_biotic_indices(DF13_17)
1729868878338:biotic_indices
1729868914236:normalized_eqr <- do.call(rbind, lapply(biotic_indices, function(x) x$normalized))
1729868918449:normalized_eqr
1729868971396:# Calculate Benthic Biotic Indices (BBI) for each year and station
1729868971396:calculate_biotic_indices <- function(data) {
1729868971397:# Validate input data
1729868971397:required_cols <- c("year", "station", "species", "count")
1729868971397:stopifnot(
1729868971397:all(required_cols %in% colnames(data)),
1729868971398:"No data provided" = nrow(data) > 0
1729868971398:)
1729868971398:# Define target stations
1729868971398:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1729868971399:# Initialize lists to store results
1729868971399:indices_list <- list()
1729868971399:# Calculate indices for each year
1729868971399:for (current_year in sort(unique(data$year))) {
1729868971399:# Prepare data for BBI calculation
1729868971400:year_data <- data %>%
1729868971400:filter(year == current_year,
1729868971400:station %in% target_stations) %>%
1729868971400:group_by(station, species) %>%
1729868971400:summarise(count = sum(count), .groups = 'drop') %>%
1729868971400:pivot_wider(names_from = station,
1729868971401:values_from = count,
1729868971401:values_fill = 0)
1729868971401:# Calculate BBI indices
1729868971401:bbi_results <- BBI(year_data)
1729868971402:# Store results
1729868971402:indices_list[[as.character(current_year)]] <- list(
1729868971402:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1729868971402:classification = bbi_results$BBIclass,
1729868971402:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1729868971403:)
1729868971403:}
1729868971403:return(indices_list)
1729868971403:}
1729868971404:# Apply the function to the filtered dataset
1729868971404:DF13_17 <- df %>%
1729868971404:filter(!year == 1999 &
1729868971404:station %in% c("C4", "A7", "B5", "B8", "E4", "E3"))
1729868971407:biotic_indices <- calculate_biotic_indices(df)
1729868978804:normalized_eqr <- do.call(rbind, lapply(biotic_indices, function(x) x$normalized))
1729868980714:normalized_eqr
1729869066130:names(normalized_eqr) <- c("nAMBI", "nISI", "nNSI", "nNQI1", "nShannon", "nEQR")
1729869067362:normalized_eqr
1729869109474:heatmap_matrix
1729869460580:str(normalized_eqr)
1729869476137:names(normalized_eqr)
1729869485914:dimnames(normalized_eqr)
1730107362730:5+5
1730108178711:indices_list
1730108189649:biotic_indices
1730108199570:normalized_eqr
1730108247044:gsub("(\\d{4})\\.(\\w+)", "\\1 - \\2", rownames(normalized_eqr))
1730108280837:# Modify row names to "YYYY - station" format
1730108280837:rownames(normalized_eqr) <- gsub("(\\d{4})\\.(\\w+)", "\\1 - \\2", rownames(normalized_eqr))
1730108283762:normalized_eqr
1730108378626:str(normalized_eqr)
1730108413412:heatmap_matrix <- as.matrix(normalized_eqr)
1730108417342:heatmap.2(heatmap_matrix,
1730108417342:main = "Benthic Biotic Indices by Station and Year",
1730108417342:xlab = "Indices",
1730108417342:ylab = "",
1730108417342:col = color_palette,
1730108417342:scale = "none",
1730108417343:key = TRUE,
1730108417343:keysize = 1.5,
1730108417343:density.info = "none",
1730108417343:trace = "none",
1730108417343:Rowv = T,
1730108417343:Colv = FALSE,
1730108417344:dendrogram = "row",
1730108417344:margins = c(5, 8),
1730108417344:cexRow = 0.9,
1730108417344:cexCol = 1.2,
1730108417344:srtCol = 45,
1730108417344:adjCol = c(1, 1),
1730108417345:cellnote = round(heatmap_matrix, 2),
1730108417345:notecol = "black",
1730108417345:notecex = 0.7,
1730108417345:labRow = row_labels,
1730108417345:labCol = colnames(heatmap_matrix))
1730108434283:heatmap.2(heatmap_matrix,
1730108434283:main = "Benthic Biotic\nIndices by Station and Year",
1730108434283:xlab = "Indices",
1730108434284:ylab = "",
1730108434284:col = color_palette,
1730108434284:scale = "none",
1730108434284:key = TRUE,
1730108434284:keysize = 1.5,
1730108434284:density.info = "none",
1730108434284:trace = "none",
1730108434284:Rowv = T,
1730108434284:Colv = FALSE,
1730108434285:dendrogram = "row",
1730108434285:margins = c(5, 8),
1730108434285:cexRow = 0.9,
1730108434285:cexCol = 1.2,
1730108434285:srtCol = 45,
1730108434285:adjCol = c(1, 1),
1730108434285:cellnote = round(heatmap_matrix, 2),
1730108434286:notecol = "black",
1730108434286:notecex = 0.7,
1730108434286:labRow = row_labels,
1730108434286:labCol = colnames(heatmap_matrix))
1730108448357:heatmap.2(heatmap_matrix,
1730108448357:main = "Benthic Biotic Indices\nby Station and Year",
1730108448357:xlab = "Indices",
1730108448357:ylab = "",
1730108448358:col = color_palette,
1730108448358:scale = "none",
1730108448358:key = TRUE,
1730108448358:keysize = 1.5,
1730108448358:density.info = "none",
1730108448358:trace = "none",
1730108448358:Rowv = T,
1730108448358:Colv = FALSE,
1730108448358:dendrogram = "row",
1730108448359:margins = c(5, 8),
1730108448359:cexRow = 0.9,
1730108448359:cexCol = 1.2,
1730108448359:srtCol = 45,
1730108448359:adjCol = c(1, 1),
1730108448359:cellnote = round(heatmap_matrix, 2),
1730108448359:notecol = "black",
1730108448360:notecex = 0.7,
1730108448360:labRow = row_labels,
1730108448360:labCol = colnames(heatmap_matrix))
1730108511379:# Create heatmap
1730108511379:png("output/BBI_heatmap.png", width = 800, height = 800, res = 100)
1730108511956:heatmap.2(heatmap_matrix,
1730108511957:main = "Benthic Biotic Indices by Station and Year",
1730108511957:xlab = "Indices",
1730108511957:ylab = "",
1730108511957:col = color_palette,
1730108511957:scale = "none",
1730108511957:key = TRUE,
1730108511957:keysize = 1.5,
1730108511958:density.info = "none",
1730108511958:trace = "none",
1730108511958:Rowv = T,
1730108511958:Colv = FALSE,
1730108511958:dendrogram = "row",
1730108511958:margins = c(5, 8),
1730108511959:cexRow = 0.9,
1730108511959:cexCol = 1.2,
1730108511959:srtCol = 45,
1730108511959:adjCol = c(1, 1),
1730108511959:cellnote = round(heatmap_matrix, 2),
1730108511959:notecol = "black",
1730108511959:notecex = 0.7,
1730108511960:labRow = row_labels,
1730108511960:labCol = colnames(heatmap_matrix))
1730108524162:dev.off()
1730108548003:# Extract normalized EQR values for further analysis
1730108548003:normalized_eqr <- do.call(rbind, lapply(biotic_indices, function(x) x$normalized))
1730108554730:str(normalized_eqr)
1730108559123:normalized_eqr
1730108583242:gsub("(\\d{4})\\.(\\w+)", "\\1 - \\2", rownames(normalized_eqr))
1730108627162:# Prepare data for heatmap
1730108627163:names(normalized_eqr) <- c("nAMBI", "nISI", "nNSI", "nNQI1", "nShannon", "nEQR")
1730108628540:# Modify row names to "YYYY - station" format
1730108628541:rownames(normalized_eqr) <- gsub("(\\d{4})\\.(\\w+)", "\\1 - \\2", rownames(normalized_eqr))
1730108634220:normalized_eqr
1730108689826:# Create a matrix for heatmap
1730108689826:heatmap_matrix <- as.matrix(normalized_eqr)
1730108690484:# Define color palette
1730108690484:color_palette <- colorRampPalette(c("red", "yellow", "green"))(100)
1730108691274:# Create heatmap
1730108691274:png("output/BBI_heatmap.png", width = 1200, height = 1200, res = 100)
1730108691628:heatmap.2(heatmap_matrix,
1730108691628:main = "Benthic Biotic Indices\nby Station and Year",
1730108691629:xlab = "Indices",
1730108691629:ylab = "",
1730108691629:col = color_palette,
1730108691629:scale = "none",
1730108691629:key = TRUE,
1730108691629:keysize = 1.5,
1730108691629:density.info = "none",
1730108691629:trace = "none",
1730108691630:Rowv = T,
1730108691630:Colv = FALSE,
1730108691630:dendrogram = "row",
1730108691630:margins = c(5, 8),
1730108691630:cexRow = 0.9,
1730108691630:cexCol = 1.2,
1730108691630:srtCol = 45,
1730108691631:adjCol = c(1, 1),
1730108691631:cellnote = round(heatmap_matrix, 2),
1730108691631:notecol = "black",
1730108691631:notecex = 0.7,
1730108691631:labRow = row_labels,
1730108691632:labCol = colnames(heatmap_matrix))
1730108692148:dev.off()
1730108826721:calculate_biotic_indices(df)
1730108954988:# Calculate Benthic Biotic Indices (BBI) for each year and station
1730108954988:calculate_biotic_indices <- function(data) {
1730108954988:# Validate input data
1730108954988:required_cols <- c("year", "station", "species", "density")
1730108954989:stopifnot(
1730108954989:all(required_cols %in% colnames(data)),
1730108954989:"No data provided" = nrow(data) > 0
1730108954989:)
1730108954989:# Define target stations
1730108954990:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730108954990:# Initialize lists to store results
1730108954990:indices_list <- list()
1730108954990:# Calculate indices for each year
1730108954990:for (current_year in sort(unique(data$year))) {
1730108954991:# Prepare data for BBI calculation
1730108954991:year_data <- data %>%
1730108954991:filter(year == current_year,
1730108954991:station %in% target_stations) %>%
1730108954991:group_by(station, species) %>%
1730108954991:summarise(count = sum(count), .groups = 'drop') %>%
1730108954992:pivot_wider(names_from = station,
1730108954992:values_from = count,
1730108954992:values_fill = 0)
1730108954992:# Calculate BBI indices
1730108954992:bbi_results <- BBI(year_data)
1730108954993:# Store results
1730108954993:indices_list[[as.character(current_year)]] <- list(
1730108954993:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730108954993:classification = bbi_results$BBIclass,
1730108954993:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1730108954994:)
1730108954994:}
1730108954994:return(indices_list)
1730108954994:}
1730108958613:calculate_biotic_indices(df)
1730108978220:biotic_indices <- calculate_biotic_indices(df)
1730108984077:# Extract normalized EQR values for further analysis
1730108984077:normalized_eqr <- do.call(rbind, lapply(biotic_indices, function(x) x$normalized))
1730109016556:stations <- rep(c("C4", "A7", "B5", "B8", "E4", "E3"), length(unique(df$year)))
1730109016556:years <- rep(sort(unique(df$year)), each = 6)
1730109016556:row_labels <- paste(stations, years, sep = " - ")
1730109091218:# Create a matrix for heatmap
1730109091219:heatmap_matrix <- as.matrix(normalized_eqr)
1730109098308:rownames(heatmap_matrix) <- row_labels
1730109108868:# Create heatmap
1730109108868:png("output/BBI_heatmap.png", width = 1000, height = 1000, res = 100)
1730109111771:heatmap.2(heatmap_matrix,
1730109111771:main = "Benthic Biotic Indices\nby Station and Year",
1730109111771:xlab = "Indices",
1730109111771:ylab = "",
1730109111772:col = color_palette,
1730109111772:scale = "none",
1730109111772:key = TRUE,
1730109111772:keysize = 1.5,
1730109111772:density.info = "none",
1730109111772:trace = "none",
1730109111772:Rowv = T,
1730109111773:Colv = FALSE,
1730109111773:dendrogram = "row",
1730109111773:margins = c(5, 8),
1730109111773:cexRow = 0.9,
1730109111773:cexCol = 1.2,
1730109111773:srtCol = 45,
1730109111773:adjCol = c(1, 1),
1730109111774:cellnote = round(heatmap_matrix, 2),
1730109111774:notecol = "black",
1730109111774:notecex = 0.7,
1730109111774:labRow = row_labels,
1730109111774:labCol = colnames(heatmap_matrix))
1730109112362:dev.off()
1730109470091:?BBI::nEQR()
1730110254524:str(result)
1730110295326:calculate_biotic_indices <- function(data) {
1730110295327:# Validate input data
1730110295327:required_cols <- c("year", "station", "species", "adjusted_density")  # Changed from count to adjusted_density
1730110295327:stopifnot(
1730110295327:"Missing required columns" = all(required_cols %in% colnames(data)),
1730110295327:"No data provided" = nrow(data) > 0,
1730110295328:"Negative density values found" = all(data$adjusted_density >= 0),
1730110295328:"Missing values found" = !any(is.na(data$adjusted_density))
1730110295328:)
1730110295328:# Define target stations
1730110295329:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730110295329:# Initialize lists to store results
1730110295329:indices_list <- list()
1730110295330:# Calculate indices for each year
1730110295330:for (current_year in sort(unique(data$year))) {
1730110295330:# Prepare data for BBI calculation using density values
1730110295330:year_data <- data %>%
1730110295331:filter(year == current_year,
1730110295331:station %in% target_stations) %>%
1730110295331:group_by(station, species) %>%
1730110295331:summarise(density = sum(adjusted_density), .groups = 'drop') %>%  # Using adjusted_density
1730110295332:pivot_wider(names_from = station,
1730110295332:values_from = density,
1730110295332:values_fill = 0)
1730110295333:# Calculate BBI indices
1730110295333:bbi_results <- BBI(year_data)
1730110295333:# Store results
1730110295333:indices_list[[as.character(current_year)]] <- list(
1730110295334:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730110295334:classification = bbi_results$BBIclass,
1730110295334:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1730110295334:)
1730110295334:}
1730110295335:return(indices_list)
1730110295335:}
1730110295335:# Use the result dataframe that already has the correct density calculations
1730110295336:biotic_indices <- calculate_biotic_indices(result)
1730110318302:normalized_eqr <- do.call(rbind, lapply(biotic_indices, function(x) x$normalized))
1730110318314:# Prepare data for heatmap
1730110318314:names(normalized_eqr) <- c("nAMBI", "nISI", "nNSI", "nNQI1", "nShannon", "nEQR")
1730110318315:stations <- rep(c("C4", "A7", "B5", "B8", "E4", "E3"), length(unique(df$year)))
1730110318315:years <- rep(sort(unique(df$year)), each = 6)
1730110318315:row_labels <- paste(stations, years, sep = " - ")
1730110318316:# Create a matrix for heatmap
1730110318316:heatmap_matrix <- as.matrix(normalized_eqr)
1730110318316:rownames(heatmap_matrix) <- row_labels
1730110318317:# Define color palette
1730110318317:color_palette <- colorRampPalette(c("red", "yellow", "green"))(100)
1730110318318:# Create heatmap
1730110318318:png("output/BBI_heatmap.png", width = 1000, height = 1000, res = 100)
1730110318319:heatmap.2(heatmap_matrix,
1730110318319:main = "Benthic Biotic Indices\nby Station and Year",
1730110318319:xlab = "Indices",
1730110318320:ylab = "",
1730110318320:col = color_palette,
1730110318320:scale = "none",
1730110318320:key = TRUE,
1730110318320:keysize = 1.5,
1730110318320:density.info = "none",
1730110318321:trace = "none",
1730110318321:Rowv = T,
1730110318321:Colv = FALSE,
1730110318321:dendrogram = "row",
1730110318321:margins = c(5, 8),
1730110318321:cexRow = 0.9,
1730110318321:cexCol = 1.2,
1730110318322:srtCol = 45,
1730110318322:adjCol = c(1, 1),
1730110318322:cellnote = round(heatmap_matrix, 2),
1730110318322:notecol = "black",
1730110318322:notecex = 0.7,
1730110318323:labRow = row_labels,
1730110318323:labCol = colnames(heatmap_matrix))
1730110318368:dev.off()
1730111623605:str(KolgrTaxa)
1730111710748:str(result)
1730111798116:output_filename <- paste0(
1730111798117:"output/density_calculations_",
1730111798117:format(Sys.Date(), "%Y%m%d"),
1730111798117:".csv"
1730111798117:)
1730111798121:# Write CSV with clear column names
1730111798121:write.csv(
1730111798121:result %>%
1730111798122:select(
1730111798122:station,
1730111798122:year,
1730111798122:species,
1730111798122:original_total_count,
1730111798122:adjusted_total_count,
1730111798123:n_samples,
1730111798123:total_area,
1730111798123:original_density,
1730111798123:adjusted_density,
1730111798123:density_difference,
1730111798123:density_ratio
1730111798124:),
1730111798124:file = output_filename,
1730111798124:row.names = FALSE,
1730111798124:na = ""  # Empty string for NA values
1730111798124:)
1730112370607:output_filename <- paste0(
1730112370607:"output/density_calculations_",
1730112370607:format(Sys.Date(), "%Y%m%d"),
1730112370608:".csv"
1730112370608:)
1730112370609:# Write CSV with clear column names
1730112370609:write.csv(
1730112370609:result %>%
1730112370609:select(
1730112370609:station,
1730112370609:year,
1730112370609:species,
1730112370609:original_total_count,
1730112370610:adjusted_total_count,
1730112370610:n_samples,
1730112370610:total_area,
1730112370610:original_density,
1730112370610:adjusted_density
1730112370610:),
1730112370611:file = output_filename,
1730112370611:row.names = FALSE,
1730112370611:na = ""  # Empty string for NA values
1730112370611:)
1730113571252:unique(df$station)
1730113621693:unique(df$year)
1730113632446:sort(unique(df$year))
1730115285871:normalized_eqr_subset <- normalized_eqr[, c(1, 4, 5)]  # Select columns 1 (nAMBI), 4 (nNQI1), 5 (nShannon)
1730115286629:# Create a matrix for heatmap
1730115286630:heatmap_matrix <- as.matrix(normalized_eqr_subset)
1730115287759:rownames(heatmap_matrix) <- row_labels
1730115289758:# Create heatmap
1730115289758:png("output/BBI_heatmap.png", width = 1000, height = 1000, res = 100)
1730115290231:heatmap.2(heatmap_matrix,
1730115290231:main = "Benthic Biotic Indices\nby Station and Year",
1730115290231:xlab = "Indices",
1730115290231:ylab = "",
1730115290231:col = color_palette,
1730115290231:scale = "none",
1730115290232:key = TRUE,
1730115290232:keysize = 1.5,
1730115290232:density.info = "none",
1730115290232:trace = "none",
1730115290232:Rowv = T,
1730115290232:Colv = FALSE,
1730115290232:dendrogram = "row",
1730115290233:margins = c(5, 8),
1730115290233:cexRow = 0.9,
1730115290233:cexCol = 1.2,
1730115290233:srtCol = 45,
1730115290233:adjCol = c(1, 1),
1730115290233:cellnote = round(heatmap_matrix, 2),
1730115290234:notecol = "black",
1730115290234:notecex = 0.7,
1730115290234:labRow = row_labels,
1730115290234:labCol = colnames(heatmap_matrix))
1730115291063:dev.off()
1730115342029:# Calculate the statistics
1730115342030:stats <- result %>%
1730115342030:filter(!year == 1999 & station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1730115342030:group_by(station, year) %>%
1730115342030:summarise(
1730115342030:n_taxa = n_distinct(species),
1730115342030:total_density = sum(adjusted_density),
1730115342031:.groups = 'drop'
1730115342031:)
1730115342837:min_taxa_info <- stats %>%
1730115342837:filter(n_taxa == min(n_taxa)) %>%
1730115342837:slice(1)  # In case there are multiple stations with the same minimum
1730115343525:max_taxa_info <- stats %>%
1730115343526:filter(n_taxa == max(n_taxa)) %>%
1730115343526:slice(1)  # In case there are multiple stations with the same maximum
1730115343981:min_density_info <- stats %>%
1730115343981:filter(total_density == min(total_density)) %>%
1730115343981:slice(1)
1730115344398:max_density_info <- stats %>%
1730115344398:filter(total_density == max(total_density)) %>%
1730115344398:slice(1)
1730115345462:# Print the results
1730115345462:print(min_taxa_info)
1730115346526:print(max_taxa_info)
1730115354165:print(min_density_info)
1730115354918:print(max_density_info)
1730116093975:# Create heatmap
1730116093975:png("output/BBI_heatmap.png", width = 1000, height = 1000, res = 100)
1730116094574:heatmap.2(heatmap_matrix,
1730116094574:main = "Benthic Biotic Indices\nby Station and Year",
1730116094575:xlab = "Indices",
1730116094575:ylab = "",
1730116094575:col = color_palette,
1730116094575:scale = "none",
1730116094575:key = TRUE,
1730116094576:keysize = 1.5,
1730116094576:density.info = "none",
1730116094576:trace = "none",
1730116094576:Rowv = T,
1730116094576:Colv = FALSE,
1730116094576:dendrogram = "none",
1730116094577:margins = c(5, 8),
1730116094577:cexRow = 0.9,
1730116094577:cexCol = 1.2,
1730116094577:srtCol = 45,
1730116094577:adjCol = c(1, 1),
1730116094577:cellnote = round(heatmap_matrix, 2),
1730116094577:notecol = "black",
1730116094577:notecex = 0.7,
1730116094578:labRow = row_labels,
1730116094578:labCol = colnames(heatmap_matrix))
1730116095061:dev.off()
1730116125638:# Create heatmap
1730116125638:png("output/BBI_heatmap.png", width = 1000, height = 1000, res = 100)
1730116126048:heatmap.2(heatmap_matrix,
1730116126049:main = "Benthic Biotic Indices\nby Station and Year",
1730116126049:xlab = "Indices",
1730116126049:ylab = "",
1730116126049:col = color_palette,
1730116126050:scale = "none",
1730116126050:key = TRUE,
1730116126050:keysize = 1.5,
1730116126050:density.info = "none",
1730116126050:trace = "none",
1730116126050:Rowv = T,
1730116126051:Colv = FALSE,
1730116126051:dendrogram = "both",
1730116126051:margins = c(5, 8),
1730116126051:cexRow = 0.9,
1730116126051:cexCol = 1.2,
1730116126052:srtCol = 45,
1730116126052:adjCol = c(1, 1),
1730116126052:cellnote = round(heatmap_matrix, 2),
1730116126052:notecol = "black",
1730116126052:notecex = 0.7,
1730116126052:labRow = row_labels,
1730116126053:labCol = colnames(heatmap_matrix))
1730116126431:dev.off()
1730116179245:?heatmap.2
1730116349304:# Create the heatmap with modified sorting
1730116349304:png("output/BBI_heatmap.png", width = 800, height = 800, res = 100)
1730116349314:heatmap.2(heatmap_matrix,
1730116349314:main = "Benthic Biotic Indices\nby Station and Year",
1730116349314:xlab = "Indices",
1730116349314:ylab = "",
1730116349314:col = color_palette,
1730116349314:scale = "none",
1730116349314:key = TRUE,
1730116349315:keysize = 1.5,
1730116349315:density.info = "none",
1730116349315:trace = "none",
1730116349315:Rowv = TRUE,
1730116349315:Colv = FALSE,
1730116349315:dendrogram = "row",    # Show only row dendrogram
1730116349315:margins = c(5, 8),
1730116349316:cexRow = 0.9,
1730116349316:cexCol = 1.2,
1730116349316:srtCol = 45,
1730116349316:adjCol = c(1, 1),
1730116349316:cellnote = round(heatmap_matrix, 2),
1730116349316:notecol = "black",
1730116349317:notecex = 0.7,
1730116349317:labRow = row_labels,
1730116349317:labCol = colnames(heatmap_matrix),
1730116349317:# Add these parameters for sorting
1730116349317:revC = FALSE,          # Don't reverse column order
1730116349317:hclustfun = function(x) hclust(x, method = "ward.D2"),  # Use Ward's method for clustering
1730116349318:distfun = function(x) dist(x, method = "euclidean"))    # Use Euclidean distance
1730116349365:dev.off()
1730130385835:5+5
1730130428878:KolgrTaxa <- read_csv(file("data/raw/KolgrTaxa.csv", encoding = "UTF-8"), na = "empty")
1730130470837:KolgrTaxa <- read_csv(file("data/raw/KolgrTaxa.csv", encoding = "UTF-8"), na = "empty")
1730130471151:taxa_to_remove <- c(
1730130471151:"Foraminifera",
1730130471151:"Nematoda",
1730130471151:"Cirripedia",
1730130471151:"Porifera",
1730130471151:"Cnidaria",
1730130471152:"Bryozoa",
1730130471152:"Sipuncula",
1730130471152:"Platyhelminthes",
1730130471152:"Nemertea",
1730130471152:"Oligochaeta",
1730130471152:"Ostracoda"
1730130471152:)
1730130471152:# Filter out the specified taxa using if_all()
1730130471152:KolgrTaxa <- KolgrTaxa %>%
1730130471152:filter(if_all(where(is.character), ~ !. %in% taxa_to_remove))
1730130471164:remove_list <- paste(c(
1730130471164:"nýsestir",
1730130471164:"ungviði",
1730130471164:"ungv",
1730130471164:"ungv.",
1730130471165:"juv",
1730130471165:"harpacticoida"
1730130471165:), collapse = '|')
1730130471165:remove_ind <- lapply(strsplit(remove_list , "\\|")[[1]] , \(x) grep(x , KolgrTaxa$gamalt , fixed = T)) |>
1730130471165:unlist() |>
1730130471165:unique()
1730130471169:ekkiungvidi <- KolgrTaxa[-remove_ind,]
1730130471170:jorundur <- ekkiungvidi %>%
1730130471171:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1730130471171:mutate(
1730130471171:Flokkun = case_when(
1730130471171:Flokkun == "Spionida" ~ "Spionidae",
1730130471171:Flokkun == "Terebellides stroemi" ~ "Terebellides stroemii",
1730130471171:Flokkun == "Ampharetinae" ~ "Ampharetidae",
1730130471172:Flokkun == "ostracoda" ~ "Ostracoda",
1730130471172:Flokkun == "Sabellidae" ~ "Sabellida",
1730130471172:Flokkun == "scalibregma inflatum" ~ "Scalibregma inflatum",
1730130471172:Flokkun == "sipunculida" ~ "Sipuncula",
1730130471172:Flokkun == "sipunculidae" ~ "Sipuncula",
1730130471172:Flokkun == "sipunculidea" ~ "Sipuncula",
1730130471172:Flokkun == "Nephtys" ~ "Nephthys",
1730130471172:Flokkun == "Nepthys" ~ "Nephthys",
1730130471173:Artal == "1999" & Flokkun == "Ampharete acutifrons" ~ "Ampharetinae",
1730130471173:Artal == "1999" & Flokkun == "Bivalvia" ~ "NA"        ,
1730130471173:Artal == "2013" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"       ,
1730130471173:Artal == "2013" & Flokkun == "Polynoidae" ~ "Harmothoe extenuata" ,
1730130471173:Artal == "2014" & Flokkun == "Praxillella" ~ "Praxillella praetermissa",
1730130471173:Artal == "2014" & Flokkun == "Syllidae" ~ "Syllis cornuta"             ,
1730130471174:Artal == "2015" & Flokkun == "Syllidae" ~ "Syllis cornuta",
1730130471174:Artal == "2015" & Flokkun == "Mya" ~ "Mya arenaria"        ,
1730130471174:Artal == "2015" & Flokkun == "Mytilidae" ~ "Mytilus edulis",
1730130471174:Artal == "2015" & Flokkun == "Ampharetidae" ~ "NA"          ,
1730130471174:Artal == "2016" & Flokkun == "Aricidea" ~ "Amphitrite cirrata"      ,
1730130471175:Artal == "2016" & Flokkun == "Capitellidae" ~ "Capitella capitata"   ,
1730130471175:Artal == "2016" & Flokkun == "Cirratulidae" ~ "Cirratulus cirratus",
1730130471175:Artal == "2016" & Flokkun == "Cossuridae" ~ "Cossura longocirrata",
1730130471175:Artal == "2016" & Flokkun == "Nephtyidae" ~ "Nephthys"      ,
1730130471176:Artal == "2016" & Flokkun == "Pectinariidae" ~ "Pectinaria koreni"     ,
1730130471176:Artal == "2016" & Flokkun == "Phyllodocida" ~ "Phyllodoce maculata",
1730130471176:Artal == "2016" & Flokkun == "Spio" ~ "Spio filicornis"            ,
1730130471176:Artal == "2016" & Flokkun == "Spionidae" ~ "Spio filicornis",
1730130471176:Artal == "2016" & Flokkun == "Syllidae" ~ "Syllis"           ,
1730130471177:Artal == "2016" & Flokkun == "Cardiidae" ~ "Cardium"          ,
1730130471177:Artal == "2016" & Flokkun == "Cardiidae" ~ "Cardium"           ,
1730130471177:Artal == "2017" & Flokkun == "Mya" ~ "Mya arenaria"  ,
1730130471177:Artal == "2017" & Flokkun == "Maldanidae" ~ "Praxillella praetermissa",
1730130471178:Artal == "1999" & Flokkun == "Ampharetinae" ~ "Ampharetidae",
1730130471178:Artal == "2017" & Flokkun == "Ampharete" ~ "Ampharetidae"    ,
1730130471178:Artal == "2017" & Flokkun == "Ampharete acutifrons" ~ "Ampharetidae",
1730130471178:Artal == "2016" & Flokkun == "Lumbrineridae" ~ "Lumbrineris",
1730130471179:Artal == "2015" & Flokkun == "Pholoe" ~ "Pholoe minuta"      ,
1730130471179:Artal == "2016" & Flokkun == "Pholoe" ~ "Pholoe minuta"       ,
1730130471179:Artal == "2017" & Flokkun == "Pholoe" ~ "Pholoe minuta"        ,
1730130471179:Artal == "1999" & Flokkun == "Musculus discors" ~ "Musculus",
1730130471180:Artal == "2014" & Flokkun == "Mya" ~ "Mya arenaria"          ,
1730130471180:Artal == "2014" & Flokkun == "Mytilus edulis" ~ "Mytilidae",
1730130471180:Artal == "2014" & Flokkun == "Nephtyidae" ~ "Nephthys"       ,
1730130471180:Artal == "2014" & Flokkun == "Amphipoda" ~ "Protomedeia fasciata"    ,
1730130471181:Artal == "2014" & Flokkun == "Tubificidae" ~ "Tubificoides kozloffi",
1730130471181:Artal == "2014" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"     ,
1730130471181:Artal == "2015" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"      ,
1730130471181:Artal == "2015" & Flokkun == "Amphipoda" ~ "Protomedeia fasciata",
1730130471182:Artal == "2016" & Flokkun == "Balanus balanus" ~ "Balanus"       ,
1730130471182:Artal == "2016" & Flokkun == "priapulidae" ~ "Priapulus caudatus" ,
1730130471182:Artal == "2016" & Flokkun == "Priapulidae" ~ "Priapulus caudatus"  ,
1730130471182:Artal == "2017" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"    ,
1730130471183:Artal == "1999" & Flokkun == "Leucon acutirostris" ~ "Cumacea"       ,
1730130471183:Artal == "1999" & Flokkun == "Eudorella emarginata" ~ "Cumacea",
1730130471183:TRUE ~ Flokkun)) %>%
1730130471184:drop_na()
1730130471262:df <- jorundur  %>%
1730130471262:rename(
1730130471262:species = Flokkun,
1730130471262:sample_id = id,
1730130471262:year = Artal,
1730130471262:station = stod,
1730130471262:subdivision = skipting,
1730130471262:count = N,
1730130471262:density = Nu
1730130471262:)
1730130471265:result <- df %>%
1730130471265:# First, apply the subdivision to the count
1730130471265:mutate(adjusted_count = count * subdivision) %>%
1730130471266:# Calculate the correct number of samples and total area for each station-year combination
1730130471266:group_by(station, year) %>%
1730130471266:mutate(
1730130471266:n_samples = n_distinct(sample_id),
1730130471266:grab_area = case_when(
1730130471266:year == 1999 ~ 0.0225,
1730130471266:TRUE ~ 0.04
1730130471266:),
1730130471266:total_area = grab_area * n_samples
1730130471266:) %>%
1730130471266:ungroup() %>%
1730130471266:# Now group by station, year, and species to get total counts
1730130471266:group_by(station, year, species) %>%
1730130471267:summarise(
1730130471267:original_total_count = sum(count),
1730130471267:adjusted_total_count = sum(adjusted_count),
1730130471267:n_samples = first(n_samples),  # Use the previously calculated n_samples
1730130471267:total_area = first(total_area),  # Use the previously calculated total_area
1730130471267:.groups = 'keep'
1730130471267:) %>%
1730130471267:# Calculate densities
1730130471267:mutate(
1730130471267:original_density = original_total_count / total_area,
1730130471267:adjusted_density = adjusted_total_count / total_area,
1730130471268:density_difference = adjusted_density - original_density,
1730130471268:density_ratio = adjusted_density / original_density
1730130471268:) %>%
1730130471268:# Ungroup
1730130471268:ungroup()
1730130471348:### summary statistic
1730130471348:# various Benthic Biotic Indices (BBI) for different years and stations. It then creates heatmaps to visualize these indices. This provides a good overview of the ecological status of the benthic communities over time and across different sampling sites.
1730130471348:library(BBI)
1730130471348:library(gplots)
1730130471348:# Calculate Benthic Biotic Indices (BBI) for each year and station
1730130471348:calculate_biotic_indices <- function(data) {
1730130471348:# Validate input data
1730130471348:required_cols <- c("year", "station", "species", "adjusted_density")  # Changed from count to adjusted_density
1730130471348:stopifnot(
1730130471348:"Missing required columns" = all(required_cols %in% colnames(data)),
1730130471349:"No data provided" = nrow(data) > 0,
1730130471349:"Negative density values found" = all(data$adjusted_density >= 0),
1730130471349:"Missing values found" = !any(is.na(data$adjusted_density))
1730130471349:)
1730130471349:# Define target stations
1730130471349:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730130471349:# Initialize lists to store results
1730130471349:indices_list <- list()
1730130471349:# Calculate indices for each year
1730130471349:for (current_year in sort(unique(data$year))) {
1730130471350:# Prepare data for BBI calculation using density values
1730130471350:year_data <- data %>%
1730130471350:filter(year == current_year,
1730130471350:station %in% target_stations) %>%
1730130471350:group_by(station, species) %>%
1730130471350:summarise(density = sum(adjusted_density), .groups = 'drop') %>%  # Using adjusted_density
1730130471350:pivot_wider(names_from = station,
1730130471350:values_from = density,
1730130471350:values_fill = 0)
1730130471350:# Calculate BBI indices
1730130471351:bbi_results <- BBI(year_data)
1730130471351:# Store results
1730130471351:indices_list[[as.character(current_year)]] <- list(
1730130471351:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730130471351:classification = bbi_results$BBIclass,
1730130471351:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1730130471351:)
1730130471351:}
1730130471352:return(indices_list)
1730130471352:}
1730130471352:# Use the result dataframe that already has the correct density calculations
1730130471352:biotic_indices <- calculate_biotic_indices(result)
1730130473186:# Extract normalized EQR values for further analysis
1730130473186:normalized_eqr <- do.call(rbind, lapply(biotic_indices, function(x) x$normalized))
1730130473188:# Prepare data for heatmap
1730130473188:names(normalized_eqr) <- c("nAMBI", "nISI", "nNSI", "nNQI1", "nShannon", "nEQR")
1730130473188:stations <- rep(c("C4", "A7", "B5", "B8", "E4", "E3"), length(unique(df$year)))
1730130473188:years <- rep(sort(unique(df$year)), each = 6)
1730130473189:row_labels <- paste(stations, years, sep = " - ")
1730130473189:normalized_eqr_subset <- normalized_eqr[, c(1, 4, 5)]  # Select columns 1 (nAMBI), 4 (nNQI1), 5 (nShannon)
1730130473189:# Create a matrix for heatmap
1730130473189:heatmap_matrix <- as.matrix(normalized_eqr_subset)
1730130473189:rownames(heatmap_matrix) <- row_labels
1730130473189:# Define color palette
1730130473189:color_palette <- colorRampPalette(c("red", "yellow", "green"))(100)
1730130473190:# Create heatmap
1730130473190:png("output/BBI_heatmap.png", width = 1000, height = 1000, res = 100)
1730130473192:heatmap.2(heatmap_matrix,
1730130473193:main = "Benthic Biotic Indices\nby Station and Year",
1730130473193:xlab = "Indices",
1730130473193:ylab = "",
1730130473193:col = color_palette,
1730130473193:scale = "none",
1730130473193:key = TRUE,
1730130473193:keysize = 1.5,
1730130473193:density.info = "none",
1730130473193:trace = "none",
1730130473193:Rowv = T,
1730130473193:Colv = FALSE,
1730130473193:dendrogram = "row",
1730130473193:margins = c(5, 8),
1730130473193:cexRow = 0.9,
1730130473194:cexCol = 1.2,
1730130473194:srtCol = 45,
1730130473194:adjCol = c(1, 1),
1730130473194:cellnote = round(heatmap_matrix, 2),
1730130473194:notecol = "black",
1730130473194:notecex = 0.7,
1730130473194:labRow = row_labels,
1730130473194:labCol = colnames(heatmap_matrix))
1730130473241:dev.off()
1730130547443:heatmap_matrix
1730131367299:normalized_eqr
1730131378082:biotic_indices
1730131405889:str*
1730131413111:str(biotic_indices)
1730131651011:# Function to extract normalized values and calculate summary statistics
1730131651011:get_yearly_stats <- function(year_data) {
1730131651011:df <- year_data$normalized
1730131651011:# Calculate means and SDs for required indices
1730131651011:means <- c(
1730131651012:mean(df$nEQR.nAMBI),
1730131651012:mean(df$nEQR.nNQI1),
1730131651012:mean(df$nEQR.nShannon)
1730131651012:)
1730131651012:sds <- c(
1730131651012:sd(df$nEQR.nAMBI),
1730131651012:sd(df$nEQR.nNQI1),
1730131651013:sd(df$nEQR.nShannon)
1730131651013:)
1730131651013:# Calculate mean status
1730131651013:mean_status <- mean(c(
1730131651013:mean(df$nEQR.nAMBI),
1730131651013:mean(df$nEQR.nNQI1),
1730131651014:mean(df$nEQR.nShannon)
1730131651014:))
1730131651014:status <- case_when(
1730131651014:mean_status < 0.2 ~ "Bad",
1730131651014:mean_status < 0.4 ~ "Poor",
1730131651014:mean_status < 0.6 ~ "Moderate",
1730131651015:mean_status < 0.8 ~ "Good",
1730131651015:TRUE ~ "High"
1730131651015:)
1730131651015:return(c(means, sds, status))
1730131651015:}
1730131651016:# Create empty dataframe for results
1730131651016:years <- names(biotic_indices)
1730131651016:summary_table <- data.frame(
1730131651016:Year = as.numeric(years),
1730131651017:matrix(NA, nrow = length(years), ncol = 7)
1730131651017:)
1730131651017:# Fill the dataframe
1730131651018:for(i in seq_along(years)) {
1730131651018:stats <- get_yearly_stats(biotic_indices[[years[i]]])
1730131651018:summary_table[i, 2:8] <- stats
1730131651018:}
1730131651040:# Set column names
1730131651040:colnames(summary_table) <- c("Year",
1730131651040:"nAMBI_mean", "nNQI1_mean", "nShannon_mean",
1730131651040:"nAMBI_sd", "nNQI1_sd", "nShannon_sd",
1730131651040:"Status")
1730131651040:# Format the table for presentation
1730131651040:final_table <- summary_table %>%
1730131651040:mutate(
1730131651040:nAMBI = sprintf("%.2f ± %.2f", nAMBI_mean, nAMBI_sd),
1730131651040:nNQI1 = sprintf("%.2f ± %.2f", nNQI1_mean, nNQI1_sd),
1730131651040:nShannon = sprintf("%.2f ± %.2f", nShannon_mean, nShannon_sd)
1730131651041:) %>%
1730131651041:select(Year, nAMBI, nNQI1, nShannon, Status)
1730131655767:rlang::last_trace()
1730131737237:# Function to extract normalized values and calculate summary statistics
1730131737237:get_yearly_stats <- function(year_data) {
1730131737237:df <- year_data$normalized
1730131737238:# Calculate means and SDs for required indices
1730131737238:means <- c(
1730131737238:mean(df$nEQR.nAMBI),
1730131737238:mean(df$nEQR.nNQI1),
1730131737238:mean(df$nEQR.nShannon)
1730131737238:)
1730131737239:sds <- c(
1730131737239:sd(df$nEQR.nAMBI),
1730131737239:sd(df$nEQR.nNQI1),
1730131737239:sd(df$nEQR.nShannon)
1730131737239:)
1730131737240:# Calculate mean status
1730131737240:mean_status <- mean(c(
1730131737240:mean(df$nEQR.nAMBI),
1730131737240:mean(df$nEQR.nNQI1),
1730131737240:mean(df$nEQR.nShannon)
1730131737240:))
1730131737241:status <- case_when(
1730131737241:mean_status < 0.2 ~ "Bad",
1730131737241:mean_status < 0.4 ~ "Poor",
1730131737241:mean_status < 0.6 ~ "Moderate",
1730131737241:mean_status < 0.8 ~ "Good",
1730131737241:TRUE ~ "High"
1730131737242:)
1730131737242:return(c(means, sds, status))
1730131737242:}
1730131737243:# Create empty dataframe for results
1730131737243:years <- names(biotic_indices)
1730131737243:summary_table <- data.frame(
1730131737243:Year = as.numeric(years),
1730131737243:matrix(NA, nrow = length(years), ncol = 7)
1730131737243:)
1730131737244:# Fill the dataframe
1730131737244:for(i in seq_along(years)) {
1730131737244:stats <- get_yearly_stats(biotic_indices[[years[i]]])
1730131737245:summary_table[i, 2:8] <- stats
1730131737245:}
1730131737264:# Set column names
1730131737264:colnames(summary_table) <- c("Year",
1730131737264:"nAMBI_mean", "nNQI1_mean", "nShannon_mean",
1730131737264:"nAMBI_sd", "nNQI1_sd", "nShannon_sd",
1730131737264:"Status")
1730131737264:# Format the table for presentation
1730131737264:# Format the table for presentation
1730131737265:final_table <- summary_table %>%
1730131737265:mutate(
1730131737265:across(ends_with("_mean"), as.numeric),
1730131737265:across(ends_with("_sd"), as.numeric),
1730131737265:nAMBI = sprintf("%.2f ± %.2f", as.numeric(nAMBI_mean), as.numeric(nAMBI_sd)),
1730131737265:nNQI1 = sprintf("%.2f ± %.2f", as.numeric(nNQI1_mean), as.numeric(nNQI1_sd)),
1730131737265:nShannon = sprintf("%.2f ± %.2f", as.numeric(nShannon_mean), as.numeric(nShannon_sd))
1730131737266:) %>%
1730131737266:select(Year, nAMBI, nNQI1, nShannon, Status)
1730131737273:# Alternative approach if the above still gives errors
1730131737273:final_table <- summary_table %>%
1730131737273:mutate(
1730131737273:nAMBI = paste0(round(as.numeric(nAMBI_mean), 2), " ± ",
1730131737273:round(as.numeric(nAMBI_sd), 2)),
1730131737273:nNQI1 = paste0(round(as.numeric(nNQI1_mean), 2), " ± ",
1730131737274:round(as.numeric(nNQI1_sd), 2)),
1730131737274:nShannon = paste0(round(as.numeric(nShannon_mean), 2), " ± ",
1730131737274:round(as.numeric(nShannon_sd), 2))
1730131737274:) %>%
1730131737274:select(Year, nAMBI, nNQI1, nShannon, Status)
1730131737277:# Print using kable
1730131737278:library(knitr)
1730131737333:kable(final_table,
1730131737333:caption = "Mean normalized benthic indices (± SD) across all stations showing temporal changes in Kolgrafafjörður fjord from 1999 to 2017.",
1730131737333:align = c("c", "c", "c", "c", "l"))
1730133464749:library(flextable)
1730133478996:install.packages("flextable")
1730133496771:library(flextable)
1730133497332:library(officer)
1730133497340:# Create and format the table
1730133497340:ft <- flextable(final_table) %>%
1730133497340:set_caption(caption = "Mean normalized benthic indices (± SD) across all stations showing temporal changes in Kolgrafafjörður fjord from 1999 to 2017.") %>%
1730133497340:align(j = 1:4, align = "center") %>%
1730133497340:align(j = 5, align = "left") %>%
1730133497340:set_header_labels(
1730133497340:Year = "Year",
1730133497341:nAMBI = "nAMBI",
1730133497341:nNQI1 = "nNQI1",
1730133497341:nShannon = "nShannon",
1730133497341:Status = "Ecological Status"
1730133497341:) %>%
1730133497341:theme_box() %>%
1730133497342:fontsize(size = 10) %>%
1730133497342:padding(padding = 4) %>%
1730133497342:autofit()
1730133497522:# Save as Word document
1730133497523:save_as_docx(
1730133497523:ft,
1730133497523:path = "output/benthic_indices_table.docx"
1730133497523:)
1730199543385:df
1730199575385:str(df)
1730199668777:str(df) %>% select(species    sample_id  count year subdivision   station    density           )
1730199675177:str(result)
1730199743884:KolgrTaxa <- read_csv(file("data/raw/KolgrTaxa.csv", encoding = "UTF-8"), na = "empty")
1730199744256:taxa_to_remove <- c(
1730199744256:"Foraminifera",
1730199744256:"Nematoda",
1730199744256:"Cirripedia",
1730199744256:"Porifera",
1730199744256:"Cnidaria",
1730199744257:"Bryozoa",
1730199744257:"Sipuncula",
1730199744257:"Platyhelminthes",
1730199744257:"Nemertea",
1730199744257:"Oligochaeta",
1730199744257:"Ostracoda"
1730199744257:)
1730199744258:# Filter out the specified taxa using if_all()
1730199744258:KolgrTaxa <- KolgrTaxa %>%
1730199744258:filter(if_all(where(is.character), ~ !. %in% taxa_to_remove))
1730199744267:remove_list <- paste(c(
1730199744268:"nýsestir",
1730199744268:"ungviði",
1730199744268:"ungv",
1730199744268:"ungv.",
1730199744268:"juv",
1730199744268:"harpacticoida"
1730199744268:), collapse = '|')
1730199744269:remove_ind <- lapply(strsplit(remove_list , "\\|")[[1]] , \(x) grep(x , KolgrTaxa$gamalt , fixed = T)) |>
1730199744269:unlist() |>
1730199744269:unique()
1730199744273:ekkiungvidi <- KolgrTaxa[-remove_ind,]
1730199744274:jorundur <- ekkiungvidi %>%
1730199744274:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1730199744274:mutate(
1730199744275:Flokkun = case_when(
1730199744275:Flokkun == "Spionida" ~ "Spionidae",
1730199744275:Flokkun == "Terebellides stroemi" ~ "Terebellides stroemii",
1730199744275:Flokkun == "Ampharetinae" ~ "Ampharetidae",
1730199744275:Flokkun == "ostracoda" ~ "Ostracoda",
1730199744275:Flokkun == "Sabellidae" ~ "Sabellida",
1730199744275:Flokkun == "scalibregma inflatum" ~ "Scalibregma inflatum",
1730199744276:Flokkun == "sipunculida" ~ "Sipuncula",
1730199744276:Flokkun == "sipunculidae" ~ "Sipuncula",
1730199744276:Flokkun == "sipunculidea" ~ "Sipuncula",
1730199744276:Flokkun == "Nephtys" ~ "Nephthys",
1730199744276:Flokkun == "Nepthys" ~ "Nephthys",
1730199744276:Artal == "1999" & Flokkun == "Ampharete acutifrons" ~ "Ampharetinae",
1730199744277:Artal == "1999" & Flokkun == "Bivalvia" ~ "NA"        ,
1730199744277:Artal == "2013" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"       ,
1730199744277:Artal == "2013" & Flokkun == "Polynoidae" ~ "Harmothoe extenuata" ,
1730199744277:Artal == "2014" & Flokkun == "Praxillella" ~ "Praxillella praetermissa",
1730199744278:Artal == "2014" & Flokkun == "Syllidae" ~ "Syllis cornuta"             ,
1730199744278:Artal == "2015" & Flokkun == "Syllidae" ~ "Syllis cornuta",
1730199744278:Artal == "2015" & Flokkun == "Mya" ~ "Mya arenaria"        ,
1730199744278:Artal == "2015" & Flokkun == "Mytilidae" ~ "Mytilus edulis",
1730199744278:Artal == "2015" & Flokkun == "Ampharetidae" ~ "NA"          ,
1730199744278:Artal == "2016" & Flokkun == "Aricidea" ~ "Amphitrite cirrata"      ,
1730199744279:Artal == "2016" & Flokkun == "Capitellidae" ~ "Capitella capitata"   ,
1730199744279:Artal == "2016" & Flokkun == "Cirratulidae" ~ "Cirratulus cirratus",
1730199744279:Artal == "2016" & Flokkun == "Cossuridae" ~ "Cossura longocirrata",
1730199744285:Artal == "2016" & Flokkun == "Nephtyidae" ~ "Nephthys"      ,
1730199744286:Artal == "2016" & Flokkun == "Pectinariidae" ~ "Pectinaria koreni"     ,
1730199744286:Artal == "2016" & Flokkun == "Phyllodocida" ~ "Phyllodoce maculata",
1730199744286:Artal == "2016" & Flokkun == "Spio" ~ "Spio filicornis"            ,
1730199744286:Artal == "2016" & Flokkun == "Spionidae" ~ "Spio filicornis",
1730199744287:Artal == "2016" & Flokkun == "Syllidae" ~ "Syllis"           ,
1730199744287:Artal == "2016" & Flokkun == "Cardiidae" ~ "Cardium"          ,
1730199744287:Artal == "2016" & Flokkun == "Cardiidae" ~ "Cardium"           ,
1730199744287:Artal == "2017" & Flokkun == "Mya" ~ "Mya arenaria"  ,
1730199744287:Artal == "2017" & Flokkun == "Maldanidae" ~ "Praxillella praetermissa",
1730199744288:Artal == "1999" & Flokkun == "Ampharetinae" ~ "Ampharetidae",
1730199744288:Artal == "2017" & Flokkun == "Ampharete" ~ "Ampharetidae"    ,
1730199744288:Artal == "2017" & Flokkun == "Ampharete acutifrons" ~ "Ampharetidae",
1730199744288:Artal == "2016" & Flokkun == "Lumbrineridae" ~ "Lumbrineris",
1730199744289:Artal == "2015" & Flokkun == "Pholoe" ~ "Pholoe minuta"      ,
1730199744289:Artal == "2016" & Flokkun == "Pholoe" ~ "Pholoe minuta"       ,
1730199744289:Artal == "2017" & Flokkun == "Pholoe" ~ "Pholoe minuta"        ,
1730199744289:Artal == "1999" & Flokkun == "Musculus discors" ~ "Musculus",
1730199744290:Artal == "2014" & Flokkun == "Mya" ~ "Mya arenaria"          ,
1730199744290:Artal == "2014" & Flokkun == "Mytilus edulis" ~ "Mytilidae",
1730199744290:Artal == "2014" & Flokkun == "Nephtyidae" ~ "Nephthys"       ,
1730199744290:Artal == "2014" & Flokkun == "Amphipoda" ~ "Protomedeia fasciata"    ,
1730199744291:Artal == "2014" & Flokkun == "Tubificidae" ~ "Tubificoides kozloffi",
1730199744291:Artal == "2014" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"     ,
1730199744291:Artal == "2015" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"      ,
1730199744291:Artal == "2015" & Flokkun == "Amphipoda" ~ "Protomedeia fasciata",
1730199744292:Artal == "2016" & Flokkun == "Balanus balanus" ~ "Balanus"       ,
1730199744292:Artal == "2016" & Flokkun == "priapulidae" ~ "Priapulus caudatus" ,
1730199744292:Artal == "2016" & Flokkun == "Priapulidae" ~ "Priapulus caudatus"  ,
1730199744292:Artal == "2017" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"    ,
1730199744293:Artal == "1999" & Flokkun == "Leucon acutirostris" ~ "Cumacea"       ,
1730199744293:Artal == "1999" & Flokkun == "Eudorella emarginata" ~ "Cumacea",
1730199744293:TRUE ~ Flokkun)) %>%
1730199744293:drop_na()
1730199744363:df <- jorundur  %>%
1730199744363:rename(
1730199744363:species = Flokkun,
1730199744363:sample_id = id,
1730199744363:year = Artal,
1730199744363:station = stod,
1730199744363:subdivision = skipting,
1730199744363:count = N,
1730199744363:density = Nu
1730199744364:)
1730199744367:result <- df %>%
1730199744367:# First, apply the subdivision to the count
1730199744367:mutate(adjusted_count = count * subdivision) %>%
1730199744367:# Calculate the correct number of samples and total area for each station-year combination
1730199744367:group_by(station, year) %>%
1730199744367:mutate(
1730199744367:n_samples = n_distinct(sample_id),
1730199744367:grab_area = case_when(
1730199744367:year == 1999 ~ 0.0225,
1730199744367:TRUE ~ 0.04
1730199744368:),
1730199744368:total_area = grab_area * n_samples
1730199744368:) %>%
1730199744368:ungroup() %>%
1730199744368:# Now group by station, year, and species to get total counts
1730199744368:group_by(station, year, species) %>%
1730199744368:summarise(
1730199744368:original_total_count = sum(count),
1730199744368:adjusted_total_count = sum(adjusted_count),
1730199744368:n_samples = first(n_samples),  # Use the previously calculated n_samples
1730199744368:total_area = first(total_area),  # Use the previously calculated total_area
1730199744368:.groups = 'keep'
1730199744368:) %>%
1730199744369:# Calculate densities
1730199744369:mutate(
1730199744369:original_density = original_total_count / total_area,
1730199744369:adjusted_density = adjusted_total_count / total_area,
1730199744369:density_difference = adjusted_density - original_density,
1730199744369:density_ratio = adjusted_density / original_density
1730199744369:) %>%
1730199744369:# Ungroup
1730199744369:ungroup()
1730199760272:result
1730199972144:sample(result,10)
1730199989233:?sample()
1730200012057:glimpse(result)
1730200029160:print(result,100)
1730200034375:print(result,n=100)
1730200405114:output_filename <- paste0(
1730200405115:"output/listi_jorundur",
1730200405115:format(Sys.Date(), "%Y%m%d"),
1730200405115:".csv"
1730200405115:)
1730200405116:# Write CSV with clear column names
1730200405116:write.csv(
1730200405116:result %>%
1730200405117:select(
1730200405117:station,
1730200405117:year,
1730200405117:species,
1730200405117:original_total_count,
1730200405117:adjusted_total_count,
1730200405117:n_samples,
1730200405117:total_area,
1730200405117:original_density,
1730200405118:adjusted_density
1730200405118:),
1730200405118:file = output_filename,
1730200405118:row.names = FALSE,
1730200405118:na = ""  # Empty string for NA values
1730200405118:)
1730207223023:str(result)
1730207590705:# Load required packages
1730207590706:library(vegan)
1730207592379:# Load cleaned data
1730207592379:df <- result
1730207594837:# Prepare data for PERMANOVA
1730207594838:species_matrix <- df %>%
1730207594838:select(-station, -year) %>%
1730207594838:as.matrix()
1730207597810:env_data <- df %>%
1730207597810:select(Station = station, Year = year)
1730207600522:# Perform PERMANOVA
1730207600523:permanova <- adonis2(species_matrix ~ Station + Year, data = env_data, permutations = 999, method = "bray")
1730207607036:env_data
1730207614356:df
1730207625492:df %>%
1730207625492:select(-station, -year)
1730207719284:# Load cleaned data
1730207719285:df <- result
1730207721413:# Prepare data for PERMANOVA
1730207721413:species_matrix <- df %>%
1730207721414:select(station, year, species, adjusted_density) %>%
1730207721414:pivot_wider(
1730207721414:names_from = species,
1730207721414:values_from = adjusted_density,
1730207721414:values_fill = 0
1730207721415:) %>%
1730207721415:select(-station, -year)
1730207726061:env_data <- df %>%
1730207726061:select(station, year) %>%
1730207726061:distinct()
1730207727236:# Perform PERMANOVA
1730207727236:permanova <- adonis2(species_matrix ~ station + year,
1730207727236:data = env_data,
1730207727236:permutations = 999,
1730207727236:method = "bray")
1730207729645:# Print results
1730207729646:print(permanova)
1730208265793:# PERMANOVA Analysis with improvements
1730208265794:# Load required packages
1730208265794:library(vegan)
1730208265794:library(tidyr)
1730208265795:# Prepare data for PERMANOVA
1730208265795:species_matrix <- df %>%
1730208265795:select(station, year, species, adjusted_density) %>%
1730208265796:pivot_wider(
1730208265796:names_from = species,
1730208265796:values_from = adjusted_density,
1730208265797:values_fill = 0
1730208265797:)
1730208265812:# Save station and year for model
1730208265812:env_data <- species_matrix %>%
1730208265812:select(station, year)
1730208265814:# Convert to matrix for analysis
1730208265814:species_matrix <- species_matrix %>%
1730208265814:select(-station, -year) %>%
1730208265814:as.matrix()
1730208265818:# Consider these modifications:
1730208265818:# 1. Add data transformation
1730208265819:species_matrix_transformed <- sqrt(species_matrix)  # or log1p(species_matrix)
1730208265820:# 2. Separate temporal analysis
1730208265820:permanova_temporal <- adonis2(species_matrix_transformed ~ year,
1730208265820:data = env_data,
1730208265820:permutations = 999,
1730208265820:method = "bray")
1730208265855:# 3. Add pairwise comparisons between years
1730208265855:years <- unique(env_data$year)
1730208265855:pairwise_results <- list()
1730208265855:for(i in 1:(length(years)-1)) {
1730208265855:for(j in (i+1):length(years)) {
1730208265855:year_subset <- env_data$year %in% c(years[i], years[j])
1730208265855:pair_test <- adonis2(species_matrix_transformed[year_subset,] ~
1730208265856:env_data$year[year_subset],
1730208265856:permutations = 999,
1730208265856:method = "bray")
1730208265856:pairwise_results[[paste(years[i], years[j])]] <- pair_test
1730208265856:}
1730208265856:}
1730208280798:pairwise_results
1730208454073:# Create a data frame for visualization
1730208454073:pairwise_results <- data.frame(
1730208454073:Comparison = c("1999 2013", "1999 2014", "1999 2015", "1999 2016", "1999 2017",
1730208454073:"2013 2014", "2013 2015", "2013 2016", "2013 2017",
1730208454073:"2014 2015", "2014 2016", "2014 2017", "2015 2016", "2015 2017", "2016 2017"),
1730208454074:R2 = c(0.39053, 0.43874, 0.4244, 0.36915, 0.30679,
1730208454074:0.16614, 0.40456, 0.42045, 0.41225,
1730208454074:0.37662, 0.47246, 0.43649, 0.38725, 0.27018, 0.30119),
1730208454074:F = c(8.3301, 8.5987, 7.3732, 5.8516, 4.4257,
1730208454074:2.7894, 8.8328, 9.4312, 9.1181,
1730208454074:6.6457, 9.8515, 8.5204, 6.3198, 3.7021, 4.31),
1730208454075:p_value = c(0.001, 0.002, 0.003, 0.002, 0.003,
1730208454075:0.021, 0.001, 0.001, 0.001,
1730208454075:0.002, 0.001, 0.001, 0.001, 0.002, 0.005)
1730208454075:)
1730208463094:# Load necessary libraries
1730208463095:library(ggplot2)
1730208463095:# R2 plot
1730208463096:ggplot(pairwise_results, aes(x = Comparison, y = R2)) +
1730208463096:geom_bar(stat = "identity", fill = "skyblue") +
1730208463096:labs(title = "R2 Values for Pairwise PERMANOVA Comparisons", x = "Comparison", y = "R2") +
1730208463096:theme_minimal() +
1730208463097:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1730208463506:# F statistic plot
1730208463506:ggplot(pairwise_results, aes(x = Comparison, y = F)) +
1730208463506:geom_bar(stat = "identity", fill = "lightgreen") +
1730208463507:labs(title = "F Statistics for Pairwise PERMANOVA Comparisons", x = "Comparison", y = "F Statistic") +
1730208463507:theme_minimal() +
1730208463507:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1730208463972:# P-value plot
1730208463972:ggplot(pairwise_results, aes(x = Comparison, y = p_value)) +
1730208463973:geom_bar(stat = "identity", fill = "salmon") +
1730208463973:labs(title = "P-Values for Pairwise PERMANOVA Comparisons", x = "Comparison", y = "P-Value") +
1730208463973:theme_minimal() +
1730208463973:theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
1730208463973:geom_hline(yintercept = 0.05, linetype = "dashed", color = "red") # significance line
1730208598208:# Extract R² values and p-values from pairwise results
1730208598208:years <- c(1999, 2013:2017)
1730208598208:n_years <- length(years)
1730208598208:r2_matrix <- matrix(NA, n_years, n_years)
1730208598209:p_matrix <- matrix(NA, n_years, n_years)
1730208598209:# Fill matrices
1730208598209:for(i in 1:(n_years-1)) {
1730208598209:for(j in (i+1):n_years) {
1730208598209:result_key <- paste(years[i], years[j])
1730208598210:if(result_key %in% names(pairwise_results)) {
1730208598210:result <- pairwise_results[[result_key]]
1730208598210:r2_matrix[i,j] <- result$R2[1]  # Get R² value
1730208598210:r2_matrix[j,i] <- result$R2[1]  # Mirror
1730208598210:p_matrix[i,j] <- result$`Pr(>F)`[1]  # Get p-value
1730208598210:p_matrix[j,i] <- result$`Pr(>F)`[1]  # Mirror
1730208598211:}
1730208598211:}
1730208598211:}
1730208598223:# Create visualization
1730208598223:library(ggplot2)
1730208598223:library(reshape2)
1730208609182:install.packages("reshape2")
1730208612508:# Extract R² values and p-values from pairwise results
1730208612509:years <- c(1999, 2013:2017)
1730208612509:n_years <- length(years)
1730208612509:r2_matrix <- matrix(NA, n_years, n_years)
1730208612509:p_matrix <- matrix(NA, n_years, n_years)
1730208612509:# Fill matrices
1730208612509:for(i in 1:(n_years-1)) {
1730208612510:for(j in (i+1):n_years) {
1730208612510:result_key <- paste(years[i], years[j])
1730208612510:if(result_key %in% names(pairwise_results)) {
1730208612510:result <- pairwise_results[[result_key]]
1730208612510:r2_matrix[i,j] <- result$R2[1]  # Get R² value
1730208612510:r2_matrix[j,i] <- result$R2[1]  # Mirror
1730208612510:p_matrix[i,j] <- result$`Pr(>F)`[1]  # Get p-value
1730208612511:p_matrix[j,i] <- result$`Pr(>F)`[1]  # Mirror
1730208612511:}
1730208612511:}
1730208612511:}
1730208612522:# Create visualization
1730208612522:library(ggplot2)
1730208612523:library(reshape2)
1730208612640:# Melt the R² matrix for ggplot
1730208612640:r2_melted <- melt(r2_matrix)
1730208612641:r2_melted$p_value <- melt(p_matrix)$value
1730208612641:r2_melted$Year1 <- years[r2_melted$Var1]
1730208612641:r2_melted$Year2 <- years[r2_melted$Var2]
1730208612642:# Create significance symbols
1730208612642:r2_melted$sig <- ""
1730208612642:r2_melted$sig[r2_melted$p_value <= 0.001] <- "***"
1730208612642:r2_melted$sig[r2_melted$p_value > 0.001 & r2_melted$p_value <= 0.01] <- "**"
1730208612642:r2_melted$sig[r2_melted$p_value > 0.01 & r2_melted$p_value <= 0.05] <- "*"
1730208612642:# Create the plot
1730208612642:ggplot(r2_melted, aes(x=Year1, y=Year2, fill=value)) +
1730208612642:geom_tile() +
1730208612642:geom_text(aes(label=sprintf("%.2f%s", value, sig)), size=3) +
1730208612643:scale_fill_gradient2(low="white", high="red", mid="pink",
1730208612643:midpoint=0.3, limit=c(0,0.5),
1730208612643:name="R²") +
1730208612643:theme_minimal() +
1730208612643:labs(title="Pairwise PERMANOVA Results",
1730208612643:subtitle="R² values with significance levels (* p≤0.05, ** p≤0.01, *** p≤0.001)") +
1730208612643:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1730208671133:# Clean up the melted data by removing NA values
1730208671133:r2_melted <- r2_melted[!is.na(r2_melted$value), ]
1730208671134:# Create the plot with the cleaned data
1730208671134:ggplot(r2_melted, aes(x=factor(Year1), y=factor(Year2), fill=value)) +
1730208671134:geom_tile() +
1730208671134:geom_text(aes(label=sprintf("%.2f%s", value, sig)), size=3) +
1730208671134:scale_fill_gradient2(low="white", high="red", mid="pink",
1730208671134:midpoint=0.3, limit=c(0,0.5),
1730208671135:name="R²",
1730208671135:na.value = "white") +
1730208671135:theme_minimal() +
1730208671135:labs(title="Pairwise PERMANOVA Results",
1730208671135:subtitle="R² values with significance levels (* p≤0.05, ** p≤0.01, *** p≤0.001)",
1730208671135:x="Year", y="Year") +
1730208671136:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1730208843192:# First, let's examine the data
1730208843192:print(head(r2_melted))
1730208843194:# Create matrices from the pairwise results
1730208843194:years <- c(1999, 2013:2017)
1730208843194:n_years <- length(years)
1730208843194:r2_matrix <- matrix(0, n_years, n_years)
1730208843194:p_matrix <- matrix(1, n_years, n_years)
1730208843194:rownames(r2_matrix) <- years
1730208843195:colnames(r2_matrix) <- years
1730208843195:# Fill matrices with results
1730208843195:for(i in 1:(n_years-1)) {
1730208843195:for(j in (i+1):n_years) {
1730208843196:result_key <- paste(years[i], years[j])
1730208843196:if(result_key %in% names(pairwise_results)) {
1730208843196:result <- pairwise_results[[result_key]]
1730208843196:r2_matrix[i,j] <- result$R2[1]
1730208843196:r2_matrix[j,i] <- result$R2[1]  # Make it symmetric
1730208843197:p_matrix[i,j] <- result$`Pr(>F)`[1]
1730208843197:p_matrix[j,i] <- result$`Pr(>F)`[1]  # Make it symmetric
1730208843197:}
1730208843197:}
1730208843197:}
1730208843210:# Convert to long format
1730208843210:r2_melted <- reshape2::melt(r2_matrix)
1730208843211:colnames(r2_melted) <- c("Year1", "Year2", "R2")
1730208843211:r2_melted$p_value <- reshape2::melt(p_matrix)$value
1730208843212:# Add significance symbols
1730208843212:r2_melted$sig <- ""
1730208843212:r2_melted$sig[r2_melted$p_value <= 0.001] <- "***"
1730208843213:r2_melted$sig[r2_melted$p_value > 0.001 & r2_melted$p_value <= 0.01] <- "**"
1730208843213:r2_melted$sig[r2_melted$p_value > 0.01 & r2_melted$p_value <= 0.05] <- "*"
1730208843213:# Create the plot
1730208843213:ggplot(r2_melted, aes(x=factor(Year1), y=factor(Year2), fill=R2)) +
1730208843213:geom_tile() +
1730208843214:geom_text(aes(label=ifelse(R2 > 0, sprintf("%.2f%s", R2, sig), "")), size=3) +
1730208843214:scale_fill_gradient2(low="white", high="red", mid="pink",
1730208843214:midpoint=0.3, limit=c(0,0.5),
1730208843214:name="R²") +
1730208843214:theme_minimal() +
1730208843214:labs(title="Pairwise PERMANOVA Results",
1730208843215:subtitle="R² values with significance levels (* p≤0.05, ** p≤0.01, *** p≤0.001)",
1730208843215:x="Year", y="Year") +
1730208843215:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1730208860429:head(r2_melted)
1730208910920:# Create matrices with NA instead of 0s and 1s
1730208910920:years <- c(1999, 2013:2017)
1730208910920:n_years <- length(years)
1730208910920:r2_matrix <- matrix(NA, n_years, n_years)
1730208910921:p_matrix <- matrix(NA, n_years, n_years)
1730208910921:rownames(r2_matrix) <- years
1730208910921:colnames(r2_matrix) <- years
1730208910921:# Fill matrices with actual results
1730208910922:for(i in 1:(n_years-1)) {
1730208910922:for(j in (i+1):n_years) {
1730208910922:result_key <- paste(years[i], years[j])
1730208910922:if(result_key %in% names(pairwise_results)) {
1730208910922:# Get R² value (first row of R2 column)
1730208910923:r2_val <- pairwise_results[[result_key]]$R2[1]
1730208910923:# Get p-value (first row of Pr(>F) column)
1730208910923:p_val <- pairwise_results[[result_key]]$`Pr(>F)`[1]
1730208910923:# Fill both sides of the matrix (make it symmetric)
1730208910923:r2_matrix[i,j] <- r2_val
1730208910924:r2_matrix[j,i] <- r2_val
1730208910924:p_matrix[i,j] <- p_val
1730208910924:p_matrix[j,i] <- p_val
1730208910924:}
1730208910924:}
1730208910924:}
1730208910938:# Convert to long format
1730208910938:r2_melted <- reshape2::melt(r2_matrix)
1730208910939:colnames(r2_melted) <- c("Year1", "Year2", "R2")
1730208910939:r2_melted$p_value <- reshape2::melt(p_matrix)$value
1730208910940:# Add significance symbols
1730208910940:r2_melted$sig <- ""
1730208910940:r2_melted$sig[r2_melted$p_value <= 0.001] <- "***"
1730208910940:r2_melted$sig[r2_melted$p_value > 0.001 & r2_melted$p_value <= 0.01] <- "**"
1730208910940:r2_melted$sig[r2_melted$p_value > 0.01 & r2_melted$p_value <= 0.05] <- "*"
1730208910941:# Create the plot
1730208910941:ggplot(r2_melted, aes(x=factor(Year1), y=factor(Year2), fill=R2)) +
1730208910941:geom_tile() +
1730208910941:geom_text(aes(label=ifelse(!is.na(R2), sprintf("%.2f%s", R2, sig), "")), size=3) +
1730208910941:scale_fill_gradient2(low="white", high="red", mid="pink",
1730208910941:midpoint=0.3, limit=c(0,0.5),
1730208910941:name="R²",
1730208910942:na.value = "white") +
1730208910942:theme_minimal() +
1730208910942:labs(title="Pairwise PERMANOVA Results",
1730208910942:subtitle="R² values with significance levels (* p≤0.05, ** p≤0.01, *** p≤0.001)",
1730208910942:x="Year", y="Year") +
1730208910942:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1730208927684:head(r2_melted)
1730208964887:# Create a data frame from pairwise results
1730208964887:results_df <- data.frame(
1730208964887:Year1 = numeric(),
1730208964888:Year2 = numeric(),
1730208964888:R2 = numeric(),
1730208964888:p_value = numeric()
1730208964888:)
1730208964889:# Extract values from pairwise_results
1730208964889:for(pair in names(pairwise_results)) {
1730208964889:years <- as.numeric(strsplit(pair, " ")[[1]])
1730208964890:result <- pairwise_results[[pair]]
1730208964890:# Add row to results_df
1730208964890:results_df <- rbind(results_df, data.frame(
1730208964890:Year1 = years[1],
1730208964891:Year2 = years[2],
1730208964891:R2 = result$R2[1],
1730208964891:p_value = result$`Pr(>F)`[1]
1730208964891:))
1730208964891:# Add symmetric pair
1730208964892:results_df <- rbind(results_df, data.frame(
1730208964892:Year1 = years[2],
1730208964892:Year2 = years[1],
1730208964892:R2 = result$R2[1],
1730208964893:p_value = result$`Pr(>F)`[1]
1730208964893:))
1730208964893:}
1730209053182:species_data <- result %>%
1730209053182:filter(Artal != 1999) %>%
1730209053182:dplyr::group_by(stod, Artal, Flokkun) %>%
1730209053183:dplyr::summarise(N = sum(N), .groups = "drop") %>%
1730209053183:tidyr::pivot_wider(names_from = Flokkun, values_from = N, values_fill = 0) %>%
1730209053183:mutate(
1730209053183:Station = factor(stod, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1730209053183:Year = factor(Artal)
1730209053183:) %>%
1730209053184:dplyr::select(-stod, -Artal)  # Remove the original stod and Artal columns
1730209125359:df <- result %>%
1730209125360:filter(year != 1999) %>%
1730209125360:dplyr::group_by(station, year, species) %>%
1730209125360:dplyr::summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730209125360:tidyr::pivot_wider(names_from = species, values_from = N, values_fill = 0) %>%
1730209125360:mutate(
1730209125360:Station = factor(station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1730209125361:Year = factor(year)
1730209125361:) %>%
1730209125361:dplyr::select(-station, -year)  # Remove the original stod and Artal columns
1730209144942:str(result)
1730209180894:KolgrTaxa <- read_csv(file("data/raw/KolgrTaxa.csv", encoding = "UTF-8"), na = "empty")
1730209181072:taxa_to_remove <- c(
1730209181072:"Foraminifera",
1730209181072:"Nematoda",
1730209181072:"Cirripedia",
1730209181072:"Porifera",
1730209181072:"Cnidaria",
1730209181073:"Bryozoa",
1730209181073:"Sipuncula",
1730209181073:"Platyhelminthes",
1730209181073:"Nemertea",
1730209181073:"Oligochaeta",
1730209181073:"Ostracoda"
1730209181073:)
1730209181073:# Filter out the specified taxa using if_all()
1730209181073:KolgrTaxa <- KolgrTaxa %>%
1730209181073:filter(if_all(where(is.character), ~ !. %in% taxa_to_remove))
1730209181081:remove_list <- paste(c(
1730209181081:"nýsestir",
1730209181081:"ungviði",
1730209181081:"ungv",
1730209181081:"ungv.",
1730209181081:"juv",
1730209181081:"harpacticoida"
1730209181082:), collapse = '|')
1730209181082:remove_ind <- lapply(strsplit(remove_list , "\\|")[[1]] , \(x) grep(x , KolgrTaxa$gamalt , fixed = T)) |>
1730209181082:unlist() |>
1730209181082:unique()
1730209181086:ekkiungvidi <- KolgrTaxa[-remove_ind,]
1730209181087:jorundur <- ekkiungvidi %>%
1730209181087:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1730209181087:mutate(
1730209181087:Flokkun = case_when(
1730209181087:Flokkun == "Spionida" ~ "Spionidae",
1730209181087:Flokkun == "Terebellides stroemi" ~ "Terebellides stroemii",
1730209181087:Flokkun == "Ampharetinae" ~ "Ampharetidae",
1730209181088:Flokkun == "ostracoda" ~ "Ostracoda",
1730209181088:Flokkun == "Sabellidae" ~ "Sabellida",
1730209181088:Flokkun == "scalibregma inflatum" ~ "Scalibregma inflatum",
1730209181088:Flokkun == "sipunculida" ~ "Sipuncula",
1730209181088:Flokkun == "sipunculidae" ~ "Sipuncula",
1730209181088:Flokkun == "sipunculidea" ~ "Sipuncula",
1730209181089:Flokkun == "Nephtys" ~ "Nephthys",
1730209181089:Flokkun == "Nepthys" ~ "Nephthys",
1730209181089:Artal == "1999" & Flokkun == "Ampharete acutifrons" ~ "Ampharetinae",
1730209181089:Artal == "1999" & Flokkun == "Bivalvia" ~ "NA"        ,
1730209181089:Artal == "2013" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"       ,
1730209181089:Artal == "2013" & Flokkun == "Polynoidae" ~ "Harmothoe extenuata" ,
1730209181090:Artal == "2014" & Flokkun == "Praxillella" ~ "Praxillella praetermissa",
1730209181090:Artal == "2014" & Flokkun == "Syllidae" ~ "Syllis cornuta"             ,
1730209181090:Artal == "2015" & Flokkun == "Syllidae" ~ "Syllis cornuta",
1730209181090:Artal == "2015" & Flokkun == "Mya" ~ "Mya arenaria"        ,
1730209181090:Artal == "2015" & Flokkun == "Mytilidae" ~ "Mytilus edulis",
1730209181091:Artal == "2015" & Flokkun == "Ampharetidae" ~ "NA"          ,
1730209181091:Artal == "2016" & Flokkun == "Aricidea" ~ "Amphitrite cirrata"      ,
1730209181091:Artal == "2016" & Flokkun == "Capitellidae" ~ "Capitella capitata"   ,
1730209181091:Artal == "2016" & Flokkun == "Cirratulidae" ~ "Cirratulus cirratus",
1730209181091:Artal == "2016" & Flokkun == "Cossuridae" ~ "Cossura longocirrata",
1730209181092:Artal == "2016" & Flokkun == "Nephtyidae" ~ "Nephthys"      ,
1730209181092:Artal == "2016" & Flokkun == "Pectinariidae" ~ "Pectinaria koreni"     ,
1730209181092:Artal == "2016" & Flokkun == "Phyllodocida" ~ "Phyllodoce maculata",
1730209181092:Artal == "2016" & Flokkun == "Spio" ~ "Spio filicornis"            ,
1730209181092:Artal == "2016" & Flokkun == "Spionidae" ~ "Spio filicornis",
1730209181093:Artal == "2016" & Flokkun == "Syllidae" ~ "Syllis"           ,
1730209181093:Artal == "2016" & Flokkun == "Cardiidae" ~ "Cardium"          ,
1730209181093:Artal == "2016" & Flokkun == "Cardiidae" ~ "Cardium"           ,
1730209181093:Artal == "2017" & Flokkun == "Mya" ~ "Mya arenaria"  ,
1730209181094:Artal == "2017" & Flokkun == "Maldanidae" ~ "Praxillella praetermissa",
1730209181094:Artal == "1999" & Flokkun == "Ampharetinae" ~ "Ampharetidae",
1730209181094:Artal == "2017" & Flokkun == "Ampharete" ~ "Ampharetidae"    ,
1730209181094:Artal == "2017" & Flokkun == "Ampharete acutifrons" ~ "Ampharetidae",
1730209181094:Artal == "2016" & Flokkun == "Lumbrineridae" ~ "Lumbrineris",
1730209181095:Artal == "2015" & Flokkun == "Pholoe" ~ "Pholoe minuta"      ,
1730209181095:Artal == "2016" & Flokkun == "Pholoe" ~ "Pholoe minuta"       ,
1730209181095:Artal == "2017" & Flokkun == "Pholoe" ~ "Pholoe minuta"        ,
1730209181095:Artal == "1999" & Flokkun == "Musculus discors" ~ "Musculus",
1730209181096:Artal == "2014" & Flokkun == "Mya" ~ "Mya arenaria"          ,
1730209181096:Artal == "2014" & Flokkun == "Mytilus edulis" ~ "Mytilidae",
1730209181097:Artal == "2014" & Flokkun == "Nephtyidae" ~ "Nephthys"       ,
1730209181097:Artal == "2014" & Flokkun == "Amphipoda" ~ "Protomedeia fasciata"    ,
1730209181098:Artal == "2014" & Flokkun == "Tubificidae" ~ "Tubificoides kozloffi",
1730209181098:Artal == "2014" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"     ,
1730209181098:Artal == "2015" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"      ,
1730209181099:Artal == "2015" & Flokkun == "Amphipoda" ~ "Protomedeia fasciata",
1730209181099:Artal == "2016" & Flokkun == "Balanus balanus" ~ "Balanus"       ,
1730209181099:Artal == "2016" & Flokkun == "priapulidae" ~ "Priapulus caudatus" ,
1730209181099:Artal == "2016" & Flokkun == "Priapulidae" ~ "Priapulus caudatus"  ,
1730209181100:Artal == "2017" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"    ,
1730209181100:Artal == "1999" & Flokkun == "Leucon acutirostris" ~ "Cumacea"       ,
1730209181100:Artal == "1999" & Flokkun == "Eudorella emarginata" ~ "Cumacea",
1730209181101:TRUE ~ Flokkun)) %>%
1730209181101:drop_na()
1730209181183:df <- jorundur  %>%
1730209181184:rename(
1730209181184:species = Flokkun,
1730209181184:sample_id = id,
1730209181184:year = Artal,
1730209181184:station = stod,
1730209181184:subdivision = skipting,
1730209181184:count = N,
1730209181184:density = Nu
1730209181184:)
1730209181186:result <- df %>%
1730209181187:# First, apply the subdivision to the count
1730209181187:mutate(adjusted_count = count * subdivision) %>%
1730209181187:# Calculate the correct number of samples and total area for each station-year combination
1730209181187:group_by(station, year) %>%
1730209181187:mutate(
1730209181187:n_samples = n_distinct(sample_id),
1730209181187:grab_area = case_when(
1730209181187:year == 1999 ~ 0.0225,
1730209181187:TRUE ~ 0.04
1730209181187:),
1730209181187:total_area = grab_area * n_samples
1730209181187:) %>%
1730209181187:ungroup() %>%
1730209181188:# Now group by station, year, and species to get total counts
1730209181188:group_by(station, year, species) %>%
1730209181188:summarise(
1730209181188:original_total_count = sum(count),
1730209181188:adjusted_total_count = sum(adjusted_count),
1730209181188:n_samples = first(n_samples),  # Use the previously calculated n_samples
1730209181188:total_area = first(total_area),  # Use the previously calculated total_area
1730209181188:.groups = 'keep'
1730209181188:) %>%
1730209181188:# Calculate densities
1730209181188:mutate(
1730209181189:original_density = original_total_count / total_area,
1730209181189:adjusted_density = adjusted_total_count / total_area,
1730209181189:density_difference = adjusted_density - original_density,
1730209181189:density_ratio = adjusted_density / original_density
1730209181189:) %>%
1730209181189:# Ungroup
1730209181189:ungroup()
1730209188764:# Load cleaned data
1730209188765:df <- result
1730209261374:# Load cleaned data
1730209261374:df_result <- result
1730209296334:# Load cleaned data
1730209296334:#df_result <- result # just so this won't be accidentally changed
1730209296334:df <- df_result
1730209303573:# Prepare data for PERMANOVA
1730209303574:species_matrix <- df %>%
1730209303574:select(station, year, species, adjusted_density) %>%
1730209303574:pivot_wider(
1730209303574:names_from = species,
1730209303574:values_from = adjusted_density,
1730209303574:values_fill = 0
1730209303575:) %>%
1730209303575:select(-station, -year)
1730209308893:species_matrix
1730209324965:env_data <- df %>%
1730209324965:select(station, year) %>%
1730209324965:distinct()
1730209331031:env_data
1730209343829:# Perform PERMANOVA
1730209343830:permanova <- adonis2(species_matrix ~ station + year,
1730209343830:data = env_data,
1730209343830:permutations = 999,
1730209343830:method = "bray")
1730209345621:# Print results
1730209345621:print(permanova)
1730209396030:# Extract R² values and p-values from pairwise results
1730209396031:years <- c(1999, 2013:2017)
1730209396031:n_years <- length(years)
1730209396031:r2_matrix <- matrix(NA, n_years, n_years)
1730209396031:p_matrix <- matrix(NA, n_years, n_years)
1730209396032:# Fill matrices
1730209396032:for(i in 1:(n_years-1)) {
1730209396032:for(j in (i+1):n_years) {
1730209396032:result_key <- paste(years[i], years[j])
1730209396033:if(result_key %in% names(pairwise_results)) {
1730209396033:result <- pairwise_results[[result_key]]
1730209396033:r2_matrix[i,j] <- result$R2[1]  # Get R² value
1730209396033:r2_matrix[j,i] <- result$R2[1]  # Mirror
1730209396033:p_matrix[i,j] <- result$`Pr(>F)`[1]  # Get p-value
1730209396034:p_matrix[j,i] <- result$`Pr(>F)`[1]  # Mirror
1730209396034:}
1730209396034:}
1730209396034:}
1730209396047:# Create visualization
1730209396047:library(ggplot2)
1730209396047:library(reshape2)
1730209396047:# Melt the R² matrix for ggplot
1730209396047:r2_melted <- melt(r2_matrix)
1730209396048:r2_melted$p_value <- melt(p_matrix)$value
1730209396048:r2_melted$Year1 <- years[r2_melted$Var1]
1730209396049:r2_melted$Year2 <- years[r2_melted$Var2]
1730209396049:# Create significance symbols
1730209396049:r2_melted$sig <- ""
1730209396049:r2_melted$sig[r2_melted$p_value <= 0.001] <- "***"
1730209396049:r2_melted$sig[r2_melted$p_value > 0.001 & r2_melted$p_value <= 0.01] <- "**"
1730209396050:r2_melted$sig[r2_melted$p_value > 0.01 & r2_melted$p_value <= 0.05] <- "*"
1730209396050:# Clean up the melted data by removing NA values
1730209396050:r2_melted <- r2_melted[!is.na(r2_melted$value), ]
1730209396050:# Create the plot with the cleaned data
1730209396051:ggplot(r2_melted, aes(x=factor(Year1), y=factor(Year2), fill=value)) +
1730209396051:geom_tile() +
1730209396051:geom_text(aes(label=sprintf("%.2f%s", value, sig)), size=3) +
1730209396051:scale_fill_gradient2(low="white", high="red", mid="pink",
1730209396051:midpoint=0.3, limit=c(0,0.5),
1730209396051:name="R²",
1730209396052:na.value = "white") +
1730209396052:theme_minimal() +
1730209396052:labs(title="Pairwise PERMANOVA Results",
1730209396052:subtitle="R² values with significance levels (* p≤0.05, ** p≤0.01, *** p≤0.001)",
1730209396052:x="Year", y="Year") +
1730209396052:theme(axis.text.x = element_text(angle = 45, hjust = 1))
1730209401844:r2_melted
1730209409210:df
1730209412998:result
1730209505834:colnames(kornast_organic_tap_dypi) <- c(
1730209505834:"station",
1730209505835:"year",
1730209505835:"grain_20um",
1730209505835:"grain_63um",
1730209505835:"grain_125um",
1730209505835:"grain_250um",
1730209505836:"grain_1000um",
1730209505836:"organic_content",
1730209505836:"organic_sd",
1730209505836:"depth",
1730209505836:"herring_mortality"
1730209505837:)
1730209540217:kornast_organic_tap_dypi <- structure(list(stod = c("A7", "A7", "A7", "A7", "A7", "B5", "B5",
1730209540218:"B5", "B5", "B5", "B8", "B8", "B8", "B8", "B8", "C4", "C4", "C4",
1730209540218:"C4", "C4", "E3", "E3", "E3", "E3", "E3", "E4", "E4", "E4", "E4",
1730209540218:"E4"), Artal = c("2013", "2014", "2015", "2016", "2017", "2013",
1730209540219:"2014", "2015", "2016", "2017", "2013", "2014", "2015", "2016",
1730209540219:"2017", "2013", "2014", "2015", "2016", "2017", "2013", "2014",
1730209540219:"2015", "2016", "2017", "2013", "2014", "2015", "2016", "2017"
1730209540219:), `20um` = c(0.628496042216359, 0.343339587242026, 0.453474676089517,
1730209540219:0.390734265734266, 0.643465909090909, 0.386002120890774, 0.321766561514196,
1730209540220:0.386792452830189, 0.19559585492228, 0.546637744034707, 0.592529025744573,
1730209540220:0.515981735159817, 0.369913686806412, 0.424997544719429, 0.221565731166913,
1730209540220:0.332928794917986, 0.153116531165312, 0.234791889007471, 0.190773067331671,
1730209540220:0.152190051967335, 0.385025817555938, 0.211453744493392, 0.157303370786517,
1730209540220:0.0827048768225239, 0.247269116186693, 0.426682936750051, 0.406354515050167,
1730209540221:0.214331413947537, 0.0125582337451894, 0.286830357142857), `63um` = c(0.350395778364116,
1730209540221:0.24577861163227, 0.215547703180212, 0.215909090909091, 0.151988636363636,
1730209540221:0.52661717921527, 0.342271293375394, 0.304245283018868, 0.348445595854922,
1730209540221:0.31236442516269, 0.317491166077739, 0.23972602739726, 0.276202219482121,
1730209540222:0.278886610994081, 0.282127031019202, 0.306115483075756, 0.276422764227642,
1730209540222:0.257203842049093, 0.17643391521197, 0.197475872308834, 0.379173838209983,
1730209540222:0.177679882525698, 0.143392188336009, 0.0935143288084465, 0.200595829195631,
1730209540222:0.438071995118975, 0.29933110367893, 0.211772232885477, 0.0256734859226251,
1730209540223:0.266741071428571), `125um` = c(0.0100263852242744, 0.315196998123827,
1730209540223:0.267373380447585, 0.284965034965035, 0.177556818181818, 0.0752916224814422,
1730209540223:0.32807570977918, 0.295990566037736, 0.399611398963731, 0.134490238611714,
1730209540223:0.0261736496718829, 0.237442922374429, 0.327990135635019, 0.240590007791825,
1730209540224:0.370753323485968, 0.319370437091116, 0.485094850948509, 0.44076840981857,
1730209540224:0.350997506234414, 0.528582034149963, 0.207194492254733, 0.281938325991189,
1730209540224:0.173354735152488, 0.283810960281549, 0.201588877855015, 0.104535285743339,
1730209540224:0.249163879598662, 0.19065898912348, 0.0339781243670245, 0.280133928571429
1730209540225:), `250um` = c(0.0058047493403694, 0.0956848030018762, 0.0459363957597173,
1730209540225:0.0734265734265734, 0.00852272727272727, 0.00742311770943797,
1730209540225:0.00788643533123028, 0.0129716981132075, 0.0518134715025907,
1730209540225:0.00650759219088937, 0.0553003533568905, 0.00684931506849315,
1730209540226:0.0135635018495684, 0.0384999321551487, 0.0782865583456425, 0.0337347112923107,
1730209540226:0.0569105691056911, 0.0448239060832444, 0.180174563591022, 0.0972531551596139,
1730209540226:0.0236660929432013, 0.0558002936857562, 0.0358480470840021, 0.0834590246354952,
1730209540227:0.041708043694141, 0.0213544844417328, 0.0133779264214047, 0.0300703774792067,
1730209540227:0.00212679765039498, 0.0223214285714286), `1000um` = c(0.00527704485488127,
1730209540227:0, 0.0176678445229682, 0.034965034965035, 0.0184659090909091,
1730209540228:0.00466595970307529, 0, 0, 0.00453367875647668, 0, 0.00850580514891469,
1730209540228:0, 0.0123304562268804, 0.0170259043395175, 0.0472673559822747,
1730209540228:0.00785057362283114, 0.0284552845528455, 0.0224119530416222,
1730209540229:0.101620947630923, 0.0244988864142539, 0.00493975903614458, 0.273127753303965,
1730209540229:0.490101658640984, 0.456510809451986, 0.30883813306852, 0.00935529794590197,
1730209540229:0.0317725752508361, 0.353166986564299, 0.925663358314766, 0.143973214285714
1730209540230:), tap = c(0.181515414138913, 0.117573294968505, 0.118865354458575,
1730209540230:0.10855175801997, 0.144215480661367, 0.174146595044186, 0.119127447894571,
1730209540230:0.124407020872865, 0.105198658268468, 0.115848718019756, 0.178503108560497,
1730209540231:0.12940849965294, 0.117179453375411, 0.111245191819955, 0.116370341491164,
1730209540231:0.142787808192584, 0.113006923837784, 0.132290387475618, 0.0969106601341345,
1730209540232:0.10220582768636, 0.215412621359223, 0.101006035443262, 0.090402518790167,
1730209540233:0.0885715142546809, 0.0796504565039956, 0.135196812364163, 0.126232974506719,
1730209540233:0.103923910552975, 0.092065868263473, 0.101525813669742), sd = c(0.00544534378975074,
1730209540234:0.000976059208807937, 0.00105675176697187, 0.00129099190584701,
1730209540235:0.010280862872346, 0.00245055200549895, 0.000348361831630225,
1730209540235:0.00083859912379809, 0.001823914492673, 0.000495255850064288,
1730209540236:0.010990421037094, 0.000600243017338078, 0.00277626938387639,
1730209540237:0.000420021748488332, 0.0014744503375705, 0.0199049666612412,
1730209540237:0.00034970661779751, 0.00314117917812511, 0.000215745910008022,
1730209540238:0.000435189983246506, 0.127862755335917, 0.000119010118739825,
1730209540238:0.00226462935582809, 0.00132600786385895, 0.00243540659124004,
1730209540239:0.0118334943096431, 0.000449569977393725, 0.000285425329099763,
1730209540239:0.00246993386642007, 0.000814994916882806), dypi = c(16.6, 16.6,
1730209540240:16.6, 16.6, 16.6, 24.5, 24.5, 24.5, 24.5, 24.5, 16.6, 16.6, 16.6,
1730209540240:16.6, 16.6, 34, 34, 34, 34, 34, 11.2, 11.2, 11.2, 11.2, 11.2,
1730209540240:11, 11, 11, 11, 11), `Síld 2013` = c(0L, 0L, 0L, 0L, 0L, 1L,
1730209540241:1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L,
1730209540241:1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L)), row.names = c(NA, -30L), class = "data.frame")
1730209542214:colnames(kornast_organic_tap_dypi) <- c(
1730209542214:"station",
1730209542214:"year",
1730209542215:"grain_20um",
1730209542215:"grain_63um",
1730209542215:"grain_125um",
1730209542215:"grain_250um",
1730209542215:"grain_1000um",
1730209542215:"organic_content",
1730209542216:"organic_sd",
1730209542216:"depth",
1730209542216:"herring_mortality"
1730209542216:)
1730209578551:kornast_organic_tap_dypi
1730209673054:(kornast_organic_tap_dypi)str
1730209677677:str(kornast_organic_tap_dypi)
1730210083478:saveRDS(sediment_env_data, file = "data/raw/sediment_env_data.rds")
1730210087913:# Sediment data
1730210087914:sediment_env_data <- structure(list(station = c("A7", "A7", "A7", "A7", "A7", "B5", "B5",
1730210087914:"B5", "B5", "B5", "B8", "B8", "B8", "B8", "B8", "C4", "C4", "C4",
1730210087914:"C4", "C4", "E3", "E3", "E3", "E3", "E3", "E4", "E4", "E4", "E4",
1730210087914:"E4"), year = c("2013", "2014", "2015", "2016", "2017", "2013",
1730210087914:"2014", "2015", "2016", "2017", "2013", "2014", "2015", "2016",
1730210087915:"2017", "2013", "2014", "2015", "2016", "2017", "2013", "2014",
1730210087915:"2015", "2016", "2017", "2013", "2014", "2015", "2016", "2017"
1730210087915:), `grain_20um` = c(0.628496042216359, 0.343339587242026, 0.453474676089517,
1730210087915:0.390734265734266, 0.643465909090909, 0.386002120890774, 0.321766561514196,
1730210087915:0.386792452830189, 0.19559585492228, 0.546637744034707, 0.592529025744573,
1730210087916:0.515981735159817, 0.369913686806412, 0.424997544719429, 0.221565731166913,
1730210087916:0.332928794917986, 0.153116531165312, 0.234791889007471, 0.190773067331671,
1730210087916:0.152190051967335, 0.385025817555938, 0.211453744493392, 0.157303370786517,
1730210087916:0.0827048768225239, 0.247269116186693, 0.426682936750051, 0.406354515050167,
1730210087916:0.214331413947537, 0.0125582337451894, 0.286830357142857), `grain_63um` = c(0.350395778364116,
1730210087917:0.24577861163227, 0.215547703180212, 0.215909090909091, 0.151988636363636,
1730210087917:0.52661717921527, 0.342271293375394, 0.304245283018868, 0.348445595854922,
1730210087917:0.31236442516269, 0.317491166077739, 0.23972602739726, 0.276202219482121,
1730210087917:0.278886610994081, 0.282127031019202, 0.306115483075756, 0.276422764227642,
1730210087918:0.257203842049093, 0.17643391521197, 0.197475872308834, 0.379173838209983,
1730210087918:0.177679882525698, 0.143392188336009, 0.0935143288084465, 0.200595829195631,
1730210087918:0.438071995118975, 0.29933110367893, 0.211772232885477, 0.0256734859226251,
1730210087918:0.266741071428571), `grain_125um` = c(0.0100263852242744, 0.315196998123827,
1730210087919:0.267373380447585, 0.284965034965035, 0.177556818181818, 0.0752916224814422,
1730210087919:0.32807570977918, 0.295990566037736, 0.399611398963731, 0.134490238611714,
1730210087919:0.0261736496718829, 0.237442922374429, 0.327990135635019, 0.240590007791825,
1730210087919:0.370753323485968, 0.319370437091116, 0.485094850948509, 0.44076840981857,
1730210087920:0.350997506234414, 0.528582034149963, 0.207194492254733, 0.281938325991189,
1730210087920:0.173354735152488, 0.283810960281549, 0.201588877855015, 0.104535285743339,
1730210087920:0.249163879598662, 0.19065898912348, 0.0339781243670245, 0.280133928571429
1730210087920:), `grain_250um` = c(0.0058047493403694, 0.0956848030018762, 0.0459363957597173,
1730210087921:0.0734265734265734, 0.00852272727272727, 0.00742311770943797,
1730210087921:0.00788643533123028, 0.0129716981132075, 0.0518134715025907,
1730210087921:0.00650759219088937, 0.0553003533568905, 0.00684931506849315,
1730210087922:0.0135635018495684, 0.0384999321551487, 0.0782865583456425, 0.0337347112923107,
1730210087922:0.0569105691056911, 0.0448239060832444, 0.180174563591022, 0.0972531551596139,
1730210087922:0.0236660929432013, 0.0558002936857562, 0.0358480470840021, 0.0834590246354952,
1730210087923:0.041708043694141, 0.0213544844417328, 0.0133779264214047, 0.0300703774792067,
1730210087923:0.00212679765039498, 0.0223214285714286), `grain_1000um` = c(0.00527704485488127,
1730210087923:0, 0.0176678445229682, 0.034965034965035, 0.0184659090909091,
1730210087923:0.00466595970307529, 0, 0, 0.00453367875647668, 0, 0.00850580514891469,
1730210087924:0, 0.0123304562268804, 0.0170259043395175, 0.0472673559822747,
1730210087924:0.00785057362283114, 0.0284552845528455, 0.0224119530416222,
1730210087924:0.101620947630923, 0.0244988864142539, 0.00493975903614458, 0.273127753303965,
1730210087925:0.490101658640984, 0.456510809451986, 0.30883813306852, 0.00935529794590197,
1730210087925:0.0317725752508361, 0.353166986564299, 0.925663358314766, 0.143973214285714
1730210087925:), organic_content = c(0.181515414138913, 0.117573294968505, 0.118865354458575,
1730210087926:0.10855175801997, 0.144215480661367, 0.174146595044186, 0.119127447894571,
1730210087926:0.124407020872865, 0.105198658268468, 0.115848718019756, 0.178503108560497,
1730210087927:0.12940849965294, 0.117179453375411, 0.111245191819955, 0.116370341491164,
1730210087927:0.142787808192584, 0.113006923837784, 0.132290387475618, 0.0969106601341345,
1730210087928:0.10220582768636, 0.215412621359223, 0.101006035443262, 0.090402518790167,
1730210087928:0.0885715142546809, 0.0796504565039956, 0.135196812364163, 0.126232974506719,
1730210087929:0.103923910552975, 0.092065868263473, 0.101525813669742), organic_sd = c(0.00544534378975074,
1730210087929:0.000976059208807937, 0.00105675176697187, 0.00129099190584701,
1730210087929:0.010280862872346, 0.00245055200549895, 0.000348361831630225,
1730210087930:0.00083859912379809, 0.001823914492673, 0.000495255850064288,
1730210087930:0.010990421037094, 0.000600243017338078, 0.00277626938387639,
1730210087931:0.000420021748488332, 0.0014744503375705, 0.0199049666612412,
1730210087931:0.00034970661779751, 0.00314117917812511, 0.000215745910008022,
1730210087931:0.000435189983246506, 0.127862755335917, 0.000119010118739825,
1730210087932:0.00226462935582809, 0.00132600786385895, 0.00243540659124004,
1730210087932:0.0118334943096431, 0.000449569977393725, 0.000285425329099763,
1730210087932:0.00246993386642007, 0.000814994916882806), depth = c(16.6, 16.6,
1730210087933:16.6, 16.6, 16.6, 24.5, 24.5, 24.5, 24.5, 24.5, 16.6, 16.6, 16.6,
1730210087933:16.6, 16.6, 34, 34, 34, 34, 34, 11.2, 11.2, 11.2, 11.2, 11.2,
1730210087934:11, 11, 11, 11, 11), `rotten_herring` = c(0L, 0L, 0L, 0L, 0L, 1L,
1730210087934:1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L,
1730210087935:1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L)), row.names = c(NA, -30L), class = "data.frame")
1730210099190:saveRDS(sediment_env_data, file = "sediment_env_data.rds")
1730210103384:saveRDS(sediment_env_data, file = "data/raw/sediment_env_data.rds")
1730210193504:# Sediment data
1730210193504:sediment_env_data <- readRDS("data/raw/sediment_env_data.rds")
1730210205384:str(sediment_env_data)
1730210276863:# Load necessary packages
1730210276863:library(dplyr)
1730210276863:library(ggplot2)
1730210276864:library(reshape2)
1730210276864:# Assuming pairwise_results_df is a data frame with PERMANOVA results (e.g., R2 and F values) per year pair
1730210276864:# Example: pairwise_results_df <- data.frame(year_pair = ..., R2 = ..., F_value = ...)
1730210276865:# Merge pairwise_results_df with sediment_env_data to enable correlation
1730210276865:# Here, we assume sediment_env_data has TOC and grain size columns per station and year
1730210276865:# Group by station and year to find correlations with R2 and F statistics from PERMANOVA results
1730210276865:sediment_env_data_grouped <- sediment_env_data %>%
1730210276865:group_by(station, year) %>%
1730210276866:summarise(across(c(grain_20um, grain_63um, grain_125um, grain_250um, grain_1000um, organic_content), mean, na.rm = TRUE))
1730210277269:# Calculate correlations between environmental variables and PERMANOVA results
1730210277269:correlations <- data.frame(
1730210277270:variable = c("grain_20um", "grain_63um", "grain_125um", "grain_250um", "grain_1000um", "organic_content"),
1730210277270:R2_corr = sapply(c("grain_20um", "grain_63um", "grain_125um", "grain_250um", "grain_1000um", "organic_content"),
1730210277270:function(var) cor(sediment_env_data_grouped[[var]], pairwise_results_df$R2, use = "complete.obs")),
1730210277270:F_corr = sapply(c("grain_20um", "grain_63um", "grain_125um", "grain_250um", "grain_1000um", "organic_content"),
1730210277270:function(var) cor(sediment_env_data_grouped[[var]], pairwise_results_df$F_value, use = "complete.obs"))
1730210277270:)
1730210336816:# PERMANOVA Analysis with improvements
1730210336816:# Load required packages
1730210336817:library(vegan)
1730210336817:library(tidyr)
1730210336817:# Prepare data for PERMANOVA
1730210336818:species_matrix <- df %>%
1730210336818:select(station, year, species, adjusted_density) %>%
1730210336818:pivot_wider(
1730210336818:names_from = species,
1730210336818:values_from = adjusted_density,
1730210336819:values_fill = 0
1730210336819:)
1730210336829:# Save station and year for model
1730210336829:env_data <- species_matrix %>%
1730210336829:select(station, year)
1730210336831:# Convert to matrix for analysis
1730210336832:species_matrix <- species_matrix %>%
1730210336832:select(-station, -year) %>%
1730210336832:as.matrix()
1730210336835:# Consider these modifications:
1730210336835:# 1. Add data transformation
1730210336835:species_matrix_transformed <- sqrt(species_matrix)  # or log1p(species_matrix)
1730210336835:# 2. Separate temporal analysis
1730210336835:permanova_temporal <- adonis2(species_matrix_transformed ~ year,
1730210336836:data = env_data,
1730210336836:permutations = 999,
1730210336836:method = "bray")
1730210336864:# 3. Add pairwise comparisons between years
1730210336864:years <- unique(env_data$year)
1730210336864:pairwise_results <- list()
1730210336864:for(i in 1:(length(years)-1)) {
1730210336864:for(j in (i+1):length(years)) {
1730210336865:year_subset <- env_data$year %in% c(years[i], years[j])
1730210336865:pair_test <- adonis2(species_matrix_transformed[year_subset,] ~
1730210336865:env_data$year[year_subset],
1730210336865:permutations = 999,
1730210336865:method = "bray")
1730210336865:pairwise_results[[paste(years[i], years[j])]] <- pair_test
1730210336865:}
1730210336865:}
1730210338673:# Load necessary packages
1730210338673:library(dplyr)
1730210338673:library(ggplot2)
1730210338674:library(reshape2)
1730210338674:# Assuming pairwise_results_df is a data frame with PERMANOVA results (e.g., R2 and F values) per year pair
1730210338674:# Example: pairwise_results_df <- data.frame(year_pair = ..., R2 = ..., F_value = ...)
1730210338675:# Merge pairwise_results_df with sediment_env_data to enable correlation
1730210338675:# Here, we assume sediment_env_data has TOC and grain size columns per station and year
1730210338675:# Group by station and year to find correlations with R2 and F statistics from PERMANOVA results
1730210338675:sediment_env_data_grouped <- sediment_env_data %>%
1730210338675:group_by(station, year) %>%
1730210338676:summarise(across(c(grain_20um, grain_63um, grain_125um, grain_250um, grain_1000um, organic_content), mean, na.rm = TRUE))
1730210338810:# Calculate correlations between environmental variables and PERMANOVA results
1730210338810:correlations <- data.frame(
1730210338810:variable = c("grain_20um", "grain_63um", "grain_125um", "grain_250um", "grain_1000um", "organic_content"),
1730210338810:R2_corr = sapply(c("grain_20um", "grain_63um", "grain_125um", "grain_250um", "grain_1000um", "organic_content"),
1730210338810:function(var) cor(sediment_env_data_grouped[[var]], pairwise_results_df$R2, use = "complete.obs")),
1730210338810:F_corr = sapply(c("grain_20um", "grain_63um", "grain_125um", "grain_250um", "grain_1000um", "organic_content"),
1730210338810:function(var) cor(sediment_env_data_grouped[[var]], pairwise_results_df$F_value, use = "complete.obs"))
1730210338811:)
1730210397255:# PERMANOVA Analysis with improvements
1730210397256:# Load required packages
1730210397256:library(vegan)
1730210397256:library(tidyr)
1730210397257:# Prepare data for PERMANOVA
1730210397257:species_matrix <- df %>%
1730210397257:select(station, year, species, adjusted_density) %>%
1730210397258:pivot_wider(
1730210397258:names_from = species,
1730210397258:values_from = adjusted_density,
1730210397258:values_fill = 0
1730210397258:)
1730210397267:# Save station and year for model
1730210397267:env_data <- species_matrix %>%
1730210397267:select(station, year)
1730210397269:# Convert to matrix for analysis
1730210397269:species_matrix <- species_matrix %>%
1730210397270:select(-station, -year) %>%
1730210397270:as.matrix()
1730210397273:# Consider these modifications:
1730210397274:# 1. Add data transformation
1730210397274:species_matrix_transformed <- sqrt(species_matrix)  # or log1p(species_matrix)
1730210397274:# 2. Separate temporal analysis
1730210397274:permanova_temporal <- adonis2(species_matrix_transformed ~ year,
1730210397274:data = env_data,
1730210397274:permutations = 999,
1730210397275:method = "bray")
1730210397301:# 3. Add pairwise comparisons between years
1730210397301:years <- unique(env_data$year)
1730210397301:pairwise_results <- list()
1730210397301:for(i in 1:(length(years)-1)) {
1730210397301:for(j in (i+1):length(years)) {
1730210397301:year_subset <- env_data$year %in% c(years[i], years[j])
1730210397301:pair_test <- adonis2(species_matrix_transformed[year_subset,] ~
1730210397301:env_data$year[year_subset],
1730210397301:permutations = 999,
1730210397302:method = "bray")
1730210397302:pairwise_results[[paste(years[i], years[j])]] <- pair_test
1730210397302:}
1730210397302:}
1730210506349:# Convert pairwise_results to a data frame
1730210506350:pairwise_results_df <- do.call(rbind, lapply(names(pairwise_results), function(name) {
1730210506350:data.frame(
1730210506350:year_pair = name,
1730210506350:R2 = pairwise_results[[name]]$aov.tab$R2[1],
1730210506350:F_value = pairwise_results[[name]]$aov.tab$F.Model[1],
1730210506351:p_value = pairwise_results[[name]]$aov.tab$`Pr(>F)`[1]
1730210506351:)
1730210506351:}))
1730210783462:str(df_result)
1730210802445:str(sediment_env_data)
1730211399382:wide_species <- df_result %>% pivot_wider(names_from = species, values_from = adjusted_density, values_fill = 0)
1730211403172:wide_species
1730211415684:str(wide_species )
1730211431951:sediment_env_data$year <- as.numeric(sediment_env_data$year)
1730211446886:merged_data <- merge(wide_species, sediment_env_data, by = c("station", "year"))
1730211450581:merged_data
1730211459430:perma_global <- adonis2(as.matrix(merged_data[, species_columns]) ~ year, data = merged_data, method = "bray")
1730211497368:species_columns <- setdiff(names(merged_data), c("station", "year", "grain_20um", "grain_63um", "grain_125um", "grain_250um", "grain_1000um", "organic_content", "organic_sd", "depth", "rotten_herring"))
1730211507136:perma_global <- adonis2(as.matrix(merged_data[, species_columns]) ~ year, data = merged_data, method = "bray")
1730211512198:perma_global
1730211626224:for (i in 1:(length(years) - 1)) {
1730211626224:for (j in (i + 1):length(years)) {
1730211626224:subset_data <- merged_data[merged_data$year %in% c(years[i], years[j]), ]
1730211626224:perma_pair <- adonis2(as.matrix(subset_data[, species_columns]) ~ year, data = subset_data, method = "bray")
1730211626225:pairwise_results[[paste(years[i], years[j], sep = "-")]] <- perma_pair
1730211626225:}
1730211626225:}
1730211627973:```
1730211731327:unique(merged_data$year)
1730211741917:# Initialize pairwise_results as an empty list
1730211741918:pairwise_results <- list()
1730211741918:# Loop over unique year pairs
1730211741918:for (i in 1:(length(years) - 1)) {
1730211741918:for (j in (i + 1):length(years)) {
1730211741918:# Subset data for the two years being compared
1730211741919:subset_data <- merged_data[merged_data$year %in% c(years[i], years[j]), ]
1730211741919:# Run PERMANOVA if there are sufficient data points for each year
1730211741919:if (nrow(subset_data) > 1) { # Ensure subset_data has multiple rows
1730211741919:perma_pair <- adonis2(as.matrix(subset_data[, species_columns]) ~ year,
1730211741919:data = subset_data, method = "bray")
1730211741919:# Store result with labeled names
1730211741919:pairwise_results[[paste0(years[i], "-", years[j])]] <- perma_pair
1730211741920:}
1730211741920:}
1730211741920:}
1730211761998:str(pairwise_results)
1730211809894:pairwise_results_df <- data.frame( Year_Comparison = names(pairwise_results), R2 = sapply(pairwise_results, function(x) x$aov.tab$R2[1]), F_value = sapply(pairwise_results, function(x) x$aov.tab$F[1]), p_value = sapply(pairwise_results, function(x) x$aov.tab$`Pr(>F)`[1]) )
1730211847526:# Safely extract values with fallback to NA
1730211847527:pairwise_summary <- data.frame(
1730211847527:Year_Comparison = names(pairwise_results),
1730211847527:R2 = sapply(pairwise_results, function(x) tryCatch(x$R2[1], error = function(e) NA)),
1730211847527:F_value = sapply(pairwise_results, function(x) tryCatch(x$F[1], error = function(e) NA)),
1730211847528:p_value = sapply(pairwise_results, function(x) tryCatch(x$`Pr(>F)`[1], error = function(e) NA))
1730211847528:)
1730211847537:# Display summary
1730211847537:pairwise_summary
1730211933976:merged_data
1730211965088:wide_species <- df_result %>% filter(year != 1999) %>% pivot_wider(names_from = species, values_from = adjusted_density, values_fill = 0)
1730211966148:sediment_env_data$year <- as.numeric(sediment_env_data$year)
1730211966506:merged_data <- merge(wide_species, sediment_env_data, by = c("station", "year"))
1730211966840:species_columns <- setdiff(names(merged_data), c("station", "year", "grain_20um", "grain_63um", "grain_125um", "grain_250um", "grain_1000um", "organic_content", "organic_sd", "depth", "rotten_herring"))
1730211967241:perma_global <- adonis2(as.matrix(merged_data[, species_columns]) ~ year, data = merged_data, method = "bray")
1730211971301:# Initialize pairwise_results as an empty list
1730211971301:pairwise_results <- list()
1730211971952:# Loop over unique year pairs
1730211971952:for (i in 1:(length(years) - 1)) {
1730211971952:for (j in (i + 1):length(years)) {
1730211971952:# Subset data for the two years being compared
1730211971953:subset_data <- merged_data[merged_data$year %in% c(years[i], years[j]), ]
1730211971953:# Run PERMANOVA if there are sufficient data points for each year
1730211971953:if (nrow(subset_data) > 1) { # Ensure subset_data has multiple rows
1730211971953:perma_pair <- adonis2(as.matrix(subset_data[, species_columns]) ~ year,
1730211971953:data = subset_data, method = "bray")
1730211971953:# Store result with labeled names
1730211971954:pairwise_results[[paste0(years[i], "-", years[j])]] <- perma_pair
1730211971954:}
1730211971954:}
1730211971954:}
1730212014696:pairwise_results_df <- data.frame( Year_Comparison = names(pairwise_results), R2 = sapply(pairwise_results, function(x) x$aov.tab$R2[1]), F_value = sapply(pairwise_results, function(x) x$aov.tab$F[1]), p_value = sapply(pairwise_results, function(x) x$aov.tab$`Pr(>F)`[1]) )
1730212037806:names(pairwise_results)
1730212067062:sediment_env_data$year
1730212113383:length(years)
1730212244142:unique(merged_data$year)
1730212257311:length(merged_data$year)
1730212269271:# Loop over unique year pairs
1730212269272:for (i in 1:(length(unique(merged_data$year)) - 1)) {
1730212269272:for (j in (i + 1):length(years)) {
1730212269272:# Subset data for the two years being compared
1730212269272:subset_data <- merged_data[merged_data$year %in% c(years[i], years[j]), ]
1730212269272:# Run PERMANOVA if there are sufficient data points for each year
1730212269273:if (nrow(subset_data) > 1) { # Ensure subset_data has multiple rows
1730212269273:perma_pair <- adonis2(as.matrix(subset_data[, species_columns]) ~ year,
1730212269273:data = subset_data, method = "bray")
1730212269273:# Store result with labeled names
1730212269273:pairwise_results[[paste0(years[i], "-", years[j])]] <- perma_pair
1730212269273:}
1730212269274:}
1730212269274:}
1730212275310:pairwise_results
1730212290040:wide_species <- df_result %>% filter(year != 1999) %>% pivot_wider(names_from = species, values_from = adjusted_density, values_fill = 0)
1730212353751:wide_species
1730212363583:years <- unique(wide_species$year)
1730212364398:# Loop over unique year pairs
1730212364398:for (i in 1:(length(years) - 1)) {
1730212364398:for (j in (i + 1):length(years)) {
1730212364398:# Subset data for the two years being compared
1730212364399:subset_data <- merged_data[merged_data$year %in% c(years[i], years[j]), ]
1730212364399:# Run PERMANOVA if there are sufficient data points for each year
1730212364399:if (nrow(subset_data) > 1) { # Ensure subset_data has multiple rows
1730212364399:perma_pair <- adonis2(as.matrix(subset_data[, species_columns]) ~ year,
1730212364399:data = subset_data, method = "bray")
1730212364399:# Store result with labeled names
1730212364400:pairwise_results[[paste0(years[i], "-", years[j])]] <- perma_pair
1730212364400:}
1730212364400:}
1730212364400:}
1730212383878:names(pairwise_results)
1730212394102:years
1730212404399:merged_data$year
1730212414375:years
1730212428183:wide_species <- df_result %>% filter(year != 1999) %>% pivot_wider(names_from = species, values_from = adjusted_density, values_fill = 0)
1730212428207:sediment_env_data$year <- as.numeric(sediment_env_data$year)
1730212428207:merged_data <- merge(wide_species, sediment_env_data, by = c("station", "year"))
1730212428214:species_columns <- setdiff(names(merged_data), c("station", "year", "grain_20um", "grain_63um", "grain_125um", "grain_250um", "grain_1000um", "organic_content", "organic_sd", "depth", "rotten_herring"))
1730212428214:perma_global <- adonis2(as.matrix(merged_data[, species_columns]) ~ year, data = merged_data, method = "bray")
1730212429938:# Initialize pairwise_results as an empty list
1730212429938:pairwise_results <- list()
1730212429938:years <- unique(wide_species$year)
1730212429939:# Loop over unique year pairs
1730212429939:for (i in 1:(length(years) - 1)) {
1730212429939:for (j in (i + 1):length(years)) {
1730212429939:# Subset data for the two years being compared
1730212429939:subset_data <- merged_data[merged_data$year %in% c(years[i], years[j]), ]
1730212429939:# Run PERMANOVA if there are sufficient data points for each year
1730212429940:if (nrow(subset_data) > 1) { # Ensure subset_data has multiple rows
1730212429940:perma_pair <- adonis2(as.matrix(subset_data[, species_columns]) ~ year,
1730212429940:data = subset_data, method = "bray")
1730212429940:# Store result with labeled names
1730212429940:pairwise_results[[paste0(years[i], "-", years[j])]] <- perma_pair
1730212429940:}
1730212429940:}
1730212429941:}
1730212436808:names(pairwise_results)
1730212448903:pairwise_results_df <- data.frame( Year_Comparison = names(pairwise_results), R2 = sapply(pairwise_results, function(x) x$aov.tab$R2[1]), F_value = sapply(pairwise_results, function(x) x$aov.tab$F[1]), p_value = sapply(pairwise_results, function(x) x$aov.tab$`Pr(>F)`[1]) )
1730212471542:sapply(pairwise_results, function(x) x$aov.tab$R2[1])
1730212506886:str(pairwise_results[[1]])
1730212519592:# Extracting values from each result with error handling
1730212519592:pairwise_summary <- data.frame(
1730212519592:Year_Comparison = names(pairwise_results),
1730212519593:R2 = sapply(pairwise_results, function(x) tryCatch(x$R2[1], error = function(e) NA)),
1730212519593:F_value = sapply(pairwise_results, function(x) tryCatch(x$F[1], error = function(e) NA)),
1730212519593:p_value = sapply(pairwise_results, function(x) tryCatch(x$`Pr(>F)`[1], error = function(e) NA))
1730212519593:)
1730212524733:pairwise_summary
1730212573294:pairwise_results_df <- data.frame( Year_Comparison = names(pairwise_results), R2 = sapply(pairwise_results, function(x) x$aov.tab$R2[1]), F_value = sapply(pairwise_results, function(x) x$aov.tab$F[1]), p_value = sapply(pairwise_results, function(x) x$aov.tab$`Pr(>F)`[1]) )
1730212601823:pairwise_results_df <- data.frame(
1730212601824:Year_Comparison = names(pairwise_results),
1730212601824:R2 = sapply(pairwise_results, function(x) x$R2[1]),
1730212601824:F_value = sapply(pairwise_results, function(x) x$F[1]),
1730212601824:p_value = sapply(pairwise_results, function(x) x$`Pr(>F)`[1])
1730212601824:)
1730212604942:pairwise_results_df
1730212655521:cor_results <- cor(pairwise_results_df[, c("R2", "F_value")], sediment_env_data[, c("grain_20um", "organic_content")])
1730216841249:shapiro.test(sediment_env_data$organic_content)
1730216841266:leveneTest(organic_content ~ year, data = sediment_env_data)
1730216908120:install.packages("rstatix")
1730216954903:library(rstatix)
1730216957536:shapiro.test(sediment_env_data$organic_content)
1730216957537:leveneTest(organic_content ~ year, data = sediment_env_data)
1730216990696:library(car)
1730216990741:# Now run the Levene's test
1730216990741:leveneTest(organic_content ~ year, data = sediment_env_data)
1730217190073:sediment_env_data$year <- as.factor(sediment_env_data$year)
1730217191145:leveneTest(organic_content ~ year, data = sediment_env_data)
1730217193228:# Let's do all assumption checks:
1730217193228:# 1. Shapiro-Wilk test for normality
1730217193229:shapiro.test(sediment_env_data$organic_content)
1730217204736:ggplot(sediment_env_data, aes(x = year, y = organic_content)) +
1730217204736:geom_boxplot() +
1730217204736:theme_minimal() +
1730217204737:labs(title = "Organic Content Distribution by Year",
1730217204737:x = "Year",
1730217204737:y = "Organic Content")
1730217205524:# Q-Q plot
1730217205524:ggplot(sediment_env_data, aes(sample = organic_content)) +
1730217205524:stat_qq() +
1730217205524:stat_qq_line() +
1730217205524:theme_minimal() +
1730217205524:labs(title = "Q-Q Plot of Organic Content")
1730217206010:# 3. Descriptive statistics by year
1730217206011:tapply(sediment_env_data$organic_content,
1730217206011:sediment_env_data$year,
1730217206011:function(x) c(mean = mean(x), sd = sd(x), n = length(x)))
1730276814780:# Kruskal-Wallis test
1730276814780:kruskal.test(organic_content ~ year, data = sediment_env_data)
1730276814787:# Post-hoc Dunn's test
1730276814787:# Install if needed: install.packages("dunn.test")
1730276814787:library(dunn.test)
1730276917956:install.packages("dunn.test")
1730276931819:# Kruskal-Wallis test
1730276931819:kruskal.test(organic_content ~ year, data = sediment_env_data)
1730276931822:# Post-hoc Dunn's test
1730276931822:# Install if needed: install.packages("dunn.test")
1730276931823:library(dunn.test)
1730276931833:dunn.test(sediment_env_data$organic_content,
1730276931833:sediment_env_data$year,
1730276931833:method="bonferroni")
1730276931841:# Create publication-quality visualization
1730276931841:library(ggplot2)
1730276931841:ggplot(sediment_env_data, aes(x = year, y = organic_content)) +
1730276931841:geom_boxplot(fill = "lightgray") +
1730276931842:geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
1730276931842:theme_minimal() +
1730276931842:labs(x = "Year",
1730276931842:y = "Organic Content (proportion)",
1730276931842:title = "Temporal Changes in Sediment Organic Content") +
1730276931842:theme(text = element_text(size = 12))
1730279347703:sediment_env_data
1730279376342:sediment_env_data$organic_content
1730279619164:table(sediment_env_data$year)
1730279639272:# Kruskal-Wallis test
1730279639272:kruskal.test(organic_content ~ year, data = sediment_env_data)
1730279639275:# Post-hoc Dunn's test
1730279639275:# Install if needed: install.packages("dunn.test")
1730279639275:library(dunn.test)
1730279639276:dunn.test(sediment_env_data$organic_content,
1730279639276:sediment_env_data$year,
1730279639276:method="bonferroni")
1730279639282:# Create publication-quality visualization
1730279639282:library(ggplot2)
1730279639282:ggplot(sediment_env_data, aes(x = year, y = organic_content)) +
1730279639282:geom_boxplot(fill = "lightgray") +
1730279639283:geom_point(position = position_jitter(width = 0.2), alpha = 0.5) +
1730279639283:theme_minimal() +
1730279639283:labs(x = "Year",
1730279639283:y = "Organic Content (proportion)",
1730279639283:title = "Temporal Changes in Sediment Organic Content") +
1730279639283:theme(text = element_text(size = 12))
1730279693501:kruskal.test(organic_content ~ year, data = sediment_env_data)
1730280163960:sediment_env_data$station <- as.factor(sediment_env_data$station)
1730280163960:# 2. Check normality within stations
1730280163961:# Shapiro-Wilk test for each station
1730280163961:by(sediment_env_data$organic_content, sediment_env_data$station, shapiro.test)
1730280201638:ggplot(sediment_env_data, aes(x = station, y = organic_content)) +
1730280201639:geom_boxplot() +
1730280201639:theme_minimal() +
1730280201639:labs(title = "Organic Content Distribution by Station",
1730280201639:x = "Station",
1730280201639:y = "Organic Content")
1730280201891:# 4. Check homogeneity of variance
1730280201891:leveneTest(organic_content ~ station, data = sediment_env_data)
1730280201900:# 5. Descriptive statistics by station
1730280201900:tapply(sediment_env_data$organic_content,
1730280201900:sediment_env_data$station,
1730280201901:function(x) c(mean = mean(x), sd = sd(x), n = length(x)))
1730280238440:kruskal.test(organic_content ~ station, data = sediment_env_data)
1730280238452:# If significant, follow with Dunn's test
1730280238453:dunn.test(sediment_env_data$organic_content,
1730280238453:sediment_env_data$station,
1730280238453:method="bonferroni")
1730372815761:str(result)
1730372836149:DT::datatable()result
1730372844564:install.packages('DT')
1730372866671:DT::datatable()result
1730372870613:DT::datatable(result)
1730374267268:DT::datatable(df)
1730374785346:KolgrTaxa <- read_csv(file("data/raw/KolgrTaxa.csv", encoding = "UTF-8"), na = "empty")
1730374785857:taxa_to_remove <- c(
1730374785857:"Foraminifera",
1730374785858:"Nematoda",
1730374785858:"Cirripedia",
1730374785858:"Porifera",
1730374785858:"Cnidaria",
1730374785858:"Bryozoa",
1730374785858:"Sipuncula",
1730374785858:"Platyhelminthes",
1730374785858:"Nemertea",
1730374785858:"Oligochaeta",
1730374785859:"Ostracoda"
1730374785859:)
1730374785859:# Filter out the specified taxa using if_all()
1730374785859:KolgrTaxa <- KolgrTaxa %>%
1730374785859:filter(if_all(where(is.character), ~ !. %in% taxa_to_remove))
1730374785920:remove_list <- paste(c(
1730374785921:"nýsestir",
1730374785921:"ungviði",
1730374785921:"ungv",
1730374785921:"ungv.",
1730374785921:"juv",
1730374785921:"harpacticoida"
1730374785921:), collapse = '|')
1730374785921:remove_ind <- lapply(strsplit(remove_list , "\\|")[[1]] , \(x) grep(x , KolgrTaxa$gamalt , fixed = T)) |>
1730374785921:unlist() |>
1730374785921:unique()
1730374785925:ekkiungvidi <- KolgrTaxa[-remove_ind,]
1730374785927:jorundur <- ekkiungvidi %>%
1730374785927:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1730374785927:mutate(
1730374785928:Flokkun = case_when(
1730374785928:Flokkun == "Spionida" ~ "Spionidae",
1730374785928:Flokkun == "Terebellides stroemi" ~ "Terebellides stroemii",
1730374785928:Flokkun == "Ampharetinae" ~ "Ampharetidae",
1730374785928:Flokkun == "ostracoda" ~ "Ostracoda",
1730374785928:Flokkun == "Sabellidae" ~ "Sabellida",
1730374785928:Flokkun == "scalibregma inflatum" ~ "Scalibregma inflatum",
1730374785928:Flokkun == "sipunculida" ~ "Sipuncula",
1730374785929:Flokkun == "sipunculidae" ~ "Sipuncula",
1730374785929:Flokkun == "sipunculidea" ~ "Sipuncula",
1730374785929:Flokkun == "Nephtys" ~ "Nephthys",
1730374785929:Flokkun == "Nepthys" ~ "Nephthys",
1730374785929:Artal == "1999" & Flokkun == "Ampharete acutifrons" ~ "Ampharetinae",
1730374785929:Artal == "1999" & Flokkun == "Bivalvia" ~ "NA"        ,
1730374785930:Artal == "2013" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"       ,
1730374785930:Artal == "2013" & Flokkun == "Polynoidae" ~ "Harmothoe extenuata" ,
1730374785930:Artal == "2014" & Flokkun == "Praxillella" ~ "Praxillella praetermissa",
1730374785930:Artal == "2014" & Flokkun == "Syllidae" ~ "Syllis cornuta"             ,
1730374785930:Artal == "2015" & Flokkun == "Syllidae" ~ "Syllis cornuta",
1730374785930:Artal == "2015" & Flokkun == "Mya" ~ "Mya arenaria"        ,
1730374785931:Artal == "2015" & Flokkun == "Mytilidae" ~ "Mytilus edulis",
1730374785931:Artal == "2015" & Flokkun == "Ampharetidae" ~ "NA"          ,
1730374785931:Artal == "2016" & Flokkun == "Aricidea" ~ "Amphitrite cirrata"      ,
1730374785931:Artal == "2016" & Flokkun == "Capitellidae" ~ "Capitella capitata"   ,
1730374785931:Artal == "2016" & Flokkun == "Cirratulidae" ~ "Cirratulus cirratus",
1730374785932:Artal == "2016" & Flokkun == "Cossuridae" ~ "Cossura longocirrata",
1730374785932:Artal == "2016" & Flokkun == "Nephtyidae" ~ "Nephthys"      ,
1730374785932:Artal == "2016" & Flokkun == "Pectinariidae" ~ "Pectinaria koreni"     ,
1730374785932:Artal == "2016" & Flokkun == "Phyllodocida" ~ "Phyllodoce maculata",
1730374785932:Artal == "2016" & Flokkun == "Spio" ~ "Spio filicornis"            ,
1730374785933:Artal == "2016" & Flokkun == "Spionidae" ~ "Spio filicornis",
1730374785933:Artal == "2016" & Flokkun == "Syllidae" ~ "Syllis"           ,
1730374785933:Artal == "2016" & Flokkun == "Cardiidae" ~ "Cardium"          ,
1730374785933:Artal == "2016" & Flokkun == "Cardiidae" ~ "Cardium"           ,
1730374785934:Artal == "2017" & Flokkun == "Mya" ~ "Mya arenaria"  ,
1730374785934:Artal == "2017" & Flokkun == "Maldanidae" ~ "Praxillella praetermissa",
1730374785934:Artal == "1999" & Flokkun == "Ampharetinae" ~ "Ampharetidae",
1730374785934:Artal == "2017" & Flokkun == "Ampharete" ~ "Ampharetidae"    ,
1730374785934:Artal == "2017" & Flokkun == "Ampharete acutifrons" ~ "Ampharetidae",
1730374785935:Artal == "2016" & Flokkun == "Lumbrineridae" ~ "Lumbrineris",
1730374785935:Artal == "2015" & Flokkun == "Pholoe" ~ "Pholoe minuta"      ,
1730374785935:Artal == "2016" & Flokkun == "Pholoe" ~ "Pholoe minuta"       ,
1730374785935:Artal == "2017" & Flokkun == "Pholoe" ~ "Pholoe minuta"        ,
1730374785936:Artal == "1999" & Flokkun == "Musculus discors" ~ "Musculus",
1730374785936:Artal == "2014" & Flokkun == "Mya" ~ "Mya arenaria"          ,
1730374785936:Artal == "2014" & Flokkun == "Mytilus edulis" ~ "Mytilidae",
1730374785936:Artal == "2014" & Flokkun == "Nephtyidae" ~ "Nephthys"       ,
1730374785937:Artal == "2014" & Flokkun == "Amphipoda" ~ "Protomedeia fasciata"    ,
1730374785937:Artal == "2014" & Flokkun == "Tubificidae" ~ "Tubificoides kozloffi",
1730374785937:Artal == "2014" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"     ,
1730374785937:Artal == "2015" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"      ,
1730374785938:Artal == "2015" & Flokkun == "Amphipoda" ~ "Protomedeia fasciata",
1730374785938:Artal == "2016" & Flokkun == "Balanus balanus" ~ "Balanus"       ,
1730374785938:Artal == "2016" & Flokkun == "priapulidae" ~ "Priapulus caudatus" ,
1730374785938:Artal == "2016" & Flokkun == "Priapulidae" ~ "Priapulus caudatus"  ,
1730374785939:Artal == "2017" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"    ,
1730374785939:Artal == "1999" & Flokkun == "Leucon acutirostris" ~ "Cumacea"       ,
1730374785939:Artal == "1999" & Flokkun == "Eudorella emarginata" ~ "Cumacea",
1730374785940:TRUE ~ Flokkun)) %>%
1730374785940:drop_na()
1730374786019:df <- jorundur  %>%
1730374786019:rename(
1730374786019:species = Flokkun,
1730374786019:sample_id = id,
1730374786019:year = Artal,
1730374786020:station = stod,
1730374786020:subdivision = skipting,
1730374786020:count = N,
1730374786020:density = Nu
1730374786020:)
1730374786024:result <- df %>%
1730374786024:# First, apply the subdivision to the count
1730374786024:mutate(adjusted_count = count * subdivision) %>%
1730374786025:# Calculate the correct number of samples and total area for each station-year combination
1730374786025:group_by(station, year) %>%
1730374786025:mutate(
1730374786025:n_samples = n_distinct(sample_id),
1730374786025:grab_area = case_when(
1730374786025:year == 1999 ~ 0.0225,
1730374786025:TRUE ~ 0.04
1730374786025:),
1730374786025:total_area = grab_area * n_samples
1730374786025:) %>%
1730374786025:ungroup() %>%
1730374913677:KolgrTaxa[grepl("Ampharetinae", KolgrTaxa$Flokkun, ignore.case = TRUE), ]
1730374954566:KolgrTaxa[grepl("Ampharetinae", KolgrTaxa$Flokkun, ignore.case = TRUE), c("Class","Species","Flokkun")]
1730374965242:KolgrTaxa[grepl("Ampharetinae", KolgrTaxa$Flokkun, ignore.case = TRUE), c("Class","Species","Flokkun","Year")]
1730374969871:KolgrTaxa[grepl("Ampharetinae", KolgrTaxa$Flokkun, ignore.case = TRUE), c("Class","Species","Flokkun","Artal")]
1730374976751:KolgrTaxa[grepl("Ampharetinae", KolgrTaxa$Flokkun, ignore.case = TRUE), c("Class","Species","Flokkun","Artal","stod")]
1730374984677:KolgrTaxa[grepl("Ampharetinae", KolgrTaxa$Flokkun, ignore.case = TRUE), c("Class","Species","Flokkun","Artal","stod","N")]
1730375008607:jorundur[grepl("Ampharetinae", jorundur$Flokkun, ignore.case = TRUE), c("Class","Species","Flokkun","Artal","stod","N")]
1730375380495:str(KolgrTaxa)
1730375608384:jorundur <- ekkiungvidi %>%
1730375608384:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1730375608385:mutate(
1730375608385:Flokkun = case_when(Artal == "1999" & Flokkun == "Ampharetinae" ~ "Ampharetidae",
1730375608385:TRUE ~ Flokkun)) %>%
1730375608385:drop_na()
1730375613767:jorundur[grepl("Ampharetinae", jorundur$Flokkun, ignore.case = TRUE), c("Class","Species","Flokkun","Artal","stod","N")]
1730375683807:jorundur <- ekkiungvidi %>%
1730375683807:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1730375683807:mutate(
1730375683807:Flokkun = case_when(Flokkun == "Ampharetinae" ~ "Ampharetidae",
1730375683807:Artal == "1999" & Flokkun == "Ampharetinae" ~ "Ampharetidae",
1730375683807:TRUE ~ Flokkun)) %>%
1730375683808:drop_na()
1730375687138:jorundur[grepl("Ampharetinae", jorundur$Flokkun, ignore.case = TRUE), c("Class","Species","Flokkun","Artal","stod","N")]
1730375695479:jorundur <- ekkiungvidi %>%
1730375695480:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1730375695480:mutate(
1730375695480:Flokkun = case_when(
1730375695480:Flokkun == "Spionida" ~ "Spionidae",
1730375695481:Flokkun == "Terebellides stroemi" ~ "Terebellides stroemii",
1730375695481:Flokkun == "Ampharetinae" ~ "Ampharetidae",
1730375695481:Flokkun == "ostracoda" ~ "Ostracoda",
1730375695481:Flokkun == "Sabellidae" ~ "Sabellida",
1730375695482:Flokkun == "scalibregma inflatum" ~ "Scalibregma inflatum",
1730375695482:Flokkun == "sipunculida" ~ "Sipuncula",
1730375695482:Flokkun == "sipunculidae" ~ "Sipuncula",
1730375695482:Flokkun == "sipunculidea" ~ "Sipuncula",
1730375695483:Flokkun == "Nephtys" ~ "Nephthys",
1730375695483:Flokkun == "Nepthys" ~ "Nephthys",
1730375695483:Artal == "1999" & Flokkun == "Ampharete acutifrons" ~ "Ampharetinae",
1730375695483:Artal == "1999" & Flokkun == "Bivalvia" ~ "NA"        ,
1730375695483:Artal == "2013" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"       ,
1730375695484:Artal == "2013" & Flokkun == "Polynoidae" ~ "Harmothoe extenuata" ,
1730375695484:Artal == "2014" & Flokkun == "Praxillella" ~ "Praxillella praetermissa",
1730375695484:Artal == "2014" & Flokkun == "Syllidae" ~ "Syllis cornuta"             ,
1730375695484:Artal == "2015" & Flokkun == "Syllidae" ~ "Syllis cornuta",
1730375695484:Artal == "2015" & Flokkun == "Mya" ~ "Mya arenaria"        ,
1730375695485:Artal == "2015" & Flokkun == "Mytilidae" ~ "Mytilus edulis",
1730375695485:Artal == "2015" & Flokkun == "Ampharetidae" ~ "NA"          ,
1730375695485:Artal == "2016" & Flokkun == "Aricidea" ~ "Amphitrite cirrata"      ,
1730375695485:Artal == "2016" & Flokkun == "Capitellidae" ~ "Capitella capitata"   ,
1730375695486:Artal == "2016" & Flokkun == "Cirratulidae" ~ "Cirratulus cirratus",
1730375695486:Artal == "2016" & Flokkun == "Cossuridae" ~ "Cossura longocirrata",
1730375695486:Artal == "2016" & Flokkun == "Nephtyidae" ~ "Nephthys"      ,
1730375695486:Artal == "2016" & Flokkun == "Pectinariidae" ~ "Pectinaria koreni"     ,
1730375695487:Artal == "2016" & Flokkun == "Phyllodocida" ~ "Phyllodoce maculata",
1730375695487:Artal == "2016" & Flokkun == "Spio" ~ "Spio filicornis"            ,
1730375695487:Artal == "2016" & Flokkun == "Spionidae" ~ "Spio filicornis",
1730375695487:Artal == "2016" & Flokkun == "Syllidae" ~ "Syllis"           ,
1730375695488:Artal == "2016" & Flokkun == "Cardiidae" ~ "Cardium"          ,
1730375695488:Artal == "2016" & Flokkun == "Cardiidae" ~ "Cardium"           ,
1730375695488:Artal == "2017" & Flokkun == "Mya" ~ "Mya arenaria"  ,
1730375695488:Artal == "2017" & Flokkun == "Maldanidae" ~ "Praxillella praetermissa",
1730375695489:Artal == "1999" & Flokkun == "Ampharetinae" ~ "Ampharetidae",
1730375695489:Artal == "2017" & Flokkun == "Ampharete" ~ "Ampharetidae"    ,
1730375695489:Artal == "2017" & Flokkun == "Ampharete acutifrons" ~ "Ampharetidae",
1730375695490:Artal == "2016" & Flokkun == "Lumbrineridae" ~ "Lumbrineris",
1730375695490:Artal == "2015" & Flokkun == "Pholoe" ~ "Pholoe minuta"      ,
1730375695490:Artal == "2016" & Flokkun == "Pholoe" ~ "Pholoe minuta"       ,
1730375695490:Artal == "2017" & Flokkun == "Pholoe" ~ "Pholoe minuta"        ,
1730375695491:Artal == "1999" & Flokkun == "Musculus discors" ~ "Musculus",
1730375695491:Artal == "2014" & Flokkun == "Mya" ~ "Mya arenaria"          ,
1730375695491:Artal == "2014" & Flokkun == "Mytilus edulis" ~ "Mytilidae",
1730375695491:Artal == "2014" & Flokkun == "Nephtyidae" ~ "Nephthys"       ,
1730375695492:Artal == "2014" & Flokkun == "Amphipoda" ~ "Protomedeia fasciata"    ,
1730375695492:Artal == "2014" & Flokkun == "Tubificidae" ~ "Tubificoides kozloffi",
1730375695492:Artal == "2014" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"     ,
1730375695492:Artal == "2015" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"      ,
1730375695493:Artal == "2015" & Flokkun == "Amphipoda" ~ "Protomedeia fasciata",
1730375695493:Artal == "2016" & Flokkun == "Balanus balanus" ~ "Balanus"       ,
1730375695494:Artal == "2016" & Flokkun == "priapulidae" ~ "Priapulus caudatus" ,
1730375695494:Artal == "2016" & Flokkun == "Priapulidae" ~ "Priapulus caudatus"  ,
1730375695494:Artal == "2017" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"    ,
1730375695495:Artal == "1999" & Flokkun == "Leucon acutirostris" ~ "Cumacea"       ,
1730375695495:Artal == "1999" & Flokkun == "Eudorella emarginata" ~ "Cumacea",
1730375695496:TRUE ~ Flokkun)) %>%
1730375695496:drop_na()
1730375699182:jorundur[grepl("Ampharetinae", jorundur$Flokkun, ignore.case = TRUE), c("Class","Species","Flokkun","Artal","stod","N")]
1730375734598:ekkiungvidi[grepl("Ampharetinae", ekkiungvidi$Flokkun, ignore.case = TRUE), c("Class","Species","Flokkun","Artal","stod","N")]
1730376015359:jorundur[grepl("Ampharetinae", jorundur$Flokkun, ignore.case = TRUE), c("Class","Species","Flokkun","Artal","stod","N")]
1730376021136:jorundur <- ekkiungvidi %>%
1730376021136:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1730376021137:mutate(
1730376021137:Flokkun = case_when(Artal == "1999" & Flokkun == "Ampharetinae" ~ "Ampharetidae",
1730376021137:TRUE ~ Flokkun)) %>%
1730376021137:drop_na()
1730376023302:jorundur[grepl("Ampharetinae", jorundur$Flokkun, ignore.case = TRUE), c("Class","Species","Flokkun","Artal","stod","N")]
1730376087844:jorundur <- ekkiungvidi %>%
1730376087844:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1730376087844:mutate(
1730376087844:Flokkun = case_when(
1730376087845:Flokkun == "Spionida" ~ "Spionidae",
1730376087845:Flokkun == "Terebellides stroemi" ~ "Terebellides stroemii",
1730376087845:Flokkun == "Ampharetinae" ~ "Ampharetidae",
1730376087845:Flokkun == "ostracoda" ~ "Ostracoda",
1730376087845:Flokkun == "Sabellidae" ~ "Sabellida",
1730376087845:Flokkun == "scalibregma inflatum" ~ "Scalibregma inflatum",
1730376087846:Flokkun == "sipunculida" ~ "Sipuncula",
1730376087846:Flokkun == "sipunculidae" ~ "Sipuncula",
1730376087846:Flokkun == "sipunculidea" ~ "Sipuncula",
1730376087846:Flokkun == "Nephtys" ~ "Nephthys",
1730376087846:Flokkun == "Nepthys" ~ "Nephthys",
1730376087846:Artal == "1999" & Flokkun == "Ampharete acutifrons" ~ "Ampharetinae",
1730376087846:Artal == "1999" & Flokkun == "Bivalvia" ~ "NA"        ,
1730376087847:Artal == "2013" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"       ,
1730376087847:Artal == "2013" & Flokkun == "Polynoidae" ~ "Harmothoe extenuata" ,
1730376087847:Artal == "2014" & Flokkun == "Praxillella" ~ "Praxillella praetermissa",
1730376087847:Artal == "2014" & Flokkun == "Syllidae" ~ "Syllis cornuta"             ,
1730376087847:Artal == "2015" & Flokkun == "Syllidae" ~ "Syllis cornuta",
1730376087848:Artal == "2015" & Flokkun == "Mya" ~ "Mya arenaria"        ,
1730376087848:Artal == "2015" & Flokkun == "Mytilidae" ~ "Mytilus edulis",
1730376087848:Artal == "2015" & Flokkun == "Ampharetidae" ~ "NA"          ,
1730376087848:Artal == "2016" & Flokkun == "Aricidea" ~ "Amphitrite cirrata"      ,
1730376087848:Artal == "2016" & Flokkun == "Capitellidae" ~ "Capitella capitata"   ,
1730376087849:Artal == "2016" & Flokkun == "Cirratulidae" ~ "Cirratulus cirratus",
1730376087849:Artal == "2016" & Flokkun == "Cossuridae" ~ "Cossura longocirrata",
1730376087849:Artal == "2016" & Flokkun == "Nephtyidae" ~ "Nephthys"      ,
1730376087849:Artal == "2016" & Flokkun == "Pectinariidae" ~ "Pectinaria koreni"     ,
1730376087850:Artal == "2016" & Flokkun == "Phyllodocida" ~ "Phyllodoce maculata",
1730376087850:Artal == "2016" & Flokkun == "Spio" ~ "Spio filicornis"            ,
1730376087850:Artal == "2016" & Flokkun == "Spionidae" ~ "Spio filicornis",
1730376087850:Artal == "2016" & Flokkun == "Syllidae" ~ "Syllis"           ,
1730376087851:Artal == "2016" & Flokkun == "Cardiidae" ~ "Cardium"          ,
1730376087851:Artal == "2016" & Flokkun == "Cardiidae" ~ "Cardium"           ,
1730376087851:Artal == "2017" & Flokkun == "Mya" ~ "Mya arenaria"  ,
1730376087851:Artal == "2017" & Flokkun == "Maldanidae" ~ "Praxillella praetermissa",
1730376087852:Artal == "1999" & Flokkun == "Ampharetinae" ~ "Ampharetidae",
1730376087852:Artal == "2017" & Flokkun == "Ampharete" ~ "Ampharetidae"    ,
1730376087852:Artal == "2017" & Flokkun == "Ampharete acutifrons" ~ "Ampharetidae",
1730376087852:Artal == "2016" & Flokkun == "Lumbrineridae" ~ "Lumbrineris",
1730376087852:Artal == "2015" & Flokkun == "Pholoe" ~ "Pholoe minuta"      ,
1730376087853:Artal == "2016" & Flokkun == "Pholoe" ~ "Pholoe minuta"       ,
1730376087853:Artal == "2017" & Flokkun == "Pholoe" ~ "Pholoe minuta"        ,
1730376087853:Artal == "1999" & Flokkun == "Musculus discors" ~ "Musculus",
1730376087854:Artal == "2014" & Flokkun == "Mya" ~ "Mya arenaria"          ,
1730376087854:Artal == "2014" & Flokkun == "Mytilus edulis" ~ "Mytilidae",
1730376087854:Artal == "2014" & Flokkun == "Nephtyidae" ~ "Nephthys"       ,
1730376087854:Artal == "2014" & Flokkun == "Amphipoda" ~ "Protomedeia fasciata"    ,
1730376087855:Artal == "2014" & Flokkun == "Tubificidae" ~ "Tubificoides kozloffi",
1730376087855:Artal == "2014" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"     ,
1730376087855:Artal == "2015" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"      ,
1730376087855:Artal == "2015" & Flokkun == "Amphipoda" ~ "Protomedeia fasciata",
1730376087856:Artal == "2016" & Flokkun == "Balanus balanus" ~ "Balanus"       ,
1730376087856:Artal == "2016" & Flokkun == "priapulidae" ~ "Priapulus caudatus" ,
1730376087856:Artal == "2016" & Flokkun == "Priapulidae" ~ "Priapulus caudatus"  ,
1730376087856:Artal == "2017" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"    ,
1730376087857:Artal == "1999" & Flokkun == "Leucon acutirostris" ~ "Cumacea"       ,
1730376087857:Artal == "1999" & Flokkun == "Eudorella emarginata" ~ "Cumacea",
1730376087857:TRUE ~ Flokkun)) %>%
1730376087857:drop_na()
1730376090176:jorundur[grepl("Ampharetinae", jorundur$Flokkun, ignore.case = TRUE), c("Class","Species","Flokkun","Artal","stod","N")]
1730385055717:jorundur <- ekkiungvidi %>%
1730385055717:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1730385055717:mutate(
1730385055717:Flokkun = case_when(
1730385055718:Flokkun == "Spionida" ~ "Spionidae",
1730385055718:Flokkun == "Terebellides stroemi" ~ "Terebellides stroemii",
1730385055718:Flokkun == "Ampharetinae" ~ "Ampharetidae",
1730385055718:Flokkun == "ostracoda" ~ "Ostracoda",
1730385055718:Flokkun == "Sabellidae" ~ "Sabellida",
1730385055719:Flokkun == "scalibregma inflatum" ~ "Scalibregma inflatum",
1730385055719:Flokkun == "sipunculida" ~ "Sipuncula",
1730385055719:Flokkun == "sipunculidae" ~ "Sipuncula",
1730385055719:Flokkun == "sipunculidea" ~ "Sipuncula",
1730385055719:Flokkun == "Nephtys" ~ "Nephthys",
1730385055719:Flokkun == "Nepthys" ~ "Nephthys",
1730385055720:Artal == "1999" & Flokkun == "Ampharete acutifrons" ~ "Ampharetidae",
1730385055720:Artal == "1999" & Flokkun == "Bivalvia" ~ "NA"        ,
1730385055720:Artal == "2013" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"       ,
1730385055720:Artal == "2013" & Flokkun == "Polynoidae" ~ "Harmothoe extenuata" ,
1730385055721:Artal == "2014" & Flokkun == "Praxillella" ~ "Praxillella praetermissa",
1730385055721:Artal == "2014" & Flokkun == "Syllidae" ~ "Syllis cornuta"             ,
1730385055721:Artal == "2015" & Flokkun == "Syllidae" ~ "Syllis cornuta",
1730385055722:Artal == "2015" & Flokkun == "Mya" ~ "Mya arenaria"        ,
1730385055722:Artal == "2015" & Flokkun == "Mytilidae" ~ "Mytilus edulis",
1730385055722:Artal == "2015" & Flokkun == "Ampharetidae" ~ "NA"          ,
1730385055722:Artal == "2016" & Flokkun == "Aricidea" ~ "Amphitrite cirrata"      ,
1730385055722:Artal == "2016" & Flokkun == "Capitellidae" ~ "Capitella capitata"   ,
1730385055723:Artal == "2016" & Flokkun == "Cirratulidae" ~ "Cirratulus cirratus",
1730385055723:Artal == "2016" & Flokkun == "Cossuridae" ~ "Cossura longocirrata",
1730385055723:Artal == "2016" & Flokkun == "Nephtyidae" ~ "Nephthys"      ,
1730385055723:Artal == "2016" & Flokkun == "Pectinariidae" ~ "Pectinaria koreni"     ,
1730385055724:Artal == "2016" & Flokkun == "Phyllodocida" ~ "Phyllodoce maculata",
1730385055724:Artal == "2016" & Flokkun == "Spio" ~ "Spio filicornis"            ,
1730385055724:Artal == "2016" & Flokkun == "Spionidae" ~ "Spio filicornis",
1730385055724:Artal == "2016" & Flokkun == "Syllidae" ~ "Syllis"           ,
1730385055724:Artal == "2016" & Flokkun == "Cardiidae" ~ "Cardium"          ,
1730385055725:Artal == "2016" & Flokkun == "Cardiidae" ~ "Cardium"           ,
1730385055725:Artal == "2017" & Flokkun == "Mya" ~ "Mya arenaria"  ,
1730385055725:Artal == "2017" & Flokkun == "Maldanidae" ~ "Praxillella praetermissa",
1730385055725:Artal == "1999" & Flokkun == "Ampharetinae" ~ "Ampharetidae",
1730385055726:Artal == "2017" & Flokkun == "Ampharete" ~ "Ampharetidae"    ,
1730385055726:Artal == "2017" & Flokkun == "Ampharete acutifrons" ~ "Ampharetidae",
1730385055726:Artal == "2016" & Flokkun == "Lumbrineridae" ~ "Lumbrineris",
1730385055726:Artal == "2015" & Flokkun == "Pholoe" ~ "Pholoe minuta"      ,
1730385055727:Artal == "2016" & Flokkun == "Pholoe" ~ "Pholoe minuta"       ,
1730385055727:Artal == "2017" & Flokkun == "Pholoe" ~ "Pholoe minuta"        ,
1730385055727:Artal == "1999" & Flokkun == "Musculus discors" ~ "Musculus",
1730385055727:Artal == "2014" & Flokkun == "Mya" ~ "Mya arenaria"          ,
1730385055728:Artal == "2014" & Flokkun == "Mytilus edulis" ~ "Mytilidae",
1730385055728:Artal == "2014" & Flokkun == "Nephtyidae" ~ "Nephthys"       ,
1730385055728:Artal == "2014" & Flokkun == "Amphipoda" ~ "Protomedeia fasciata"    ,
1730385055728:Artal == "2014" & Flokkun == "Tubificidae" ~ "Tubificoides kozloffi",
1730385055729:Artal == "2014" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"     ,
1730385055729:Artal == "2015" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"      ,
1730385055729:Artal == "2015" & Flokkun == "Amphipoda" ~ "Protomedeia fasciata",
1730385055730:Artal == "2016" & Flokkun == "Balanus balanus" ~ "Balanus"       ,
1730385055730:Artal == "2016" & Flokkun == "priapulidae" ~ "Priapulus caudatus" ,
1730385055730:Artal == "2016" & Flokkun == "Priapulidae" ~ "Priapulus caudatus"  ,
1730385055730:Artal == "2017" & Flokkun == "Harmothoe" ~ "Harmothoe extenuata"    ,
1730385055731:Artal == "1999" & Flokkun == "Leucon acutirostris" ~ "Cumacea"       ,
1730385055731:Artal == "1999" & Flokkun == "Eudorella emarginata" ~ "Cumacea",
1730385055731:TRUE ~ Flokkun)) %>%
1730385055731:drop_na()
1730385061610:jorundur[grepl("Ampharetinae", jorundur$Flokkun, ignore.case = TRUE), c("Class","Species","Flokkun","Artal","stod","N")]
1730386160813:KolgrTaxa <- read_csv(file("data/raw/KolgrTaxa.csv", encoding = "UTF-8"), na = "empty")
1730386167084:taxa_to_remove <- c(
1730386167084:"Foraminifera",
1730386167084:"Nematoda",
1730386167084:"Cirripedia",
1730386167085:"Porifera",
1730386167085:"Cnidaria",
1730386167085:"Bryozoa",
1730386167085:"Sipuncula",
1730386167085:"Platyhelminthes",
1730386167085:"Nemertea",
1730386167086:"Oligochaeta",
1730386167086:"Ostracoda"
1730386167086:)
1730386277940:KolgrTaxa %>%
1730386277940:filter(!if_all(where(is.character), ~ !. %in% taxa_to_remove))
1730386350292:#write.csv(summary_stats, "output/taxa_to_remove", row.names = FALSE)
1730386358923:rass <- KolgrTaxa %>%
1730386358923:filter(!if_all(where(is.character), ~ !. %in% taxa_to_remove))
1730386364635:write.csv(rass, "output/taxa_to_remove", row.names = FALSE)
1730386372220:write.csv(rass, "output/taxa_to_remove.csv", row.names = FALSE)
1730386633668:jorundur[grepl("sipuncul", jorundur$Flokkun, ignore.case = TRUE), c("Class","Species","Flokkun","Artal","stod","N")]
1730449735828:# Filter out the specified taxa using if_all()
1730449735828:KolgrTaxa <- KolgrTaxa %>%
1730449735829:filter(if_all(where(is.character), ~ !. %in% taxa_to_remove))
1730449738020:remove_list <- paste(c(
1730449738020:"nýsestir",
1730449738020:"ungviði",
1730449738020:"ungv",
1730449738020:"ungv.",
1730449738021:"juv",
1730449738021:"harpacticoida"
1730449738021:), collapse = '|')
1730449738810:remove_ind <- lapply(strsplit(remove_list , "\\|")[[1]] , \(x) grep(x , KolgrTaxa$gamalt , fixed = T)) |>
1730449738811:unlist() |>
1730449738811:unique()
1730449741003:ekkiungvidi <- KolgrTaxa[-remove_ind,]
1730449741820:jorundur <- ekkiungvidi %>%
1730449741820:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1730449741820:mutate(
1730449741821:Flokkun = case_when(
1730449741821:# General taxonomic standardization (no year-specific)
1730449741821:str_detect(tolower(Flokkun), "^sipuncul") ~ "Sipuncula",
1730449741821:tolower(Flokkun) == "ostracoda" ~ "Ostracoda",
1730449741821:tolower(Flokkun) == "terebellides stroemi" ~ "Terebellides stroemii",
1730449741821:# 1999 specific matches
1730449741821:Artal == "1999" & tolower(Flokkun) == "ampharete acutifrons" ~ "Ampharetidae",
1730449741822:Artal == "1999" & tolower(Flokkun) == "bivalvia" ~ "NA",
1730449741822:Artal == "1999" & tolower(Flokkun) == "leucon acutirostris" ~ "Cumacea",
1730449741822:Artal == "1999" & tolower(Flokkun) == "eudorella emarginata" ~ "Cumacea",
1730449741822:Artal == "1999" & tolower(Flokkun) == "musculus discors" ~ "Musculus",
1730449741822:# 2013 specific matches
1730449741823:Artal == "2013" & tolower(Flokkun) %in% c("harmothoe", "polynoidae") ~ "Harmothoe extenuata",
1730449741823:Artal == "2013" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730449741823:# 2014 specific matches
1730449741823:Artal == "2014" & tolower(Flokkun) == "ampharete acutifrons" ~ "Ampharetidae",
1730449741824:Artal == "2014" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730449741824:Artal == "2014" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730449741824:Artal == "2014" & tolower(Flokkun) == "caprellidae" ~ "Caprella septemtrionalis",
1730449741824:Artal == "2014" & tolower(Flokkun) == "praxillella" ~ "Praxillella praetermissa",
1730449741824:Artal == "2014" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1730449741825:Artal == "2014" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730449741825:Artal == "2014" & tolower(Flokkun) == "mytilus edulis" ~ "Mytilidae",
1730449741825:Artal == "2014" & tolower(Flokkun) == "nephtyidae" ~ "Nephthys",
1730449741825:Artal == "2014" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1730449741826:Artal == "2014" & tolower(Flokkun) == "tubificidae" ~ "Tubificoides kozloffi",
1730449741826:Artal == "2014" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730449741826:# 2015 specific matches
1730449741827:Artal == "2015" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730449741827:Artal == "2015" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730449741827:Artal == "2015" & tolower(Flokkun) == "crenella" ~ "Crenella decussata",
1730449741827:Artal == "2015" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1730449741827:Artal == "2015" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730449741828:Artal == "2015" & tolower(Flokkun) == "mytilidae" ~ "Mytilus edulis",
1730449741828:Artal == "2015" & tolower(Flokkun) == "ampharetidae" ~ "NA",
1730449741828:Artal == "2015" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730449741828:Artal == "2015" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730449741829:Artal == "2015" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1730449741829:# 2016 specific matches
1730449741830:Artal == "2016" & tolower(Flokkun) == "orbiniidae" ~ "Scoloplos armiger",
1730449741830:Artal == "2016" & tolower(Flokkun) == "polychaeta" ~ "NA",
1730449741830:Artal == "2016" & tolower(Flokkun) == "polynoidae" ~ "Harmothoe imbricata",
1730449741830:Artal == "2016" & tolower(Flokkun) %in% c("spio filicornis", "spionidae") ~ "Spionidae",
1730449741831:Artal == "2016" & tolower(Flokkun) %in% c("syllis", "syllidae") ~ "Syllis cornuta",
1730449741831:Artal == "2016" & tolower(Flokkun) %in% c("terebellidae", "terebelliformia") ~ "Terebellides stroemii",
1730449741831:Artal == "2016" & tolower(Flokkun) == "amphipoda" ~ "NA",
1730449741831:Artal == "2016" & tolower(Flokkun) == "bivalvia" ~ "NA",
1730449741832:Artal == "2016" & tolower(Flokkun) == "cardium" ~ "NA",
1730449741832:Artal == "2016" & tolower(Flokkun) == "aricidea" ~ "Amphitrite cirrata",
1730449741832:Artal == "2016" & tolower(Flokkun) == "capitellidae" ~ "Capitella capitata",
1730449741832:Artal == "2016" & tolower(Flokkun) == "cirratulidae" ~ "Cirratulus cirratus",
1730449741833:Artal == "2016" & tolower(Flokkun) == "cossuridae" ~ "Cossura longocirrata",
1730449741833:Artal == "2016" & tolower(Flokkun) == "pectinariidae" ~ "Pectinaria koreni",
1730449741833:Artal == "2016" & tolower(Flokkun) == "phyllodocida" ~ "Phyllodoce maculata",
1730449741833:Artal == "2016" & tolower(Flokkun) == "lumbrineridae" ~ "Lumbrineris",
1730449741834:Artal == "2016" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730449741834:Artal == "2016" & tolower(Flokkun) == "balanus balanus" ~ "Balanus",
1730449741834:Artal == "2016" & tolower(Flokkun) %in% c("priapulidae", "priapulidae") ~ "Priapulus caudatus",
1730449741835:# 2017 specific matches
1730449741835:Artal == "2017" & tolower(Flokkun) == "oligochaeta" ~ "NA",
1730449741836:Artal == "2017" & tolower(Flokkun) == "tubificidae" ~ "NA",
1730449741836:Artal == "2017" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1730449741836:Artal == "2017" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730449741837:Artal == "2017" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730449741837:Artal == "2017" & tolower(Flokkun) == "caprellidae" ~ "Caprella septentrionalis",
1730449741837:Artal == "2017" & tolower(Flokkun) == "opisthobranchia" ~ "Retusa pertenuis",
1730449741838:Artal == "2017" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730449741838:Artal == "2017" & tolower(Flokkun) == "maldanidae" ~ "Praxillella praetermissa",
1730449741838:Artal == "2017" & tolower(Flokkun) %in% c("ampharete", "ampharete acutifrons") ~ "Ampharetidae",
1730449741839:Artal == "2017" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730449741839:Artal == "2017" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730449741840:# Default case
1730449741840:TRUE ~ Flokkun
1730449741840:)
1730449741841:) %>%
1730449741841:drop_na()
1730449756423:rlang::last_trace()
1730449819675:library(dplyr)      # for %>%, case_when(), etc.
1730449819676:library(stringr)    # for str_detect()
1730449819693:library(tidyr)
1730449827078:jorundur <- ekkiungvidi %>%
1730449827078:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1730449827078:mutate(
1730449827078:Flokkun = case_when(
1730449827079:# General taxonomic standardization (no year-specific)
1730449827079:str_detect(tolower(Flokkun), "^sipuncul") ~ "Sipuncula",
1730449827079:tolower(Flokkun) == "ostracoda" ~ "Ostracoda",
1730449827080:tolower(Flokkun) == "terebellides stroemi" ~ "Terebellides stroemii",
1730449827080:# 1999 specific matches
1730449827080:Artal == "1999" & tolower(Flokkun) == "ampharete acutifrons" ~ "Ampharetidae",
1730449827080:Artal == "1999" & tolower(Flokkun) == "bivalvia" ~ "NA",
1730449827081:Artal == "1999" & tolower(Flokkun) == "leucon acutirostris" ~ "Cumacea",
1730449827081:Artal == "1999" & tolower(Flokkun) == "eudorella emarginata" ~ "Cumacea",
1730449827081:Artal == "1999" & tolower(Flokkun) == "musculus discors" ~ "Musculus",
1730449827081:# 2013 specific matches
1730449827082:Artal == "2013" & tolower(Flokkun) %in% c("harmothoe", "polynoidae") ~ "Harmothoe extenuata",
1730449827082:Artal == "2013" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730449827082:# 2014 specific matches
1730449827083:Artal == "2014" & tolower(Flokkun) == "ampharete acutifrons" ~ "Ampharetidae",
1730449827083:Artal == "2014" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730449827083:Artal == "2014" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730449827084:Artal == "2014" & tolower(Flokkun) == "caprellidae" ~ "Caprella septemtrionalis",
1730449827084:Artal == "2014" & tolower(Flokkun) == "praxillella" ~ "Praxillella praetermissa",
1730449827084:Artal == "2014" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1730449827084:Artal == "2014" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730449827084:Artal == "2014" & tolower(Flokkun) == "mytilus edulis" ~ "Mytilidae",
1730449827085:Artal == "2014" & tolower(Flokkun) == "nephtyidae" ~ "Nephthys",
1730449827085:Artal == "2014" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1730449827085:Artal == "2014" & tolower(Flokkun) == "tubificidae" ~ "Tubificoides kozloffi",
1730449827086:Artal == "2014" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730449827086:# 2015 specific matches
1730449827086:Artal == "2015" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730449827086:Artal == "2015" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730449827087:Artal == "2015" & tolower(Flokkun) == "crenella" ~ "Crenella decussata",
1730449827087:Artal == "2015" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1730449827087:Artal == "2015" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730449827087:Artal == "2015" & tolower(Flokkun) == "mytilidae" ~ "Mytilus edulis",
1730449827088:Artal == "2015" & tolower(Flokkun) == "ampharetidae" ~ "NA",
1730449827088:Artal == "2015" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730449827088:Artal == "2015" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730449827088:Artal == "2015" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1730449827089:# 2016 specific matches
1730449827089:Artal == "2016" & tolower(Flokkun) == "orbiniidae" ~ "Scoloplos armiger",
1730449827090:Artal == "2016" & tolower(Flokkun) == "polychaeta" ~ "NA",
1730449827090:Artal == "2016" & tolower(Flokkun) == "polynoidae" ~ "Harmothoe imbricata",
1730449827090:Artal == "2016" & tolower(Flokkun) %in% c("spio filicornis", "spionidae") ~ "Spionidae",
1730449827090:Artal == "2016" & tolower(Flokkun) %in% c("syllis", "syllidae") ~ "Syllis cornuta",
1730449827091:Artal == "2016" & tolower(Flokkun) %in% c("terebellidae", "terebelliformia") ~ "Terebellides stroemii",
1730449827091:Artal == "2016" & tolower(Flokkun) == "amphipoda" ~ "NA",
1730449827091:Artal == "2016" & tolower(Flokkun) == "bivalvia" ~ "NA",
1730449827091:Artal == "2016" & tolower(Flokkun) == "cardium" ~ "NA",
1730449827092:Artal == "2016" & tolower(Flokkun) == "aricidea" ~ "Amphitrite cirrata",
1730449827092:Artal == "2016" & tolower(Flokkun) == "capitellidae" ~ "Capitella capitata",
1730449827092:Artal == "2016" & tolower(Flokkun) == "cirratulidae" ~ "Cirratulus cirratus",
1730449827092:Artal == "2016" & tolower(Flokkun) == "cossuridae" ~ "Cossura longocirrata",
1730449827093:Artal == "2016" & tolower(Flokkun) == "pectinariidae" ~ "Pectinaria koreni",
1730449827093:Artal == "2016" & tolower(Flokkun) == "phyllodocida" ~ "Phyllodoce maculata",
1730449827093:Artal == "2016" & tolower(Flokkun) == "lumbrineridae" ~ "Lumbrineris",
1730449827094:Artal == "2016" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730449827094:Artal == "2016" & tolower(Flokkun) == "balanus balanus" ~ "Balanus",
1730449827094:Artal == "2016" & tolower(Flokkun) %in% c("priapulidae", "priapulidae") ~ "Priapulus caudatus",
1730449827095:# 2017 specific matches
1730449827095:Artal == "2017" & tolower(Flokkun) == "oligochaeta" ~ "NA",
1730449827096:Artal == "2017" & tolower(Flokkun) == "tubificidae" ~ "NA",
1730449827096:Artal == "2017" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1730449827097:Artal == "2017" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730449827097:Artal == "2017" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730449827097:Artal == "2017" & tolower(Flokkun) == "caprellidae" ~ "Caprella septentrionalis",
1730449827098:Artal == "2017" & tolower(Flokkun) == "opisthobranchia" ~ "Retusa pertenuis",
1730449827098:Artal == "2017" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730449827098:Artal == "2017" & tolower(Flokkun) == "maldanidae" ~ "Praxillella praetermissa",
1730449827099:Artal == "2017" & tolower(Flokkun) %in% c("ampharete", "ampharete acutifrons") ~ "Ampharetidae",
1730449827099:Artal == "2017" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730449827099:Artal == "2017" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730449827100:# Default case
1730449827100:TRUE ~ Flokkun
1730449827101:)
1730449827101:) %>%
1730449827101:drop_na()
1730449861456:jorundur[grepl("sipuncul", jorundur$Flokkun, ignore.case = TRUE), c("Class","Species","Flokkun","Artal","stod","N")]
1730450305174:df <- jorundur  %>%
1730450305174:rename(
1730450305175:species = Flokkun,
1730450305175:sample_id = id,
1730450305175:year = Artal,
1730450305175:station = stod,
1730450305175:subdivision = skipting,
1730450305175:count = N,
1730450305176:density = Nu
1730450305176:)
1730450306132:result <- df %>%
1730450306132:# First, apply the subdivision to the count
1730450306132:mutate(adjusted_count = count * subdivision) %>%
1730450306132:# Calculate the correct number of samples and total area for each station-year combination
1730450306132:group_by(station, year) %>%
1730450306133:mutate(
1730450306133:n_samples = n_distinct(sample_id),
1730450306133:grab_area = case_when(
1730450306133:year == 1999 ~ 0.0225,
1730450306133:TRUE ~ 0.04
1730450306133:),
1730450306134:total_area = grab_area * n_samples
1730450306134:) %>%
1730450306134:ungroup() %>%
1730450306134:# Now group by station, year, and species to get total counts
1730450306134:group_by(station, year, species) %>%
1730450306135:summarise(
1730450306135:original_total_count = sum(count),
1730450306135:adjusted_total_count = sum(adjusted_count),
1730450306135:n_samples = first(n_samples),  # Use the previously calculated n_samples
1730450306135:total_area = first(total_area),  # Use the previously calculated total_area
1730450306135:.groups = 'keep'
1730450306136:) %>%
1730450306136:# Calculate densities
1730450306136:mutate(
1730450306136:original_density = original_total_count / total_area,
1730450306136:adjusted_density = adjusted_total_count / total_area,
1730450306137:density_difference = adjusted_density - original_density,
1730450306137:density_ratio = adjusted_density / original_density
1730450306137:) %>%
1730450306137:# Ungroup
1730450306138:ungroup()
1730450308114:# various Benthic Biotic Indices (BBI) for different years and stations. It then creates heatmaps to visualize these indices. This provides a good overview of the ecological status of the benthic communities over time and across different sampling sites.
1730450308114:library(BBI)
1730450309731:library(gplots)
1730450312171:# Calculate Benthic Biotic Indices (BBI) for each year and station
1730450312171:calculate_biotic_indices <- function(data) {
1730450312171:# Validate input data
1730450312171:required_cols <- c("year", "station", "species", "adjusted_density")  # Changed from count to adjusted_density
1730450312171:stopifnot(
1730450312171:"Missing required columns" = all(required_cols %in% colnames(data)),
1730450312172:"No data provided" = nrow(data) > 0,
1730450312172:"Negative density values found" = all(data$adjusted_density >= 0),
1730450312172:"Missing values found" = !any(is.na(data$adjusted_density))
1730450312172:)
1730450312172:# Define target stations
1730450312172:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730450312173:# Initialize lists to store results
1730450312173:indices_list <- list()
1730450312173:# Calculate indices for each year
1730450312173:for (current_year in sort(unique(data$year))) {
1730450312173:# Prepare data for BBI calculation using density values
1730450312174:year_data <- data %>%
1730450312174:filter(year == current_year,
1730450312174:station %in% target_stations) %>%
1730450312174:group_by(station, species) %>%
1730450312174:summarise(density = sum(adjusted_density), .groups = 'drop') %>%  # Using adjusted_density
1730450312174:pivot_wider(names_from = station,
1730450312175:values_from = density,
1730450312175:values_fill = 0)
1730450312175:# Calculate BBI indices
1730450312175:bbi_results <- BBI(year_data)
1730450312176:# Store results
1730450312176:indices_list[[as.character(current_year)]] <- list(
1730450312176:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730450312176:classification = bbi_results$BBIclass,
1730450312176:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1730450312177:)
1730450312177:}
1730450312177:return(indices_list)
1730450312177:}
1730450314746:# Use the result dataframe that already has the correct density calculations
1730450314746:biotic_indices <- calculate_biotic_indices(result)
1730450321889:# Extract normalized EQR values for further analysis
1730450321889:normalized_eqr <- do.call(rbind, lapply(biotic_indices, function(x) x$normalized))
1730450324928:# Prepare data for heatmap
1730450324929:names(normalized_eqr) <- c("nAMBI", "nISI", "nNSI", "nNQI1", "nShannon", "nEQR")
1730450325772:stations <- rep(c("C4", "A7", "B5", "B8", "E4", "E3"), length(unique(df$year)))
1730450326402:years <- rep(sort(unique(df$year)), each = 6)
1730450327489:row_labels <- paste(stations, years, sep = " - ")
1730450329728:normalized_eqr_subset <- normalized_eqr[, c(1, 4, 5)]  # Select columns 1 (nAMBI), 4 (nNQI1), 5 (nShannon)
1730450330872:# Create a matrix for heatmap
1730450330872:heatmap_matrix <- as.matrix(normalized_eqr_subset)
1730450333842:rownames(heatmap_matrix) <- row_labels
1730450377883:# Define color palette
1730450377883:color_palette <- colorRampPalette(c("red", "yellow", "green"))(100)
1730450379768:# Create heatmap
1730450379768:png("output/BBI_heatmap.png", width = 1000, height = 1000, res = 100)
1730450380155:heatmap.2(heatmap_matrix,
1730450380155:main = "Benthic Biotic Indices\nby Station and Year",
1730450380155:xlab = "Indices",
1730450380155:ylab = "",
1730450380156:col = color_palette,
1730450380156:scale = "none",
1730450380156:key = TRUE,
1730450380156:keysize = 1.5,
1730450380156:density.info = "none",
1730450380156:trace = "none",
1730450380156:Rowv = T,
1730450380156:Colv = FALSE,
1730450380157:dendrogram = "row",
1730450380157:margins = c(5, 8),
1730450380157:cexRow = 0.9,
1730450380157:cexCol = 1.2,
1730450380157:srtCol = 45,
1730450380157:adjCol = c(1, 1),
1730450380157:cellnote = round(heatmap_matrix, 2),
1730450380158:notecol = "black",
1730450380158:notecex = 0.7,
1730450380158:labRow = row_labels,
1730450380158:labCol = colnames(heatmap_matrix))
1730450381098:dev.off()
1730450472370:# Function to extract normalized values and calculate summary statistics
1730450472370:get_yearly_stats <- function(year_data) {
1730450472370:df <- year_data$normalized
1730450472371:# Calculate means and SDs for required indices
1730450472371:means <- c(
1730450472371:mean(df$nEQR.nAMBI),
1730450472371:mean(df$nEQR.nNQI1),
1730450472371:mean(df$nEQR.nShannon)
1730450472371:)
1730450472372:sds <- c(
1730450472372:sd(df$nEQR.nAMBI),
1730450472372:sd(df$nEQR.nNQI1),
1730450472372:sd(df$nEQR.nShannon)
1730450472372:)
1730450472372:# Calculate mean status
1730450472373:mean_status <- mean(c(
1730450472373:mean(df$nEQR.nAMBI),
1730450472373:mean(df$nEQR.nNQI1),
1730450472373:mean(df$nEQR.nShannon)
1730450472373:))
1730450472373:status <- case_when(
1730450472374:mean_status < 0.2 ~ "Bad",
1730450472374:mean_status < 0.4 ~ "Poor",
1730450472374:mean_status < 0.6 ~ "Moderate",
1730450472374:mean_status < 0.8 ~ "Good",
1730450472374:TRUE ~ "High"
1730450472374:)
1730450472374:return(c(means, sds, status))
1730450472375:}
1730450473890:# Create empty dataframe for results
1730450473890:years <- names(biotic_indices)
1730450475329:summary_table <- data.frame(
1730450475329:Year = as.numeric(years),
1730450475330:matrix(NA, nrow = length(years), ncol = 7)
1730450475330:)
1730450476634:# Fill the dataframe
1730450476634:for(i in seq_along(years)) {
1730450476634:stats <- get_yearly_stats(biotic_indices[[years[i]]])
1730450476634:summary_table[i, 2:8] <- stats
1730450476634:}
1730450480521:# Set column names
1730450480521:colnames(summary_table) <- c("Year",
1730450480521:"nAMBI_mean", "nNQI1_mean", "nShannon_mean",
1730450480521:"nAMBI_sd", "nNQI1_sd", "nShannon_sd",
1730450480521:"Status")
1730450481994:# Format the table for presentation
1730450481994:# Format the table for presentation
1730450481994:final_table <- summary_table %>%
1730450481994:mutate(
1730450481994:across(ends_with("_mean"), as.numeric),
1730450481994:across(ends_with("_sd"), as.numeric),
1730450481994:nAMBI = sprintf("%.2f ± %.2f", as.numeric(nAMBI_mean), as.numeric(nAMBI_sd)),
1730450481995:nNQI1 = sprintf("%.2f ± %.2f", as.numeric(nNQI1_mean), as.numeric(nNQI1_sd)),
1730450481995:nShannon = sprintf("%.2f ± %.2f", as.numeric(nShannon_mean), as.numeric(nShannon_sd))
1730450481995:) %>%
1730450481995:select(Year, nAMBI, nNQI1, nShannon, Status)
1730450484961:# Alternative approach if the above still gives errors
1730450484961:final_table <- summary_table %>%
1730450484961:mutate(
1730450484962:nAMBI = paste0(round(as.numeric(nAMBI_mean), 2), " ± ",
1730450484962:round(as.numeric(nAMBI_sd), 2)),
1730450484962:nNQI1 = paste0(round(as.numeric(nNQI1_mean), 2), " ± ",
1730450484962:round(as.numeric(nNQI1_sd), 2)),
1730450484962:nShannon = paste0(round(as.numeric(nShannon_mean), 2), " ± ",
1730450484962:round(as.numeric(nShannon_sd), 2))
1730450484963:) %>%
1730450484963:select(Year, nAMBI, nNQI1, nShannon, Status)
1730450486873:# Print using kable
1730450486873:library(knitr)
1730450487966:kable(final_table,
1730450487966:caption = "Mean normalized benthic indices (± SD) across all stations showing temporal changes in Kolgrafafjörður fjord from 1999 to 2017.",
1730450487966:align = c("c", "c", "c", "c", "l"))
1730450610921:DT::datatable(KolgrTaxa)
1730450621735:DT::datatable(KolgrTaxa)
1730450696252:KolgrTaxa[!is.na(iconv(as.character(KolgrTaxa), "UTF-8", "UTF-8")), ]
1730450712518:rlang::last_trace()
1730450740028:str(KolgrTaxa)
1730450916394:KolgrTaxa %>%
1730450916395:filter(
1730450916395:rowSums(across(where(is.character), ~ is.na(iconv(., from = "UTF-8", to = "UTF-8")))) > 0
1730450916395:)
1730450942476:# Identify rows with non-UTF-8 characters
1730450942476:non_utf8_rows <- KolgrTaxa %>%
1730450942476:filter(
1730450942476:rowSums(across(where(is.character), ~ is.na(iconv(., from = "UTF-8", to = "UTF-8")))) > 0
1730450942476:)
1730450942485:# Count the number of rows with non-UTF-8 characters
1730450942485:non_utf8_count <- nrow(non_utf8_rows)
1730450942485:# Display the count
1730450942485:non_utf8_count
1730450954328:str(non_utf8_rows )
1730451104260:KolgrTaxa %>%
1730451104260:mutate(across(where(is.character), ~ ifelse(is.na(iconv(., from = "UTF-8", to = "UTF-8")), TRUE, FALSE))) %>%
1730451104260:filter(rowSums(across(everything(), as.logical)) > 0)
1730451113498:problematic_cells <- KolgrTaxa %>%
1730451113499:mutate(across(where(is.character), ~ ifelse(is.na(iconv(., from = "UTF-8", to = "UTF-8")), TRUE, FALSE))) %>%
1730451113499:filter(rowSums(across(everything(), as.logical)) > 0)
1730451113516:# View which rows and columns contain non-UTF-8 characters
1730451113517:problematic_cells
1730451175393:library(stringi)
1730451182632:non_utf8_flags <- KolgrTaxa %>%
1730451182632:mutate(across(where(is.character), ~ !stri_enc_isutf8(.))) %>%
1730451182632:filter(rowSums(across(everything(), as.logical)) > 0)
1730451182652:# Display the rows with non-UTF-8 characters
1730451182652:non_utf8_flags
1730451207738:non_utf8_gamalt <- KolgrTaxa %>% filter(is.na(iconv(gamalt, from = "UTF-8", to = "UTF-8")))
1730451207740:non_utf8_A <- KolgrTaxa %>% filter(is.na(iconv(A, from = "UTF-8", to = "UTF-8")))
1730451207742:# Display the rows with non-UTF-8 characters in 'gamalt' and 'A'
1730451207742:non_utf8_gamalt
1730451207839:non_utf8_A
1730451246953:# Load the stringi package for robust UTF-8 encoding checks
1730451246953:library(stringi)
1730451246953:# Apply the check across all character columns and create a logical matrix
1730451246954:utf8_check_matrix <- sapply(KolgrTaxa, function(col) {
1730451246954:if (is.character(col)) {
1730451246954:!stri_enc_isutf8(col)  # TRUE if the encoding is not UTF-8
1730451246954:} else {
1730451246954:rep(FALSE, length(col))  # Non-character columns are marked as FALSE
1730451246954:}
1730451246954:})
1730451246959:# Convert to a data frame for easier handling
1730451246959:utf8_check_matrix <- as.data.frame(utf8_check_matrix)
1730451246960:# Identify row and column indices with invalid UTF-8
1730451246960:problematic_cells <- which(utf8_check_matrix, arr.ind = TRUE)
1730451267283:# Load stringi library
1730451267283:library(stringi)
1730451267284:# Create a logical matrix indicating non-UTF-8 characters in each cell of character columns
1730451267284:utf8_check_matrix <- sapply(KolgrTaxa, function(col) {
1730451267284:if (is.character(col)) {
1730451267284:!stri_enc_isutf8(col)  # TRUE for non-UTF-8, FALSE for valid UTF-8
1730451267285:} else {
1730451267285:rep(FALSE, length(col))  # FALSE for non-character columns
1730451267285:}
1730451267285:})
1730451267291:# Ensure the result is a logical matrix
1730451267291:utf8_check_matrix <- as.matrix(utf8_check_matrix)
1730451267291:# Find indices of problematic cells
1730451267292:problematic_cells <- which(utf8_check_matrix == TRUE, arr.ind = TRUE)
1730451267292:# Display exact cells with non-UTF-8 characters
1730451267292:problematic_cells
1730451361523:non_utf8_rows$gamalt
1730451416300:non_utf8_rows[,()]
1730451428426:non_utf8_rows[,c("gamalt","N")]
1730451511057:DT::datatable(KolgrTaxa[,-gamalt])
1730451518147:DT::datatable(KolgrTaxa[,-c("gamalt"])
1730451532828:DT::datatable(KolgrTaxa[,-c("gamalt"])
1730451536403:DT::datatable(KolgrTaxa[,-c("gamalt")])
1730451551826:DT::datatable(KolgrTaxa[,-31])
1730451582884:DT::datatable(KolgrTaxa[Artal=="1999",-31])
1730451592612:DT::datatable(KolgrTaxa[KolgrTaxa$Artal=="1999",-31])
1730451682354:DT::datatable(result)
1730451777570:DT::datatable(result[result$year=="1999",])
1730452195372:jorundur <- ekkiungvidi %>%
1730452195373:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1730452195373:mutate(
1730452195373:Flokkun = case_when(
1730452195373:# General taxonomic standardization (no year-specific)
1730452195373:str_detect(tolower(Flokkun), "^sipuncul") ~ "Sipuncula",
1730452195373:tolower(Flokkun) == "ostracoda" ~ "Ostracoda",
1730452195374:tolower(Flokkun) == "terebellides stroemi" ~ "Terebellides stroemii",
1730452195374:# 1999 specific matches
1730452195374:Artal == "1999" & tolower(Flokkun) %in% c("ampharetinae", "ampharete acutifrons") ~ "Ampharetidae",
1730452195374:Artal == "1999" & tolower(Flokkun) == "bivalvia" ~ "NA",
1730452195374:Artal == "1999" & tolower(Flokkun) == "leucon acutirostris" ~ "Cumacea",
1730452195374:Artal == "1999" & tolower(Flokkun) == "eudorella emarginata" ~ "Cumacea",
1730452195375:Artal == "1999" & tolower(Flokkun) == "musculus discors" ~ "Musculus",
1730452195375:Artal == "1999" & tolower(Flokkun) == "Aricidea (Acmira) cerrutii" ~ "Aricidea suecica",
1730452195375:# 2013 specific matches
1730452195376:Artal == "2013" & tolower(Flokkun) %in% c("harmothoe", "polynoidae") ~ "Harmothoe extenuata",
1730452195376:Artal == "2013" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730452195376:# 2014 specific matches
1730452195376:Artal == "2014" & tolower(Flokkun) == "ampharete acutifrons" ~ "Ampharetidae",
1730452195376:Artal == "2014" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730452195377:Artal == "2014" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730452195377:Artal == "2014" & tolower(Flokkun) == "caprellidae" ~ "Caprella septemtrionalis",
1730452195377:Artal == "2014" & tolower(Flokkun) == "praxillella" ~ "Praxillella praetermissa",
1730452195377:Artal == "2014" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1730452195378:Artal == "2014" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730452195378:Artal == "2014" & tolower(Flokkun) == "mytilus edulis" ~ "Mytilidae",
1730452195378:Artal == "2014" & tolower(Flokkun) == "nephtyidae" ~ "Nephthys",
1730452195378:Artal == "2014" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1730452195378:Artal == "2014" & tolower(Flokkun) == "tubificidae" ~ "Tubificoides kozloffi",
1730452195379:Artal == "2014" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730452195379:# 2015 specific matches
1730452195379:Artal == "2015" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730452195379:Artal == "2015" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730452195379:Artal == "2015" & tolower(Flokkun) == "crenella" ~ "Crenella decussata",
1730452195380:Artal == "2015" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1730452195380:Artal == "2015" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730452195380:Artal == "2015" & tolower(Flokkun) == "mytilidae" ~ "Mytilus edulis",
1730452195380:Artal == "2015" & tolower(Flokkun) == "ampharetidae" ~ "NA",
1730452195381:Artal == "2015" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730452195381:Artal == "2015" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730452195381:Artal == "2015" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1730452195382:# 2016 specific matches
1730452195382:Artal == "2016" & tolower(Flokkun) == "orbiniidae" ~ "Scoloplos armiger",
1730452195382:Artal == "2016" & tolower(Flokkun) == "polychaeta" ~ "NA",
1730452195382:Artal == "2016" & tolower(Flokkun) == "polynoidae" ~ "Harmothoe imbricata",
1730452195383:Artal == "2016" & tolower(Flokkun) %in% c("spio filicornis", "spionidae") ~ "Spionidae",
1730452195383:Artal == "2016" & tolower(Flokkun) %in% c("syllis", "syllidae") ~ "Syllis cornuta",
1730452195383:Artal == "2016" & tolower(Flokkun) %in% c("terebellidae", "terebelliformia") ~ "Terebellides stroemii",
1730452195384:Artal == "2016" & tolower(Flokkun) == "amphipoda" ~ "NA",
1730452195384:Artal == "2016" & tolower(Flokkun) == "bivalvia" ~ "NA",
1730452195384:Artal == "2016" & tolower(Flokkun) == "cardium" ~ "NA",
1730452195385:Artal == "2016" & tolower(Flokkun) == "aricidea" ~ "Amphitrite cirrata",
1730452195386:Artal == "2016" & tolower(Flokkun) == "capitellidae" ~ "Capitella capitata",
1730452195386:Artal == "2016" & tolower(Flokkun) == "cirratulidae" ~ "Cirratulus cirratus",
1730452195387:Artal == "2016" & tolower(Flokkun) == "cossuridae" ~ "Cossura longocirrata",
1730452195387:Artal == "2016" & tolower(Flokkun) == "pectinariidae" ~ "Pectinaria koreni",
1730452195387:Artal == "2016" & tolower(Flokkun) == "phyllodocida" ~ "Phyllodoce maculata",
1730452195388:Artal == "2016" & tolower(Flokkun) == "lumbrineridae" ~ "Lumbrineris",
1730452195388:Artal == "2016" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730452195389:Artal == "2016" & tolower(Flokkun) == "balanus balanus" ~ "Balanus",
1730452195389:Artal == "2016" & tolower(Flokkun) %in% c("priapulidae", "priapulidae") ~ "Priapulus caudatus",
1730452195390:# 2017 specific matches
1730452195390:Artal == "2017" & tolower(Flokkun) == "oligochaeta" ~ "NA",
1730452195390:Artal == "2017" & tolower(Flokkun) == "tubificidae" ~ "NA",
1730452195391:Artal == "2017" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1730452195391:Artal == "2017" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730452195391:Artal == "2017" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730452195392:Artal == "2017" & tolower(Flokkun) == "caprellidae" ~ "Caprella septentrionalis",
1730452195392:Artal == "2017" & tolower(Flokkun) == "opisthobranchia" ~ "Retusa pertenuis",
1730452195392:Artal == "2017" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730452195393:Artal == "2017" & tolower(Flokkun) == "maldanidae" ~ "Praxillella praetermissa",
1730452195393:Artal == "2017" & tolower(Flokkun) %in% c("ampharete", "ampharete acutifrons") ~ "Ampharetidae",
1730452195393:Artal == "2017" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730452195393:Artal == "2017" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730452195394:# Default case
1730452195394:TRUE ~ Flokkun
1730452195395:)
1730452195395:) %>%
1730452195395:drop_na()
1730452202451:df <- jorundur  %>%
1730452202451:rename(
1730452202451:species = Flokkun,
1730452202451:sample_id = id,
1730452202451:year = Artal,
1730452202451:station = stod,
1730452202452:subdivision = skipting,
1730452202452:count = N,
1730452202452:density = Nu
1730452202452:)
1730452203932:result <- df %>%
1730452203932:# First, apply the subdivision to the count
1730452203932:mutate(adjusted_count = count * subdivision) %>%
1730452203932:# Calculate the correct number of samples and total area for each station-year combination
1730452203932:group_by(station, year) %>%
1730452203933:mutate(
1730452203933:n_samples = n_distinct(sample_id),
1730452203933:grab_area = case_when(
1730452203933:year == 1999 ~ 0.0225,
1730452203933:TRUE ~ 0.04
1730452203933:),
1730452203933:total_area = grab_area * n_samples
1730452203934:) %>%
1730452203934:ungroup() %>%
1730452203934:# Now group by station, year, and species to get total counts
1730452203934:group_by(station, year, species) %>%
1730452203934:summarise(
1730452203934:original_total_count = sum(count),
1730452203935:adjusted_total_count = sum(adjusted_count),
1730452203935:n_samples = first(n_samples),  # Use the previously calculated n_samples
1730452203935:total_area = first(total_area),  # Use the previously calculated total_area
1730452203935:.groups = 'keep'
1730452203935:) %>%
1730452203936:# Calculate densities
1730452203936:mutate(
1730452203936:original_density = original_total_count / total_area,
1730452203936:adjusted_density = adjusted_total_count / total_area,
1730452203936:density_difference = adjusted_density - original_density,
1730452203937:density_ratio = adjusted_density / original_density
1730452203937:) %>%
1730452203937:# Ungroup
1730452203937:ungroup()
1730452207105:DT::datatable(result[result$year=="1999",])
1730452275755:jorundur <- ekkiungvidi %>%
1730452275756:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1730452275756:mutate(
1730452275756:Flokkun = case_when(
1730452275756:# General taxonomic standardization (no year-specific)
1730452275756:str_detect(tolower(Flokkun), "^sipuncul") ~ "Sipuncula",
1730452275757:tolower(Flokkun) == "ostracoda" ~ "Ostracoda",
1730452275757:tolower(Flokkun) == "terebellides stroemi" ~ "Terebellides stroemii",
1730452275757:# 1999 specific matches
1730452275757:Artal == "1999" & tolower(Flokkun) %in% c("ampharetinae", "ampharete acutifrons") ~ "Ampharetidae",
1730452275757:Artal == "1999" & tolower(Flokkun) == "bivalvia" ~ "NA",
1730452275757:Artal == "1999" & tolower(Flokkun) == "leucon acutirostris" ~ "Cumacea",
1730452275758:Artal == "1999" & tolower(Flokkun) == "eudorella emarginata" ~ "Cumacea",
1730452275758:Artal == "1999" & tolower(Flokkun) == "musculus discors" ~ "Musculus",
1730452275758:Artal == "1999" & tolower(Flokkun) == "aricidea (acmira) cerrutii" ~ "Aricidea suecica",
1730452275758:# 2013 specific matches
1730452275758:Artal == "2013" & tolower(Flokkun) %in% c("harmothoe", "polynoidae") ~ "Harmothoe extenuata",
1730452275759:Artal == "2013" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730452275759:# 2014 specific matches
1730452275759:Artal == "2014" & tolower(Flokkun) == "ampharete acutifrons" ~ "Ampharetidae",
1730452275759:Artal == "2014" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730452275759:Artal == "2014" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730452275760:Artal == "2014" & tolower(Flokkun) == "caprellidae" ~ "Caprella septemtrionalis",
1730452275760:Artal == "2014" & tolower(Flokkun) == "praxillella" ~ "Praxillella praetermissa",
1730452275760:Artal == "2014" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1730452275760:Artal == "2014" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730452275761:Artal == "2014" & tolower(Flokkun) == "mytilus edulis" ~ "Mytilidae",
1730452275761:Artal == "2014" & tolower(Flokkun) == "nephtyidae" ~ "Nephthys",
1730452275761:Artal == "2014" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1730452275761:Artal == "2014" & tolower(Flokkun) == "tubificidae" ~ "Tubificoides kozloffi",
1730452275761:Artal == "2014" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730452275762:# 2015 specific matches
1730452275762:Artal == "2015" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730452275762:Artal == "2015" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730452275763:Artal == "2015" & tolower(Flokkun) == "crenella" ~ "Crenella decussata",
1730452275763:Artal == "2015" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1730452275763:Artal == "2015" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730452275763:Artal == "2015" & tolower(Flokkun) == "mytilidae" ~ "Mytilus edulis",
1730452275763:Artal == "2015" & tolower(Flokkun) == "ampharetidae" ~ "NA",
1730452275764:Artal == "2015" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730452275764:Artal == "2015" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730452275764:Artal == "2015" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1730452275765:# 2016 specific matches
1730452275765:Artal == "2016" & tolower(Flokkun) == "orbiniidae" ~ "Scoloplos armiger",
1730452275765:Artal == "2016" & tolower(Flokkun) == "polychaeta" ~ "NA",
1730452275765:Artal == "2016" & tolower(Flokkun) == "polynoidae" ~ "Harmothoe imbricata",
1730452275766:Artal == "2016" & tolower(Flokkun) %in% c("spio filicornis", "spionidae") ~ "Spionidae",
1730452275766:Artal == "2016" & tolower(Flokkun) %in% c("syllis", "syllidae") ~ "Syllis cornuta",
1730452275766:Artal == "2016" & tolower(Flokkun) %in% c("terebellidae", "terebelliformia") ~ "Terebellides stroemii",
1730452275767:Artal == "2016" & tolower(Flokkun) == "amphipoda" ~ "NA",
1730452275767:Artal == "2016" & tolower(Flokkun) == "bivalvia" ~ "NA",
1730452275767:Artal == "2016" & tolower(Flokkun) == "cardium" ~ "NA",
1730452275767:Artal == "2016" & tolower(Flokkun) == "aricidea" ~ "Amphitrite cirrata",
1730452275768:Artal == "2016" & tolower(Flokkun) == "capitellidae" ~ "Capitella capitata",
1730452275768:Artal == "2016" & tolower(Flokkun) == "cirratulidae" ~ "Cirratulus cirratus",
1730452275768:Artal == "2016" & tolower(Flokkun) == "cossuridae" ~ "Cossura longocirrata",
1730452275769:Artal == "2016" & tolower(Flokkun) == "pectinariidae" ~ "Pectinaria koreni",
1730452275769:Artal == "2016" & tolower(Flokkun) == "phyllodocida" ~ "Phyllodoce maculata",
1730452275769:Artal == "2016" & tolower(Flokkun) == "lumbrineridae" ~ "Lumbrineris",
1730452275770:Artal == "2016" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730452275770:Artal == "2016" & tolower(Flokkun) == "balanus balanus" ~ "Balanus",
1730452275770:Artal == "2016" & tolower(Flokkun) %in% c("priapulidae", "priapulidae") ~ "Priapulus caudatus",
1730452275771:# 2017 specific matches
1730452275771:Artal == "2017" & tolower(Flokkun) == "oligochaeta" ~ "NA",
1730452275772:Artal == "2017" & tolower(Flokkun) == "tubificidae" ~ "NA",
1730452275772:Artal == "2017" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1730452275772:Artal == "2017" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730452275773:Artal == "2017" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730452275773:Artal == "2017" & tolower(Flokkun) == "caprellidae" ~ "Caprella septentrionalis",
1730452275773:Artal == "2017" & tolower(Flokkun) == "opisthobranchia" ~ "Retusa pertenuis",
1730452275774:Artal == "2017" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730452275774:Artal == "2017" & tolower(Flokkun) == "maldanidae" ~ "Praxillella praetermissa",
1730452275775:Artal == "2017" & tolower(Flokkun) %in% c("ampharete", "ampharete acutifrons") ~ "Ampharetidae",
1730452275775:Artal == "2017" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730452275775:Artal == "2017" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730452275776:# Default case
1730452275776:TRUE ~ Flokkun
1730452275777:)
1730452275777:) %>%
1730452275777:drop_na()
1730452276963:df <- jorundur  %>%
1730452276963:rename(
1730452276963:species = Flokkun,
1730452276963:sample_id = id,
1730452276963:year = Artal,
1730452276963:station = stod,
1730452276964:subdivision = skipting,
1730452276964:count = N,
1730452276964:density = Nu
1730452276964:)
1730452279290:result <- df %>%
1730452279290:# First, apply the subdivision to the count
1730452279290:mutate(adjusted_count = count * subdivision) %>%
1730452279290:# Calculate the correct number of samples and total area for each station-year combination
1730452279291:group_by(station, year) %>%
1730452279291:mutate(
1730452279291:n_samples = n_distinct(sample_id),
1730452279291:grab_area = case_when(
1730452279291:year == 1999 ~ 0.0225,
1730452279291:TRUE ~ 0.04
1730452279291:),
1730452279291:total_area = grab_area * n_samples
1730452279292:) %>%
1730452279292:ungroup() %>%
1730452279292:# Now group by station, year, and species to get total counts
1730452279292:group_by(station, year, species) %>%
1730452279292:summarise(
1730452279293:original_total_count = sum(count),
1730452279293:adjusted_total_count = sum(adjusted_count),
1730452279293:n_samples = first(n_samples),  # Use the previously calculated n_samples
1730452279293:total_area = first(total_area),  # Use the previously calculated total_area
1730452279293:.groups = 'keep'
1730452279293:) %>%
1730452279294:# Calculate densities
1730452279294:mutate(
1730452279294:original_density = original_total_count / total_area,
1730452279294:adjusted_density = adjusted_total_count / total_area,
1730452279294:density_difference = adjusted_density - original_density,
1730452279295:density_ratio = adjusted_density / original_density
1730452279295:) %>%
1730452279295:# Ungroup
1730452279295:ungroup()
1730452284058:DT::datatable(result[result$year=="1999",])
1730454954840:jorundur <- ekkiungvidi %>%
1730454954840:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1730454954841:mutate(
1730454954841:Flokkun = case_when(
1730454954841:# General taxonomic standardization (no year-specific)
1730454954841:str_detect(tolower(Flokkun), "^sipuncul") ~ "Sipuncula",
1730454954841:tolower(Flokkun) == "ostracoda" ~ "Ostracoda",
1730454954841:tolower(Flokkun) == "terebellides stroemi" ~ "Terebellides stroemii",
1730454954841:# 1999 specific matches
1730454954842:Artal == "1999" & tolower(Flokkun) %in% c("ampharetinae", "ampharete acutifrons") ~ "Ampharetidae",
1730454954842:Artal == "1999" & tolower(Flokkun) == "bivalvia" ~ "NA",
1730454954842:Artal == "1999" & tolower(Flokkun) == "leucon acutirostris" ~ "Cumacea",
1730454954842:Artal == "1999" & tolower(Flokkun) == "eudorella emarginata" ~ "Cumacea",
1730454954842:Artal == "1999" & tolower(Flokkun) == "musculus discors" ~ "Musculus",
1730454954842:Artal == "1999" & tolower(Flokkun) == "aricidea (acmira) cerrutii" ~ "Aricidea suecica",
1730454954843:Artal == "1999" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1730454954843:# 2013 specific matches
1730454954843:Artal == "2013" & tolower(Flokkun) %in% c("harmothoe", "polynoidae") ~ "Harmothoe extenuata",
1730454954843:Artal == "2013" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730454954844:# 2014 specific matches
1730454954844:Artal == "2014" & tolower(Flokkun) == "ampharete acutifrons" ~ "Ampharetidae",
1730454954844:Artal == "2014" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730454954844:Artal == "2014" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730454954844:Artal == "2014" & tolower(Flokkun) == "caprellidae" ~ "Caprella septemtrionalis",
1730454954844:Artal == "2014" & tolower(Flokkun) == "praxillella" ~ "Praxillella praetermissa",
1730454954845:Artal == "2014" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1730454954845:Artal == "2014" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730454954845:Artal == "2014" & tolower(Flokkun) == "mytilus edulis" ~ "Mytilidae",
1730454954846:Artal == "2014" & tolower(Flokkun) == "nephtyidae" ~ "Nephthys",
1730454954846:Artal == "2014" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1730454954846:Artal == "2014" & tolower(Flokkun) == "tubificidae" ~ "Tubificoides kozloffi",
1730454954846:Artal == "2014" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730454954847:# 2015 specific matches
1730454954847:Artal == "2015" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730454954847:Artal == "2015" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730454954848:Artal == "2015" & tolower(Flokkun) == "crenella" ~ "Crenella decussata",
1730454954848:Artal == "2015" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1730454954848:Artal == "2015" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730454954848:Artal == "2015" & tolower(Flokkun) == "mytilidae" ~ "Mytilus edulis",
1730454954849:Artal == "2015" & tolower(Flokkun) == "ampharetidae" ~ "NA",
1730454954849:Artal == "2015" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730454954849:Artal == "2015" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730454954850:Artal == "2015" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1730454954850:# 2016 specific matches
1730454954850:Artal == "2016" & tolower(Flokkun) == "orbiniidae" ~ "Scoloplos armiger",
1730454954851:Artal == "2016" & tolower(Flokkun) == "polychaeta" ~ "NA",
1730454954851:Artal == "2016" & tolower(Flokkun) == "polynoidae" ~ "Harmothoe imbricata",
1730454954851:Artal == "2016" & tolower(Flokkun) %in% c("spio filicornis", "spionidae") ~ "Spionidae",
1730454954852:Artal == "2016" & tolower(Flokkun) %in% c("syllis", "syllidae") ~ "Syllis cornuta",
1730454954852:Artal == "2016" & tolower(Flokkun) %in% c("terebellidae", "terebelliformia") ~ "Terebellides stroemii",
1730454954852:Artal == "2016" & tolower(Flokkun) == "amphipoda" ~ "NA",
1730454954853:Artal == "2016" & tolower(Flokkun) == "bivalvia" ~ "NA",
1730454954853:Artal == "2016" & tolower(Flokkun) == "cardium" ~ "NA",
1730454954853:Artal == "2016" & tolower(Flokkun) == "aricidea" ~ "Amphitrite cirrata",
1730454954854:Artal == "2016" & tolower(Flokkun) == "capitellidae" ~ "Capitella capitata",
1730454954854:Artal == "2016" & tolower(Flokkun) == "cirratulidae" ~ "Cirratulus cirratus",
1730454954854:Artal == "2016" & tolower(Flokkun) == "cossuridae" ~ "Cossura longocirrata",
1730454954855:Artal == "2016" & tolower(Flokkun) == "pectinariidae" ~ "Pectinaria koreni",
1730454954855:Artal == "2016" & tolower(Flokkun) == "phyllodocida" ~ "Phyllodoce maculata",
1730454954855:Artal == "2016" & tolower(Flokkun) == "lumbrineridae" ~ "Lumbrineris",
1730454954856:Artal == "2016" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730454954856:Artal == "2016" & tolower(Flokkun) == "balanus balanus" ~ "Balanus",
1730454954856:Artal == "2016" & tolower(Flokkun) %in% c("priapulidae", "priapulidae") ~ "Priapulus caudatus",
1730454954857:# 2017 specific matches
1730454954857:Artal == "2017" & tolower(Flokkun) == "oligochaeta" ~ "NA",
1730454954858:Artal == "2017" & tolower(Flokkun) == "tubificidae" ~ "NA",
1730454954858:Artal == "2017" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1730454954858:Artal == "2017" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730454954859:Artal == "2017" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730454954859:Artal == "2017" & tolower(Flokkun) == "caprellidae" ~ "Caprella septentrionalis",
1730454954859:Artal == "2017" & tolower(Flokkun) == "opisthobranchia" ~ "Retusa pertenuis",
1730454954860:Artal == "2017" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730454954860:Artal == "2017" & tolower(Flokkun) == "maldanidae" ~ "Praxillella praetermissa",
1730454954860:Artal == "2017" & tolower(Flokkun) %in% c("ampharete", "ampharete acutifrons") ~ "Ampharetidae",
1730454954861:Artal == "2017" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730454954861:Artal == "2017" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730454954862:# Default case
1730454954862:TRUE ~ Flokkun
1730454954862:)
1730454954863:) %>%
1730454954863:drop_na()
1730454957243:df <- jorundur  %>%
1730454957243:rename(
1730454957243:species = Flokkun,
1730454957244:sample_id = id,
1730454957244:year = Artal,
1730454957244:station = stod,
1730454957244:subdivision = skipting,
1730454957244:count = N,
1730454957244:density = Nu
1730454957245:)
1730454958229:result <- df %>%
1730454958229:# First, apply the subdivision to the count
1730454958229:mutate(adjusted_count = count * subdivision) %>%
1730454958229:# Calculate the correct number of samples and total area for each station-year combination
1730454958230:group_by(station, year) %>%
1730454958230:mutate(
1730454958230:n_samples = n_distinct(sample_id),
1730454958230:grab_area = case_when(
1730454958230:year == 1999 ~ 0.0225,
1730454958230:TRUE ~ 0.04
1730454958230:),
1730454958231:total_area = grab_area * n_samples
1730454958231:) %>%
1730454958231:ungroup() %>%
1730454958231:# Now group by station, year, and species to get total counts
1730454958231:group_by(station, year, species) %>%
1730454958232:summarise(
1730454958232:original_total_count = sum(count),
1730454958232:adjusted_total_count = sum(adjusted_count),
1730454958232:n_samples = first(n_samples),  # Use the previously calculated n_samples
1730454958232:total_area = first(total_area),  # Use the previously calculated total_area
1730454958233:.groups = 'keep'
1730454958233:) %>%
1730454958233:# Calculate densities
1730454958233:mutate(
1730454958233:original_density = original_total_count / total_area,
1730454958234:adjusted_density = adjusted_total_count / total_area,
1730454958234:density_difference = adjusted_density - original_density,
1730454958234:density_ratio = adjusted_density / original_density
1730454958234:) %>%
1730454958234:# Ungroup
1730454958235:ungroup()
1730454966108:DT::datatable(result[result$year=="1999",])
1730455044620:# Define target stations
1730455044621:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730455045141:# Initialize lists to store results
1730455045141:indices_list <- list()
1730455045656:# Calculate indices for each year
1730455045656:for (current_year in sort(unique(data$year))) {
1730455045656:# Prepare data for BBI calculation using density values
1730455045657:year_data <- data %>%
1730455045657:filter(year == current_year,
1730455045657:station %in% target_stations) %>%
1730455045657:group_by(station, species) %>%
1730455045657:summarise(density = sum(adjusted_density), .groups = 'drop') %>%  # Using adjusted_density
1730455045657:pivot_wider(names_from = station,
1730455045658:values_from = density,
1730455045658:values_fill = 0)
1730455045658:# Calculate BBI indices
1730455045658:bbi_results <- BBI(year_data)
1730455045658:# Store results
1730455045658:indices_list[[as.character(current_year)]] <- list(
1730455045659:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730455045659:classification = bbi_results$BBIclass,
1730455045659:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1730455045659:)
1730455045659:}
1730455046226:return(indices_list)
1730455054643:# Calculate Benthic Biotic Indices (BBI) for each year and station
1730455054643:calculate_biotic_indices <- function(data) {
1730455054644:# Validate input data
1730455054644:required_cols <- c("year", "station", "species", "adjusted_density")  # Changed from count to adjusted_density
1730455054644:stopifnot(
1730455054644:"Missing required columns" = all(required_cols %in% colnames(data)),
1730455054644:"No data provided" = nrow(data) > 0,
1730455054644:"Negative density values found" = all(data$adjusted_density >= 0),
1730455054644:"Missing values found" = !any(is.na(data$adjusted_density))
1730455054644:)
1730455054645:# Define target stations
1730455054645:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730455054645:# Initialize lists to store results
1730455054645:indices_list <- list()
1730455054646:# Calculate indices for each year
1730455054646:for (current_year in sort(unique(data$year))) {
1730455054646:# Prepare data for BBI calculation using density values
1730455054646:year_data <- data %>%
1730455054646:filter(year == current_year,
1730455054647:station %in% target_stations) %>%
1730455054647:group_by(station, species) %>%
1730455054647:summarise(density = sum(adjusted_density), .groups = 'drop') %>%  # Using adjusted_density
1730455054647:pivot_wider(names_from = station,
1730455054647:values_from = density,
1730455054647:values_fill = 0)
1730455054648:# Calculate BBI indices
1730455054648:bbi_results <- BBI(year_data)
1730455054648:# Store results
1730455054649:indices_list[[as.character(current_year)]] <- list(
1730455054649:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730455054649:classification = bbi_results$BBIclass,
1730455054649:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1730455054649:)
1730455054650:}
1730455054650:return(indices_list)
1730455054650:}
1730455056564:# Use the result dataframe that already has the correct density calculations
1730455056564:biotic_indices <- calculate_biotic_indices(result)
1730455060154:# Extract normalized EQR values for further analysis
1730455060154:normalized_eqr <- do.call(rbind, lapply(biotic_indices, function(x) x$normalized))
1730455060986:# Prepare data for heatmap
1730455060986:names(normalized_eqr) <- c("nAMBI", "nISI", "nNSI", "nNQI1", "nShannon", "nEQR")
1730455061259:stations <- rep(c("C4", "A7", "B5", "B8", "E4", "E3"), length(unique(df$year)))
1730455061524:years <- rep(sort(unique(df$year)), each = 6)
1730455061893:row_labels <- paste(stations, years, sep = " - ")
1730455062340:normalized_eqr_subset <- normalized_eqr[, c(1, 4, 5)]  # Select columns 1 (nAMBI), 4 (nNQI1), 5 (nShannon)
1730455062970:# Create a matrix for heatmap
1730455062971:heatmap_matrix <- as.matrix(normalized_eqr_subset)
1730455063707:rownames(heatmap_matrix) <- row_labels
1730455064253:# Define color palette
1730455064253:color_palette <- colorRampPalette(c("red", "yellow", "green"))(100)
1730455064602:# Create heatmap
1730455064602:png("output/BBI_heatmap.png", width = 1000, height = 1000, res = 100)
1730455065139:heatmap.2(heatmap_matrix,
1730455065139:main = "Benthic Biotic Indices\nby Station and Year",
1730455065139:xlab = "Indices",
1730455065139:ylab = "",
1730455065139:col = color_palette,
1730455065139:scale = "none",
1730455065139:key = TRUE,
1730455065139:keysize = 1.5,
1730455065139:density.info = "none",
1730455065139:trace = "none",
1730455065139:Rowv = T,
1730455065140:Colv = FALSE,
1730455065140:dendrogram = "row",
1730455065140:margins = c(5, 8),
1730455065140:cexRow = 0.9,
1730455065140:cexCol = 1.2,
1730455065140:srtCol = 45,
1730455065140:adjCol = c(1, 1),
1730455065140:cellnote = round(heatmap_matrix, 2),
1730455065140:notecol = "black",
1730455065140:notecex = 0.7,
1730455065140:labRow = row_labels,
1730455065140:labCol = colnames(heatmap_matrix))
1730455065755:dev.off()
1730455066300:# Function to extract normalized values and calculate summary statistics
1730455066300:get_yearly_stats <- function(year_data) {
1730455066301:df <- year_data$normalized
1730455066301:# Calculate means and SDs for required indices
1730455066301:means <- c(
1730455066301:mean(df$nEQR.nAMBI),
1730455066301:mean(df$nEQR.nNQI1),
1730455066301:mean(df$nEQR.nShannon)
1730455066302:)
1730455066302:sds <- c(
1730455066302:sd(df$nEQR.nAMBI),
1730455066302:sd(df$nEQR.nNQI1),
1730455066302:sd(df$nEQR.nShannon)
1730455066302:)
1730455066303:# Calculate mean status
1730455066303:mean_status <- mean(c(
1730455066303:mean(df$nEQR.nAMBI),
1730455066303:mean(df$nEQR.nNQI1),
1730455066303:mean(df$nEQR.nShannon)
1730455066303:))
1730455066304:status <- case_when(
1730455066304:mean_status < 0.2 ~ "Bad",
1730455066304:mean_status < 0.4 ~ "Poor",
1730455066304:mean_status < 0.6 ~ "Moderate",
1730455066304:mean_status < 0.8 ~ "Good",
1730455066304:TRUE ~ "High"
1730455066304:)
1730455066305:return(c(means, sds, status))
1730455066305:}
1730455066812:# Create empty dataframe for results
1730455066812:years <- names(biotic_indices)
1730455067255:summary_table <- data.frame(
1730455067255:Year = as.numeric(years),
1730455067255:matrix(NA, nrow = length(years), ncol = 7)
1730455067256:)
1730455067772:# Fill the dataframe
1730455067773:for(i in seq_along(years)) {
1730455067773:stats <- get_yearly_stats(biotic_indices[[years[i]]])
1730455067773:summary_table[i, 2:8] <- stats
1730455067773:}
1730455068579:# Set column names
1730455068579:colnames(summary_table) <- c("Year",
1730455068579:"nAMBI_mean", "nNQI1_mean", "nShannon_mean",
1730455068580:"nAMBI_sd", "nNQI1_sd", "nShannon_sd",
1730455068580:"Status")
1730455069500:# Format the table for presentation
1730455069500:# Format the table for presentation
1730455069500:final_table <- summary_table %>%
1730455069500:mutate(
1730455069500:across(ends_with("_mean"), as.numeric),
1730455069500:across(ends_with("_sd"), as.numeric),
1730455069500:nAMBI = sprintf("%.2f ± %.2f", as.numeric(nAMBI_mean), as.numeric(nAMBI_sd)),
1730455069501:nNQI1 = sprintf("%.2f ± %.2f", as.numeric(nNQI1_mean), as.numeric(nNQI1_sd)),
1730455069501:nShannon = sprintf("%.2f ± %.2f", as.numeric(nShannon_mean), as.numeric(nShannon_sd))
1730455069501:) %>%
1730455069501:select(Year, nAMBI, nNQI1, nShannon, Status)
1730455070443:# Alternative approach if the above still gives errors
1730455070443:final_table <- summary_table %>%
1730455070443:mutate(
1730455070443:nAMBI = paste0(round(as.numeric(nAMBI_mean), 2), " ± ",
1730455070443:round(as.numeric(nAMBI_sd), 2)),
1730455070444:nNQI1 = paste0(round(as.numeric(nNQI1_mean), 2), " ± ",
1730455070444:round(as.numeric(nNQI1_sd), 2)),
1730455070444:nShannon = paste0(round(as.numeric(nShannon_mean), 2), " ± ",
1730455070444:round(as.numeric(nShannon_sd), 2))
1730455070444:) %>%
1730455070444:select(Year, nAMBI, nNQI1, nShannon, Status)
1730455071658:# Print using kable
1730455071658:library(knitr)
1730455072171:kable(final_table,
1730455072172:caption = "Mean normalized benthic indices (± SD) across all stations showing temporal changes in Kolgrafafjörður fjord from 1999 to 2017.",
1730455072172:align = c("c", "c", "c", "c", "l"))
1730456469997:ft <- flextable(final_table) %>%
1730456469999:set_caption(caption = "Mean normalized benthic indices (± SD) across all stations showing temporal changes in Kolgrafafjörður fjord from 1999 to 2017.") %>%
1730456469999:align(j = 1:4, align = "center") %>%
1730456469999:align(j = 5, align = "left") %>%
1730456470000:set_header_labels(
1730456470000:Year = "Year",
1730456470000:nAMBI = "nAMBI",
1730456470000:nNQI1 = "nNQI1",
1730456470000:nShannon = "nShannon",
1730456470000:Status = "Ecological Status"
1730456470001:) %>%
1730456470001:theme_box() %>%
1730456470001:fontsize(size = 10) %>%
1730456470001:padding(padding = 4) %>%
1730456470001:border_outer(border = fp_border(width = 1.5)) %>%
1730456470002:border_inner_h(border = fp_border(width = 0.5)) %>%
1730456470002:autofit() %>%
1730456470002:bold(part = "header") %>%
1730456470002:bg(bg = "white", part = "all")
1730456471812:save_as_docx(
1730456471813:ft,
1730456471813:path = "output/benthic_indices_table.docx"
1730456471813:)
1730456604317:# Calculate the statistics
1730456604318:stats <- result %>%
1730456604318:filter(!year == 1999 & station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1730456604318:group_by(station, year) %>%
1730456604318:summarise(
1730456604318:n_taxa = n_distinct(species),
1730456604318:total_density = sum(adjusted_density),
1730456604319:.groups = 'drop'
1730456604319:)
1730456606554:min_taxa_info <- stats %>%
1730456606554:filter(n_taxa == min(n_taxa)) %>%
1730456606554:slice(1)  # In case there are multiple stations with the same minimum
1730456607219:max_taxa_info <- stats %>%
1730456607219:filter(n_taxa == max(n_taxa)) %>%
1730456607219:slice(1)  # In case there are multiple stations with the same maximum
1730456607700:min_density_info <- stats %>%
1730456607700:filter(total_density == min(total_density)) %>%
1730456607700:slice(1)
1730456608180:max_density_info <- stats %>%
1730456608181:filter(total_density == max(total_density)) %>%
1730456608181:slice(1)
1730456608970:# Print the results
1730456608970:print(min_taxa_info)
1730456609270:print(max_taxa_info)
1730456609629:print(min_density_info)
1730456610086:print(max_density_info)
1730456611363:# Prepare data for diversity calculations
1730456611363:species_matrix <- df %>%
1730456611363:select(species, sample_id, density) %>%
1730456611363:pivot_wider(
1730456611364:names_from = species,
1730456611364:values_from = density,
1730456611364:values_fill = 0,
1730456611364:values_fn = sum
1730456611364:) %>%
1730456611364:column_to_rownames(var = "sample_id") %>%
1730456611364:mutate(across(everything(), as.numeric))
1730456612123:# Calculate species richness and diversity indices
1730456612124:richness <- specnumber(species_matrix)
1730456612390:shannon <- diversity(species_matrix, index = "shannon")
1730456612733:simpson <- diversity(species_matrix, index = "simpson")
1730456613317:# Create diversity dataframe
1730456613318:diversity_df <- data.frame(
1730456613318:sample_id = rownames(species_matrix),
1730456613318:Richness = richness,
1730456613318:Shannon = shannon,
1730456613318:Simpson = simpson
1730456613318:) %>%
1730456613318:left_join(
1730456613318:df %>%
1730456613318:select(sample_id, year, station) %>%
1730456613319:distinct(),
1730456613319:by = "sample_id"
1730456613319:)
1730456614324:# Create output directory if it doesn't exist
1730456614324:if(!dir.exists("output")) {
1730456614325:dir.create("output")
1730456614325:}
1730456614989:# Plot diversity indices
1730456614989:richness_plot <- diversity_df %>%
1730456614989:filter(!year == 1999 & station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1730456614989:ggplot(aes(x = year, y = Richness, color = station, group = station)) +
1730456614989:geom_line() +
1730456614989:geom_point() +
1730456614990:theme_minimal() +
1730456614990:labs(title = "Species Richness Over Time by Station",
1730456614990:x = "Year",
1730456614990:y = "Species Richness")
1730456615565:shannon_plot <- diversity_df %>%
1730456615565:filter(!year == 1999 & station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1730456615566:ggplot(aes(x = year, y = Shannon, color = station, group = station)) +
1730456615566:geom_line() +
1730456615566:geom_point() +
1730456615566:theme_minimal() +
1730456615566:labs(title = "Shannon Diversity Over Time by Station",
1730456615566:x = "Year",
1730456615567:y = "Shannon Diversity Index")
1730456616230:# Save plots
1730456616230:ggsave("output/richness_plot.png", richness_plot, width = 10, height = 6, bg = "white")
1730456616826:ggsave("output/shannon_plot.png", shannon_plot, width = 10, height = 6, bg = "white")
1730456617383:# Summary statistics
1730456617383:summary_stats <- diversity_df %>%
1730456617383:group_by(year, station) %>%
1730456617383:summarise(
1730456617384:Mean_Richness = mean(Richness),
1730456617384:SD_Richness = sd(Richness),
1730456617384:Mean_Shannon = mean(Shannon),
1730456617384:SD_Shannon = sd(Shannon),
1730456617384:.groups = 'drop'
1730456617384:)
1730457019764:top_species
1730457091971:# Load cleaned data
1730457091972:df_result <- result # just so this won't be accidentally changed
1730457101372:# Prepare data for PERMANOVA
1730457101372:species_matrix <- df %>%
1730457101372:select(station, year, species, adjusted_density) %>%
1730457101372:pivot_wider(
1730457101373:names_from = species,
1730457101373:values_from = adjusted_density,
1730457101373:values_fill = 0
1730457101373:) %>%
1730457101374:select(-station, -year)
1730457113548:# Load cleaned data
1730457113548:#df_result <- result # just so this won't be accidentally changed
1730457113549:df <- df_result
1730457114876:# Prepare data for PERMANOVA
1730457114876:species_matrix <- df %>%
1730457114876:select(station, year, species, adjusted_density) %>%
1730457114876:pivot_wider(
1730457114876:names_from = species,
1730457114877:values_from = adjusted_density,
1730457114877:values_fill = 0
1730457114877:) %>%
1730457114877:select(-station, -year)
1730457132620:env_data <- df %>%
1730457132620:select(station, year) %>%
1730457132621:distinct()
1730457141620:species_matrix
1730457145915:env_data
1730457971870:# Perform PERMANOVA
1730457971870:permanova <- adonis2(species_matrix ~ station + year,
1730457971870:data = env_data,
1730457971870:permutations = 999,
1730457971870:method = "bray")
1730457972868:# Print results
1730457972868:print(permanova)
1730458031099:# Prepare data for NMDS
1730458031099:species_matrix <- df %>%
1730458031100:select(-stod, -Artal) %>%
1730458031100:as.matrix()
1730458073899:# Prepare data for NMDS
1730458073899:species_matrix <- df %>%
1730458073900:select(-station, -year) %>%
1730458073900:as.matrix()
1730458075965:# Perform NMDS
1730458075965:nmds <- metaMDS(species_matrix, distance = "bray")
1730458082852:species_matrix
1730458089017:# Load cleaned data
1730458089018:#df_result <- result # just so this won't be accidentally changed
1730458089018:df <- df_result
1730458090245:# Prepare data for NMDS
1730458090245:species_matrix <- df %>%
1730458090245:select(-station, -year) %>%
1730458090245:as.matrix()
1730458090868:# Perform NMDS
1730458090868:nmds <- metaMDS(species_matrix, distance = "bray")
1730458093838:species_matrix
1730458114933:result
1730458130189:species_matrix <- df %>%
1730458130189:select(station, year, species, adjusted_density) %>%
1730458130189:pivot_wider(
1730458130190:names_from = species,
1730458130190:values_from = adjusted_density,
1730458130190:values_fill = 0
1730458130190:) %>%
1730458130190:select(-station, -year)
1730458134221:species_matrix
1730458267523:# Prepare data for PERMANOVA
1730458267524:species_matrix <- df %>%
1730458267524:select(station, year, species, adjusted_density) %>%
1730458267524:pivot_wider(
1730458267524:names_from = species,
1730458267524:values_from = adjusted_density,
1730458267524:values_fill = 0
1730458267524:) %>%
1730458267525:select(-station, -year)
1730458271717:# Perform NMDS
1730458271717:nmds <- metaMDS(species_matrix, distance = "bray")
1730458296883:# Extract site scores
1730458296884:site_scores <- as.data.frame(scores(nmds, display = "sites"))
1730458297486:site_scores$Station <- df$station
1730458404253:# Prepare data for NMDS
1730458404253:species_matrix <- df %>%
1730458404253:select(station, year, species, adjusted_density) %>%
1730458404254:pivot_wider(
1730458404254:names_from = species,
1730458404254:values_from = adjusted_density,
1730458404254:values_fill = 0
1730458404254:) %>%
1730458404254:# Store station and year before removing them for NMDS
1730458404254:mutate(
1730458404255:station_temp = station,
1730458404255:year_temp = year
1730458404255:) %>%
1730458404255:select(-station, -year)
1730458404269:# Perform NMDS
1730458404270:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1730458404351:# Extract site scores and add metadata
1730458404352:site_scores <- as.data.frame(scores(nmds, display = "sites"))
1730458404352:site_scores$Station <- species_matrix$station_temp
1730458404352:site_scores$Year <- species_matrix$year_temp
1730458447507:# Extract species scores
1730458447508:species_scores <- as.data.frame(scores(nmds, display = "species"))
1730458449213:# Plot NMDS
1730458449213:nmds_plot <- ggplot() +
1730458449214:geom_point(data = site_scores, aes(x = NMDS1, y = NMDS2, color = Station, shape = Year), size = 3) +
1730458449214:geom_text(data = species_scores, aes(x = NMDS1, y = NMDS2, label = rownames(species_scores)),
1730458449214:size = 3, alpha = 0.5) +
1730458449214:theme_minimal() +
1730458449214:labs(title = "NMDS of Community Composition")
1730458453835:# Save plot
1730458453835:ggsave("output/nmds_plot.png", nmds_plot)
1730458457515:nmds_plot
1730458462111:rlang::last_trace()
1730458511245:site_scores$Year <- as.factor(species_matrix$year_temp)  # Convert Year to factor
1730458512181:# Extract species scores
1730458512181:species_scores <- as.data.frame(scores(nmds, display = "species"))
1730458512827:# Plot NMDS
1730458512827:nmds_plot <- ggplot() +
1730458512828:geom_point(data = site_scores, aes(x = NMDS1, y = NMDS2, color = Station, shape = Year), size = 3) +
1730458512828:geom_text(data = species_scores, aes(x = NMDS1, y = NMDS2, label = rownames(species_scores)),
1730458512828:size = 3, alpha = 0.5) +
1730458512828:theme_minimal() +
1730458512828:labs(title = "NMDS of Community Composition")
1730458513365:# Save plot
1730458513366:ggsave("output/nmds_plot.png", nmds_plot)
1730458633099:# Plot NMDS
1730458633099:nmds_plot <- ggplot() +
1730458633100:geom_point(data = site_scores, aes(x = NMDS1, y = NMDS2, color = Station, shape = Year), size = 3) +
1730458633100:geom_text(data = species_scores, aes(x = NMDS1, y = NMDS2, label = rownames(species_scores)),
1730458633100:size = 3, alpha = 0.5) +
1730458633100:theme_bw() +  # Change to theme_bw() for white background
1730458633100:theme(
1730458633100:panel.background = element_rect(fill = "white"),  # White panel background
1730458633100:plot.background = element_rect(fill = "white"),   # White plot background
1730458633101:panel.grid.major = element_line(color = "grey90"), # Lighter grid lines
1730458633101:panel.grid.minor = element_line(color = "grey95")  # Lighter minor grid lines
1730458633101:) +
1730458633101:labs(title = "NMDS of Community Composition")
1730458634061:# Save plot with white background
1730458634062:ggsave("output/nmds_plot.png", nmds_plot, bg = "white")  # Explicitly set background color in ggsave
1730458771848:# Prepare data for NMDS - exclude 1999 data
1730458771848:species_matrix <- df %>%
1730458771849:filter(year >= 2013) %>%  # Only include 2013-2017 data
1730458771849:select(station, year, species, adjusted_density) %>%
1730458771849:pivot_wider(
1730458771849:names_from = species,
1730458771849:values_from = adjusted_density,
1730458771849:values_fill = 0
1730458771849:)
1730458771860:# Perform NMDS
1730458771860:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1730458906597:# Prepare data for NMDS - exclude 1999 data
1730458906597:species_matrix <- df %>%
1730458906597:filter(year >= 2013) %>%  # Only include 2013-2017 data
1730458906598:select(station, year, species, adjusted_density) %>%
1730458906598:pivot_wider(
1730458906598:names_from = species,
1730458906598:values_from = adjusted_density,
1730458906598:values_fill = 0
1730458906599:) %>%
1730458906599:# Store station and year before removing them for NMDS
1730458906599:mutate(
1730458906599:station_temp = station,
1730458906599:year_temp = year
1730458906599:) %>%
1730458906600:select(-station, -year)
1730458906613:# Perform NMDS
1730458906613:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1730458906691:# Extract site scores and add metadata
1730458906691:site_scores <- as.data.frame(scores(nmds, display = "sites"))
1730458906691:site_scores$Station <- species_matrix$station_temp
1730458906691:site_scores$Year <- as.factor(species_matrix$year_temp)  # Convert Year to factor
1730458906692:# Extract species scores
1730458906692:species_scores <- as.data.frame(scores(nmds, display = "species"))
1730458906692:# Plot NMDS
1730458906692:nmds_plot <- ggplot() +
1730458906692:geom_point(data = site_scores, aes(x = NMDS1, y = NMDS2, color = Station, shape = Year), size = 3) +
1730458906692:geom_text(data = species_scores, aes(x = NMDS1, y = NMDS2, label = rownames(species_scores)),
1730458906692:size = 3, alpha = 0.5) +
1730458906692:theme_bw() +  # Change to theme_bw() for white background
1730458906692:theme(
1730458906693:panel.background = element_rect(fill = "white"),  # White panel background
1730458906693:plot.background = element_rect(fill = "white"),   # White plot background
1730458906693:panel.grid.major = element_line(color = "grey90"), # Lighter grid lines
1730458906693:panel.grid.minor = element_line(color = "grey95")  # Lighter minor grid lines
1730458906693:) +
1730458906693:labs(title = "NMDS of Community Composition")
1730458906700:# Save plot with white background
1730458906700:ggsave("output/nmds_plot.png", nmds_plot, bg = "white")  # Explicitly set background color in ggsave
1730459093302:unique(result$station)
1730459496327:df <- jorundur  %>%
1730459496328:rename(
1730459496328:species = Flokkun,
1730459496328:sample_id = id,
1730459496328:year = Artal,
1730459496328:station = stod,
1730459496328:subdivision = skipting,
1730459496328:count = N,
1730459496329:density = Nu
1730459496329:)
1730459497477:result <- df %>%
1730459497477:filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1730459497477:# First, apply the subdivision to the count
1730459497477:mutate(adjusted_count = count * subdivision) %>%
1730459497478:# Calculate the correct number of samples and total area for each station-year combination
1730459497478:group_by(station, year) %>%
1730459497478:mutate(
1730459497478:n_samples = n_distinct(sample_id),
1730459497478:grab_area = case_when(
1730459497478:year == 1999 ~ 0.0225,
1730459497478:TRUE ~ 0.04
1730459497479:),
1730459497479:total_area = grab_area * n_samples
1730459497479:) %>%
1730459497479:ungroup() %>%
1730459497479:# Now group by station, year, and species to get total counts
1730459497479:group_by(station, year, species) %>%
1730459497480:summarise(
1730459497480:original_total_count = sum(count),
1730459497480:adjusted_total_count = sum(adjusted_count),
1730459497480:n_samples = first(n_samples),  # Use the previously calculated n_samples
1730459497480:total_area = first(total_area),  # Use the previously calculated total_area
1730459497481:.groups = 'keep'
1730459497481:) %>%
1730459497481:# Calculate densities
1730459497481:mutate(
1730459497481:original_density = original_total_count / total_area,
1730459497482:adjusted_density = adjusted_total_count / total_area,
1730459497482:density_difference = adjusted_density - original_density,
1730459497482:density_ratio = adjusted_density / original_density
1730459497482:) %>%
1730459497482:# Ungroup
1730459497483:ungroup()
1730459499118:# various Benthic Biotic Indices (BBI) for different years and stations. It then creates heatmaps to visualize these indices. This provides a good overview of the ecological status of the benthic communities over time and across different sampling sites.
1730459499118:library(BBI)
1730459500014:library(gplots)
1730459500902:# Calculate Benthic Biotic Indices (BBI) for each year and station
1730459500902:calculate_biotic_indices <- function(data) {
1730459500902:# Validate input data
1730459500902:required_cols <- c("year", "station", "species", "adjusted_density")  # Changed from count to adjusted_density
1730459500903:stopifnot(
1730459500903:"Missing required columns" = all(required_cols %in% colnames(data)),
1730459500903:"No data provided" = nrow(data) > 0,
1730459500903:"Negative density values found" = all(data$adjusted_density >= 0),
1730459500903:"Missing values found" = !any(is.na(data$adjusted_density))
1730459500903:)
1730459500904:# Define target stations
1730459500904:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730459500904:# Initialize lists to store results
1730459500904:indices_list <- list()
1730459500904:# Calculate indices for each year
1730459500905:for (current_year in sort(unique(data$year))) {
1730459500905:# Prepare data for BBI calculation using density values
1730459500905:year_data <- data %>%
1730459500905:filter(year == current_year,
1730459500905:station %in% target_stations) %>%
1730459500906:group_by(station, species) %>%
1730459500906:summarise(density = sum(adjusted_density), .groups = 'drop') %>%  # Using adjusted_density
1730459500906:pivot_wider(names_from = station,
1730459500906:values_from = density,
1730459500906:values_fill = 0)
1730459500907:# Calculate BBI indices
1730459500907:bbi_results <- BBI(year_data)
1730459500907:# Store results
1730459500907:indices_list[[as.character(current_year)]] <- list(
1730459500908:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730459500908:classification = bbi_results$BBIclass,
1730459500908:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1730459500908:)
1730459500908:}
1730459500909:return(indices_list)
1730459500909:}
1730459501559:# Use the result dataframe that already has the correct density calculations
1730459501559:biotic_indices <- calculate_biotic_indices(result)
1730459503468:# Extract normalized EQR values for further analysis
1730459503468:normalized_eqr <- do.call(rbind, lapply(biotic_indices, function(x) x$normalized))
1730459503470:# Prepare data for heatmap
1730459503470:names(normalized_eqr) <- c("nAMBI", "nISI", "nNSI", "nNQI1", "nShannon", "nEQR")
1730459503470:stations <- rep(c("C4", "A7", "B5", "B8", "E4", "E3"), length(unique(df$year)))
1730459503470:years <- rep(sort(unique(df$year)), each = 6)
1730459503471:row_labels <- paste(stations, years, sep = " - ")
1730459503471:normalized_eqr_subset <- normalized_eqr[, c(1, 4, 5)]  # Select columns 1 (nAMBI), 4 (nNQI1), 5 (nShannon)
1730459503471:# Create a matrix for heatmap
1730459503471:heatmap_matrix <- as.matrix(normalized_eqr_subset)
1730459503472:rownames(heatmap_matrix) <- row_labels
1730459503472:# Define color palette
1730459503472:color_palette <- colorRampPalette(c("red", "yellow", "green"))(100)
1730459504700:# Create heatmap
1730459504700:png("output/BBI_heatmap.png", width = 1000, height = 1000, res = 100)
1730459505573:heatmap.2(heatmap_matrix,
1730459505574:main = "Benthic Biotic Indices\nby Station and Year",
1730459505574:xlab = "Indices",
1730459505574:ylab = "",
1730459505574:col = color_palette,
1730459505574:scale = "none",
1730459505574:key = TRUE,
1730459505575:keysize = 1.5,
1730459505575:density.info = "none",
1730459505575:trace = "none",
1730459505575:Rowv = T,
1730459505575:Colv = FALSE,
1730459505575:dendrogram = "row",
1730459505576:margins = c(5, 8),
1730459505576:cexRow = 0.9,
1730459505576:cexCol = 1.2,
1730459505576:srtCol = 45,
1730459505576:adjCol = c(1, 1),
1730459505576:cellnote = round(heatmap_matrix, 2),
1730459505576:notecol = "black",
1730459505576:notecex = 0.7,
1730459505577:labRow = row_labels,
1730459505577:labCol = colnames(heatmap_matrix))
1730459506244:dev.off()
1730459507141:# Function to extract normalized values and calculate summary statistics
1730459507141:get_yearly_stats <- function(year_data) {
1730459507141:df <- year_data$normalized
1730459507142:# Calculate means and SDs for required indices
1730459507142:means <- c(
1730459507142:mean(df$nEQR.nAMBI),
1730459507142:mean(df$nEQR.nNQI1),
1730459507142:mean(df$nEQR.nShannon)
1730459507142:)
1730459507143:sds <- c(
1730459507143:sd(df$nEQR.nAMBI),
1730459507143:sd(df$nEQR.nNQI1),
1730459507143:sd(df$nEQR.nShannon)
1730459507143:)
1730459507144:# Calculate mean status
1730459507144:mean_status <- mean(c(
1730459507144:mean(df$nEQR.nAMBI),
1730459507144:mean(df$nEQR.nNQI1),
1730459507144:mean(df$nEQR.nShannon)
1730459507145:))
1730459507145:status <- case_when(
1730459507145:mean_status < 0.2 ~ "Bad",
1730459507145:mean_status < 0.4 ~ "Poor",
1730459507146:mean_status < 0.6 ~ "Moderate",
1730459507146:mean_status < 0.8 ~ "Good",
1730459507146:TRUE ~ "High"
1730459507146:)
1730459507146:return(c(means, sds, status))
1730459507147:}
1730459507765:# Create empty dataframe for results
1730459507765:years <- names(biotic_indices)
1730459508206:summary_table <- data.frame(
1730459508206:Year = as.numeric(years),
1730459508206:matrix(NA, nrow = length(years), ncol = 7)
1730459508206:)
1730459508878:# Fill the dataframe
1730459508878:for(i in seq_along(years)) {
1730459508878:stats <- get_yearly_stats(biotic_indices[[years[i]]])
1730459508879:summary_table[i, 2:8] <- stats
1730459508879:}
1730459509589:# Set column names
1730459509589:colnames(summary_table) <- c("Year",
1730459509589:"nAMBI_mean", "nNQI1_mean", "nShannon_mean",
1730459509589:"nAMBI_sd", "nNQI1_sd", "nShannon_sd",
1730459509590:"Status")
1730459510230:# Format the table for presentation
1730459510230:# Format the table for presentation
1730459510230:final_table <- summary_table %>%
1730459510230:mutate(
1730459510230:across(ends_with("_mean"), as.numeric),
1730459510230:across(ends_with("_sd"), as.numeric),
1730459510231:nAMBI = sprintf("%.2f ± %.2f", as.numeric(nAMBI_mean), as.numeric(nAMBI_sd)),
1730459510231:nNQI1 = sprintf("%.2f ± %.2f", as.numeric(nNQI1_mean), as.numeric(nNQI1_sd)),
1730459510231:nShannon = sprintf("%.2f ± %.2f", as.numeric(nShannon_mean), as.numeric(nShannon_sd))
1730459510231:) %>%
1730459510231:select(Year, nAMBI, nNQI1, nShannon, Status)
1730459510743:# Alternative approach if the above still gives errors
1730459510743:final_table <- summary_table %>%
1730459510743:mutate(
1730459510743:nAMBI = paste0(round(as.numeric(nAMBI_mean), 2), " ± ",
1730459510743:round(as.numeric(nAMBI_sd), 2)),
1730459510743:nNQI1 = paste0(round(as.numeric(nNQI1_mean), 2), " ± ",
1730459510743:round(as.numeric(nNQI1_sd), 2)),
1730459510744:nShannon = paste0(round(as.numeric(nShannon_mean), 2), " ± ",
1730459510744:round(as.numeric(nShannon_sd), 2))
1730459510744:) %>%
1730459510744:select(Year, nAMBI, nNQI1, nShannon, Status)
1730459511639:# Print using kable
1730459511639:library(knitr)
1730459512222:kable(final_table,
1730459512223:caption = "Mean normalized benthic indices (± SD) across all stations showing temporal changes in Kolgrafafjörður fjord from 1999 to 2017.",
1730459512223:align = c("c", "c", "c", "c", "l"))
1730459533045:ft <- flextable(final_table) %>%
1730459533045:set_caption(caption = "Mean normalized benthic indices (± SD) across all stations showing temporal changes in Kolgrafafjörður fjord from 1999 to 2017.") %>%
1730459533045:align(j = 1:4, align = "center") %>%
1730459533046:align(j = 5, align = "left") %>%
1730459533046:set_header_labels(
1730459533046:Year = "Year",
1730459533046:nAMBI = "nAMBI",
1730459533046:nNQI1 = "nNQI1",
1730459533046:nShannon = "nShannon",
1730459533046:Status = "Ecological Status"
1730459533046:) %>%
1730459533047:theme_box() %>%
1730459533047:fontsize(size = 10) %>%
1730459533047:padding(padding = 4) %>%
1730459533047:border_outer(border = fp_border(width = 1.5)) %>%
1730459533047:border_inner_h(border = fp_border(width = 0.5)) %>%
1730459533047:autofit() %>%
1730459533048:bold(part = "header") %>%
1730459533048:bg(bg = "white", part = "all")
1730459534102:save_as_docx(
1730459534102:ft,
1730459534102:path = "output/benthic_indices_table.docx"
1730459534102:)
1730459648572:df_result <- result
1730459657946:str(df_result$station)
1730459663324:unique(df_result$station)
1730459671509:# Load cleaned data
1730459671510:#df_result <- result # just so this won't be accidentally changed
1730459671510:df <- df_result
1730459672102:# Prepare data for NMDS - exclude 1999 data
1730459672102:species_matrix <- df %>%
1730459672102:filter(!year == 1999 & station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1730459672102:select(station, year, species, adjusted_density) %>%
1730459672103:pivot_wider(
1730459672103:names_from = species,
1730459672103:values_from = adjusted_density,
1730459672103:values_fill = 0
1730459672103:) %>%
1730459672103:# Store station and year before removing them for NMDS
1730459672104:mutate(
1730459672104:station_temp = station,
1730459672104:year_temp = year
1730459672104:) %>%
1730459672104:select(-station, -year)
1730459672820:# Perform NMDS
1730459672820:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1730459679572:# Extract site scores and add metadata
1730459679573:site_scores <- as.data.frame(scores(nmds, display = "sites"))
1730459680031:site_scores$Station <- species_matrix$station_temp
1730459680550:site_scores$Year <- as.factor(species_matrix$year_temp)  # Convert Year to factor
1730459680957:# Extract species scores
1730459680957:species_scores <- as.data.frame(scores(nmds, display = "species"))
1730459681901:# Plot NMDS
1730459681901:nmds_plot <- ggplot() +
1730459681901:geom_point(data = site_scores, aes(x = NMDS1, y = NMDS2, color = Station, shape = Year), size = 3) +
1730459681902:geom_text(data = species_scores, aes(x = NMDS1, y = NMDS2, label = rownames(species_scores)),
1730459681902:size = 3, alpha = 0.5) +
1730459681902:theme_bw() +  # Change to theme_bw() for white background
1730459681902:theme(
1730459681902:panel.background = element_rect(fill = "white"),  # White panel background
1730459681902:plot.background = element_rect(fill = "white"),   # White plot background
1730459681902:panel.grid.major = element_line(color = "grey90"), # Lighter grid lines
1730459681903:panel.grid.minor = element_line(color = "grey95")  # Lighter minor grid lines
1730459681903:) +
1730459681903:labs(title = "NMDS of Community Composition")
1730459684349:# Save plot with white background
1730459684349:ggsave("output/nmds_plot.png", nmds_plot, bg = "white")  # Explicitly set background color in ggsave
1730459714582:DT::datatable(df)
1730461009728:jorundur <- ekkiungvidi %>%
1730461009729:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1730461009729:mutate(
1730461009729:Flokkun = case_when(
1730461009729:# General taxonomic standardization (no year-specific)
1730461009729:str_detect(tolower(Flokkun), "^sipuncul") ~ "Sipuncula",
1730461009729:tolower(Flokkun) == "ostracoda" ~ "Ostracoda",
1730461009729:tolower(Flokkun) == "terebellides stroemi" ~ "Terebellides stroemii",
1730461009730:tolower(Flokkun) == "bivalvia" ~ "NA",
1730461009730:# 1999 specific matches
1730461009730:Artal == "1999" & tolower(Flokkun) %in% c("ampharetinae", "ampharete acutifrons") ~ "Ampharetidae",
1730461009730:Artal == "1999" & tolower(Flokkun) == "bivalvia" ~ "NA",
1730461009730:Artal == "1999" & tolower(Flokkun) == "leucon acutirostris" ~ "Cumacea",
1730461009731:Artal == "1999" & tolower(Flokkun) == "eudorella emarginata" ~ "Cumacea",
1730461009731:Artal == "1999" & tolower(Flokkun) == "musculus discors" ~ "Musculus",
1730461009731:Artal == "1999" & tolower(Flokkun) == "aricidea (acmira) cerrutii" ~ "Aricidea suecica",
1730461009731:Artal == "1999" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1730461009732:# 2013 specific matches
1730461009732:Artal == "2013" & tolower(Flokkun) %in% c("harmothoe", "polynoidae") ~ "Harmothoe extenuata",
1730461009732:Artal == "2013" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730461009732:# 2014 specific matches
1730461009733:Artal == "2014" & tolower(Flokkun) == "ampharete acutifrons" ~ "Ampharetidae",
1730461009733:Artal == "2014" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730461009733:Artal == "2014" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730461009733:Artal == "2014" & tolower(Flokkun) == "caprellidae" ~ "Caprella septemtrionalis",
1730461009733:Artal == "2014" & tolower(Flokkun) == "praxillella" ~ "Praxillella praetermissa",
1730461009734:Artal == "2014" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1730461009734:Artal == "2014" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730461009734:Artal == "2014" & tolower(Flokkun) == "mytilus edulis" ~ "Mytilidae",
1730461009734:Artal == "2014" & tolower(Flokkun) == "nephtyidae" ~ "Nephthys",
1730461009735:Artal == "2014" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1730461009735:Artal == "2014" & tolower(Flokkun) == "tubificidae" ~ "Tubificoides kozloffi",
1730461009735:Artal == "2014" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730461009736:# 2015 specific matches
1730461009736:Artal == "2015" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730461009736:Artal == "2015" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730461009736:Artal == "2015" & tolower(Flokkun) == "crenella" ~ "Crenella decussata",
1730461009737:Artal == "2015" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1730461009737:Artal == "2015" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730461009737:Artal == "2015" & tolower(Flokkun) == "mytilidae" ~ "Mytilus edulis",
1730461009737:Artal == "2015" & tolower(Flokkun) == "ampharetidae" ~ "NA",
1730461009738:Artal == "2015" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730461009738:Artal == "2015" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730461009738:Artal == "2015" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1730461009739:# 2016 specific matches
1730461009739:Artal == "2016" & tolower(Flokkun) == "orbiniidae" ~ "Scoloplos armiger",
1730461009739:Artal == "2016" & tolower(Flokkun) == "polychaeta" ~ "NA",
1730461009740:Artal == "2016" & tolower(Flokkun) == "polynoidae" ~ "Harmothoe imbricata",
1730461009740:Artal == "2016" & tolower(Flokkun) %in% c("spio filicornis", "spionidae") ~ "Spionidae",
1730461009740:Artal == "2016" & tolower(Flokkun) %in% c("syllis", "syllidae") ~ "Syllis cornuta",
1730461009741:Artal == "2016" & tolower(Flokkun) %in% c("terebellidae", "terebelliformia") ~ "Terebellides stroemii",
1730461009741:Artal == "2016" & tolower(Flokkun) == "amphipoda" ~ "NA",
1730461009742:Artal == "2016" & tolower(Flokkun) == "bivalvia" ~ "NA",
1730461009742:Artal == "2016" & tolower(Flokkun) == "cardium" ~ "NA",
1730461009742:Artal == "2016" & tolower(Flokkun) == "aricidea" ~ "Amphitrite cirrata",
1730461009742:Artal == "2016" & tolower(Flokkun) == "capitellidae" ~ "Capitella capitata",
1730461009743:Artal == "2016" & tolower(Flokkun) == "cirratulidae" ~ "Cirratulus cirratus",
1730461009743:Artal == "2016" & tolower(Flokkun) == "cossuridae" ~ "Cossura longocirrata",
1730461009743:Artal == "2016" & tolower(Flokkun) == "pectinariidae" ~ "Pectinaria koreni",
1730461009744:Artal == "2016" & tolower(Flokkun) == "phyllodocida" ~ "Phyllodoce maculata",
1730461009744:Artal == "2016" & tolower(Flokkun) == "lumbrineridae" ~ "Lumbrineris",
1730461009744:Artal == "2016" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730461009745:Artal == "2016" & tolower(Flokkun) == "balanus balanus" ~ "Balanus",
1730461009745:Artal == "2016" & tolower(Flokkun) %in% c("priapulidae", "priapulidae") ~ "Priapulus caudatus",
1730461009746:# 2017 specific matches
1730461009746:Artal == "2017" & tolower(Flokkun) == "oligochaeta" ~ "NA",
1730461009746:Artal == "2017" & tolower(Flokkun) == "tubificidae" ~ "NA",
1730461009747:Artal == "2017" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1730461009747:Artal == "2017" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730461009747:Artal == "2017" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730461009748:Artal == "2017" & tolower(Flokkun) == "caprellidae" ~ "Caprella septentrionalis",
1730461009748:Artal == "2017" & tolower(Flokkun) == "opisthobranchia" ~ "Retusa pertenuis",
1730461009748:Artal == "2017" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730461009749:Artal == "2017" & tolower(Flokkun) == "maldanidae" ~ "Praxillella praetermissa",
1730461009749:Artal == "2017" & tolower(Flokkun) %in% c("ampharete", "ampharete acutifrons") ~ "Ampharetidae",
1730461009749:Artal == "2017" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730461009750:Artal == "2017" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730461009750:# Default case
1730461009751:TRUE ~ Flokkun
1730461009751:)
1730461009751:) %>%
1730461009752:drop_na()
1730461012807:df <- jorundur  %>%
1730461012807:rename(
1730461012807:species = Flokkun,
1730461012808:sample_id = id,
1730461012808:year = Artal,
1730461012808:station = stod,
1730461012808:subdivision = skipting,
1730461012808:count = N,
1730461012808:density = Nu
1730461012808:)
1730461014765:result <- df %>%
1730461014765:filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1730461014765:# First, apply the subdivision to the count
1730461014766:mutate(adjusted_count = count * subdivision) %>%
1730461014766:# Calculate the correct number of samples and total area for each station-year combination
1730461014766:group_by(station, year) %>%
1730461014766:mutate(
1730461014766:n_samples = n_distinct(sample_id),
1730461014767:grab_area = case_when(
1730461014767:year == 1999 ~ 0.0225,
1730461014767:TRUE ~ 0.04
1730461014767:),
1730461014767:total_area = grab_area * n_samples
1730461014767:) %>%
1730461014768:ungroup() %>%
1730461014768:# Now group by station, year, and species to get total counts
1730461014768:group_by(station, year, species) %>%
1730461014768:summarise(
1730461014768:original_total_count = sum(count),
1730461014769:adjusted_total_count = sum(adjusted_count),
1730461014769:n_samples = first(n_samples),  # Use the previously calculated n_samples
1730461014769:total_area = first(total_area),  # Use the previously calculated total_area
1730461014769:.groups = 'keep'
1730461014769:) %>%
1730461014769:# Calculate densities
1730461014770:mutate(
1730461014770:original_density = original_total_count / total_area,
1730461014770:adjusted_density = adjusted_total_count / total_area,
1730461014770:density_difference = adjusted_density - original_density,
1730461014770:density_ratio = adjusted_density / original_density
1730461014771:) %>%
1730461014771:# Ungroup
1730461014771:ungroup()
1730461035461:df_result <- result # just so this won't be accidentally changed
1730461038286:# Load cleaned data
1730461038286:#df_result <- result # just so this won't be accidentally changed
1730461038287:df <- df_result
1730461038744:# Prepare data for NMDS - exclude 1999 data
1730461038744:species_matrix <- df %>%
1730461038744:filter(!year == 1999 & station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1730461038744:select(station, year, species, adjusted_density) %>%
1730461038744:pivot_wider(
1730461038745:names_from = species,
1730461038745:values_from = adjusted_density,
1730461038745:values_fill = 0
1730461038745:) %>%
1730461038745:# Store station and year before removing them for NMDS
1730461038745:mutate(
1730461038746:station_temp = station,
1730461038746:year_temp = year
1730461038746:) %>%
1730461038746:select(-station, -year)
1730461039343:# Perform NMDS
1730461039344:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1730461039726:# Extract site scores and add metadata
1730461039726:site_scores <- as.data.frame(scores(nmds, display = "sites"))
1730461039967:site_scores$Station <- species_matrix$station_temp
1730461040320:site_scores$Year <- as.factor(species_matrix$year_temp)  # Convert Year to factor
1730461040630:# Extract species scores
1730461040630:species_scores <- as.data.frame(scores(nmds, display = "species"))
1730461041032:# Plot NMDS
1730461041032:nmds_plot <- ggplot() +
1730461041032:geom_point(data = site_scores, aes(x = NMDS1, y = NMDS2, color = Station, shape = Year), size = 3) +
1730461041032:geom_text(data = species_scores, aes(x = NMDS1, y = NMDS2, label = rownames(species_scores)),
1730461041032:size = 3, alpha = 0.5) +
1730461041033:theme_bw() +  # Change to theme_bw() for white background
1730461041033:theme(
1730461041033:panel.background = element_rect(fill = "white"),  # White panel background
1730461041033:plot.background = element_rect(fill = "white"),   # White plot background
1730461041033:panel.grid.major = element_line(color = "grey90"), # Lighter grid lines
1730461041034:panel.grid.minor = element_line(color = "grey95")  # Lighter minor grid lines
1730461041034:) +
1730461041034:labs(title = "NMDS of Community Composition")
1730461042988:# Save plot with white background
1730461042988:ggsave("output/nmds_plot.png", nmds_plot, bg = "white")  # Explicitly set background color in ggsave
1730461352469:site_scores
1730461359077:species_scores
1730461449638:df <- df_result
1730461449639:# Prepare data for NMDS - exclude 1999 data
1730461449639:species_matrix <- df %>%
1730461449639:filter(year >= 2013) %>%  # Only include 2013-2017 data
1730461449639:select(station, year, species, adjusted_density) %>%
1730461449639:pivot_wider(
1730461449640:names_from = species,
1730461449640:values_from = adjusted_density,
1730461449640:values_fill = 0
1730461449640:) %>%
1730461449640:# Store station and year before removing them for NMDS
1730461449640:mutate(
1730461449641:station_temp = station,
1730461449641:year_temp = year
1730461449641:) %>%
1730461449641:select(-station, -year)
1730461449658:# Perform NMDS
1730461449658:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1730461449718:# Extract site scores and add metadata
1730461449718:site_scores <- as.data.frame(scores(nmds, display = "sites"))
1730461449718:site_scores$Station <- species_matrix$station_temp
1730461449719:site_scores$Year <- as.factor(species_matrix$year_temp)  # Convert Year to factor
1730461449719:# Extract species scores
1730461449719:species_scores <- as.data.frame(scores(nmds, display = "species"))
1730461449719:# Calculate species contributions (using relative abundance)
1730461449719:species_rel_abundance <- colSums(select(species_matrix, -station_temp, -year_temp)) /
1730461449720:sum(select(species_matrix, -station_temp, -year_temp))
1730461449724:important_species <- names(sort(species_rel_abundance[species_rel_abundance > 0.01], decreasing = TRUE))
1730461449724:# Filter species scores to only show important species
1730461449724:species_scores_filtered <- species_scores[rownames(species_scores) %in% important_species, ]
1730461449725:# Create the plot
1730461449725:nmds_plot <- ggplot() +
1730461449725:# Add arrows to show temporal progression
1730461449725:geom_path(data = site_scores,
1730461449725:aes(x = NMDS1, y = NMDS2, color = Station, group = Station),
1730461449725:arrow = arrow(length = unit(0.2, "cm"), type = "closed"),
1730461449725:alpha = 0.5) +
1730461449725:# Add points for sites
1730461449725:geom_point(data = site_scores,
1730461449726:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1730461449726:size = 3) +
1730461449726:# Add filtered species labels
1730461449726:geom_text(data = as.data.frame(species_scores_filtered),
1730461449726:aes(x = NMDS1, y = NMDS2, label = rownames(species_scores_filtered)),
1730461449726:size = 2.5, alpha = 0.7,
1730461449726:check_overlap = TRUE) +
1730461449726:theme_bw() +
1730461449726:theme(
1730461449727:panel.background = element_rect(fill = "white"),
1730461449727:plot.background = element_rect(fill = "white"),
1730461449727:panel.grid.major = element_line(color = "grey90"),
1730461449727:panel.grid.minor = element_line(color = "grey95")
1730461449727:) +
1730461449727:labs(title = "NMDS of Community Composition (2013-2017)",
1730461449727:caption = "Arrows show temporal progression. Only species with >1% relative abundance shown.")
1730461449738:# Save plot
1730461449738:ggsave("output/nmds_plot.png", nmds_plot, width = 10, height = 8, bg = "white")
1730472818318:# After NMDS calculation, add analysis of axis contributions
1730472818318:# Calculate correlation of environmental variables with NMDS axes
1730472818318:env_data <- df %>%
1730472818318:filter(year >= 2013) %>%
1730472818318:select(station, year, organic_content, depth) %>%
1730472818319:distinct()
1730473050211:sediment_env_data <- readRDS("data/raw/sediment_env_data.rds")
1730473055178:str(sediment_env_data)
1730473171951:# After NMDS calculation, add analysis of axis contributions
1730473171951:# Calculate correlation of environmental variables with NMDS axes
1730473171952:env_data <- readRDS("data/raw/sediment_env_data.rds") %>%
1730473171952:select(station, year,
1730473171952:organic_content, depth,
1730473171952:grain_20um, grain_63um, grain_125um,
1730473171953:grain_250um, grain_1000um) %>%
1730473171953:distinct()
1730473175099:# Merge with NMDS scores
1730473175099:nmds_env <- site_scores %>%
1730473175100:left_join(env_data, by = c("Station" = "station", "Year" = "year"))
1730473177328:# Calculate correlation with axes
1730473177328:axis_correlations <- data.frame(
1730473177328:Variable = c("Organic Content", "Depth",
1730473177328:"Grain Size <20μm", "Grain Size <63μm",
1730473177328:"Grain Size <125μm", "Grain Size <250μm",
1730473177329:"Grain Size <1000μm"),
1730473177329:NMDS1 = c(
1730473177329:cor(nmds_env$NMDS1, nmds_env$organic_content),
1730473177329:cor(nmds_env$NMDS1, nmds_env$depth),
1730473177329:cor(nmds_env$NMDS1, nmds_env$grain_20um),
1730473177330:cor(nmds_env$NMDS1, nmds_env$grain_63um),
1730473177330:cor(nmds_env$NMDS1, nmds_env$grain_125um),
1730473177330:cor(nmds_env$NMDS1, nmds_env$grain_250um),
1730473177330:cor(nmds_env$NMDS1, nmds_env$grain_1000um)
1730473177330:),
1730473177330:NMDS2 = c(
1730473177331:cor(nmds_env$NMDS2, nmds_env$organic_content),
1730473177331:cor(nmds_env$NMDS2, nmds_env$depth),
1730473177331:cor(nmds_env$NMDS2, nmds_env$grain_20um),
1730473177331:cor(nmds_env$NMDS2, nmds_env$grain_63um),
1730473177331:cor(nmds_env$NMDS2, nmds_env$grain_125um),
1730473177332:cor(nmds_env$NMDS2, nmds_env$grain_250um),
1730473177332:cor(nmds_env$NMDS2, nmds_env$grain_1000um)
1730473177332:)
1730473177332:)
1730473179601:# Print rounded correlations for easy viewing
1730473179602:print(round(axis_correlations, 3))
1730473188498:axis_correlations
1730473542340:# Calculate trajectory lengths for each station
1730473542340:station_trajectories <- site_scores %>%
1730473542340:group_by(Station) %>%
1730473542340:summarize(
1730473542340:# Total path length (sum of year-to-year changes)
1730473542341:path_length = sum(sqrt(diff(NMDS1)^2 + diff(NMDS2)^2)),
1730473542341:# Net change (distance from start to end)
1730473542341:net_change = sqrt((last(NMDS1) - first(NMDS1))^2 +
1730473542341:(last(NMDS2) - first(NMDS2))^2),
1730473542341:# Initial distance from centroid (2013 impact)
1730473542341:initial_impact = sqrt(first(NMDS1)^2 + first(NMDS2)^2)
1730473542341:)
1730473542350:# Print results
1730473542350:print(station_trajectories %>% arrange(desc(initial_impact)))
1730473694380:# Calculate sediment variability by station
1730473694380:sediment_variability <- df %>%
1730473694380:filter(year >= 2013) %>%
1730473694380:group_by(station) %>%
1730473694381:summarize(
1730473694381:organic_cv = sd(organic_content) / mean(organic_content) * 100,
1730473694381:grain_20um_cv = sd(grain_20um) / mean(grain_20um) * 100,
1730473694381:grain_63um_cv = sd(grain_63um) / mean(grain_63um) * 100,
1730473694381:grain_125um_cv = sd(grain_125um) / mean(grain_125um) * 100,
1730473694381:grain_250um_cv = sd(grain_250um) / mean(grain_250um) * 100,
1730473694381:grain_1000um_cv = sd(grain_1000um) / mean(grain_1000um) * 100
1730473694381:) %>%
1730473694382:# Calculate mean CV across grain sizes
1730473694382:mutate(mean_grain_cv = rowMeans(select(., contains("grain")), na.rm = TRUE))
1730473719179:# Calculate sediment variability by station
1730473719180:sediment_variability <- env_data %>%
1730473719180:filter(year >= 2013) %>%
1730473719180:group_by(station) %>%
1730473719180:summarize(
1730473719180:organic_cv = sd(organic_content) / mean(organic_content) * 100,
1730473719181:grain_20um_cv = sd(grain_20um) / mean(grain_20um) * 100,
1730473719181:grain_63um_cv = sd(grain_63um) / mean(grain_63um) * 100,
1730473719181:grain_125um_cv = sd(grain_125um) / mean(grain_125um) * 100,
1730473719181:grain_250um_cv = sd(grain_250um) / mean(grain_250um) * 100,
1730473719181:grain_1000um_cv = sd(grain_1000um) / mean(grain_1000um) * 100
1730473719181:) %>%
1730473719182:# Calculate mean CV across grain sizes
1730473719182:mutate(mean_grain_cv = rowMeans(select(., contains("grain")), na.rm = TRUE))
1730473719193:# Compare with NMDS trajectory lengths
1730473719193:sediment_nmds_comparison <- station_trajectories %>%
1730473719193:left_join(sediment_variability, by = c("Station" = "station")) %>%
1730473719193:arrange(desc(mean_grain_cv))
1730473719198:print(sediment_nmds_comparison)
1730474082627:The NMDS analysis revealed complex relationships between sediment variability and community recovery patterns. Station E4 showed the highest overall sediment instability, with particularly high variation in coarse grain sizes (CV = 129% for grain size <1000μm) and consistently high variability across all grain size fractions (CVs ranging from 59-62% for intermediate sizes). This sediment instability was reflected in its long NMDS trajectory (path_length = 3.77), suggesting that fluctuating physical conditions influenced community succession.
1730474089315:nmds_env
1730474316435:# Run PERMANOVA including sediment variables
1730474316435:sediment_permanova <- adonis2(
1730474316435:select(species_matrix, -station_temp, -year_temp) ~
1730474316436:organic_content + grain_20um + grain_63um + grain_125um +
1730474316436:grain_250um + grain_1000um,
1730474316436:data = env_data,
1730474316436:method = "bray",
1730474316436:permutations = 999
1730474316436:)
1730474316482:print(sediment_permanova)
1730474339499:# Perform db-RDA
1730474339500:dbrda_result <- dbrda(
1730474339500:select(species_matrix, -station_temp, -year_temp) ~
1730474339500:organic_content + grain_20um + grain_63um + grain_125um +
1730474339500:grain_250um + grain_1000um,
1730474339500:data = env_data,
1730474339500:distance = "bray"
1730474339500:)
1730474339516:# Test significance
1730474339517:anova(dbrda_result)
1730474339554:# Calculate variance explained by each axis
1730474339554:summary(dbrda_result)
1730475640025:sediment_env_data
1730475673260:sum(sediment_env_data[,c()3:7])
1730475679962:sum(sediment_env_data[,c(3:7)])
1730475689813:sum(sediment_env_data[1,c(3:7)])
1730713323700:# Create temporal trajectory analysis
1730713323700:trajectory_analysis <- species_matrix %>%
1730713323701:group_by(station_temp, year_temp) %>%
1730713323701:# Calculate community metrics
1730713323701:summarize(
1730713323701:species_richness = specnumber(select(., -station_temp, -year_temp)),
1730713323701:total_abundance = rowSums(select(., -station_temp, -year_temp))
1730713323701:) %>%
1730713323702:# Join with sediment data
1730713323702:left_join(env_data, by = c("station_temp", "year_temp"))
1730713342067:species_matrix %>%
1730713342067:+     group_by(station_temp, year_temp)
1730713351092:species_matrix
1730713479813:nmds_plot
1730713489011:nmds$stress
1730713504077:nmds$stress
1730713535357:nmds$converged
1730713551955:nmds$tries
1730713764619:env_data
1730713788614:env_fit <- envfit(nmds,
1730713788614:env_data %>% select(organic_content,
1730713788614:grain_20um, grain_63um,
1730713788614:grain_125um, grain_250um,
1730713788614:grain_1000um),
1730713788615:permutations = 999)
1730713788736:# Print results to see which vectors are significant
1730713788736:print(env_fit)
1730713843398:sig_env_vectors <- scores(env_fit, "vectors") %>%
1730713843398:as.data.frame() %>%
1730713843398:mutate(variable = rownames(.)) %>%
1730713843398:filter(env_fit$vectors$pvals < 0.05)
1730713843404:# Update NMDS plot with environmental vectors
1730713843404:nmds_plot <- ggplot() +
1730713843405:# Base NMDS plot elements
1730713843405:geom_path(data = site_scores,
1730713843405:aes(x = NMDS1, y = NMDS2, color = Station, group = Station),
1730713843405:arrow = arrow(length = unit(0.2, "cm"), type = "closed")) +
1730713843405:geom_point(data = site_scores,
1730713843405:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1730713843406:size = 3) +
1730713843406:# Add significant environmental vectors
1730713843406:geom_segment(data = sig_env_vectors,
1730713843406:aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1730713843406:arrow = arrow(length = unit(0.2, "cm")),
1730713843407:color = "darkgrey") +
1730713843407:geom_text(data = sig_env_vectors,
1730713843407:aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1730713843407:size = 3, color = "darkgrey") +
1730713843407:theme_bw() +
1730713843407:theme(panel.background = element_rect(fill = "white"))
1730713849723:nmds_plot
1730713917212:# Print formatted table
1730713917212:print(correlations_formatted)
1730714181620:# Create the plot
1730714181620:nmds_plot <- ggplot() +
1730714181620:# Base NMDS plot elements
1730714181620:geom_path(data = site_scores,
1730714181621:aes(x = NMDS1, y = NMDS2, color = Station, group = Station),
1730714181621:arrow = arrow(length = unit(0.2, "cm"), type = "closed")) +
1730714181621:geom_point(data = site_scores,
1730714181621:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1730714181621:size = 3) +
1730714181621:# Add significant environmental vectors
1730714181621:geom_segment(data = sig_env_vectors,
1730714181622:aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1730714181622:arrow = arrow(length = unit(0.2, "cm")),
1730714181622:color = "darkgrey") +
1730714181622:geom_text(data = sig_env_vectors,
1730714181622:aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1730714181622:size = 3, color = "darkgrey") +
1730714181622:theme_bw() +
1730714181623:theme(panel.background = element_rect(fill = "white")) +
1730714181623:labs(title = "NMDS of Community Composition (2013-2017)",
1730714181623:caption = "")
1730714186260:print(env_fit)nmds_plot
1730714188619:nmds_plot
1730714237692:# Save plot
1730714237692:ggsave("output/nmds_plot.png", nmds_plot, width = 10, height = 8, bg = "white")
1730715628988:nmds
1730715741252:df_result
1730715753815:unique(df_result$species)
1730715773155:length(unique(df_result$species))
1730715964797:# 1. Calculate trajectory lengths for each station
1730715964798:trajectory_lengths <- site_scores %>%
1730715964798:group_by(Station) %>%
1730715964798:arrange(Year) %>%
1730715964798:summarize(
1730715964798:total_length = sum(sqrt(diff(NMDS1)^2 + diff(NMDS2)^2)),
1730715964798:start_to_end = sqrt((last(NMDS1) - first(NMDS1))^2 +
1730715964799:(last(NMDS2) - first(NMDS2))^2)
1730715964799:)
1730715964813:# 2. Calculate direction of movement between consecutive years
1730715964813:trajectory_angles <- site_scores %>%
1730715964813:group_by(Station) %>%
1730715964813:arrange(Year) %>%
1730715964813:summarize(
1730715964813:angles = atan2(diff(NMDS2), diff(NMDS1)) * 180/pi
1730715964814:)
1730715965064:# 3. Calculate distances between consecutive years
1730715965064:yearly_changes <- site_scores %>%
1730715965064:group_by(Station) %>%
1730715965064:arrange(Year) %>%
1730715965064:summarize(
1730715965064:yearly_dist = sqrt(diff(NMDS1)^2 + diff(NMDS2)^2)
1730715965064:)
1730715965546:# Print results
1730715965546:print("Trajectory Lengths:")
1730715965546:print(trajectory_lengths)
1730715965575:print("Movement Angles (degrees):")
1730715965575:print(trajectory_angles)
1730715965625:print("Year-to-Year Changes:")
1730715965625:print(yearly_changes)
1730716036477:print("Trajectory Lengths:")
1730716036478:print(trajectory_lengths, n=1000)
1730716036501:print("Movement Angles (degrees):")
1730716036502:print(trajectory_angles, n=1000)
1730716036523:print("Year-to-Year Changes:")
1730716036523:print(yearly_changes, n=1000)
1730717104937:Non-metric multidimensional scaling (NMDS) ordination revealed clear temporal patterns in benthic community composition from 2013 to 2017 (stress = 0.126). The analysis, based on Bray-Curtis dissimilarities of 126 taxa across 30 samples (6 stations × 5 years), showed distinct recovery trajectories for different stations. Environmental fitting identified significant correlations with sediment characteristics (p < 0.05): organic content (r² = 0.539), fine mud <63μm (r² = 0.313), very fine particles <20μm (r² = 0.226), and medium-fine particles <125μm (r² = 0.209). Station trajectories varied in both total length (range: 1.91-3.89 units) and net displacement (range: 0.839-2.54 units), with station A7 showing the longest recovery path and station C4 the shortest. All stations exhibited similar initial movement directions (-37° to -53°), followed by mid-period directional shifts, and showed evidence of convergence in later years. The strongest community changes occurred in earlier years, with movement magnitude decreasing over time, suggesting a gradual stabilization of community composition.
1730717290589:Non-metric multidimensional scaling (NMDS) ordination revealed clear temporal patterns in benthic community composition from 2013 to 2017 (stress = 0.126). The analysis, based on Bray-Curtis dissimilarities of 126 taxa across 30 samples (6 stations × 5 years), showed distinct recovery trajectories for different stations. Environmental fitting identified significant correlations with sediment characteristics (p < 0.05): organic content (r² = 0.539), fine mud <63μm (r² = 0.313), very fine particles <20μm (r² = 0.226), and medium-fine particles <125μm (r² = 0.209).
1730717373925:# 1. Identify dominant species across all years
1730717373925:dominant_species <- species_matrix %>%
1730717373926:select(-station_temp, -year_temp) %>%
1730717373926:summarise(across(everything(), sum)) %>%
1730717373926:pivot_longer(everything(),
1730717373926:names_to = "species",
1730717373926:values_to = "total_abundance") %>%
1730717373926:arrange(desc(total_abundance)) %>%
1730717373927:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1730717373927:filter(relative_abundance > 0.01)  # Species >1% of total abundance
1730717373967:# 2. Look at species scores in NMDS space
1730717373967:species_scores_dominant <- species_scores[rownames(species_scores) %in% dominant_species$species, ]
1730717373967:# 3. Calculate species changes over time
1730717373967:temporal_patterns <- species_matrix %>%
1730717373967:select(-station_temp, -year_temp) %>%
1730717373967:group_by(species_matrix$year_temp) %>%
1730717373967:summarise(across(everything(), sum)) %>%
1730717373967:pivot_longer(-year_temp,
1730717373967:names_to = "species",
1730717373968:values_to = "abundance") %>%
1730717373968:filter(species %in% dominant_species$species)
1730717377186:rlang::last_trace()
1730717407817:dominant_species
1730717437327:# 1. Identify dominant species across all years
1730717437327:dominant_species <- species_matrix %>%
1730717437327:select(-station_temp, -year_temp) %>%
1730717437327:summarise(across(everything(), sum)) %>%
1730717437328:pivot_longer(everything(),
1730717437328:names_to = "species",
1730717437328:values_to = "total_abundance") %>%
1730717437328:arrange(desc(total_abundance)) %>%
1730717437328:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1730717437328:filter(relative_abundance > 0.01)  # Species >1% of total abundance
1730717437350:# 2. Look at species scores in NMDS space
1730717437350:species_scores_dominant <- species_scores[rownames(species_scores) %in% dominant_species$species, ]
1730717437351:# 3. Calculate species changes over time
1730717437351:temporal_patterns <- species_matrix %>%
1730717437351:select(-station_temp, -year_temp) %>%
1730717437351:group_by(species_matrix$year_temp) %>%
1730717437351:summarise(across(everything(), sum)) %>%
1730717437351:pivot_longer(-year_temp,
1730717437351:names_to = "species",
1730717437351:values_to = "abundance") %>%
1730717437351:filter(species %in% dominant_species$species)
1730717439237:rlang::last_trace()
1730717483176:# Fix temporal patterns calculation
1730717483176:temporal_patterns <- species_matrix %>%
1730717483176:group_by(year_temp) %>%
1730717483176:select(-station_temp) %>%
1730717483176:summarise(across(everything(), sum)) %>%
1730717483176:pivot_longer(-year_temp,
1730717483177:names_to = "species",
1730717483177:values_to = "abundance") %>%
1730717483177:filter(species %in% dominant_species$species)
1730717483198:# Print dominant species results
1730717483198:print("Dominant Species (>1% relative abundance):")
1730717483199:print(dominant_species, n=20)
1730717483220:# Print their NMDS scores
1730717483220:print("\nNMDS Scores for Dominant Species:")
1730717483220:print(species_scores_dominant)
1730717514686:Species composition analysis revealed distinct dominance patterns and spatial organization in the NMDS ordination. Capitella capitata strongly dominated the community, comprising 35.9% of total abundance (79,433 individuals), followed by Polydora (8.56%) and Ophelina acuminata (8.09%). The NMDS ordination showed clear spatial segregation of dominant species: C. capitata was strongly associated with negative NMDS1 scores (-1.71), indicating its dominance in early succession stages, while later colonizers such as Heteromastus filiformis and Spionidae showed positive scores on both axes (NMDS1 > 0.6, NMDS2 > 0.6). A second group of species, including Macoma calcarea (6.23%), Scoloplos armiger (3.55%), and Abra nitida (1.16%), clustered in positive NMDS1 space but with neutral NMDS2 scores, suggesting their association with intermediate recovery stages. The presence of both opportunistic species (C. capitata, Polydora) and equilibrium species (M. calcarea, S. armiger) among the dominants indicates a community in transition during the study period.
1730717704380:species_matrix <- df %>%
1730717704380:filter(year >= 2013) %>%  # Only include 2013-2017 data
1730717704381:select(station, year, species, adjusted_density) %>%
1730717704381:pivot_wider(
1730717704381:names_from = species,
1730717704381:values_from = adjusted_density,
1730717704381:values_fill = 0
1730717704381:) %>%
1730717704382:# Store station and year before removing them for NMDS
1730717704382:mutate(
1730717704382:station_temp = station,
1730717704382:year_temp = year
1730717704382:)
1730717707991:species_matrix
1730717742086:# Fixed version for temporal patterns
1730717742087:temporal_patterns <- species_matrix %>%
1730717742087:select(-station, -year) %>%
1730717742087:bind_cols(year = species_matrix$year) %>%  # Add year back
1730717742087:group_by(year) %>%
1730717742087:summarise(across(everything(), sum)) %>%
1730717742087:pivot_longer(-year,
1730717742087:names_to = "species",
1730717742088:values_to = "abundance") %>%
1730717742088:filter(species %in% dominant_species$species)
1730717907621:species_matrix <- df %>%
1730717907621:filter(year >= 2013) %>%  # Only include 2013-2017 data
1730717907621:select(station, year, species, adjusted_density) %>%
1730717907621:pivot_wider(
1730717907621:names_from = species,
1730717907621:values_from = adjusted_density,
1730717907622:values_fill = 0
1730717907622:) %>%
1730717907623:# Store station and year before removing them for NMDS
1730717907623:mutate(
1730717907623:station_temp = station,
1730717907623:year_temp = year
1730717907623:)
1730717925222:# Fixed version for temporal patterns
1730717925222:temporal_patterns <- species_matrix %>%
1730717925222:select(-station_temp, -year_temp) %>%
1730717925222:bind_cols(year = species_matrix$year_temp) %>%  # Add year back
1730717925223:group_by(year) %>%
1730717925223:summarise(across(everything(), sum)) %>%
1730717925223:pivot_longer(-year,
1730717925223:names_to = "species",
1730717925223:values_to = "abundance") %>%
1730717925223:filter(species %in% dominant_species$species)
1730717939973:species_matrix <- df %>%
1730717939973:filter(year >= 2013) %>%  # Only include 2013-2017 data
1730717939974:select(station, year, species, adjusted_density) %>%
1730717939974:pivot_wider(
1730717939974:names_from = species,
1730717939974:values_from = adjusted_density,
1730717939974:values_fill = 0
1730717939975:) %>%
1730717939975:# Store station and year before removing them for NMDS
1730717939975:mutate(
1730717939975:station_temp = station,
1730717939976:year_temp = year
1730717939976:)
1730717942365:# Fixed version for temporal patterns
1730717942365:temporal_patterns <- species_matrix %>%
1730717942365:select(-station_temp, -year_temp) %>%
1730717942365:bind_cols(year = species_matrix$year_temp) %>%  # Add year back
1730717942366:group_by(year) %>%
1730717942366:summarise(across(everything(), sum)) %>%
1730717942366:pivot_longer(-year,
1730717942366:names_to = "species",
1730717942366:values_to = "abundance") %>%
1730717942366:filter(species %in% dominant_species$species)
1730718041038:# 1. Find dominant species (>1% relative abundance)
1730718041039:dominant_species <- species_matrix %>%
1730718041039:select(-station_temp, -year_temp) %>%  # Remove metadata columns
1730718041039:summarise(across(everything(), sum)) %>%  # Sum all species
1730718041039:pivot_longer(everything(),
1730718041039:names_to = "species",
1730718041039:values_to = "total_abundance") %>%
1730718041040:arrange(desc(total_abundance)) %>%  # Sort by abundance
1730718041040:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1730718041040:filter(relative_abundance > 0.01)  # Keep species >1%
1730718081856:############
1730718081856:##########
1730718081856:############
1730718081856:# 1. Find dominant species (>1% relative abundance)
1730718081857:dominant_species <- species_matrix %>%
1730718081857:select(-station_temp, -year_temp) %>%  # Remove metadata columns
1730718081857:summarise(across(everything(), sum)) %>%  # Sum all species
1730718081857:pivot_longer(everything(),
1730718081857:names_to = "species",
1730718081857:values_to = "total_abundance") %>%
1730718081858:arrange(desc(total_abundance)) %>%  # Sort by abundance
1730718081858:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1730718081858:filter(relative_abundance > 0.01)  # Keep species >1%
1730718093529:rlang::last_trace()
1730718124206:# 1. Find dominant species (>1% relative abundance)
1730718124207:dominant_species <- species_matrix %>%
1730718124207:select(where(is.numeric)) %>%  # Only select numeric columns (species counts)
1730718124207:summarise(across(everything(), sum)) %>%  # Sum all species
1730718124207:pivot_longer(everything(),
1730718124207:names_to = "species",
1730718124208:values_to = "total_abundance") %>%
1730718124208:arrange(desc(total_abundance)) %>%  # Sort by abundance
1730718124208:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1730718124208:filter(relative_abundance > 0.01)  # Keep species >1%
1730718124234:# 2. Get NMDS scores for dominant species
1730718124234:species_scores_dominant <- species_scores[rownames(species_scores) %in% dominant_species$species, ]
1730718124234:# 3. Analyze temporal patterns of dominant species
1730718124234:temporal_patterns <- species_matrix %>%
1730718124234:select(year_temp, where(is.numeric)) %>%  # Keep year and species counts
1730718124235:group_by(year_temp) %>%
1730718124235:summarise(across(everything(), sum)) %>%  # Sum by year
1730718124235:pivot_longer(-year_temp,
1730718124235:names_to = "species",
1730718124235:values_to = "abundance") %>%
1730718124235:filter(species %in% dominant_species$species) %>%  # Keep only dominant species
1730718124235:arrange(year_temp, desc(abundance))  # Sort by year and abundance
1730718124260:# Print results
1730718124260:print("Dominant Species (>1% relative abundance):")
1730718124261:print(dominant_species, n = 20)
1730718124284:print("\nNMDS Scores for Dominant Species:")
1730718124284:print(species_scores_dominant)
1730718124285:print("\nTemporal Patterns:")
1730718124286:print(temporal_patterns, n = 50)
1730718174254:# 1. Find dominant species (>1% relative abundance)
1730718174255:dominant_species <- species_matrix %>%
1730718174255:select(where(is.numeric)) %>%
1730718174255:select(-year_temp) %>%         # Exclude year columns
1730718174255:summarise(across(everything(), sum)) %>%
1730718174256:pivot_longer(everything(),
1730718174256:names_to = "species",
1730718174256:values_to = "total_abundance") %>%
1730718174256:arrange(desc(total_abundance)) %>%
1730718174257:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1730718174257:filter(relative_abundance > 0.01)
1730718174281:# 2. Get NMDS scores for dominant species
1730718174281:species_scores_dominant <- species_scores[rownames(species_scores) %in% dominant_species$species, ]
1730718174281:# 3. Analyze temporal patterns of dominant species
1730718174282:temporal_patterns <- species_matrix %>%
1730718174282:select(-station_temp) %>%      # Remove station
1730718174282:pivot_longer(-year_temp,       # Keep year_temp as grouping variable
1730718174282:names_to = "species",
1730718174282:values_to = "abundance") %>%
1730718174282:filter(species %in% dominant_species$species) %>%
1730718174282:arrange(year_temp, desc(abundance))
1730718222254:# 1. Find dominant species (>1% relative abundance)
1730718222254:dominant_species <- species_matrix %>%
1730718222255:select(where(is.numeric)) %>%
1730718222255:select(-year_temp) %>%         # Exclude year columns
1730718222255:summarise(across(everything(), sum)) %>%
1730718222255:pivot_longer(everything(),
1730718222255:names_to = "species",
1730718222255:values_to = "total_abundance") %>%
1730718222255:arrange(desc(total_abundance)) %>%
1730718222256:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1730718222256:filter(relative_abundance > 0.01)
1730718222282:# 2. Get NMDS scores for dominant species
1730718222282:species_scores_dominant <- species_scores[rownames(species_scores) %in% dominant_species$species, ]
1730718222282:# 3. Analyze temporal patterns of dominant species
1730718222282:temporal_patterns <- species_matrix %>%
1730718222282:select(where(is.numeric)) %>%     # Keep only numeric columns
1730718222282:select(-year) %>%                 # Remove the extra year column
1730718222282:pivot_longer(-year_temp,          # Keep year_temp as grouping variable
1730718222282:names_to = "species",
1730718222283:values_to = "abundance") %>%
1730718222283:filter(species %in% dominant_species$species) %>%
1730718222283:arrange(year_temp, desc(abundance))
1730718222307:# Print results
1730718222307:print("Dominant Species (>1% relative abundance):")
1730718222307:print(dominant_species, n = 20)
1730718222330:print("\nNMDS Scores for Dominant Species:")
1730718222330:print(species_scores_dominant)
1730718222331:print("\nTemporal Patterns:")
1730718222332:print(temporal_patterns, n = 50)
1730718270119:# 1. Find dominant species (>1% relative abundance)
1730718270119:dominant_species <- species_matrix %>%
1730718270119:select(where(is.numeric)) %>%
1730718270119:select(-year_temp, -year) %>%    # Exclude ALL year columns
1730718270120:summarise(across(everything(), sum)) %>%
1730718270120:pivot_longer(everything(),
1730718270120:names_to = "species",
1730718270120:values_to = "total_abundance") %>%
1730718270120:arrange(desc(total_abundance)) %>%
1730718270120:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1730718270121:filter(relative_abundance > 0.01)
1730718270145:# 3. Analyze temporal patterns of dominant species
1730718270145:temporal_patterns <- species_matrix %>%
1730718270145:select(where(is.numeric)) %>%
1730718270145:select(-year) %>%
1730718270145:group_by(year_temp) %>%          # Group by year first
1730718270145:summarise(across(everything(), sum)) %>%  # Sum across stations
1730718270145:pivot_longer(-year_temp,
1730718270145:names_to = "species",
1730718270145:values_to = "abundance") %>%
1730718270146:filter(species %in% dominant_species$species) %>%
1730718270146:arrange(year_temp, desc(abundance))
1730718270171:# Print results
1730718270171:print("Dominant Species (>1% relative abundance):")
1730718270171:print(dominant_species, n = 20)
1730718270195:print("\nTemporal Patterns by Year:")
1730718270196:print(temporal_patterns, n = 50)
1730718483382:# 1. Find dominant species (>1% relative abundance)
1730718483383:dominant_species <- species_matrix %>%
1730718483383:select(where(is.numeric)) %>%
1730718483383:select(-year_temp, -year) %>%    # Exclude ALL year columns
1730718483383:summarise(across(everything(), sum)) %>%
1730718483384:pivot_longer(everything(),
1730718483384:names_to = "species",
1730718483384:values_to = "total_abundance") %>%
1730718483384:arrange(desc(total_abundance)) %>%
1730718483385:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1730718483385:filter(relative_abundance > 0.01)
1730718483410:# 3. Analyze temporal patterns of dominant species
1730718483410:temporal_patterns <- species_matrix %>%
1730718483410:select(where(is.numeric)) %>%
1730718483410:select(-year) %>%
1730718483410:group_by(year_temp) %>%          # Group by year first
1730718483411:summarise(across(everything(), sum)) %>%  # Sum across stations
1730718483411:pivot_longer(-year_temp,
1730718483411:names_to = "species",
1730718483411:values_to = "abundance") %>%
1730718483411:filter(species %in% dominant_species$species) %>%
1730718483411:arrange(year_temp, desc(abundance))
1730718483439:# Print results
1730718483440:print("Dominant Species (>1% relative abundance):")
1730718483440:print(dominant_species, n = 20000)
1730718483466:print("\nTemporal Patterns by Year:")
1730718483467:print(temporal_patterns, n = 5000)
1730720455409:# 1. Find dominant species (>1% relative abundance)
1730720455410:dominant_species <- species_matrix %>%
1730720455410:select(where(is.numeric)) %>%
1730720455410:select(-year_temp, -year) %>%    # Exclude ALL year columns
1730720455411:summarise(across(everything(), sum)) %>%
1730720455411:pivot_longer(everything(),
1730720455411:names_to = "species",
1730720455411:values_to = "total_abundance") %>%
1730720455411:arrange(desc(total_abundance)) %>%
1730720455412:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1730720455412:filter(relative_abundance > 0.01)
1730720455451:# 3. Analyze temporal patterns of dominant species
1730720455451:temporal_patterns <- species_matrix %>%
1730720455451:select(where(is.numeric)) %>%
1730720455451:select(-year) %>%
1730720455451:group_by(year_temp) %>%          # Group by year first
1730720455451:summarise(across(everything(), sum)) %>%  # Sum across stations
1730720455451:pivot_longer(-year_temp,
1730720455451:names_to = "species",
1730720455451:values_to = "abundance") %>%
1730720455452:filter(species %in% dominant_species$species) %>%
1730720455452:arrange(year_temp, desc(abundance))
1730720455532:# Print results
1730720455532:print("Dominant Species (>1% relative abundance):")
1730720455533:print(dominant_species, n = 20)
1730720455563:print("\nTemporal Patterns by Year:")
1730720455563:print(temporal_patterns, n = 50)
1730720491402:# Merge with NMDS scores
1730720491402:nmds_env <- site_scores %>%
1730720491402:left_join(env_data, by = c("Station" = "station", "Year" = "year"))
1730720492963:# Calculate correlation with axes
1730720492963:axis_correlations <- data.frame(
1730720492964:Variable = c("Organic Content", "Depth",
1730720492964:"Grain Size <20μm", "Grain Size <63μm",
1730720492964:"Grain Size <125μm", "Grain Size <250μm",
1730720492964:"Grain Size <1000μm"),
1730720492964:NMDS1 = c(
1730720492964:cor(nmds_env$NMDS1, nmds_env$organic_content),
1730720492965:cor(nmds_env$NMDS1, nmds_env$depth),
1730720492965:cor(nmds_env$NMDS1, nmds_env$grain_20um),
1730720492965:cor(nmds_env$NMDS1, nmds_env$grain_63um),
1730720492965:cor(nmds_env$NMDS1, nmds_env$grain_125um),
1730720492965:cor(nmds_env$NMDS1, nmds_env$grain_250um),
1730720492966:cor(nmds_env$NMDS1, nmds_env$grain_1000um)
1730720492966:),
1730720492966:NMDS2 = c(
1730720492966:cor(nmds_env$NMDS2, nmds_env$organic_content),
1730720492966:cor(nmds_env$NMDS2, nmds_env$depth),
1730720492966:cor(nmds_env$NMDS2, nmds_env$grain_20um),
1730720492967:cor(nmds_env$NMDS2, nmds_env$grain_63um),
1730720492967:cor(nmds_env$NMDS2, nmds_env$grain_125um),
1730720492967:cor(nmds_env$NMDS2, nmds_env$grain_250um),
1730720492967:cor(nmds_env$NMDS2, nmds_env$grain_1000um)
1730720492968:)
1730720492968:)
1730720496676:# Format correlations for printing
1730720496677:correlations_formatted <- axis_correlations %>%
1730720496677:mutate(across(c(NMDS1, NMDS2), round, 3))
1730720506584:# Print formatted table
1730720506585:print(correlations_formatted)
1730720789008:nmds$stress  # Basic NMDS quality measure
1730720789008:# Axis correlations with environmental variables (already in code):
1730720789008:print(correlations_formatted)
1730720864505:envfit_results <- envfit(nmds, env_data)
1730720864725:print(envfit_results)  # Will show p-values and R² for each variable
1730720877578:beta_disp <- betadisper(dist_matrix, groups)
1730720907535:# 1. First, create the distance matrix from the species data
1730720907535:# Using the same data preparation as in the NMDS
1730720907536:species_matrix <- df %>%
1730720907536:filter(year >= 2013) %>%
1730720907536:select(station, year, species, adjusted_density) %>%
1730720907536:pivot_wider(
1730720907536:names_from = species,
1730720907537:values_from = adjusted_density,
1730720907537:values_fill = 0
1730720907537:)
1730720907549:# Store groups (year and station) before removing them
1730720907549:groups <- paste(species_matrix$station, species_matrix$year, sep="_")
1730720907549:# Create distance matrix using Bray-Curtis (same as NMDS)
1730720907549:dist_matrix <- vegdist(select(species_matrix, -station, -year), method="bray")
1730720907555:# Now we can run the dispersion analysis
1730720907555:beta_disp <- betadisper(dist_matrix, groups)
1730720907720:anova(beta_disp)
1730720907736:permutest(beta_disp)  # Permutation test for significance
1730720907890:# Visualize the dispersions
1730720907890:plot(beta_disp)
1730720908030:boxplot(beta_disp)
1730720935661:species_matrix
1730720947585:groups
1730721008520:dist_matrix
1730721044112:# Check our groups
1730721044112:print(length(groups))
1730721044113:print(table(groups))  # See how many samples per group
1730721044116:# Check our distance matrix
1730721044116:print(dim(as.matrix(dist_matrix)))
1730721044117:# Try simpler grouping first
1730721044117:groups_year <- species_matrix$year
1730721044117:groups_station <- species_matrix$station
1730721044118:# Test with just years
1730721044118:beta_disp_year <- betadisper(dist_matrix, groups_year)
1730721044176:anova(beta_disp_year)
1730721044186:# Test with just stations
1730721044186:beta_disp_station <- betadisper(dist_matrix, groups_station)
1730721044250:anova(beta_disp_station)
1730721173752:3.2.2 Community Succession Patterns
1730721175960:+3.2.2 Community Succession Patterns
1730796026386:species_matrix_counts
1730796047787:simper_results <- simper(species_matrix,
1730796047787:group = ifelse(year %in% c(2013,2014), "early",
1730796047787:ifelse(year %in% c(2016,2017), "late", "mid")))
1730796056668:df_result
1730796187630:simper_data <- data.frame(
1730796187630:Species = c("Capitella capitata", "Ophelina acuminata", "Polydora", "Macoma calcarea",
1730796187631:"Scalibregma inflatum", "Spio filicornis", "Scoloplos armiger", "Spionidae",
1730796187631:"Tubificoides kozloffi", "Eteone longa", "Chaetozone setosa",
1730796187631:"Mediomastus fragilis", "Oligochaeta"),
1730796187631:Avg_Abundance_Early = c(6580, 1, 19, 35, 0, 0, 21, 481, 413, 311, 256, 45, 119),
1730796187631:Avg_Abundance_Late = c(27.6, 1192, 1420, 735.6, 498.9, 595.7, 490.8, 101.1, 6.2, 121.3, 252.6, 255.5, 285.2),
1730796187632:Contribution = c(30.52, 8.28, 6.29, 5.08, 4.24, 3.57, 3.38, 2.69, 2.47, 2.30, 2.27, 1.83, 1.71),
1730796187632:Cumulative = c(32.4, 41.2, 47.9, 53.3, 57.8, 61.5, 65.1, 68.0, 70.6, 73.1, 75.5, 77.4, 79.2)
1730796187632:)
1730796187635:simper_data <- simper_data %>%
1730796187636:mutate(across(where(is.numeric), ~round(., 2)))
1730796187672:table <- kbl(simper_data,
1730796187672:caption = "SIMPER analysis results showing species contributing to approximately 80% of the cumulative difference between early (2013-2014) and late (2016-2017) periods.",
1730796187672:col.names = c("Species", "Early Avg. Abundance", "Late Avg. Abundance", "Contribution (%)", "Cumulative (%)"),
1730796187673:align = c("l", "r", "r", "r", "r"),
1730796187673:booktabs = TRUE,
1730796187673:longtable = TRUE) %>%
1730796187673:kable_styling(latex_options = c("striped", "hold_position"),
1730796187673:full_width = FALSE) %>%
1730796187673:column_spec(1, italic = TRUE) %>%
1730796187673:kableExtra::footnote(general = "Species are listed in order of their contribution to the overall dissimilarity.",
1730796187673:general_title = "Note:",
1730796187673:threeparttable = TRUE)
1730796202082:install.packages("kableExtra")
1730796207899:simper_data <- data.frame(
1730796207899:Species = c("Capitella capitata", "Ophelina acuminata", "Polydora", "Macoma calcarea",
1730796207900:"Scalibregma inflatum", "Spio filicornis", "Scoloplos armiger", "Spionidae",
1730796207900:"Tubificoides kozloffi", "Eteone longa", "Chaetozone setosa",
1730796207900:"Mediomastus fragilis", "Oligochaeta"),
1730796207900:Avg_Abundance_Early = c(6580, 1, 19, 35, 0, 0, 21, 481, 413, 311, 256, 45, 119),
1730796207900:Avg_Abundance_Late = c(27.6, 1192, 1420, 735.6, 498.9, 595.7, 490.8, 101.1, 6.2, 121.3, 252.6, 255.5, 285.2),
1730796207900:Contribution = c(30.52, 8.28, 6.29, 5.08, 4.24, 3.57, 3.38, 2.69, 2.47, 2.30, 2.27, 1.83, 1.71),
1730796207900:Cumulative = c(32.4, 41.2, 47.9, 53.3, 57.8, 61.5, 65.1, 68.0, 70.6, 73.1, 75.5, 77.4, 79.2)
1730796207901:)
1730796207902:simper_data <- simper_data %>%
1730796207902:mutate(across(where(is.numeric), ~round(., 2)))
1730796207905:table <- kbl(simper_data,
1730796207905:caption = "SIMPER analysis results showing species contributing to approximately 80% of the cumulative difference between early (2013-2014) and late (2016-2017) periods.",
1730796207905:col.names = c("Species", "Early Avg. Abundance", "Late Avg. Abundance", "Contribution (%)", "Cumulative (%)"),
1730796207906:align = c("l", "r", "r", "r", "r"),
1730796207906:booktabs = TRUE,
1730796207906:longtable = TRUE) %>%
1730796207906:kable_styling(latex_options = c("striped", "hold_position"),
1730796207906:full_width = FALSE) %>%
1730796207906:column_spec(1, italic = TRUE) %>%
1730796207907:kableExtra::footnote(general = "Species are listed in order of their contribution to the overall dissimilarity.",
1730796207907:general_title = "Note:",
1730796207907:threeparttable = TRUE)
1730796238669:simper_data <- data.frame(
1730796238669:Species = c("Capitella capitata", "Ophelina acuminata", "Polydora", "Macoma calcarea",
1730796238669:"Scalibregma inflatum", "Spio filicornis", "Scoloplos armiger", "Spionidae",
1730796238669:"Tubificoides kozloffi", "Eteone longa", "Chaetozone setosa",
1730796238669:"Mediomastus fragilis", "Oligochaeta"),
1730796238669:Avg_Abundance_Early = c(6580, 1, 19, 35, 0, 0, 21, 481, 413, 311, 256, 45, 119),
1730796238670:Avg_Abundance_Late = c(27.6, 1192, 1420, 735.6, 498.9, 595.7, 490.8, 101.1, 6.2, 121.3, 252.6, 255.5, 285.2),
1730796238670:Contribution = c(30.52, 8.28, 6.29, 5.08, 4.24, 3.57, 3.38, 2.69, 2.47, 2.30, 2.27, 1.83, 1.71),
1730796238670:Cumulative = c(32.4, 41.2, 47.9, 53.3, 57.8, 61.5, 65.1, 68.0, 70.6, 73.1, 75.5, 77.4, 79.2)
1730796238670:)
1730796238671:simper_data <- simper_data %>%
1730796238671:mutate(across(where(is.numeric), ~round(., 2)))
1730796238675:table <- kbl(simper_data,
1730796238675:caption = "SIMPER analysis results showing species contributing to approximately 80% of the cumulative difference between early (2013-2014) and late (2016-2017) periods.",
1730796238675:col.names = c("Species", "Early Avg. Abundance", "Late Avg. Abundance", "Contribution (%)", "Cumulative (%)"),
1730796238675:align = c("l", "r", "r", "r", "r"),
1730796238676:booktabs = TRUE,
1730796238676:longtable = TRUE) %>%
1730796238676:kable_styling(latex_options = c("striped", "hold_position"),
1730796238676:full_width = FALSE) %>%
1730796238676:kableExtra::column_spec(1, italic = TRUE) %>%
1730796238677:kableExtra::footnote(general = "Species are listed in order of their contribution to the overall dissimilarity.",
1730796238677:general_title = "Note:",
1730796238677:threeparttable = TRUE)
1730796246379:simper_data <- data.frame(
1730796246379:Species = c("Capitella capitata", "Ophelina acuminata", "Polydora", "Macoma calcarea",
1730796246380:"Scalibregma inflatum", "Spio filicornis", "Scoloplos armiger", "Spionidae",
1730796246380:"Tubificoides kozloffi", "Eteone longa", "Chaetozone setosa",
1730796246380:"Mediomastus fragilis", "Oligochaeta"),
1730796246380:Avg_Abundance_Early = c(6580, 1, 19, 35, 0, 0, 21, 481, 413, 311, 256, 45, 119),
1730796246380:Avg_Abundance_Late = c(27.6, 1192, 1420, 735.6, 498.9, 595.7, 490.8, 101.1, 6.2, 121.3, 252.6, 255.5, 285.2),
1730796246380:Contribution = c(30.52, 8.28, 6.29, 5.08, 4.24, 3.57, 3.38, 2.69, 2.47, 2.30, 2.27, 1.83, 1.71),
1730796246380:Cumulative = c(32.4, 41.2, 47.9, 53.3, 57.8, 61.5, 65.1, 68.0, 70.6, 73.1, 75.5, 77.4, 79.2)
1730796246381:)
1730796246381:simper_data <- simper_data %>%
1730796246382:mutate(across(where(is.numeric), ~round(., 2)))
1730796246386:table <- kbl(simper_data,
1730796246386:caption = "SIMPER analysis results showing species contributing to approximately 80% of the cumulative difference between early (2013-2014) and late (2016-2017) periods.",
1730796246386:col.names = c("Species", "Early Avg. Abundance", "Late Avg. Abundance", "Contribution (%)", "Cumulative (%)"),
1730796246386:align = c("l", "r", "r", "r", "r"),
1730796246386:booktabs = TRUE,
1730796246387:longtable = TRUE) %>%
1730796246387:kableExtra::kable_styling(latex_options = c("striped", "hold_position"),
1730796246387:full_width = FALSE) %>%
1730796246387:kableExtra::column_spec(1, italic = TRUE) %>%
1730796246387:kableExtra::footnote(general = "Species are listed in order of their contribution to the overall dissimilarity.",
1730796246387:general_title = "Note:",
1730796246388:threeparttable = TRUE)
1730796254628:simper_data <- data.frame(
1730796254628:Species = c("Capitella capitata", "Ophelina acuminata", "Polydora", "Macoma calcarea",
1730796254628:"Scalibregma inflatum", "Spio filicornis", "Scoloplos armiger", "Spionidae",
1730796254628:"Tubificoides kozloffi", "Eteone longa", "Chaetozone setosa",
1730796254628:"Mediomastus fragilis", "Oligochaeta"),
1730796254628:Avg_Abundance_Early = c(6580, 1, 19, 35, 0, 0, 21, 481, 413, 311, 256, 45, 119),
1730796254629:Avg_Abundance_Late = c(27.6, 1192, 1420, 735.6, 498.9, 595.7, 490.8, 101.1, 6.2, 121.3, 252.6, 255.5, 285.2),
1730796254629:Contribution = c(30.52, 8.28, 6.29, 5.08, 4.24, 3.57, 3.38, 2.69, 2.47, 2.30, 2.27, 1.83, 1.71),
1730796254629:Cumulative = c(32.4, 41.2, 47.9, 53.3, 57.8, 61.5, 65.1, 68.0, 70.6, 73.1, 75.5, 77.4, 79.2)
1730796254629:)
1730796254630:simper_data <- simper_data %>%
1730796254630:mutate(across(where(is.numeric), ~round(., 2)))
1730796254633:table <- kableExtra::kbl(simper_data,
1730796254633:caption = "SIMPER analysis results showing species contributing to approximately 80% of the cumulative difference between early (2013-2014) and late (2016-2017) periods.",
1730796254633:col.names = c("Species", "Early Avg. Abundance", "Late Avg. Abundance", "Contribution (%)", "Cumulative (%)"),
1730796254633:align = c("l", "r", "r", "r", "r"),
1730796254633:booktabs = TRUE,
1730796254634:longtable = TRUE) %>%
1730796254634:kableExtra::kable_styling(latex_options = c("striped", "hold_position"),
1730796254634:full_width = FALSE) %>%
1730796254634:kableExtra::column_spec(1, italic = TRUE) %>%
1730796254634:kableExtra::footnote(general = "Species are listed in order of their contribution to the overall dissimilarity.",
1730796254634:general_title = "Note:",
1730796254634:threeparttable = TRUE)
1730796260488:table
1730796299930:simper_data
1730796335611:# Load 1999 data and prepare similarly
1730796335611:species_1999 <- df %>%
1730796335611:filter(year == 1999) %>%
1730796335611:select(station, species, adjusted_density)
1730796335618:# Get dominant species
1730796335618:dominant_1999 <- species_1999 %>%
1730796335618:group_by(species) %>%
1730796335618:summarize(total_abundance = sum(adjusted_density)) %>%
1730796335620:arrange(desc(total_abundance))
1730796339425:dominant_1999
1730798951612:str(df_result)
1730799086935:# Summarize and reshape data
1730799086935:species_data <- df_result %>%
1730799086935:#filter(year != 1999) %>%
1730799086936:group_by(station, year, species) %>%
1730799086936:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730799086936:pivot_wider(names_from = species, values_from = N, values_fill = 0) %>%
1730799086936:mutate(
1730799086936:Station = factor(station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1730799086937:Year = factor(year)
1730799086937:) %>%
1730799086937:select(-station, -year)
1730799090644:# Define early and late year groups for SIMPER
1730799090644:species_data$year_group <- factor(ifelse(species_data$Year %in% c("2013", "2014"), "Early",
1730799090644:ifelse(species_data$Year %in% c("2016", "2017"), "Late", NA)))
1730799091564:# Separate environmental data and species data for SIMPER
1730799091564:env_data <- species_data %>% select(Station, Year, year_group)
1730799092820:species_matrix <- species_data %>% select(-Station, -Year, -year_group) %>% as.matrix()
1730799093512:# Filter data for non-NA year groups for SIMPER analysis
1730799093513:simper_data <- species_matrix[!is.na(env_data$year_group), ]
1730799095323:simper_group <- env_data$year_group[!is.na(env_data$year_group)]
1730799097076:# Perform SIMPER analysis
1730799097076:simper_result <- simper(simper_data, group = simper_group, permutations = 999)
1730799097899:print(summary(simper_result))
1730799843891:simper_data
1730799852138:simper_group
1730800076565:# A. Year-by-year SIMPER
1730800076565:species_matrix <- species_data %>%
1730800076566:select(-Station) %>%
1730800076566:as.matrix()
1730800078765:simper_yearly <- simper(species_matrix, group = species_data$Year, permutations = 999)
1730800082490:# 1. First, prepare the data consistently
1730800082490:species_data <- df_result %>%
1730800082491:group_by(station, year, species) %>%
1730800082491:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730800082491:pivot_wider(names_from = species, values_from = N, values_fill = 0) %>%
1730800082491:mutate(
1730800082491:Station = factor(station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1730800082491:Year = factor(year)
1730800082491:) %>%
1730800082492:select(-station, -year)
1730800083542:# A. Year-by-year SIMPER
1730800083542:species_matrix <- species_data %>%
1730800083542:select(-Station) %>%
1730800083542:as.matrix()
1730800083837:simper_yearly <- simper(species_matrix, group = species_data$Year, permutations = 999)
1730800182646:# 1. First, prepare the data consistently
1730800182646:species_data <- df_result %>%
1730800182646:group_by(station, year, species) %>%
1730800182646:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730800182647:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1730800183315:# Separate environmental and species data
1730800183315:env_data <- data.frame(
1730800183316:Station = factor(species_data$station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1730800183316:Year = factor(species_data$year)
1730800183316:)
1730800184763:# Create species matrix (only numeric columns)
1730800184764:species_matrix <- species_data %>%
1730800184764:select(-station, -year) %>%
1730800184764:as.matrix()
1730800186754:# A. Year-by-year SIMPER
1730800186754:simper_yearly <- simper(species_matrix, group = env_data$Year, permutations = 999)
1730800195410:simper_yearly
1730800212114:# B. Sequential comparisons
1730800212114:years <- sort(unique(as.character(env_data$Year)))
1730800212924:sequential_simper <- list()
1730800214779:for(i in 1:(length(years)-1)) {
1730800214779:year_data <- species_matrix[env_data$Year %in% c(years[i], years[i+1]), ]
1730800214779:year_groups <- env_data$Year[env_data$Year %in% c(years[i], years[i+1])]
1730800214780:sequential_simper[[i]] <- simper(year_data, group = year_groups, permutations = 999)
1730800214780:}
1730800218612:# C. Baseline comparison (if 1999 data exists)
1730800218612:baseline_data <- species_matrix[env_data$Year %in% c("1999", years), ]
1730800219403:baseline_groups <- env_data$Year[env_data$Year %in% c("1999", years)]
1730800220193:simper_baseline <- simper(baseline_data, group = baseline_groups, permutations = 999)
1730800228610:baseline_data
1730800232010:baseline_groups
1730800235251:simper_baseline
1730800296375:# Function to format SIMPER summary
1730800296376:format_simper_summary <- function(simper_result, top_n = 10) {
1730800296376:summary_df <- summary(simper_result)$species %>%
1730800296376:as.data.frame() %>%
1730800296376:rownames_to_column("Species") %>%
1730800296376:arrange(desc(average)) %>%
1730800296377:head(top_n)
1730800296377:return(summary_df)
1730800296377:}
1730800296377:# A. Year-by-year SIMPER results
1730800296377:yearly_summary <- format_simper_summary(simper_yearly)
1730800300588:rlang::last_trace()
1730800335261:# Function to format SIMPER summary
1730800335261:format_simper_summary <- function(simper_result, top_n = 10) {
1730800335261:# Extract the summary data
1730800335261:sum_data <- summary(simper_result)
1730800335262:# Check if it's a pairwise or multi-group comparison
1730800335262:if("species" %in% names(sum_data)) {
1730800335262:# For pairwise comparisons
1730800335262:summary_df <- data.frame(
1730800335262:Species = rownames(sum_data$species),
1730800335262:Average_Abundance_1 = sum_data$species[, 1],
1730800335262:Average_Abundance_2 = sum_data$species[, 2],
1730800335263:Average_Contribution = sum_data$species[, "average"],
1730800335263:Contribution_Percent = sum_data$species[, "ratio"],
1730800335263:Cumulative_Percent = cumsum(sum_data$species[, "average"]/sum(sum_data$species[, "average"]) * 100)
1730800335263:) %>%
1730800335263:head(top_n)
1730800335263:} else {
1730800335264:# For multi-group comparisons
1730800335264:summary_df <- data.frame(
1730800335264:Species = rownames(sum_data),
1730800335264:Overall_Contribution = sum_data[, "overall"],
1730800335264:Average_Contribution = sum_data[, "average"],
1730800335264:Cumulative_Percent = cumsum(sum_data[, "average"]/sum(sum_data[, "average"]) * 100)
1730800335265:) %>%
1730800335265:arrange(desc(Overall_Contribution)) %>%
1730800335265:head(top_n)
1730800335265:}
1730800335265:return(summary_df)
1730800335266:}
1730800335266:# View results
1730800335266:# A. Year-by-year SIMPER results
1730800335266:yearly_summary <- format_simper_summary(simper_yearly)
1730800353907:simper_yearly
1730800368979:sequential_simper
1730800374667:simper_baseline
1730800815894:# Function to format SIMPER results
1730800815895:format_simper_results <- function(simper_result, comparison_type = "sequential") {
1730800815895:# Function to process one comparison
1730800815895:process_comparison <- function(comp_data, comp_name) {
1730800815896:# Convert to data frame
1730800815896:df <- data.frame(
1730800815896:Species = names(comp_data),
1730800815896:Cumulative = as.numeric(comp_data),
1730800815897:Individual = c(comp_data[1], diff(comp_data)),
1730800815897:Comparison = comp_name
1730800815897:) %>%
1730800815897:mutate(
1730800815897:Contribution = Individual * 100,  # Convert to percentage
1730800815898:Cumulative = Cumulative * 100     # Convert to percentage
1730800815898:)
1730800815898:return(df)
1730800815898:}
1730800815898:# Process all comparisons
1730800815899:result_list <- list()
1730800815899:for(comp_name in names(simper_result)) {
1730800815899:result_list[[comp_name]] <- process_comparison(simper_result[[comp_name]], comp_name)
1730800815899:}
1730800815900:# Combine all results
1730800815900:all_results <- bind_rows(result_list)
1730800815900:return(all_results)
1730800815900:}
1730800815901:# Process and view results
1730800815901:# 1. Sequential comparisons
1730800815901:seq_results <- format_simper_results(sequential_simper)
1730800815955:print("Sequential Year Comparisons:")
1730800815956:for(comp in unique(seq_results$Comparison)) {
1730800815956:cat(sprintf("\n%s:\n", comp))
1730800815956:comp_data <- seq_results %>%
1730800815956:filter(Comparison == comp) %>%
1730800815956:select(Species, Contribution, Cumulative) %>%
1730800815956:filter(Cumulative <= 70)  # Show species up to 70% cumulative contribution
1730800815956:print(kableExtra::kbl(comp_data,
1730800815956:caption = sprintf("Species contributions for %s", comp),
1730800815956:digits = 2))
1730800815956:}
1730800815968:# 2. Baseline comparisons
1730800815968:if(exists("simper_baseline")) {
1730800815968:baseline_results <- format_simper_results(simper_baseline) %>%
1730800815968:filter(grepl("1999_", Comparison))
1730800815968:print("\nComparisons with 1999 Baseline:")
1730800815968:for(comp in unique(baseline_results$Comparison)) {
1730800815969:cat(sprintf("\n%s:\n", comp))
1730800815969:comp_data <- baseline_results %>%
1730800815969:filter(Comparison == comp) %>%
1730800815969:select(Species, Contribution, Cumulative) %>%
1730800815969:filter(Cumulative <= 70)
1730800815969:print(kableExtra::kbl(comp_data,
1730800815970:caption = sprintf("Species contributions for %s", comp),
1730800815970:digits = 2))
1730800815970:}
1730800815970:}
1730800888941:# Function to format SIMPER results
1730800888941:format_simper_results <- function(simper_result) {
1730800888941:# Function to process one comparison
1730800888941:process_comparison <- function(comp_data) {
1730800888941:# Extract comparison name from the list names
1730800888941:comp_name <- names(comp_data)
1730800888942:# Process each comparison
1730800888942:result_df <- lapply(seq_along(comp_data), function(i) {
1730800888942:comparison <- comp_name[i]
1730800888942:values <- comp_data[[i]]
1730800888942:data.frame(
1730800888942:Species = names(values),
1730800888943:Cumulative = as.numeric(values),
1730800888943:Individual = c(values[1], diff(as.numeric(values))),
1730800888943:Comparison = comparison,
1730800888943:stringsAsFactors = FALSE
1730800888943:) %>%
1730800888943:mutate(
1730800888944:Contribution = Individual * 100,  # Convert to percentage
1730800888944:Cumulative = Cumulative * 100     # Convert to percentage
1730800888944:)
1730800888944:})
1730800888944:# Combine all comparisons
1730800888944:do.call(rbind, result_df)
1730800888944:}
1730800888945:# Process the results
1730800888945:results_df <- process_comparison(simper_result)
1730800888945:return(results_df)
1730800888945:}
1730800888946:# Process sequential comparisons
1730800888946:print("Sequential Year Comparisons:")
1730800888946:for(i in seq_along(sequential_simper)) {
1730800888946:comp_data <- format_simper_results(sequential_simper[i])
1730800888946:cat(sprintf("\nComparison %d:\n", i))
1730800888947:summary_data <- comp_data %>%
1730800888947:select(Species, Contribution, Cumulative) %>%
1730800888947:filter(Cumulative <= 70)  # Show species up to 70% cumulative contribution
1730800888947:print(kableExtra::kbl(summary_data,
1730800888947:caption = sprintf("Species contributions for comparison %d", i),
1730800888947:digits = 2))
1730800888947:}
1730800899364:# Function to format SIMPER results
1730800899364:format_simper_results <- function(simper_result) {
1730800899365:# Function to process one comparison
1730800899365:process_comparison <- function(comp_data) {
1730800899365:# Extract comparison name from the list names
1730800899366:comp_name <- names(comp_data)
1730800899366:# Process each comparison
1730800899366:result_df <- lapply(seq_along(comp_data), function(i) {
1730800899366:comparison <- comp_name[i]
1730800899367:values <- comp_data[[i]]
1730800899367:data.frame(
1730800899367:Species = names(values),
1730800899367:Cumulative = as.numeric(values),
1730800899367:Individual = c(values[1], diff(as.numeric(values))),
1730800899368:Comparison = comparison,
1730800899368:stringsAsFactors = FALSE
1730800899368:) %>%
1730800899368:mutate(
1730800899368:Contribution = Individual * 100,  # Convert to percentage
1730800899368:Cumulative = Cumulative * 100     # Convert to percentage
1730800899368:)
1730800899369:})
1730800899369:# Combine all comparisons
1730800899369:do.call(rbind, result_df)
1730800899369:}
1730800899370:# Process the results
1730800899370:results_df <- process_comparison(simper_result)
1730800899370:return(results_df)
1730800899370:}
1730800899371:# Process sequential comparisons
1730800899371:print("Sequential Year Comparisons:")
1730800899371:for(i in seq_along(sequential_simper)) {
1730800899372:comp_data <- format_simper_results(sequential_simper[i])
1730800899372:cat(sprintf("\nComparison %d:\n", i))
1730800899372:summary_data <- comp_data %>%
1730800899372:select(Species, Contribution, Cumulative) %>%
1730800899372:filter(Cumulative <= 70)  # Show species up to 70% cumulative contribution
1730800899373:print(kableExtra::kbl(summary_data,
1730800899373:caption = sprintf("Species contributions for comparison %d", i),
1730800899373:digits = 2))
1730800899373:}
1730800974725:# Function to process a single SIMPER comparison
1730800974725:process_simper_comparison <- function(comp_data) {
1730800974726:# Extract the cumulative contributions
1730800974726:species <- names(comp_data)
1730800974726:cumulative <- unname(comp_data)
1730800974726:individual <- c(cumulative[1], diff(cumulative))
1730800974727:data.frame(
1730800974727:Species = species,
1730800974727:Cumulative_Percent = cumulative * 100,
1730800974727:Individual_Percent = individual * 100
1730800974727:) %>%
1730800974727:arrange(desc(Individual_Percent))
1730800974727:}
1730800974728:# Process sequential comparisons
1730800974728:print("Sequential Year Comparisons:")
1730800974728:for(i in seq_along(sequential_simper)) {
1730800974728:comparison_name <- names(sequential_simper[[i]])
1730800974729:cat(sprintf("\nComparison: %s\n", comparison_name))
1730800974729:# Process this comparison
1730800974729:summary_data <- process_simper_comparison(sequential_simper[[i]][[1]]) %>%
1730800974729:filter(Cumulative_Percent <= 70)
1730800974730:print(kableExtra::kbl(summary_data,
1730800974730:caption = sprintf("Species contributions for %s", comparison_name),
1730800974730:digits = 2))
1730800974730:}
1730803392310:# Look at one comparison
1730803392311:print("Example of one comparison:")
1730803392311:print(sequential_simper[[1]])  # First sequential comparison
1730803392314:# Basic function to summarize one comparison
1730803392314:summarize_one_comparison <- function(comparison_data) {
1730803392314:# Get the first element (the comparison)
1730803392315:comp_data <- comparison_data[[1]]
1730803392315:# Create data frame
1730803392315:df <- data.frame(
1730803392315:Species = names(comp_data),
1730803392316:Cumulative = unname(comp_data)
1730803392316:)
1730803392316:# Add individual contributions
1730803392316:df$Individual <- c(df$Cumulative[1],
1730803392316:diff(df$Cumulative))
1730803392317:return(df)
1730803392317:}
1730803392317:# Try it with one comparison
1730803392318:test_summary <- summarize_one_comparison(sequential_simper[[1]])
1730803430774:# Inspect the structure of the first comparison
1730803430775:str(sequential_simper[[1]])
1730803430838:# Print the first comparison to see its content
1730803430838:print(sequential_simper[[1]])
1730803459286:# Function to summarize one comparison
1730803459287:summarize_one_comparison <- function(comparison_data) {
1730803459287:# Extract the relevant data
1730803459287:species_names <- comparison_data$species
1730803459287:cumulative_contributions <- comparison_data$cusum
1730803459288:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730803459288:# Create a data frame
1730803459288:df <- data.frame(
1730803459288:Species = species_names,
1730803459288:Cumulative_Percent = cumulative_contributions * 100,
1730803459289:Individual_Percent = individual_contributions * 100
1730803459289:)
1730803459289:return(df)
1730803459289:}
1730803459290:# Process sequential comparisons
1730803459290:print("Sequential Year Comparisons:")
1730803459290:for(i in seq_along(sequential_simper)) {
1730803459291:comparison_name <- names(sequential_simper[[i]])
1730803459291:cat(sprintf("\nComparison: %s\n", comparison_name))
1730803459291:# Process this comparison
1730803459292:summary_data <- summarize_one_comparison(sequential_simper[[i]][[1]]) %>%
1730803459292:filter(Cumulative_Percent <= 70)
1730803459292:print(kableExtra::kbl(summary_data,
1730803459292:caption = sprintf("Species contributions for %s", comparison_name),
1730803459293:digits = 2))
1730803459293:}
1730803459862:# Process baseline comparisons (1999)
1730803459862:if(exists("simper_baseline")) {
1730803459863:print("\nComparisons with 1999 Baseline:")
1730803459863:baseline_comps <- names(simper_baseline)[grep("1999_", names(simper_baseline))]
1730803459863:for(comp_name in baseline_comps) {
1730803459863:cat(sprintf("\n%s:\n", comp_name))
1730803459863:summary_data <- summarize_one_comparison(simper_baseline[[comp_name]]) %>%
1730803459863:filter(Cumulative_Percent <= 70)
1730803459864:print(kableExtra::kbl(summary_data,
1730803459864:caption = sprintf("Species contributions for %s", comp_name),
1730803459864:digits = 2))
1730803459864:}
1730803459864:}
1730803565381:# Function to summarize one comparison
1730803565381:summarize_one_comparison <- function(comparison_data) {
1730803565381:# Extract the relevant data
1730803565381:species_names <- names(comparison_data$cusum)
1730803565381:cumulative_contributions <- unname(comparison_data$cusum)
1730803565381:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730803565381:# Create a data frame
1730803565382:df <- data.frame(
1730803565382:Species = species_names,
1730803565382:Cumulative_Percent = cumulative_contributions * 100,
1730803565382:Individual_Percent = individual_contributions * 100
1730803565382:)
1730803565383:return(df)
1730803565383:}
1730803565383:# Process sequential comparisons
1730803565383:print("Sequential Year Comparisons:")
1730803565384:for(i in seq_along(sequential_simper)) {
1730803565384:comparison_name <- names(sequential_simper[[i]])
1730803565384:cat(sprintf("\nComparison: %s\n", comparison_name))
1730803565385:# Process this comparison
1730803565385:summary_data <- summarize_one_comparison(sequential_simper[[i]][[1]]) %>%
1730803565385:filter(Cumulative_Percent <= 70)
1730803565385:print(kableExtra::kbl(summary_data,
1730803565386:caption = sprintf("Species contributions for %s", comparison_name),
1730803565386:digits = 2))
1730803565386:}
1730803565748:# Process baseline comparisons (1999)
1730803565749:if(exists("simper_baseline")) {
1730803565749:print("\nComparisons with 1999 Baseline:")
1730803565749:baseline_comps <- names(simper_baseline)[grep("1999_", names(simper_baseline))]
1730803565749:for(comp_name in baseline_comps) {
1730803565749:cat(sprintf("\n%s:\n", comp_name))
1730803565749:summary_data <- summarize_one_comparison(simper_baseline[[comp_name]]) %>%
1730803565750:filter(Cumulative_Percent <= 70)
1730803565750:print(kableExtra::kbl(summary_data,
1730803565750:caption = sprintf("Species contributions for %s", comp_name),
1730803565750:digits = 2))
1730803565751:}
1730803565751:}
1730803918198:# Filter data for Terebellides stroemii
1730803918198:tere_data <- df_result %>%
1730803918199:filter(species == "Terebellides stroemii" & year %in% c(1999, 2017)) %>%
1730803918199:group_by(year) %>%
1730803918199:summarise(total_abundance = sum(abundance))
1730803950868:# Filter data for Terebellides stroemii
1730803950869:tere_data <- df_result %>%
1730803950869:filter(species == "Terebellides stroemii" & year %in% c(1999, 2017)) %>%
1730803950869:group_by(year) %>%
1730803950869:summarise(total_density = sum(adjusted_density))
1730803950874:print(tere_data)
1730804101960:# Function to summarize one comparison
1730804101961:summarize_one_comparison <- function(comparison_data, df_result, year1, year2) {
1730804101961:# Extract the relevant data
1730804101961:species_names <- names(comparison_data$cusum)
1730804101961:cumulative_contributions <- unname(comparison_data$cusum)
1730804101961:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730804101962:# Calculate the change in abundance for each species
1730804101962:abundance_changes <- sapply(species_names, function(species) {
1730804101962:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730804101962:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730804101962:change <- abundance_year2 - abundance_year1
1730804101962:return(change)
1730804101963:})
1730804101963:# Create a data frame
1730804101963:df <- data.frame(
1730804101963:Species = species_names,
1730804101964:Cumulative_Percent = cumulative_contributions * 100,
1730804101964:Individual_Percent = individual_contributions * 100,
1730804101964:Abundance_Change = abundance_changes
1730804101964:)
1730804101964:return(df)
1730804101964:}
1730804101965:# Process sequential comparisons
1730804101965:print("Sequential Year Comparisons:")
1730804101965:for(i in seq_along(sequential_simper)) {
1730804101966:comparison_name <- names(sequential_simper[[i]])
1730804101966:years <- unlist(strsplit(comparison_name, "_"))
1730804101966:year1 <- as.numeric(years[1])
1730804101966:year2 <- as.numeric(years[2])
1730804101966:cat(sprintf("\nComparison: %s\n", comparison_name))
1730804101967:# Process this comparison
1730804101967:summary_data <- summarize_one_comparison(sequential_simper[[i]][[1]], df_result, year1, year2) %>%
1730804101967:filter(Cumulative_Percent <= 70)
1730804101967:print(kableExtra::kbl(summary_data,
1730804101968:caption = sprintf("Species contributions for %s", comparison_name),
1730804101968:digits = 2))
1730804101968:}
1730804102267:# Process baseline comparisons (1999)
1730804102267:if(exists("simper_baseline")) {
1730804102268:print("\nComparisons with 1999 Baseline:")
1730804102268:baseline_comps <- names(simper_baseline)[grep("1999_", names(simper_baseline))]
1730804102268:for(comp_name in baseline_comps) {
1730804102268:years <- unlist(strsplit(comp_name, "_"))
1730804102268:year1 <- as.numeric(years[1])
1730804102268:year2 <- as.numeric(years[2])
1730804102269:cat(sprintf("\n%s:\n", comp_name))
1730804102269:summary_data <- summarize_one_comparison(simper_baseline[[comp_name]], df_result, year1, year2) %>%
1730804102269:filter(Cumulative_Percent <= 70)
1730804102269:print(kableExtra::kbl(summary_data,
1730804102270:caption = sprintf("Species contributions for %s", comp_name),
1730804102270:digits = 2))
1730804102270:}
1730804102270:}
1730804561830:if (!exists("df_result")) {
1730804561830:stop("df_result is not defined. Please load or create this data frame before running the script.")
1730804561830:}
1730804570756:if (!exists("rassdf_result")) {
1730804570756:stop("df_result is not defined. Please load or create this data frame before running the script.")
1730804570757:}
1730804660148:sequential_simper
1730806028030:search()
1730806047848:# Check if df_result is loaded
1730806047848:if (!exists("df_result")) {
1730806047849:stop("df_result is not defined. Please load or create this data frame before running the script.")
1730806047849:}
1730806047849:# Ensure necessary columns are present
1730806047849:required_columns <- c("station", "year", "species", "adjusted_density")
1730806047850:missing_columns <- setdiff(required_columns, names(df_result))
1730806047851:if (length(missing_columns) > 0) {
1730806047851:stop("The following required columns are missing from df_result: ", paste(missing_columns, collapse = ", "))
1730806047851:}
1730806047851:# Summarize and reshape data, excluding NA species
1730806047851:species_data <- df_result %>%
1730806047852:filter(!is.na(species)) %>% # Exclude rows where species is NA
1730806047852:group_by(station, year, species) %>%
1730806047852:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730806047852:pivot_wider(names_from = species, values_from = N, values_fill = 0) %>%
1730806047852:mutate(
1730806047852:Station = factor(station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1730806047853:Year = factor(year)
1730806047853:) %>%
1730806047853:select(-station, -year)
1730806047881:# Define early and late year groups for SIMPER
1730806047881:species_data$year_group <- factor(ifelse(species_data$Year %in% c("2013", "2014"), "Early",
1730806047881:ifelse(species_data$Year %in% c("2016", "2017"), "Late", NA)))
1730806047882:# Separate environmental data and species data for SIMPER
1730806047882:env_data <- species_data %>% select(Station, Year, year_group)
1730806047883:species_matrix <- species_data %>% select(-Station, -Year, -year_group) %>% as.matrix()
1730806047887:# Filter data for non-NA year groups for SIMPER analysis
1730806047887:simper_data <- species_matrix[!is.na(env_data$year_group), ]
1730806047887:simper_group <- env_data$year_group[!is.na(env_data$year_group)]
1730806047887:# Perform SIMPER analysis
1730806047887:simper_result <- simper(simper_data, group = simper_group, permutations = 999)
1730806048105:print(summary(simper_result))
1730806048144:# Function to summarize one comparison and calculate AMBI scores
1730806048144:summarize_one_comparison <- function(comparison_data, df_result, year1, year2) {
1730806048144:# Extract the relevant data
1730806048145:species_names <- names(comparison_data$cusum)
1730806048145:cumulative_contributions <- unname(comparison_data$cusum)
1730806048145:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730806048145:# Calculate the change in abundance for each species
1730806048145:abundance_changes <- sapply(species_names, function(species) {
1730806048146:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730806048146:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730806048146:change <- abundance_year2 - abundance_year1
1730806048146:return(change)
1730806048146:})
1730806048146:# Calculate AMBI scores for significant species
1730806048147:ambi_scores <- sapply(species_names, function(species) {
1730806048147:if (species %in% significant_species) {
1730806048147:return(ambi(species)) # Replace with actual AMBI calculation
1730806048147:} else {
1730806048147:return(NA)
1730806048147:}
1730806048148:})
1730806048148:# Create a data frame
1730806048148:df <- data.frame(
1730806048148:Species = species_names,
1730806048149:Cumulative_Percent = cumulative_contributions * 100,
1730806048149:Individual_Percent = individual_contributions * 100,
1730806048149:Abundance_Change = abundance_changes,
1730806048149:AMBI_Score = ambi_scores
1730806048149:)
1730806048150:return(df)
1730806048150:}
1730806048150:# Process sequential comparisons
1730806048150:print("Sequential Year Comparisons:")
1730806048151:for(i in seq_along(sequential_simper)) {
1730806048151:comparison_name <- names(sequential_simper[[i]])
1730806048151:years <- unlist(strsplit(comparison_name, "_"))
1730806048151:year1 <- as.numeric(years[1])
1730806048151:year2 <- as.numeric(years[2])
1730806048151:cat(sprintf("\nComparison: %s\n", comparison_name))
1730806048152:# Process this comparison
1730806048152:summary_data <- summarize_one_comparison(sequential_simper[[i]][[1]], df_result, year1, year2) %>%
1730806048152:filter(Cumulative_Percent <= 70)
1730806048152:print(kableExtra::kbl(summary_data,
1730806048152:caption = sprintf("Species contributions for %s", comparison_name),
1730806048153:digits = 2))
1730806048153:}
1730806177280:# Perform SIMPER analysis
1730806177280:simper_result <- simper(simper_data, group = simper_group, permutations = 999)
1730806187303:print(summary(simper_result))
1730806188948:# Extract significant species based on a criterion (e.g., cumulative contribution <= 70%)
1730806188948:significant_species <- unique(unlist(lapply(simper_result, function(res) {
1730806188948:species_names <- names(res$cusum)
1730806188948:cumulative_contributions <- unname(res$cusum)
1730806188949:significant <- species_names[cumulative_contributions <= 0.7]
1730806188949:return(significant)
1730806188949:})))
1730806190765:# Function to summarize one comparison and calculate AMBI scores
1730806190766:summarize_one_comparison <- function(comparison_data, df_result, year1, year2) {
1730806190766:# Extract the relevant data
1730806190766:species_names <- names(comparison_data$cusum)
1730806190766:cumulative_contributions <- unname(comparison_data$cusum)
1730806190767:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730806190767:# Calculate the change in abundance for each species
1730806190767:abundance_changes <- sapply(species_names, function(species) {
1730806190767:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730806190768:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730806190768:change <- abundance_year2 - abundance_year1
1730806190768:return(change)
1730806190768:})
1730806190768:# Calculate AMBI scores for significant species
1730806190769:ambi_scores <- sapply(species_names, function(species) {
1730806190769:if (species %in% significant_species) {
1730806190769:return(ambi(species)) # Replace with actual AMBI calculation
1730806190769:} else {
1730806190769:return(NA)
1730806190770:}
1730806190770:})
1730806190770:# Create a data frame
1730806190770:df <- data.frame(
1730806190770:Species = species_names,
1730806190771:Cumulative_Percent = cumulative_contributions * 100,
1730806190771:Individual_Percent = individual_contributions * 100,
1730806190771:Abundance_Change = abundance_changes,
1730806190771:AMBI_Score = ambi_scores
1730806190771:)
1730806190772:return(df)
1730806190772:}
1730806192607:# Process sequential comparisons
1730806192607:print("Sequential Year Comparisons:")
1730806193989:for(i in seq_along(sequential_simper)) {
1730806193989:comparison_name <- names(sequential_simper[[i]])
1730806193989:years <- unlist(strsplit(comparison_name, "_"))
1730806193989:year1 <- as.numeric(years[1])
1730806193989:year2 <- as.numeric(years[2])
1730806193990:cat(sprintf("\nComparison: %s\n", comparison_name))
1730806193990:# Process this comparison
1730806193990:summary_data <- summarize_one_comparison(sequential_simper[[i]][[1]], df_result, year1, year2) %>%
1730806193990:filter(Cumulative_Percent <= 70)
1730806193991:print(kableExtra::kbl(summary_data,
1730806193991:caption = sprintf("Species contributions for %s", comparison_name),
1730806193991:digits = 2))
1730806193991:}
1730806241374:bbi_results
1730806253943:KolgrTaxa <- read_csv(file("data/raw/KolgrTaxa.csv", encoding = "UTF-8"), na = "empty")
1730806254358:taxa_to_remove <- c(
1730806254358:"Foraminifera",
1730806254358:"Nematoda",
1730806254358:"Cirripedia",
1730806254358:"Porifera",
1730806254358:"Cnidaria",
1730806254359:"Bryozoa",
1730806254359:"Sipuncula",
1730806254359:"Platyhelminthes",
1730806254359:"Nemertea",
1730806254359:"Oligochaeta",
1730806254359:"Ostracoda"
1730806254359:)
1730806254359:# Filter out the specified taxa using if_all()
1730806254359:KolgrTaxa <- KolgrTaxa %>%
1730806254359:filter(if_all(where(is.character), ~ !. %in% taxa_to_remove))
1730806254367:remove_list <- paste(c(
1730806254367:"nýsestir",
1730806254368:"ungviði",
1730806254368:"ungv",
1730806254368:"ungv.",
1730806254368:"juv",
1730806254368:"harpacticoida"
1730806254368:), collapse = '|')
1730806254368:remove_ind <- lapply(strsplit(remove_list , "\\|")[[1]] , \(x) grep(x , KolgrTaxa$gamalt , fixed = T)) |>
1730806254369:unlist() |>
1730806254369:unique()
1730806254372:ekkiungvidi <- KolgrTaxa[-remove_ind,]
1730806254373:jorundur <- ekkiungvidi %>%
1730806254373:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1730806254374:mutate(
1730806254374:Flokkun = case_when(
1730806254374:# General taxonomic standardization (no year-specific)
1730806254374:str_detect(tolower(Flokkun), "^sipuncul") ~ "Sipuncula",
1730806254374:tolower(Flokkun) == "ostracoda" ~ "Ostracoda",
1730806254374:tolower(Flokkun) == "terebellides stroemi" ~ "Terebellides stroemii",
1730806254374:tolower(Flokkun) == "bivalvia" ~ "NA",
1730806254375:# 1999 specific matches
1730806254375:Artal == "1999" & tolower(Flokkun) %in% c("ampharetinae", "ampharete acutifrons") ~ "Ampharetidae",
1730806254375:Artal == "1999" & tolower(Flokkun) == "bivalvia" ~ "NA",
1730806254375:Artal == "1999" & tolower(Flokkun) == "leucon acutirostris" ~ "Cumacea",
1730806254375:Artal == "1999" & tolower(Flokkun) == "eudorella emarginata" ~ "Cumacea",
1730806254376:Artal == "1999" & tolower(Flokkun) == "musculus discors" ~ "Musculus",
1730806254376:Artal == "1999" & tolower(Flokkun) == "aricidea (acmira) cerrutii" ~ "Aricidea suecica",
1730806254376:Artal == "1999" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1730806254376:# 2013 specific matches
1730806254377:Artal == "2013" & tolower(Flokkun) %in% c("harmothoe", "polynoidae") ~ "Harmothoe extenuata",
1730806254377:Artal == "2013" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730806254377:# 2014 specific matches
1730806254377:Artal == "2014" & tolower(Flokkun) == "ampharete acutifrons" ~ "Ampharetidae",
1730806254377:Artal == "2014" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730806254378:Artal == "2014" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730806254378:Artal == "2014" & tolower(Flokkun) == "caprellidae" ~ "Caprella septemtrionalis",
1730806254378:Artal == "2014" & tolower(Flokkun) == "praxillella" ~ "Praxillella praetermissa",
1730806254378:Artal == "2014" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1730806254378:Artal == "2014" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730806254379:Artal == "2014" & tolower(Flokkun) == "mytilus edulis" ~ "Mytilidae",
1730806254379:Artal == "2014" & tolower(Flokkun) == "nephtyidae" ~ "Nephthys",
1730806254379:Artal == "2014" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1730806254379:Artal == "2014" & tolower(Flokkun) == "tubificidae" ~ "Tubificoides kozloffi",
1730806254380:Artal == "2014" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730806254380:# 2015 specific matches
1730806254380:Artal == "2015" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730806254381:Artal == "2015" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730806254381:Artal == "2015" & tolower(Flokkun) == "crenella" ~ "Crenella decussata",
1730806254381:Artal == "2015" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1730806254381:Artal == "2015" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730806254381:Artal == "2015" & tolower(Flokkun) == "mytilidae" ~ "Mytilus edulis",
1730806254382:Artal == "2015" & tolower(Flokkun) == "ampharetidae" ~ "NA",
1730806254382:Artal == "2015" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730806254382:Artal == "2015" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730806254382:Artal == "2015" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1730806254383:# 2016 specific matches
1730806254383:Artal == "2016" & tolower(Flokkun) == "orbiniidae" ~ "Scoloplos armiger",
1730806254383:Artal == "2016" & tolower(Flokkun) == "polychaeta" ~ "NA",
1730806254383:Artal == "2016" & tolower(Flokkun) == "polynoidae" ~ "Harmothoe imbricata",
1730806254384:Artal == "2016" & tolower(Flokkun) %in% c("spio filicornis", "spionidae") ~ "Spionidae",
1730806254384:Artal == "2016" & tolower(Flokkun) %in% c("syllis", "syllidae") ~ "Syllis cornuta",
1730806254384:Artal == "2016" & tolower(Flokkun) %in% c("terebellidae", "terebelliformia") ~ "Terebellides stroemii",
1730806254385:Artal == "2016" & tolower(Flokkun) == "amphipoda" ~ "NA",
1730806254385:Artal == "2016" & tolower(Flokkun) == "bivalvia" ~ "NA",
1730806254385:Artal == "2016" & tolower(Flokkun) == "cardium" ~ "NA",
1730806254385:Artal == "2016" & tolower(Flokkun) == "aricidea" ~ "Amphitrite cirrata",
1730806254386:Artal == "2016" & tolower(Flokkun) == "capitellidae" ~ "Capitella capitata",
1730806254386:Artal == "2016" & tolower(Flokkun) == "cirratulidae" ~ "Cirratulus cirratus",
1730806254386:Artal == "2016" & tolower(Flokkun) == "cossuridae" ~ "Cossura longocirrata",
1730806254387:Artal == "2016" & tolower(Flokkun) == "pectinariidae" ~ "Pectinaria koreni",
1730806254387:Artal == "2016" & tolower(Flokkun) == "phyllodocida" ~ "Phyllodoce maculata",
1730806254387:Artal == "2016" & tolower(Flokkun) == "lumbrineridae" ~ "Lumbrineris",
1730806254387:Artal == "2016" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730806254388:Artal == "2016" & tolower(Flokkun) == "balanus balanus" ~ "Balanus",
1730806254388:Artal == "2016" & tolower(Flokkun) %in% c("priapulidae", "priapulidae") ~ "Priapulus caudatus",
1730806254389:# 2017 specific matches
1730806254389:Artal == "2017" & tolower(Flokkun) == "oligochaeta" ~ "NA",
1730806254389:Artal == "2017" & tolower(Flokkun) == "tubificidae" ~ "NA",
1730806254390:Artal == "2017" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1730806254390:Artal == "2017" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730806254390:Artal == "2017" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730806254391:Artal == "2017" & tolower(Flokkun) == "caprellidae" ~ "Caprella septentrionalis",
1730806254391:Artal == "2017" & tolower(Flokkun) == "opisthobranchia" ~ "Retusa pertenuis",
1730806254391:Artal == "2017" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730806254392:Artal == "2017" & tolower(Flokkun) == "maldanidae" ~ "Praxillella praetermissa",
1730806254392:Artal == "2017" & tolower(Flokkun) %in% c("ampharete", "ampharete acutifrons") ~ "Ampharetidae",
1730806254392:Artal == "2017" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730806254393:Artal == "2017" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730806254393:# Default case
1730806254394:TRUE ~ Flokkun
1730806254394:)
1730806254394:) %>%
1730806254395:drop_na()
1730806254523:df <- jorundur  %>%
1730806254523:rename(
1730806254523:species = Flokkun,
1730806254523:sample_id = id,
1730806254523:year = Artal,
1730806254523:station = stod,
1730806254523:subdivision = skipting,
1730806254523:count = N,
1730806254523:density = Nu
1730806254524:)
1730806254527:result <- df %>%
1730806254527:filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1730806254527:# First, apply the subdivision to the count
1730806254527:mutate(adjusted_count = count * subdivision) %>%
1730806254527:# Calculate the correct number of samples and total area for each station-year combination
1730806254527:group_by(station, year) %>%
1730806254527:mutate(
1730806254528:n_samples = n_distinct(sample_id),
1730806254528:grab_area = case_when(
1730806254528:year == 1999 ~ 0.0225,
1730806254528:TRUE ~ 0.04
1730806254528:),
1730806254528:total_area = grab_area * n_samples
1730806254528:) %>%
1730806254528:ungroup() %>%
1730806254528:# Now group by station, year, and species to get total counts
1730806254528:group_by(station, year, species) %>%
1730806254528:summarise(
1730806254529:original_total_count = sum(count),
1730806254529:adjusted_total_count = sum(adjusted_count),
1730806254529:n_samples = first(n_samples),  # Use the previously calculated n_samples
1730806254529:total_area = first(total_area),  # Use the previously calculated total_area
1730806254529:.groups = 'keep'
1730806254529:) %>%
1730806254529:# Calculate densities
1730806254529:mutate(
1730806254529:original_density = original_total_count / total_area,
1730806254529:adjusted_density = adjusted_total_count / total_area,
1730806254529:density_difference = adjusted_density - original_density,
1730806254530:density_ratio = adjusted_density / original_density
1730806254530:) %>%
1730806254530:# Ungroup
1730806254530:ungroup()
1730806254597:### summary statistic
1730806254597:# various Benthic Biotic Indices (BBI) for different years and stations. It then creates heatmaps to visualize these indices. This provides a good overview of the ecological status of the benthic communities over time and across different sampling sites.
1730806254597:library(BBI)
1730806254597:library(gplots)
1730806254597:# Calculate Benthic Biotic Indices (BBI) for each year and station
1730806254597:calculate_biotic_indices <- function(data) {
1730806254597:# Validate input data
1730806254598:required_cols <- c("year", "station", "species", "adjusted_density")  # Changed from count to adjusted_density
1730806254598:stopifnot(
1730806254598:"Missing required columns" = all(required_cols %in% colnames(data)),
1730806254598:"No data provided" = nrow(data) > 0,
1730806254598:"Negative density values found" = all(data$adjusted_density >= 0),
1730806254598:"Missing values found" = !any(is.na(data$adjusted_density))
1730806254598:)
1730806254598:# Define target stations
1730806254598:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730806254598:# Initialize lists to store results
1730806254598:indices_list <- list()
1730806254599:# Calculate indices for each year
1730806254599:for (current_year in sort(unique(data$year))) {
1730806254599:# Prepare data for BBI calculation using density values
1730806254599:year_data <- data %>%
1730806254599:filter(year == current_year,
1730806254599:station %in% target_stations) %>%
1730806254599:group_by(station, species) %>%
1730806254599:summarise(density = sum(adjusted_density), .groups = 'drop') %>%  # Using adjusted_density
1730806254599:pivot_wider(names_from = station,
1730806254599:values_from = density,
1730806254599:values_fill = 0)
1730806254600:# Calculate BBI indices
1730806254600:bbi_results <- BBI(year_data)
1730806254600:# Store results
1730806254600:indices_list[[as.character(current_year)]] <- list(
1730806254600:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730806254600:classification = bbi_results$BBIclass,
1730806254600:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1730806254600:)
1730806254601:}
1730806254601:return(indices_list)
1730806254601:}
1730806254601:# Use the result dataframe that already has the correct density calculations
1730806254601:biotic_indices <- calculate_biotic_indices(result)
1730806266664:biotic_indices
1730806645453:# Calculate Benthic Biotic Indices (BBI) and AMBI for each year and station
1730806645453:calculate_biotic_indices_with_ambi <- function(data) {
1730806645453:# Validate input data
1730806645453:required_cols <- c("year", "station", "species", "adjusted_density", "ambi_score")
1730806645454:stopifnot(
1730806645454:"Missing required columns" = all(required_cols %in% colnames(data)),
1730806645454:"No data provided" = nrow(data) > 0,
1730806645454:"Negative density values found" = all(data$adjusted_density >= 0),
1730806645455:"Missing values found" = !any(is.na(data$adjusted_density))
1730806645455:)
1730806645455:# Define target stations
1730806645456:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730806645456:# Initialize lists to store results
1730806645456:indices_list <- list()
1730806645456:# Calculate indices for each year
1730806645457:for (current_year in sort(unique(data$year))) {
1730806645457:# Prepare data for BBI calculation using density values
1730806645457:year_data <- data %>%
1730806645457:filter(year == current_year,
1730806645457:station %in% target_stations) %>%
1730806645458:group_by(station, species) %>%
1730806645458:summarise(
1730806645458:density = sum(adjusted_density),
1730806645458:avg_ambi_score = mean(ambi_score * adjusted_density) / sum(adjusted_density), # Weighted average AMBI score
1730806645458:.groups = 'drop'
1730806645459:) %>%
1730806645459:pivot_wider(names_from = station, values_from = density, values_fill = 0)
1730806645459:# Calculate BBI indices
1730806645459:bbi_results <- BBI(year_data)
1730806645460:# Store results, including average AMBI scores
1730806645460:indices_list[[as.character(current_year)]] <- list(
1730806645460:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730806645460:classification = bbi_results$BBIclass,
1730806645461:normalized = as.data.frame(nEQR(bbi_results$BBI)[1]),
1730806645461:avg_ambi_score = year_data$avg_ambi_score # Store weighted AMBI scores per species
1730806645461:)
1730806645461:}
1730806645462:return(indices_list)
1730806645462:}
1730806645462:# Use the result dataframe that already has the correct density calculations and AMBI scores
1730806645463:biotic_indices_with_ambi <- calculate_biotic_indices_with_ambi(result)
1730806658325:bbi_results
1730806665389:result
1730806677876:biotic_indices
1730806691517:current_year
1730806696939:indices_list
1730806700226:indices
1730806703917:bbi_results
1730806710733:indices_list
1730806721636:calculate_biotic_indices
1730806818668:result
1730806856245:calculate_biotic_indices_with_ambi(result)
1730806930751:# Calculate Benthic Biotic Indices (BBI) and AMBI for each year and station
1730806930751:calculate_biotic_indices_with_ambi <- function(data) {
1730806930752:# Validate input data
1730806930752:required_cols <- c("year", "station", "species", "adjusted_density", "ambi_score")
1730806930752:stopifnot(
1730806930752:"Missing required columns" = all(required_cols %in% colnames(data)),
1730806930752:"No data provided" = nrow(data) > 0,
1730806930753:"Negative density values found" = all(data$adjusted_density >= 0),
1730806930753:"Missing values found" = !any(is.na(data$adjusted_density))
1730806930753:)
1730806930753:# Define target stations
1730806930753:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730806930754:# Initialize lists to store results
1730806930754:indices_list <- list()
1730806930754:# Calculate indices for each year
1730806930754:for (current_year in sort(unique(data$year))) {
1730806930754:# Prepare data for BBI calculation using density values
1730806930755:year_data <- data %>%
1730806930755:filter(year == current_year,
1730806930755:station %in% target_stations) %>%
1730806930755:group_by(station, species) %>%
1730806930756:summarise(
1730806930756:density = sum(adjusted_density),
1730806930756:avg_ambi_score = mean(ambi_score * adjusted_density) / sum(adjusted_density), # Weighted average AMBI score
1730806930756:.groups = 'drop'
1730806930757:) %>%
1730806930757:pivot_wider(names_from = station, values_from = density, values_fill = 0)
1730806930757:# Calculate BBI indices
1730806930757:bbi_results <- BBI(year_data)
1730806930758:# Store results, including average AMBI scores
1730806930758:indices_list[[as.character(current_year)]] <- list(
1730806930758:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730806930759:classification = bbi_results$BBIclass,
1730806930759:normalized = as.data.frame(nEQR(bbi_results$BBI)[1]),
1730806930759:avg_ambi_score = year_data$avg_ambi_score # Store weighted AMBI scores per species
1730806930759:)
1730806930759:}
1730806930760:return(indices_list)
1730806930760:}
1730806930761:# Use the result dataframe that already has the correct density calculations and AMBI scores
1730806930761:biotic_indices_with_ambi <- calculate_biotic_indices_with_ambi(result)
1730806965516:str(result)
1730807181654:install.packages("benthos")
1730807199767:benthos::ambi("Abra nitida")
1730807207990:benthos::ambi_("Abra nitida")
1730807216014:benthos::ambi_(taxon = "Abra nitida")
1730807229213:?benthos::ambi()
1730807251966:?benthos::has_ambi("Abra nitida")
1730807255790:benthos::has_ambi("Abra nitida")
1730807413364:benthos::find_taxa("Abra nitida")
1730808049782:install.packages("R.matlab")
1730808064718:library(R.matlab)
1730808064783:# Load data from a .mat file
1730808064783:ambi_mat_data <- readMat("D:/M-AMBI/library.mat")
1730808108140:ambi_mat_data <- readMat("D:\\M-AMBI\\library.mat")
1730814327962:simper_result
1730814366121:extract_significant_species <- function(simper_result, threshold = 0.7) {
1730814366121:significant_species <- unique(unlist(lapply(simper_result, function(res) {
1730814366122:species_names <- names(res$cusum)
1730814366122:cumulative_contributions <- unname(res$cusum)
1730814366122:significant <- species_names[cumulative_contributions <= threshold]
1730814366123:return(significant)
1730814366123:})))
1730814366123:return(significant_species)
1730814366124:}
1730814366124:# Collect all significant species across all comparisons
1730814366124:all_significant_species <- unique(unlist(lapply(c(simper_yearly, sequential_simper, list(simper_baseline)), extract_significant_species)))
1730814441111:simper_result
1730814444784:simper_result$Early_Late
1730814775585:henda <- read.csv("ambi/species_list.csv", row.names = F)
1730814786647:henda <- read.csv("data/ambi/species_list.csv", row.names = F)
1730814792991:henda <- read.csv("data/ambi/species_list.csv")
1730814805167:str(henda)
1730815003210:henda <- read.csv("data/ambi/species_list_full.csv")
1730815007407:str(henda)
1730815134597:species_ambi <- read.csv("data/ambi/species_list_full.csv")
1730815142727:str(species_ambi)
1730815525394:# Extract significant species from Early_Late comparison
1730815525395:significant_species <- names(simper_result$Early_Late$cusum)[simper_result$Early_Late$cusum <= 0.7]
1730815526521:species_ambi <- read.csv("data/ambi/species_list_full.csv")
1730815527273:# Function to summarize one comparison and add ecological group
1730815527273:summarize_one_comparison <- function(comparison_data, df_result, year1, year2, species_ambi) {
1730815527273:# Extract the relevant data
1730815527273:species_names <- names(comparison_data$cusum)
1730815527273:cumulative_contributions <- unname(comparison_data$cusum)
1730815527274:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730815527274:# Calculate the change in abundance for each species
1730815527274:abundance_changes <- sapply(species_names, function(species) {
1730815527274:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730815527274:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730815527275:change <- abundance_year2 - abundance_year1
1730815527275:return(change)
1730815527275:})
1730815527275:# Get ecological group for each species
1730815527276:ecological_groups <- sapply(species_names, function(species) {
1730815527276:match_index <- match(species, species_ambi$species)
1730815527276:if (!is.na(match_index)) {
1730815527276:return(species_ambi$ecological_group[match_index])
1730815527276:} else {
1730815527277:return(NA)
1730815527277:}
1730815527277:})
1730815527277:# Create a data frame
1730815527277:df <- data.frame(
1730815527278:Species = species_names,
1730815527278:Cumulative_Percent = cumulative_contributions * 100,
1730815527278:Individual_Percent = individual_contributions * 100,
1730815527278:Abundance_Change = abundance_changes,
1730815527278:Ecological_Group = ecological_groups
1730815527279:)
1730815527279:return(df)
1730815527279:}
1730815528032:# Process sequential comparisons
1730815528032:print("Sequential Year Comparisons:")
1730815529991:for(i in seq_along(sequential_simper)) {
1730815529991:comparison_name <- names(sequential_simper[[i]])
1730815529991:years <- unlist(strsplit(comparison_name, "_"))
1730815529991:year1 <- as.numeric(years[1])
1730815529991:year2 <- as.numeric(years[2])
1730815529992:cat(sprintf("\nComparison: %s\n", comparison_name))
1730815529992:# Process this comparison
1730815529992:summary_data <- summarize_one_comparison(sequential_simper[[i]][[1]], df_result, year1, year2, species_ambi) %>%
1730815529992:filter(Cumulative_Percent <= 70)
1730815529992:print(kableExtra::kbl(summary_data,
1730815529993:caption = sprintf("Species contributions for %s", comparison_name),
1730815529993:digits = 2))
1730815529993:}
1730815536202:# Process baseline comparisons (1999)
1730815536202:if(exists("simper_baseline")) {
1730815536202:print("\nComparisons with 1999 Baseline:")
1730815536203:baseline_comps <- names(simper_baseline)[grep("1999_", names(simper_baseline))]
1730815536203:for(comp_name in baseline_comps) {
1730815536203:years <- unlist(strsplit(comp_name, "_"))
1730815536203:year1 <- as.numeric(years[1])
1730815536203:year2 <- as.numeric(years[2])
1730815536204:cat(sprintf("\n%s:\n", comp_name))
1730815536204:summary_data <- summarize_one_comparison(simper_baseline[[comp_name]], df_result, year1, year2, species_ambi) %>%
1730815536204:filter(Cumulative_Percent <= 70)
1730815536205:print(kableExtra::kbl(summary_data,
1730815536205:caption = sprintf("Species contributions for %s", comp_name),
1730815536205:digits = 2))
1730815536205:}
1730815536205:}
1730815678609:table(df_result$species)
1730816210089:summary_data
1730816219646:dim(summary_data)
1730816227496:rownames(summary_data)
1730816289559:rownames(summary_data) <- NULL
1730816292201:summary_data
1730816327209:simper(simper_data, group = simper_group, permutations = 999)
1730816362328:calculate_biotic_indices(result)
1730816454136:biotic_indices
1730816462712:str(biotic_indices)
1730816589057:calculate_biotic_indices(result)
1730816744410:library(BBI)
1730816744411:library(gplots)
1730816744411:# Calculate Benthic Biotic Indices (BBI) for each year and station, with species and ecological group output
1730816744412:calculate_biotic_indices <- function(data) {
1730816744412:# Validate input data
1730816744412:required_cols <- c("year", "station", "species", "adjusted_density")
1730816744413:stopifnot(
1730816744413:"Missing required columns" = all(required_cols %in% colnames(data)),
1730816744413:"No data provided" = nrow(data) > 0,
1730816744413:"Negative density values found" = all(data$adjusted_density >= 0),
1730816744413:"Missing values found" = !any(is.na(data$adjusted_density))
1730816744414:)
1730816744414:# Define target stations
1730816744414:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730816744415:# Initialize lists to store results
1730816744415:indices_list <- list()
1730816744415:species_groups <- data.frame(species = character(), ecological_group = numeric(), stringsAsFactors = FALSE)
1730816744415:# Calculate indices for each year
1730816744416:for (current_year in sort(unique(data$year))) {
1730816744416:# Prepare data for BBI calculation using density values
1730816744416:year_data <- data %>%
1730816744416:filter(year == current_year,
1730816744416:station %in% target_stations) %>%
1730816744417:group_by(station, species) %>%
1730816744417:summarise(density = sum(adjusted_density), .groups = 'drop') %>%
1730816744417:pivot_wider(names_from = station,
1730816744417:values_from = density,
1730816744418:values_fill = 0)
1730816744418:# Calculate BBI indices and capture ecological groups for each species
1730816744418:bbi_results <- BBI(year_data)
1730816744418:# Extract species names and ecological groups
1730816744419:species_info <- data.frame(
1730816744419:species = bbi_results$species,
1730816744419:ecological_group = bbi_results$ecological_group
1730816744419:)
1730816744420:# Combine with previous years' data
1730816744420:species_groups <- rbind(species_groups, species_info)
1730816744420:# Store results for the indices list
1730816744420:indices_list[[as.character(current_year)]] <- list(
1730816744421:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730816744421:classification = bbi_results$BBIclass,
1730816744421:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1730816744421:)
1730816744421:}
1730816744422:# Return both indices list and species ecological groups
1730816744422:return(list(indices = indices_list, species_groups = unique(species_groups)))
1730816744422:}
1730816744423:# Run the function and capture results
1730816744423:result_data <- calculate_biotic_indices(result)
1730816746255:# Display the species and ecological groups data frame
1730816746255:print(result_data$species_groups)
1730816801152:str(bbi_results )
1730816858290:sample_data <- data %>%
1730816858291:filter(year == 2013) %>%  # Use any year or subset for inspection
1730816858291:group_by(station, species) %>%
1730816858291:summarise(density = sum(adjusted_density), .groups = 'drop') %>%
1730816858291:pivot_wider(names_from = station, values_from = density, values_fill = 0)
1730816874368:sample_data <- df_result %>%
1730816874368:filter(year == 2013) %>%  # Use any year or subset for inspection
1730816874368:group_by(station, species) %>%
1730816874368:summarise(density = sum(adjusted_density), .groups = 'drop') %>%
1730816874368:pivot_wider(names_from = station, values_from = density, values_fill = 0)
1730816874383:# Run BBI on the sample data
1730816874383:bbi_results <- BBI(sample_data)
1730816874524:# Inspect the structure of bbi_results to see available fields
1730816874524:str(bbi_results)
1730817717803:# Check if df_result is loaded
1730817717804:if (!exists("df_result")) {
1730817717804:stop("df_result is not defined. Please load or create this data frame before running the script.")
1730817717804:}
1730817717805:# Ensure necessary columns are present
1730817717805:required_columns <- c("station", "year", "species", "adjusted_density")
1730817717805:missing_columns <- setdiff(required_columns, names(df_result))
1730817717806:if (length(missing_columns) > 0) {
1730817717806:stop("The following required columns are missing from df_result: ", paste(missing_columns, collapse = ", "))
1730817717806:}
1730817717806:# Summarize and reshape data
1730817717807:species_data <- df_result %>%
1730817717807:group_by(station, year, species) %>%
1730817717807:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730817717807:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1730817717824:# Separate environmental and species data
1730817717824:env_data <- data.frame(
1730817717824:Station = factor(species_data$station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1730817717824:Year = factor(species_data$year)
1730817717824:)
1730817717825:# Create species matrix (only numeric columns)
1730817717825:species_matrix <- species_data %>%
1730817717825:select(-station, -year) %>%
1730817717825:as.matrix()
1730817717828:# Perform SIMPER analysis for year-to-year comparisons
1730817717828:years <- sort(unique(as.character(env_data$Year)))
1730817717828:sequential_simper <- list()
1730817717829:for(i in 1:(length(years)-1)) {
1730817717829:year_data <- species_matrix[env_data$Year %in% c(years[i], years[i+1]), ]
1730817717829:year_groups <- env_data$Year[env_data$Year %in% c(years[i], years[i+1])]
1730817717829:sequential_simper[[paste(years[i], years[i+1], sep = "_")]] <- simper(year_data, group = year_groups, permutations = 999)
1730817717829:}
1730817718202:# Extract species and ecological groups from bbi_results
1730817718202:extract_species_groups <- function(bbi_results) {
1730817718202:if ("table" %in% names(bbi_results)) {
1730817718202:species_groups <- bbi_results$table[, c("species", "AMBI")]
1730817718202:return(species_groups)
1730817718202:} else {
1730817718202:stop("The 'table' field is not present in bbi_results.")
1730817718202:}
1730817718203:}
1730817718203:# Assuming bbi_results is loaded and contains the necessary data
1730817718203:species_groups <- extract_species_groups(bbi_results)
1730817860580:scripts/05_simper_analysis.R
1730817877509:#scripts/05_simper_analysis.R
1730817877509:# Load necessary libraries
1730817877509:library(dplyr)
1730817877510:library(tidyr)
1730817877510:library(vegan)
1730817877510:library(kableExtra)
1730817877527:library(BBI)
1730817877528:library(gplots)
1730817877528:# Check if df_result is loaded
1730817877528:if (!exists("df_result")) {
1730817877528:stop("df_result is not defined. Please load or create this data frame before running the script.")
1730817877528:}
1730817877529:# Ensure necessary columns are present
1730817877529:required_columns <- c("station", "year", "species", "adjusted_density")
1730817877529:missing_columns <- setdiff(required_columns, names(df_result))
1730817877529:if (length(missing_columns) > 0) {
1730817877529:stop("The following required columns are missing from df_result: ", paste(missing_columns, collapse = ", "))
1730817877529:}
1730817877530:# Summarize and reshape data
1730817877530:species_data <- df_result %>%
1730817877530:group_by(station, year, species) %>%
1730817877530:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730817877530:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1730817877545:# Separate environmental and species data
1730817877545:env_data <- data.frame(
1730817877545:Station = factor(species_data$station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1730817877545:Year = factor(species_data$year)
1730817877545:)
1730817877546:# Create species matrix (only numeric columns)
1730817877546:species_matrix <- species_data %>%
1730817877546:select(-station, -year) %>%
1730817877546:as.matrix()
1730817877548:# Perform SIMPER analysis for year-to-year comparisons
1730817877548:years <- sort(unique(as.character(env_data$Year)))
1730817877549:sequential_simper <- list()
1730817877549:for(i in 1:(length(years)-1)) {
1730817877549:year_data <- species_matrix[env_data$Year %in% c(years[i], years[i+1]), ]
1730817877549:year_groups <- env_data$Year[env_data$Year %in% c(years[i], years[i+1])]
1730817877549:sequential_simper[[paste(years[i], years[i+1], sep = "_")]] <- simper(year_data, group = year_groups, permutations = 999)
1730817877549:}
1730817877914:# Calculate Benthic Biotic Indices (BBI) for each year and station
1730817877914:calculate_biotic_indices <- function(data) {
1730817877914:required_cols <- c("year", "station", "species", "adjusted_density")
1730817877914:stopifnot(
1730817877914:"Missing required columns" = all(required_cols %in% colnames(data)),
1730817877914:"No data provided" = nrow(data) > 0,
1730817877914:"Negative density values found" = all(data$adjusted_density >= 0),
1730817877914:"Missing values found" = !any(is.na(data$adjusted_density))
1730817877914:)
1730817877915:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730817877915:indices_list <- list()
1730817877915:for (current_year in sort(unique(data$year))) {
1730817877915:year_data <- data %>%
1730817877916:filter(year == current_year, station %in% target_stations) %>%
1730817877916:group_by(station, species) %>%
1730817877916:summarise(density = sum(adjusted_density), .groups = 'drop') %>%
1730817877916:pivot_wider(names_from = station, values_from = density, values_fill = 0)
1730817877917:bbi_results <- BBI(year_data)
1730817877917:indices_list[[as.character(current_year)]] <- list(
1730817877917:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730817877917:classification = bbi_results$BBIclass,
1730817877917:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1730817877918:)
1730817877918:}
1730817877918:return(indices_list)
1730817877918:}
1730817877919:# Use the result dataframe that already has the correct density calculations
1730817877919:biotic_indices <- calculate_biotic_indices(df_result)
1730817879781:# Extract species and ecological groups from bbi_results
1730817879781:extract_species_groups <- function(bbi_results) {
1730817879782:if ("table" %in% names(bbi_results)) {
1730817879782:species_groups <- bbi_results$table[, c("species", "AMBI")]
1730817879782:return(species_groups)
1730817879782:} else {
1730817879782:stop("The 'table' field is not present in bbi_results.")
1730817879782:}
1730817879782:}
1730817879783:# Assuming bbi_results is loaded and contains the necessary data
1730817879783:species_groups <- extract_species_groups(bbi_results)
1730818464565:# Check if df_result is loaded
1730818464565:if (!exists("df_result")) {
1730818464565:stop("df_result is not defined. Please load or create this data frame before running the script.")
1730818464565:}
1730818464566:# Ensure necessary columns are present
1730818464566:required_columns <- c("station", "year", "species", "adjusted_density")
1730818464566:missing_columns <- setdiff(required_columns, names(df_result))
1730818464566:if (length(missing_columns) > 0) {
1730818464567:stop("The following required columns are missing from df_result: ", paste(missing_columns, collapse = ", "))
1730818464567:}
1730818464567:# Summarize and reshape data
1730818464567:species_data <- df_result %>%
1730818464567:group_by(station, year, species) %>%
1730818464567:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730818464568:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1730818464584:# Separate environmental and species data
1730818464584:env_data <- data.frame(
1730818464584:Station = factor(species_data$station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1730818464584:Year = factor(species_data$year)
1730818464584:)
1730818464585:# Create species matrix (only numeric columns)
1730818464585:species_matrix <- species_data %>%
1730818464585:select(-station, -year) %>%
1730818464586:as.matrix()
1730818464588:# Perform SIMPER analysis for year-to-year comparisons
1730818464589:years <- sort(unique(as.character(env_data$Year)))
1730818464589:sequential_simper <- list()
1730818464589:for(i in 1:(length(years)-1)) {
1730818464589:year_data <- species_matrix[env_data$Year %in% c(years[i], years[i+1]), ]
1730818464589:year_groups <- env_data$Year[env_data$Year %in% c(years[i], years[i+1])]
1730818464590:sequential_simper[[paste(years[i], years[i+1], sep = "_")]] <- simper(year_data, group = year_groups, permutations = 999)
1730818464590:}
1730818465003:# Baseline comparison (if 1999 data exists)
1730818465003:if ("1999" %in% years) {
1730818465003:baseline_data <- species_matrix[env_data$Year %in% c("1999", years), ]
1730818465004:baseline_groups <- env_data$Year[env_data$Year %in% c("1999", years)]
1730818465004:simper_baseline <- simper(baseline_data, group = baseline_groups, permutations = 999)
1730818465004:}
1730818466002:# Calculate Benthic Biotic Indices (BBI) for each year and station
1730818466003:calculate_biotic_indices <- function(data) {
1730818466003:required_cols <- c("year", "station", "species", "adjusted_density")
1730818466003:stopifnot(
1730818466003:"Missing required columns" = all(required_cols %in% colnames(data)),
1730818466003:"No data provided" = nrow(data) > 0,
1730818466003:"Negative density values found" = all(data$adjusted_density >= 0),
1730818466003:"Missing values found" = !any(is.na(data$adjusted_density))
1730818466004:)
1730818466004:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730818466004:indices_list <- list()
1730818466004:for (current_year in sort(unique(data$year))) {
1730818466004:year_data <- data %>%
1730818466004:filter(year == current_year, station %in% target_stations) %>%
1730818466005:group_by(station, species) %>%
1730818466005:summarise(density = sum(adjusted_density), .groups = 'drop') %>%
1730818466005:pivot_wider(names_from = station, values_from = density, values_fill = 0)
1730818466005:bbi_results <- BBI(year_data)
1730818466006:indices_list[[as.character(current_year)]] <- list(
1730818466006:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730818466006:classification = bbi_results$BBIclass,
1730818466006:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1730818466006:)
1730818466006:}
1730818466007:return(indices_list)
1730818466007:}
1730818466007:# Use the result dataframe that already has the correct density calculations
1730818466008:biotic_indices <- calculate_biotic_indices(df_result)
1730818468165:# Extract species and ecological groups from bbi_results
1730818468166:extract_species_groups <- function(bbi_results) {
1730818468166:if ("table" %in% names(bbi_results) && "taxa" %in% names(bbi_results)) {
1730818468166:species_groups <- data.frame(
1730818468166:species = bbi_results$taxa[, 1],  # Assuming the first column in taxa contains species names
1730818468166:AMBI = bbi_results$table$AMBI
1730818468166:)
1730818468166:return(species_groups)
1730818468166:} else {
1730818468166:stop("The 'table' or 'taxa' field is not present in bbi_results.")
1730818468166:}
1730818468166:}
1730818468167:# Assuming bbi_results is loaded and contains the necessary data
1730818468167:species_groups <- extract_species_groups(bbi_results)
1730818468167:# Function to summarize one comparison and add ecological group
1730818468167:summarize_one_comparison <- function(comparison_data, df_result, year1, year2, species_groups) {
1730818468167:species_names <- names(comparison_data$cusum)
1730818468167:cumulative_contributions <- unname(comparison_data$cusum)
1730818468167:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730818468168:abundance_changes <- sapply(species_names, function(species) {
1730818468168:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730818468168:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730818468168:change <- abundance_year2 - abundance_year1
1730818468168:return(change)
1730818468168:})
1730818468168:ecological_groups <- sapply(species_names, function(species) {
1730818468168:match_index <- match(species, species_groups$species)
1730818468168:if (!is.na(match_index)) {
1730818468169:return(species_groups$AMBI[match_index])
1730818468169:} else {
1730818468169:return(NA)
1730818468169:}
1730818468169:})
1730818468169:df <- data.frame(
1730818468170:Species = species_names,
1730818468170:Cumulative_Percent = cumulative_contributions * 100,
1730818468170:Individual_Percent = individual_contributions * 100,
1730818468170:Abundance_Change = abundance_changes,
1730818468170:Ecological_Group = ecological_groups
1730818468171:)
1730818468171:return(df)
1730818468171:}
1730818468172:# Process sequential comparisons
1730818468172:print("Sequential Year Comparisons:")
1730818468172:for(i in seq_along(sequential_simper)) {
1730818468172:comparison_name <- names(sequential_simper)[i]
1730818468173:years <- unlist(strsplit(comparison_name, "_"))
1730818468173:year1 <- as.numeric(years[1])
1730818468173:year2 <- as.numeric(years[2])
1730818468173:cat(sprintf("\nComparison: %s\n", comparison_name))
1730818468173:summary_data <- summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups) %>%
1730818468174:filter(Cumulative_Percent <= 70)
1730818468174:print(kableExtra::kbl(summary_data,
1730818468174:caption = sprintf("Species contributions for %s", comparison_name),
1730818468174:digits = 2))
1730818468175:}
1730818468467:# Process baseline comparisons (1999)
1730818468467:if(exists("simper_baseline")) {
1730818468467:print("\nComparisons with 1999 Baseline:")
1730818468467:baseline_comps <- names(simper_baseline)[grep("1999_", names(simper_baseline))]
1730818468468:for(comp_name in baseline_comps) {
1730818468468:years <- unlist(strsplit(comp_name, "_"))
1730818468468:year1 <- as.numeric(years[1])
1730818468468:year2 <- as.numeric(years[2])
1730818468469:cat(sprintf("\n%s:\n", comp_name))
1730818468469:summary_data <- summarize_one_comparison(simper_baseline[[comp_name]], df_result, year1, year2, species_groups) %>%
1730818468469:filter(Cumulative_Percent <= 70)
1730818468470:print(kableExtra::kbl(summary_data,
1730818468470:caption = sprintf("Species contributions for %s", comp_name),
1730818468470:digits = 2))
1730818468470:}
1730818468470:}
1730818910738:# Check if df_result is loaded
1730818910738:if (!exists("df_result")) {
1730818910739:stop("df_result is not defined. Please load or create this data frame before running the script.")
1730818910739:}
1730818910739:# Ensure necessary columns are present
1730818910739:required_columns <- c("station", "year", "species", "adjusted_density")
1730818910739:missing_columns <- setdiff(required_columns, names(df_result))
1730818910740:if (length(missing_columns) > 0) {
1730818910740:stop("The following required columns are missing from df_result: ", paste(missing_columns, collapse = ", "))
1730818910740:}
1730818910740:# Summarize and reshape data
1730818910740:species_data <- df_result %>%
1730818910741:group_by(station, year, species) %>%
1730818910741:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730818910741:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1730818910780:# Separate environmental and species data
1730818910780:env_data <- data.frame(
1730818910780:Station = factor(species_data$station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1730818910780:Year = factor(species_data$year)
1730818910780:)
1730818910781:# Create species matrix (only numeric columns)
1730818910781:species_matrix <- species_data %>%
1730818910781:select(-station, -year) %>%
1730818910781:as.matrix()
1730818910784:# Perform SIMPER analysis for year-to-year comparisons
1730818910784:years <- sort(unique(as.character(env_data$Year)))
1730818910784:sequential_simper <- list()
1730818910784:for(i in 1:(length(years)-1)) {
1730818910784:year_data <- species_matrix[env_data$Year %in% c(years[i], years[i+1]), ]
1730818910784:year_groups <- env_data$Year[env_data$Year %in% c(years[i], years[i+1])]
1730818910785:sequential_simper[[paste(years[i], years[i+1], sep = "_")]] <- simper(year_data, group = year_groups, permutations = 999)
1730818910785:}
1730818911144:# Baseline comparison (if 1999 data exists)
1730818911144:if ("1999" %in% years) {
1730818911144:baseline_data <- species_matrix[env_data$Year %in% c("1999", years), ]
1730818911144:baseline_groups <- env_data$Year[env_data$Year %in% c("1999", years)]
1730818911144:simper_baseline <- simper(baseline_data, group = baseline_groups, permutations = 999)
1730818911144:}
1730818912308:# Calculate Benthic Biotic Indices (BBI) for each year and station
1730818912308:calculate_biotic_indices <- function(data) {
1730818912308:required_cols <- c("year", "station", "species", "adjusted_density")
1730818912309:stopifnot(
1730818912309:"Missing required columns" = all(required_cols %in% colnames(data)),
1730818912309:"No data provided" = nrow(data) > 0,
1730818912309:"Negative density values found" = all(data$adjusted_density >= 0),
1730818912309:"Missing values found" = !any(is.na(data$adjusted_density))
1730818912309:)
1730818912309:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730818912310:indices_list <- list()
1730818912310:species_ambi_mapping <- data.frame(species = character(), AMBI = numeric())
1730818912310:for (current_year in sort(unique(data$year))) {
1730818912310:year_data <- data %>%
1730818912310:filter(year == current_year, station %in% target_stations) %>%
1730818912311:group_by(station, species) %>%
1730818912311:summarise(density = sum(adjusted_density), .groups = 'drop') %>%
1730818912311:pivot_wider(names_from = station, values_from = density, values_fill = 0)
1730818912311:bbi_results <- BBI(year_data)
1730818912312:# Extract and accumulate species-AMBI mappings
1730818912312:current_species_groups <- data.frame(
1730818912312:species = bbi_results$taxa[, 1],
1730818912312:AMBI = bbi_results$table$AMBI
1730818912313:)
1730818912313:# Combine with existing mappings, keeping the first non-NA AMBI value for each species
1730818912313:species_ambi_mapping <- bind_rows(species_ambi_mapping, current_species_groups) %>%
1730818912313:group_by(species) %>%
1730818912313:summarise(AMBI = first(na.omit(AMBI))) %>%
1730818912314:ungroup()
1730818912314:indices_list[[as.character(current_year)]] <- list(
1730818912314:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730818912314:classification = bbi_results$BBIclass,
1730818912315:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1730818912315:)
1730818912315:}
1730818912315:# Add the species-AMBI mapping to the return list
1730818912316:indices_list$species_groups <- species_ambi_mapping
1730818912316:return(indices_list)
1730818912316:}
1730818912317:# Use the result dataframe that already has the correct density calculations
1730818912317:biotic_indices <- calculate_biotic_indices(df_result)
1730818914144:# Extract species groups from the accumulated mappings
1730818914144:species_groups <- biotic_indices$species_groups
1730818914144:# Function to summarize one comparison and add ecological group
1730818914144:summarize_one_comparison <- function(comparison_data, df_result, year1, year2, species_groups) {
1730818914144:species_names <- names(comparison_data$cusum)
1730818914144:cumulative_contributions <- unname(comparison_data$cusum)
1730818914144:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730818914144:abundance_changes <- sapply(species_names, function(species) {
1730818914144:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730818914145:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730818914145:change <- abundance_year2 - abundance_year1
1730818914145:return(change)
1730818914145:})
1730818914145:ecological_groups <- sapply(species_names, function(species) {
1730818914145:match_index <- match(species, species_groups$species)
1730818914145:if (!is.na(match_index)) {
1730818914145:return(species_groups$AMBI[match_index])
1730818914145:} else {
1730818914146:return(NA)
1730818914146:}
1730818914146:})
1730818914146:df <- data.frame(
1730818914146:Species = species_names,
1730818914146:Cumulative_Percent = cumulative_contributions * 100,
1730818914146:Individual_Percent = individual_contributions * 100,
1730818914147:Abundance_Change = abundance_changes,
1730818914147:Ecological_Group = ecological_groups
1730818914147:)
1730818914147:return(df)
1730818914147:}
1730818914148:# Process sequential comparisons
1730818914148:print("Sequential Year Comparisons:")
1730818914148:for(i in seq_along(sequential_simper)) {
1730818914148:comparison_name <- names(sequential_simper)[i]
1730818914148:years <- unlist(strsplit(comparison_name, "_"))
1730818914148:year1 <- as.numeric(years[1])
1730818914148:year2 <- as.numeric(years[2])
1730818914148:cat(sprintf("\nComparison: %s\n", comparison_name))
1730818914148:summary_data <- summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups) %>%
1730818914149:filter(Cumulative_Percent <= 70)
1730818914149:rownames(summary_data) <- NULL
1730818914149:print(kableExtra::kbl(summary_data,
1730818914149:caption = sprintf("Species contributions for %s", comparison_name),
1730818914149:digits = 2))
1730818914149:}
1730818914371:# Process baseline comparisons (1999)
1730818914371:if(exists("simper_baseline")) {
1730818914371:print("\nComparisons with 1999 Baseline:")
1730818914371:baseline_comps <- names(simper_baseline)[grep("1999_", names(simper_baseline))]
1730818914372:for(comp_name in baseline_comps) {
1730818914372:years <- unlist(strsplit(comp_name, "_"))
1730818914372:year1 <- as.numeric(years[1])
1730818914372:year2 <- as.numeric(years[2])
1730818914373:cat(sprintf("\n%s:\n", comp_name))
1730818914373:summary_data <- summarize_one_comparison(simper_baseline[[comp_name]], df_result, year1, year2, species_groups) %>%
1730818914373:filter(Cumulative_Percent <= 70)
1730818914373:rownames(summary_data) <- NULL
1730818914373:print(kableExtra::kbl(summary_data,
1730818914373:caption = sprintf("Species contributions for %s", comp_name),
1730818914373:digits = 2))
1730818914374:}
1730818914374:}
1730819259070:# Check if df_result is loaded
1730819259070:if (!exists("df_result")) {
1730819259070:stop("df_result is not defined. Please load or create this data frame before running the script.")
1730819259071:}
1730819259071:# Ensure necessary columns are present
1730819259071:required_columns <- c("station", "year", "species", "adjusted_density")
1730819259071:missing_columns <- setdiff(required_columns, names(df_result))
1730819259072:if (length(missing_columns) > 0) {
1730819259072:stop("The following required columns are missing from df_result: ", paste(missing_columns, collapse = ", "))
1730819259072:}
1730819259073:# Summarize and reshape data
1730819259073:species_data <- df_result %>%
1730819259073:group_by(station, year, species) %>%
1730819259073:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730819259073:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1730819259094:# Separate environmental and species data
1730819259094:env_data <- data.frame(
1730819259094:Station = factor(species_data$station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1730819259094:Year = factor(species_data$year)
1730819259095:)
1730819259095:# Create species matrix (only numeric columns)
1730819259095:species_matrix <- species_data %>%
1730819259096:select(-station, -year) %>%
1730819259096:as.matrix()
1730819259098:# Perform SIMPER analysis for year-to-year comparisons
1730819259098:years <- sort(unique(as.character(env_data$Year)))
1730819259099:sequential_simper <- list()
1730819259099:for(i in 1:(length(years)-1)) {
1730819259099:# Select data for consecutive years
1730819259099:year_pair <- years[i:(i+1)]
1730819259099:year_data <- species_matrix[env_data$Year %in% year_pair, ]
1730819259099:year_groups <- env_data$Year[env_data$Year %in% year_pair]
1730819259099:# Perform SIMPER analysis for this pair of years
1730819259100:comparison_name <- paste(year_pair[1], year_pair[2], sep="_")
1730819259100:sequential_simper[[comparison_name]] <- simper(year_data, group = year_groups, permutations = 999)
1730819259100:}
1730819259488:# Baseline comparison (if 1999 data exists)
1730819259488:if ("1999" %in% years) {
1730819259488:baseline_data <- species_matrix[env_data$Year %in% c("1999", years), ]
1730819259488:baseline_groups <- env_data$Year[env_data$Year %in% c("1999", years)]
1730819259488:simper_baseline <- simper(baseline_data, group = baseline_groups, permutations = 999)
1730819259489:}
1730819260639:# Calculate Benthic Biotic Indices (BBI) for each year and station
1730819260639:calculate_biotic_indices <- function(data) {
1730819260639:required_cols <- c("year", "station", "species", "adjusted_density")
1730819260640:stopifnot(
1730819260640:"Missing required columns" = all(required_cols %in% colnames(data)),
1730819260640:"No data provided" = nrow(data) > 0,
1730819260640:"Negative density values found" = all(data$adjusted_density >= 0),
1730819260640:"Missing values found" = !any(is.na(data$adjusted_density))
1730819260640:)
1730819260640:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730819260641:indices_list <- list()
1730819260641:species_ambi_mapping <- data.frame(species = character(), AMBI = numeric())
1730819260641:for (current_year in sort(unique(data$year))) {
1730819260641:year_data <- data %>%
1730819260641:filter(year == current_year, station %in% target_stations) %>%
1730819260642:group_by(station, species) %>%
1730819260642:summarise(density = sum(adjusted_density), .groups = 'drop') %>%
1730819260642:pivot_wider(names_from = station, values_from = density, values_fill = 0)
1730819260642:bbi_results <- BBI(year_data)
1730819260643:# Extract and accumulate species-AMBI mappings
1730819260643:current_species_groups <- data.frame(
1730819260643:species = bbi_results$taxa[, 1],
1730819260643:AMBI = bbi_results$table$AMBI
1730819260643:)
1730819260644:# Combine with existing mappings, keeping the first non-NA AMBI value for each species
1730819260644:species_ambi_mapping <- bind_rows(species_ambi_mapping, current_species_groups) %>%
1730819260644:group_by(species) %>%
1730819260644:summarise(AMBI = first(na.omit(AMBI))) %>%
1730819260645:ungroup()
1730819260645:indices_list[[as.character(current_year)]] <- list(
1730819260645:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730819260645:classification = bbi_results$BBIclass,
1730819260645:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1730819260646:)
1730819260646:}
1730819260646:# Add the species-AMBI mapping to the return list
1730819260646:indices_list$species_groups <- species_ambi_mapping
1730819260647:return(indices_list)
1730819260647:}
1730819260648:# Use the result dataframe that already has the correct density calculations
1730819260648:biotic_indices <- calculate_biotic_indices(df_result)
1730819262505:# Extract species groups from the accumulated mappings
1730819262505:species_groups <- biotic_indices$species_groups
1730819262505:# Function to summarize one comparison and add ecological group
1730819262505:summarize_one_comparison <- function(comparison_data, df_result, year1, year2, species_groups) {
1730819262506:species_names <- names(comparison_data$cusum)
1730819262506:cumulative_contributions <- unname(comparison_data$cusum)
1730819262506:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730819262506:abundance_changes <- sapply(species_names, function(species) {
1730819262506:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730819262506:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730819262506:change <- abundance_year2 - abundance_year1
1730819262506:return(change)
1730819262506:})
1730819262507:ecological_groups <- sapply(species_names, function(species) {
1730819262507:match_index <- match(species, species_groups$species)
1730819262507:if (!is.na(match_index)) {
1730819262507:return(species_groups$AMBI[match_index])
1730819262507:} else {
1730819262507:return(NA)
1730819262507:}
1730819262507:})
1730819262507:df <- data.frame(
1730819262508:Species = species_names,
1730819262508:Cumulative_Percent = cumulative_contributions * 100,
1730819262508:Individual_Percent = individual_contributions * 100,
1730819262508:Abundance_Change = abundance_changes,
1730819262508:Ecological_Group = ecological_groups
1730819262508:)
1730819262508:return(df)
1730819262509:}
1730819262509:# Process sequential comparisons
1730819262509:print("Sequential Year Comparisons:")
1730819262509:for(i in seq_along(sequential_simper)) {
1730819262509:comparison_name <- names(sequential_simper)[i]
1730819262509:years <- unlist(strsplit(comparison_name, "_"))
1730819262509:year1 <- years[1]
1730819262509:year2 <- years[2]
1730819262510:cat(sprintf("\nComparison: %s\n", comparison_name))
1730819262510:# Process this comparison
1730819262510:summary_data <- summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups) %>%
1730819262510:filter(Cumulative_Percent <= 70)
1730819262510:rownames(summary_data) <- NULL
1730819262510:if(nrow(summary_data) > 0) {
1730819262510:print(kableExtra::kbl(summary_data,
1730819262510:caption = sprintf("Species contributions for %s", comparison_name),
1730819262510:digits = 2))
1730819262510:} else {
1730819262511:cat("No species met the contribution threshold for this comparison.\n")
1730819262511:}
1730819262511:}
1730819262550:# Process baseline comparisons (1999)
1730819262550:if(exists("simper_baseline")) {
1730819262551:print("\nComparisons with 1999 Baseline:")
1730819262551:baseline_comps <- names(simper_baseline)[grep("1999_", names(simper_baseline))]
1730819262551:for(comp_name in baseline_comps) {
1730819262551:years <- unlist(strsplit(comp_name, "_"))
1730819262551:year1 <- as.numeric(years[1])
1730819262551:year2 <- as.numeric(years[2])
1730819262551:cat(sprintf("\n%s:\n", comp_name))
1730819262551:summary_data <- summarize_one_comparison(simper_baseline[[comp_name]], df_result, year1, year2, species_groups) %>%
1730819262551:filter(Cumulative_Percent <= 70)
1730819262552:rownames(summary_data) <- NULL
1730819262552:print(kableExtra::kbl(summary_data,
1730819262552:caption = sprintf("Species contributions for %s", comp_name),
1730819262552:digits = 2))
1730819262552:}
1730819262552:}
1730819285740:# Check if df_result is loaded
1730819285741:if (!exists("df_result")) {
1730819285741:stop("df_result is not defined. Please load or create this data frame before running the script.")
1730819285741:}
1730819285741:# Ensure necessary columns are present
1730819285741:required_columns <- c("station", "year", "species", "adjusted_density")
1730819285742:missing_columns <- setdiff(required_columns, names(df_result))
1730819285742:if (length(missing_columns) > 0) {
1730819285742:stop("The following required columns are missing from df_result: ", paste(missing_columns, collapse = ", "))
1730819285742:}
1730819285742:# Summarize and reshape data
1730819285742:species_data <- df_result %>%
1730819285743:group_by(station, year, species) %>%
1730819285743:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730819285743:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1730819285754:# Separate environmental and species data
1730819285754:env_data <- data.frame(
1730819285754:Station = factor(species_data$station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1730819285755:Year = factor(species_data$year)
1730819285755:)
1730819285755:# Create species matrix (only numeric columns)
1730819285755:species_matrix <- species_data %>%
1730819285756:select(-station, -year) %>%
1730819285756:as.matrix()
1730819285758:# Perform SIMPER analysis for year-to-year comparisons
1730819285758:years <- sort(unique(as.character(env_data$Year)))
1730819285758:sequential_simper <- list()
1730819285758:for(i in 1:(length(years)-1)) {
1730819285758:# Select data for consecutive years
1730819285758:year_pair <- years[i:(i+1)]
1730819285759:year_data <- species_matrix[env_data$Year %in% year_pair, ]
1730819285759:year_groups <- env_data$Year[env_data$Year %in% year_pair]
1730819285759:# Perform SIMPER analysis for this pair of years
1730819285759:comparison_name <- paste(year_pair[1], year_pair[2], sep="_")
1730819285759:sequential_simper[[comparison_name]] <- simper(year_data, group = year_groups, permutations = 999)
1730819285760:}
1730819286084:# Baseline comparison (if 1999 data exists)
1730819286084:if ("1999" %in% years) {
1730819286084:baseline_data <- species_matrix[env_data$Year %in% c("1999", years), ]
1730819286084:baseline_groups <- env_data$Year[env_data$Year %in% c("1999", years)]
1730819286084:simper_baseline <- simper(baseline_data, group = baseline_groups, permutations = 999)
1730819286084:}
1730819287122:# Calculate Benthic Biotic Indices (BBI) for each year and station
1730819287123:calculate_biotic_indices <- function(data) {
1730819287123:required_cols <- c("year", "station", "species", "adjusted_density")
1730819287123:stopifnot(
1730819287123:"Missing required columns" = all(required_cols %in% colnames(data)),
1730819287123:"No data provided" = nrow(data) > 0,
1730819287123:"Negative density values found" = all(data$adjusted_density >= 0),
1730819287123:"Missing values found" = !any(is.na(data$adjusted_density))
1730819287123:)
1730819287124:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730819287124:indices_list <- list()
1730819287124:species_ambi_mapping <- data.frame(species = character(), AMBI = numeric())
1730819287124:for (current_year in sort(unique(data$year))) {
1730819287125:year_data <- data %>%
1730819287125:filter(year == current_year, station %in% target_stations) %>%
1730819287125:group_by(station, species) %>%
1730819287125:summarise(density = sum(adjusted_density), .groups = 'drop') %>%
1730819287125:pivot_wider(names_from = station, values_from = density, values_fill = 0)
1730819287126:bbi_results <- BBI(year_data)
1730819287126:# Extract and accumulate species-AMBI mappings
1730819287126:current_species_groups <- data.frame(
1730819287126:species = bbi_results$taxa[, 1],
1730819287126:AMBI = bbi_results$table$AMBI
1730819287127:)
1730819287127:# Combine with existing mappings, keeping the first non-NA AMBI value for each species
1730819287127:species_ambi_mapping <- bind_rows(species_ambi_mapping, current_species_groups) %>%
1730819287127:group_by(species) %>%
1730819287128:summarise(AMBI = first(na.omit(AMBI))) %>%
1730819287128:ungroup()
1730819287129:indices_list[[as.character(current_year)]] <- list(
1730819287129:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730819287129:classification = bbi_results$BBIclass,
1730819287129:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1730819287130:)
1730819287130:}
1730819287130:# Add the species-AMBI mapping to the return list
1730819287130:indices_list$species_groups <- species_ambi_mapping
1730819287131:return(indices_list)
1730819287131:}
1730819287132:# Use the result dataframe that already has the correct density calculations
1730819287132:biotic_indices <- calculate_biotic_indices(df_result)
1730819288947:# Extract species groups from the accumulated mappings
1730819288947:species_groups <- biotic_indices$species_groups
1730819288947:# Function to summarize one comparison and add ecological group
1730819288947:summarize_one_comparison <- function(comparison_data, df_result, year1, year2, species_groups) {
1730819288947:species_names <- names(comparison_data$cusum)
1730819288947:cumulative_contributions <- unname(comparison_data$cusum)
1730819288947:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730819288947:abundance_changes <- sapply(species_names, function(species) {
1730819288947:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730819288947:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730819288947:change <- abundance_year2 - abundance_year1
1730819288948:return(change)
1730819288948:})
1730819288948:ecological_groups <- sapply(species_names, function(species) {
1730819288948:match_index <- match(species, species_groups$species)
1730819288948:if (!is.na(match_index)) {
1730819288948:return(species_groups$AMBI[match_index])
1730819288948:} else {
1730819288948:return(NA)
1730819288948:}
1730819288949:})
1730819288949:df <- data.frame(
1730819288949:Species = species_names,
1730819288949:Cumulative_Percent = cumulative_contributions * 100,
1730819288949:Individual_Percent = individual_contributions * 100,
1730819288949:Abundance_Change = abundance_changes,
1730819288949:Ecological_Group = ecological_groups
1730819288949:)
1730819288950:return(df)
1730819288950:}
1730819288950:# Process sequential comparisons
1730819288950:print("Sequential Year Comparisons:")
1730819288950:for(i in seq_along(sequential_simper)) {
1730819288950:comparison_name <- names(sequential_simper)[i]
1730819288950:years <- unlist(strsplit(comparison_name, "_"))
1730819288950:year1 <- years[1]
1730819288950:year2 <- years[2]
1730819288951:cat(sprintf("\nComparison: %s\n", comparison_name))
1730819288951:# Process this comparison
1730819288951:summary_data <- summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups) %>%
1730819288951:filter(Cumulative_Percent <= 70)
1730819288951:rownames(summary_data) <- NULL
1730819288951:if(nrow(summary_data) > 0) {
1730819288951:print(kableExtra::kbl(summary_data,
1730819288951:caption = sprintf("Species contributions for %s", comparison_name),
1730819288951:digits = 2))
1730819288951:} else {
1730819288952:cat("No species met the contribution threshold for this comparison.\n")
1730819288952:}
1730819288952:}
1730819288992:# Process baseline comparisons (1999)
1730819288993:if(exists("simper_baseline")) {
1730819288993:print("\nComparisons with 1999 Baseline:")
1730819288993:baseline_comps <- names(simper_baseline)[grep("1999_", names(simper_baseline))]
1730819288993:for(comp_name in baseline_comps) {
1730819288993:years <- unlist(strsplit(comp_name, "_"))
1730819288993:year1 <- as.numeric(years[1])
1730819288993:year2 <- as.numeric(years[2])
1730819288993:cat(sprintf("\n%s:\n", comp_name))
1730819288993:summary_data <- summarize_one_comparison(simper_baseline[[comp_name]], df_result, year1, year2, species_groups) %>%
1730819288993:filter(Cumulative_Percent <= 70)
1730819288993:rownames(summary_data) <- NULL
1730819288994:print(kableExtra::kbl(summary_data,
1730819288994:caption = sprintf("Species contributions for %s", comp_name),
1730819288994:digits = 2))
1730819288994:}
1730819288994:}
1730821410920:# Calculate Benthic Biotic Indices and get species-AMBI mappings
1730821410921:calculate_biotic_indices <- function(data) {
1730821410921:required_cols <- c("year", "station", "species", "adjusted_density")
1730821410921:stopifnot(
1730821410921:"Missing required columns" = all(required_cols %in% colnames(data)),
1730821410922:"No data provided" = nrow(data) > 0,
1730821410922:"Negative density values found" = all(data$adjusted_density >= 0),
1730821410922:"Missing values found" = !any(is.na(data$adjusted_density))
1730821410922:)
1730821410923:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730821410923:indices_list <- list()
1730821410923:species_ambi_mapping <- data.frame(species = character(), AMBI = numeric())
1730821410923:for (current_year in sort(unique(data$year))) {
1730821410924:year_data <- data %>%
1730821410924:filter(year == current_year, station %in% target_stations) %>%
1730821410924:group_by(station, species) %>%
1730821410924:summarise(density = sum(adjusted_density), .groups = 'drop') %>%
1730821410924:pivot_wider(names_from = station, values_from = density, values_fill = 0)
1730821410925:bbi_results <- BBI(year_data)
1730821410925:# Extract and accumulate species-AMBI mappings
1730821410925:current_species_groups <- data.frame(
1730821410925:species = bbi_results$taxa[, 1],
1730821410926:AMBI = bbi_results$table$AMBI
1730821410926:)
1730821410926:# Combine with existing mappings, keeping the first non-NA AMBI value for each species
1730821410926:species_ambi_mapping <- bind_rows(species_ambi_mapping, current_species_groups) %>%
1730821410927:group_by(species) %>%
1730821410927:summarise(AMBI = first(na.omit(AMBI))) %>%
1730821410927:ungroup()
1730821410928:indices_list[[as.character(current_year)]] <- list(
1730821410928:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730821410928:classification = bbi_results$BBIclass,
1730821410929:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1730821410929:)
1730821410929:}
1730821410930:indices_list$species_groups <- species_ambi_mapping
1730821410930:return(indices_list)
1730821410930:}
1730821410931:# Get species-AMBI mappings
1730821410931:biotic_indices <- calculate_biotic_indices(df_result)
1730821412881:species_groups <- biotic_indices$species_groups
1730821412881:# Function to summarize one comparison
1730821412881:summarize_one_comparison <- function(comparison_data, df_result, year1, year2, species_groups) {
1730821412881:species_names <- names(comparison_data$cusum)
1730821412881:cumulative_contributions <- unname(comparison_data$cusum)
1730821412881:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730821412882:abundance_changes <- sapply(species_names, function(species) {
1730821412882:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730821412882:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730821412882:change <- abundance_year2 - abundance_year1
1730821412882:return(change)
1730821412883:})
1730821412883:ecological_groups <- sapply(species_names, function(species) {
1730821412883:match_index <- match(species, species_groups$species)
1730821412883:if (!is.na(match_index)) {
1730821412883:return(species_groups$AMBI[match_index])
1730821412884:} else {
1730821412884:return(NA)
1730821412884:}
1730821412884:})
1730821412885:df <- data.frame(
1730821412885:Species = species_names,
1730821412885:Cumulative_Percent = cumulative_contributions * 100,
1730821412885:Individual_Percent = individual_contributions * 100,
1730821412885:Abundance_Change = abundance_changes,
1730821412885:Ecological_Group = ecological_groups
1730821412886:)
1730821412886:return(df)
1730821412886:}
1730821412887:# Process sequential comparisons
1730821412887:print("Sequential Year Comparisons:")
1730821412887:for(i in seq_along(sequential_simper)) {
1730821412887:comparison_name <- names(sequential_simper)[i]
1730821412888:years <- unlist(strsplit(comparison_name, "_"))
1730821412888:year1 <- years[1]
1730821412888:year2 <- years[2]
1730821412888:cat(sprintf("\nComparison: %s\n", comparison_name))
1730821412888:summary_data <- summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups) %>%
1730821412889:filter(Cumulative_Percent <= 70)
1730821412889:rownames(summary_data) <- NULL
1730821412889:print(kableExtra::kbl(summary_data,
1730821412889:caption = sprintf("Species contributions for %s", comparison_name),
1730821412889:digits = 2))
1730821412889:}
1730821413162:# Process baseline comparisons (1999)
1730821413162:if(exists("simper_baseline")) {
1730821413162:print("\nComparisons with 1999 Baseline:")
1730821413162:baseline_comps <- names(simper_baseline)[grep("1999_", names(simper_baseline))]
1730821413162:for(comp_name in baseline_comps) {
1730821413162:years <- unlist(strsplit(comp_name, "_"))
1730821413162:year1 <- years[1]
1730821413162:year2 <- years[2]
1730821413162:cat(sprintf("\n%s:\n", comp_name))
1730821413163:summary_data <- summarize_one_comparison(simper_baseline[[comp_name]], df_result, year1, year2, species_groups) %>%
1730821413163:filter(Cumulative_Percent <= 70)
1730821413163:rownames(summary_data) <- NULL
1730821413163:print(kableExtra::kbl(summary_data,
1730821413163:caption = sprintf("Species contributions for %s", comp_name),
1730821413163:digits = 2))
1730821413164:}
1730821413164:}
1730821753884:# Sample 20 observations from each year
1730821753884:set.seed(123)  # For reproducibility
1730821753885:subsample_data <- df_result %>%
1730821753885:group_by(year) %>%
1730821753885:sample_n(20, replace = TRUE) %>%  # Sample 20 observations per year
1730821753885:ungroup()
1730821753909:# Reshape data for SIMPER analysis
1730821753909:species_data <- subsample_data %>%
1730821753909:group_by(station, year, species) %>%
1730821753910:summarise(adjusted_density = sum(adjusted_density), .groups = "drop") %>%
1730821753910:pivot_wider(names_from = species, values_from = adjusted_density, values_fill = 0)
1730821753922:# Separate environmental and species data
1730821753923:env_data <- data.frame(
1730821753923:Station = factor(species_data$station),
1730821753923:Year = factor(species_data$year)
1730821753927:)
1730821753928:# Create species matrix (only numeric columns)
1730821753929:species_matrix <- species_data %>%
1730821753929:select(-station, -year) %>%
1730821753929:as.matrix()
1730821753932:# Perform SIMPER analysis for the subsample
1730821753932:years <- sort(unique(as.character(env_data$Year)))
1730821753932:sequential_simper <- list()
1730821753932:for(i in 1:(length(years)-1)) {
1730821753932:year_pair <- years[i:(i+1)]
1730821753933:year_data <- species_matrix[env_data$Year %in% year_pair, ]
1730821753933:year_groups <- env_data$Year[env_data$Year %in% year_pair]
1730821753933:# Run SIMPER analysis
1730821753933:comparison_name <- paste(year_pair[1], year_pair[2], sep="_")
1730821753933:sequential_simper[[comparison_name]] <- simper(year_data, group = year_groups, permutations = 999)
1730821753934:}
1730821754208:# Function to summarize one comparison
1730821754208:summarize_one_comparison <- function(comparison_data, df_result, year1, year2) {
1730821754208:species_names <- names(comparison_data$cusum)
1730821754209:cumulative_contributions <- unname(comparison_data$cusum)
1730821754209:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730821754209:abundance_changes <- sapply(species_names, function(species) {
1730821754209:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730821754209:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730821754209:change <- abundance_year2 - abundance_year1
1730821754210:return(change)
1730821754210:})
1730821754210:df <- data.frame(
1730821754210:Species = species_names,
1730821754210:Cumulative_Percent = cumulative_contributions * 100,
1730821754211:Individual_Percent = individual_contributions * 100,
1730821754211:Abundance_Change = abundance_changes
1730821754211:)
1730821754211:return(df)
1730821754211:}
1730821754212:# Process sequential comparisons
1730821754212:print("Sequential Year Comparisons:")
1730821754212:for(i in seq_along(sequential_simper)) {
1730821754212:comparison_name <- names(sequential_simper)[i]
1730821754212:years <- unlist(strsplit(comparison_name, "_"))
1730821754212:year1 <- years[1]
1730821754213:year2 <- years[2]
1730821754213:cat(sprintf("\nComparison: %s\n", comparison_name))
1730821754213:# Process this comparison
1730821754213:summary_data <- summarize_one_comparison(sequential_simper[[i]], subsample_data, year1, year2) %>%
1730821754213:filter(Cumulative_Percent <= 70)
1730821754214:rownames(summary_data) <- NULL
1730821754214:if(nrow(summary_data) > 0) {
1730821754214:print(kableExtra::kbl(summary_data,
1730821754214:caption = sprintf("Species contributions for %s", comparison_name),
1730821754214:digits = 2))
1730821754214:} else {
1730821754215:cat("No species met the contribution threshold for this comparison.\n")
1730821754215:}
1730821754215:}
1730821775114:subsample_data
1730821783937:species_data
1730821792521:env_data
1730821798905:species_matrix
1730821808985:years
1730821838402:subsample_data
1730821859018:factor(species_data$year)
1730821867702:sort(unique(as.character(env_data$Year)))
1730821869883:# Perform SIMPER analysis for the subsample
1730821869883:years <- sort(unique(as.character(env_data$Year)))
1730821870586:sequential_simper <- list()
1730821872842:for(i in 1:(length(years)-1)) {
1730821872842:year_pair <- years[i:(i+1)]
1730821872842:year_data <- species_matrix[env_data$Year %in% year_pair, ]
1730821872842:year_groups <- env_data$Year[env_data$Year %in% year_pair]
1730821872843:# Run SIMPER analysis
1730821872843:comparison_name <- paste(year_pair[1], year_pair[2], sep="_")
1730821872843:sequential_simper[[comparison_name]] <- simper(year_data, group = year_groups, permutations = 999)
1730821872843:}
1730821883009:comparison_name
1730821932178:# Summarize and reshape data
1730821932179:species_data <- df_result %>%
1730821932179:group_by(station, year, species) %>%
1730821932179:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730821932179:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1730821935441:# Separate environmental and species data
1730821935442:env_data <- data.frame(
1730821935442:Station = factor(species_data$station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1730821935442:Year = factor(species_data$year)
1730821935442:)
1730821941187:# Create species matrix (only numeric columns)
1730821941187:species_matrix <- species_data %>%
1730821941187:select(-station, -year) %>%
1730821941187:as.matrix()
1730821942978:# Perform SIMPER analysis for year-to-year comparisons
1730821942978:years <- sort(unique(as.character(env_data$Year)))
1730821946232:years
1730821949235:sequential_simper <- list()
1730821962562:for(i in 1:(length(years)-1)) {
1730821962562:# Select data for consecutive years
1730821962562:year_pair <- years[i:(i+1)]
1730821962562:year_data <- species_matrix[env_data$Year %in% year_pair, ]
1730821962563:year_groups <- env_data$Year[env_data$Year %in% year_pair]
1730821962563:# Perform SIMPER analysis for this pair of years
1730821962563:comparison_name <- paste(year_pair[1], year_pair[2], sep="_")
1730821962563:sequential_simper[[comparison_name]] <- simper(year_data, group = year_groups, permutations = 999)
1730821962563:}
1730821966689:year_pair
1730821971353:year_data
1730821976282:year_groups
1730821999338:i
1730822006058:length(years)-1
1730822018266:comparison_name
1730822022088:sequential_simper
1730822053874:if ("1999" %in% years) {
1730822053874:baseline_data <- species_matrix[env_data$Year %in% c("1999", years), ]
1730822053874:baseline_groups <- env_data$Year[env_data$Year %in% c("1999", years)]
1730822053874:simper_baseline <- simper(baseline_data, group = baseline_groups, permutations = 999)
1730822053874:}
1730822057674:simper_baseline
1730822142123:str sequential_simper
1730822149795:str(sequential_simper)
1730881451843:sequential_simper
1730881693180:bbi_results$taxa[, 1]
1730881704964:bbi_results$table$AMBI
1730882077257:year_data
1730882090466:?BBI()
1730882124202:species_ambi_mapping
1730882129924:species_ambi_mapping <- bind_rows(species_ambi_mapping, current_species_groups) %>%
1730882129924:group_by(species) %>%
1730882129924:summarise(AMBI = first(na.omit(AMBI))) %>%
1730882129924:ungroup()
1730882150619:indices_list
1730882173298:biotic_indices
1730882184401:species_groups
1730882331418:summarize_one_comparison
1730882982788:# Check if df_result is loaded
1730882982788:if (!exists("df_result")) {
1730882982788:stop("df_result is not defined. Please load or create this data frame before running the script.")
1730882982788:}
1730882983771:# Ensure necessary columns are present
1730882983772:required_columns <- c("station", "year", "species", "adjusted_density")
1730882987900:missing_columns <- setdiff(required_columns, names(df_result))
1730882988482:if (length(missing_columns) > 0) {
1730882988483:stop("The following required columns are missing from df_result: ", paste(missing_columns, collapse = ", "))
1730882988483:}
1730882992148:# Summarize and reshape data
1730882992148:species_data <- df_result %>%
1730882992148:group_by(station, year, species) %>%
1730882992149:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730882992149:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1730883879642:str(df_result)
1730884093852:species_data <- df_result %>%
1730884093852:group_by(station, year, species) %>%
1730884093852:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730884093852:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1730884093871:# Check the reshaped data
1730884093872:print("Species Data after reshaping:")
1730884093872:print(head(species_data))
1730884107139:# Step 3: Separate environmental and species data
1730884107139:env_data <- species_data %>%
1730884107140:select(station, year)
1730884108180:# Check the environmental data
1730884108180:print("Environmental Data:")
1730884108527:print(head(env_data))
1730884144573:KolgrTaxa <- read_csv(file("data/raw/KolgrTaxa.csv", encoding = "UTF-8"), na = "empty")
1730884144983:taxa_to_remove <- c(
1730884144983:"Foraminifera",
1730884144983:"Nematoda",
1730884144983:"Cirripedia",
1730884144983:"Porifera",
1730884144983:"Cnidaria",
1730884144983:"Bryozoa",
1730884144983:"Sipuncula",
1730884144983:"Platyhelminthes",
1730884144983:"Nemertea",
1730884144983:"Oligochaeta",
1730884144983:"Ostracoda"
1730884144984:)
1730884144984:# Filter out the specified taxa using if_all()
1730884144984:KolgrTaxa <- KolgrTaxa %>%
1730884144984:filter(if_all(where(is.character), ~ !. %in% taxa_to_remove))
1730884144993:remove_list <- paste(c(
1730884144993:"nýsestir",
1730884144993:"ungviði",
1730884144993:"ungv",
1730884144993:"ungv.",
1730884144993:"juv",
1730884144993:"harpacticoida"
1730884144994:), collapse = '|')
1730884144994:remove_ind <- lapply(strsplit(remove_list , "\\|")[[1]] , \(x) grep(x , KolgrTaxa$gamalt , fixed = T)) |>
1730884144994:unlist() |>
1730884144994:unique()
1730884144998:ekkiungvidi <- KolgrTaxa[-remove_ind,]
1730884144999:jorundur <- ekkiungvidi %>%
1730884144999:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1730884144999:mutate(
1730884144999:Flokkun = case_when(
1730884144999:# General taxonomic standardization (no year-specific)
1730884145000:str_detect(tolower(Flokkun), "^sipuncul") ~ "Sipuncula",
1730884145000:tolower(Flokkun) == "ostracoda" ~ "Ostracoda",
1730884145000:tolower(Flokkun) == "terebellides stroemi" ~ "Terebellides stroemii",
1730884145000:tolower(Flokkun) == "bivalvia" ~ "NA",
1730884145000:# 1999 specific matches
1730884145000:Artal == "1999" & tolower(Flokkun) %in% c("ampharetinae", "ampharete acutifrons") ~ "Ampharetidae",
1730884145001:Artal == "1999" & tolower(Flokkun) == "bivalvia" ~ "NA",
1730884145001:Artal == "1999" & tolower(Flokkun) == "leucon acutirostris" ~ "Cumacea",
1730884145001:Artal == "1999" & tolower(Flokkun) == "eudorella emarginata" ~ "Cumacea",
1730884145001:Artal == "1999" & tolower(Flokkun) == "musculus discors" ~ "Musculus",
1730884145001:Artal == "1999" & tolower(Flokkun) == "aricidea (acmira) cerrutii" ~ "Aricidea suecica",
1730884145001:Artal == "1999" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1730884145002:# 2013 specific matches
1730884145002:Artal == "2013" & tolower(Flokkun) %in% c("harmothoe", "polynoidae") ~ "Harmothoe extenuata",
1730884145002:Artal == "2013" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730884145002:# 2014 specific matches
1730884145003:Artal == "2014" & tolower(Flokkun) == "ampharete acutifrons" ~ "Ampharetidae",
1730884145003:Artal == "2014" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730884145003:Artal == "2014" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730884145003:Artal == "2014" & tolower(Flokkun) == "caprellidae" ~ "Caprella septemtrionalis",
1730884145003:Artal == "2014" & tolower(Flokkun) == "praxillella" ~ "Praxillella praetermissa",
1730884145004:Artal == "2014" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1730884145004:Artal == "2014" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730884145004:Artal == "2014" & tolower(Flokkun) == "mytilus edulis" ~ "Mytilidae",
1730884145004:Artal == "2014" & tolower(Flokkun) == "nephtyidae" ~ "Nephthys",
1730884145005:Artal == "2014" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1730884145005:Artal == "2014" & tolower(Flokkun) == "tubificidae" ~ "Tubificoides kozloffi",
1730884145005:Artal == "2014" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730884145006:# 2015 specific matches
1730884145006:Artal == "2015" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730884145006:Artal == "2015" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730884145006:Artal == "2015" & tolower(Flokkun) == "crenella" ~ "Crenella decussata",
1730884145006:Artal == "2015" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1730884145007:Artal == "2015" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730884145007:Artal == "2015" & tolower(Flokkun) == "mytilidae" ~ "Mytilus edulis",
1730884145007:Artal == "2015" & tolower(Flokkun) == "ampharetidae" ~ "NA",
1730884145007:Artal == "2015" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730884145008:Artal == "2015" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730884145008:Artal == "2015" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1730884145008:# 2016 specific matches
1730884145009:Artal == "2016" & tolower(Flokkun) == "orbiniidae" ~ "Scoloplos armiger",
1730884145009:Artal == "2016" & tolower(Flokkun) == "polychaeta" ~ "NA",
1730884145009:Artal == "2016" & tolower(Flokkun) == "polynoidae" ~ "Harmothoe imbricata",
1730884145010:Artal == "2016" & tolower(Flokkun) %in% c("spio filicornis", "spionidae") ~ "Spionidae",
1730884145010:Artal == "2016" & tolower(Flokkun) %in% c("syllis", "syllidae") ~ "Syllis cornuta",
1730884145010:Artal == "2016" & tolower(Flokkun) %in% c("terebellidae", "terebelliformia") ~ "Terebellides stroemii",
1730884145010:Artal == "2016" & tolower(Flokkun) == "amphipoda" ~ "NA",
1730884145011:Artal == "2016" & tolower(Flokkun) == "bivalvia" ~ "NA",
1730884145011:Artal == "2016" & tolower(Flokkun) == "cardium" ~ "NA",
1730884145011:Artal == "2016" & tolower(Flokkun) == "aricidea" ~ "Amphitrite cirrata",
1730884145012:Artal == "2016" & tolower(Flokkun) == "capitellidae" ~ "Capitella capitata",
1730884145012:Artal == "2016" & tolower(Flokkun) == "cirratulidae" ~ "Cirratulus cirratus",
1730884145013:Artal == "2016" & tolower(Flokkun) == "cossuridae" ~ "Cossura longocirrata",
1730884145013:Artal == "2016" & tolower(Flokkun) == "pectinariidae" ~ "Pectinaria koreni",
1730884145014:Artal == "2016" & tolower(Flokkun) == "phyllodocida" ~ "Phyllodoce maculata",
1730884145014:Artal == "2016" & tolower(Flokkun) == "lumbrineridae" ~ "Lumbrineris",
1730884145014:Artal == "2016" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730884145016:Artal == "2016" & tolower(Flokkun) == "balanus balanus" ~ "Balanus",
1730884145016:Artal == "2016" & tolower(Flokkun) %in% c("priapulidae", "priapulidae") ~ "Priapulus caudatus",
1730884145017:# 2017 specific matches
1730884145017:Artal == "2017" & tolower(Flokkun) == "oligochaeta" ~ "NA",
1730884145018:Artal == "2017" & tolower(Flokkun) == "tubificidae" ~ "NA",
1730884145018:Artal == "2017" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1730884145019:Artal == "2017" & tolower(Flokkun) == "spionidae" ~ "Spio",
1730884145019:Artal == "2017" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1730884145019:Artal == "2017" & tolower(Flokkun) == "caprellidae" ~ "Caprella septentrionalis",
1730884145020:Artal == "2017" & tolower(Flokkun) == "opisthobranchia" ~ "Retusa pertenuis",
1730884145020:Artal == "2017" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1730884145020:Artal == "2017" & tolower(Flokkun) == "maldanidae" ~ "Praxillella praetermissa",
1730884145021:Artal == "2017" & tolower(Flokkun) %in% c("ampharete", "ampharete acutifrons") ~ "Ampharetidae",
1730884145022:Artal == "2017" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1730884145022:Artal == "2017" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1730884145023:# Default case
1730884145023:TRUE ~ Flokkun
1730884145024:)
1730884145024:) %>%
1730884145024:drop_na()
1730884145237:df <- jorundur  %>%
1730884145237:rename(
1730884145237:species = Flokkun,
1730884145237:sample_id = id,
1730884145237:year = Artal,
1730884145237:station = stod,
1730884145238:subdivision = skipting,
1730884145238:count = N,
1730884145238:density = Nu
1730884145238:)
1730884145241:result <- df %>%
1730884145241:filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1730884145241:# First, apply the subdivision to the count
1730884145241:mutate(adjusted_count = count * subdivision) %>%
1730884145241:# Calculate the correct number of samples and total area for each station-year combination
1730884145242:group_by(station, year) %>%
1730884145242:mutate(
1730884145242:n_samples = n_distinct(sample_id),
1730884145242:grab_area = case_when(
1730884145242:year == 1999 ~ 0.0225,
1730884145243:TRUE ~ 0.04
1730884145243:),
1730884145243:total_area = grab_area * n_samples
1730884145243:) %>%
1730884145243:ungroup() %>%
1730884145243:# Now group by station, year, and species to get total counts
1730884145244:group_by(station, year, species) %>%
1730884145244:summarise(
1730884145244:original_total_count = sum(count),
1730884145244:adjusted_total_count = sum(adjusted_count),
1730884145244:n_samples = first(n_samples),  # Use the previously calculated n_samples
1730884145245:total_area = first(total_area),  # Use the previously calculated total_area
1730884145245:.groups = 'keep'
1730884145245:) %>%
1730884145245:# Calculate densities
1730884145246:mutate(
1730884145246:original_density = original_total_count / total_area,
1730884145246:adjusted_density = adjusted_total_count / total_area,
1730884145246:density_difference = adjusted_density - original_density,
1730884145246:density_ratio = adjusted_density / original_density
1730884145247:) %>%
1730884145247:# Ungroup
1730884145247:ungroup()
1730884159573:df_result <- result
1730884170484:# Step 1: Check if df_result is loaded and has required columns
1730884170484:if (!exists("df_result")) {
1730884170484:stop("df_result is not defined. Please load or create this data frame before running the script.")
1730884170485:}
1730884170485:required_columns <- c("station", "year", "species", "adjusted_density")
1730884170485:missing_columns <- setdiff(required_columns, names(df_result))
1730884170486:if (length(missing_columns) > 0) {
1730884170486:stop("The following required columns are missing from df_result: ", paste(missing_columns, collapse = ", "))
1730884170486:}
1730884170486:# Step 2: Summarize and reshape data
1730884170487:# Group data by station, year, and species, then sum the adjusted densities
1730884170487:species_data <- df_result %>%
1730884170487:group_by(station, year, species) %>%
1730884170487:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730884170488:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1730884170501:# Check the reshaped data
1730884170501:print("Species Data after reshaping:")
1730884170501:print(head(species_data))
1730884171261:# Step 3: Separate environmental and species data
1730884171261:env_data <- species_data %>%
1730884171261:select(station, year)
1730884171263:# Check the environmental data
1730884171263:print("Environmental Data:")
1730884171263:print(head(env_data))
1730884243037:unique(df_result$station)
1730884301149:species_data <- df_result %>%
1730884301149:group_by(station, year, species) %>%
1730884301149:summarise(N = sum(adjusted_density), .groups = "drop")
1730884312348:species_data
1730884321852:unique(species_data$station)
1730884337404:species_data %>%
1730884337405:select(station, year)
1730884369531:species_data <- df_result %>%
1730884369531:group_by(station, year, species) %>%
1730884369532:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730884369532:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1730884369544:# Separate environmental and species data
1730884369545:env_data <- data.frame(
1730884369545:Station = factor(species_data$station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1730884369545:Year = factor(species_data$year)
1730884369545:)
1730884369546:# Create species matrix (only numeric columns)
1730884369546:species_matrix <- species_data %>%
1730884369546:select(-station, -year) %>%
1730884369546:as.matrix()
1730884376268:species_matrix
1730884386897:env_data
1730884408316:years
1730884503124:# Define data preparation function
1730884503125:prepare_data <- function(data) {
1730884503125:# Check if required columns are present
1730884503125:required_columns <- c("station", "year", "species", "adjusted_density")
1730884503125:missing_columns <- setdiff(required_columns, names(data))
1730884503125:if (length(missing_columns) > 0) {
1730884503126:stop("The following required columns are missing from df_result: ", paste(missing_columns, collapse = ", "))
1730884503126:}
1730884503126:# Summarize and reshape data
1730884503126:species_data <- data %>%
1730884503127:group_by(station, year, species) %>%
1730884503127:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730884503127:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1730884503128:# Separate environmental and species data
1730884503128:env_data <- data.frame(
1730884503128:Station = factor(species_data$station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1730884503128:Year = factor(species_data$year)
1730884503129:)
1730884503129:# Create species matrix (only numeric columns)
1730884503129:species_matrix <- species_data %>%
1730884503130:select(-station, -year) %>%
1730884503130:as.matrix()
1730884503130:return(list(species_data = species_data, env_data = env_data, species_matrix = species_matrix))
1730884503131:}
1730884503131:# Run data preparation
1730884503131:prepared_data <- prepare_data(df_result)
1730884503164:# Extract prepared data elements for use
1730884503165:species_data <- prepared_data$species_data
1730884503165:env_data <- prepared_data$env_data
1730884503165:species_matrix <- prepared_data$species_matrix
1730884535524:species_data;
1730884535671:env_data;
1730884535675:species_matrix
1730884714500:# Load necessary library for SIMPER analysis
1730884714500:library(vegan)
1730884714501:# Define the function to perform sequential SIMPER analysis
1730884714501:sequential_simper_analysis <- function(species_matrix, env_data) {
1730884714501:# Get unique years sorted in ascending order
1730884714501:years <- sort(unique(as.character(env_data$Year)))
1730884714502:simper_results <- list()  # Initialize an empty list to store results
1730884714502:# Loop through each consecutive pair of years
1730884714502:for (i in 1:(length(years) - 1)) {
1730884714502:# Select consecutive years for comparison
1730884714502:year_pair <- years[i:(i + 1)]
1730884714503:year_data <- species_matrix[env_data$Year %in% year_pair, ]  # Subset species data for these years
1730884714503:year_groups <- env_data$Year[env_data$Year %in% year_pair]   # Get the year grouping for SIMPER
1730884714503:# Perform SIMPER analysis for this pair of years
1730884714503:comparison_name <- paste(year_pair[1], year_pair[2], sep = "_")
1730884714504:simper_results[[comparison_name]] <- simper(year_data, group = year_groups, permutations = 999)
1730884714504:}
1730884714505:return(simper_results)
1730884714505:}
1730884714505:# Run the sequential SIMPER analysis with prepared data
1730884714505:simper_results <- sequential_simper_analysis(species_matrix, env_data)
1730884715212:# Print summary of SIMPER results for each year pair
1730884715213:for (comparison_name in names(simper_results)) {
1730884715213:cat(sprintf("\nSIMPER Analysis Results for %s:\n", comparison_name))
1730884715213:print(summary(simper_results[[comparison_name]]))
1730884715213:}
1730884957665:# Check if df_result is loaded
1730884957665:if (!exists("df_result")) {
1730884957665:stop("df_result is not defined. Please load or create this data frame before running the script.")
1730884957666:}
1730884957666:# Ensure necessary columns are present
1730884957666:required_columns <- c("station", "year", "species", "adjusted_density")
1730884957666:missing_columns <- setdiff(required_columns, names(df_result))
1730884957667:if (length(missing_columns) > 0) {
1730884957667:stop("The following required columns are missing from df_result: ", paste(missing_columns, collapse = ", "))
1730884957667:}
1730884957667:# Summarize and reshape data
1730884957667:species_data <- df_result %>%
1730884957668:group_by(station, year, species) %>%
1730884957668:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730884957668:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1730884957683:# Separate environmental and species data
1730884957683:env_data <- data.frame(
1730884957683:Station = factor(species_data$station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1730884957683:Year = factor(species_data$year)
1730884957683:)
1730884957684:# Create species matrix (only numeric columns)
1730884957684:species_matrix <- species_data %>%
1730884957684:select(-station, -year) %>%
1730884957684:as.matrix()
1730884957687:# Perform SIMPER analysis for year-to-year comparisons
1730884957687:years <- sort(unique(as.character(env_data$Year)))
1730884957687:sequential_simper <- list()
1730884957688:for(i in 1:(length(years)-1)) {
1730884957688:# Select data for consecutive years
1730884957688:year_pair <- years[i:(i+1)]
1730884957688:year_data <- species_matrix[env_data$Year %in% year_pair, ]
1730884957688:year_groups <- env_data$Year[env_data$Year %in% year_pair]
1730884957689:# Perform SIMPER analysis for this pair of years
1730884957689:comparison_name <- paste(year_pair[1], year_pair[2], sep="_")
1730884957689:sequential_simper[[comparison_name]] <- simper(year_data, group = year_groups, permutations = 999)
1730884957689:}
1730884958038:# Baseline comparison (if 1999 data exists)
1730884958038:if ("1999" %in% years) {
1730884958038:baseline_data <- species_matrix[env_data$Year %in% c("1999", years), ]
1730884958038:baseline_groups <- env_data$Year[env_data$Year %in% c("1999", years)]
1730884958038:simper_baseline <- simper(baseline_data, group = baseline_groups, permutations = 999)
1730884958039:}
1730884959062:# Calculate Benthic Biotic Indices (BBI) for each year and station
1730884959062:calculate_biotic_indices <- function(data) {
1730884959062:required_cols <- c("year", "station", "species", "adjusted_density")
1730884959063:stopifnot(
1730884959063:"Missing required columns" = all(required_cols %in% colnames(data)),
1730884959063:"No data provided" = nrow(data) > 0,
1730884959063:"Negative density values found" = all(data$adjusted_density >= 0),
1730884959063:"Missing values found" = !any(is.na(data$adjusted_density))
1730884959063:)
1730884959063:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730884959064:indices_list <- list()
1730884959064:species_ambi_mapping <- data.frame(species = character(), AMBI = numeric())
1730884959064:for (current_year in sort(unique(data$year))) {
1730884959064:year_data <- data %>%
1730884959064:filter(year == current_year, station %in% target_stations) %>%
1730884959065:group_by(station, species) %>%
1730884959065:summarise(density = sum(adjusted_density), .groups = 'drop') %>%
1730884959065:pivot_wider(names_from = station, values_from = density, values_fill = 0)
1730884959065:bbi_results <- BBI(year_data)
1730884959066:# Extract and accumulate species-AMBI mappings
1730884959066:current_species_groups <- data.frame(
1730884959066:species = bbi_results$taxa[, 1],
1730884959066:AMBI = bbi_results$table$AMBI
1730884959067:)
1730884959067:# Combine with existing mappings, keeping the first non-NA AMBI value for each species
1730884959067:species_ambi_mapping <- bind_rows(species_ambi_mapping, current_species_groups) %>%
1730884959067:group_by(species) %>%
1730884959068:summarise(AMBI = first(na.omit(AMBI))) %>%
1730884959068:ungroup()
1730884959068:indices_list[[as.character(current_year)]] <- list(
1730884959068:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730884959068:classification = bbi_results$BBIclass,
1730884959069:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1730884959069:)
1730884959069:}
1730884959069:# Add the species-AMBI mapping to the return list
1730884959070:indices_list$species_groups <- species_ambi_mapping
1730884959070:return(indices_list)
1730884959070:}
1730884959071:# Use the result dataframe that already has the correct density calculations
1730884959071:biotic_indices <- calculate_biotic_indices(df_result)
1730884960928:# Extract species groups from the accumulated mappings
1730884960928:species_groups <- biotic_indices$species_groups
1730884963766:# Function to summarize one comparison
1730884963767:summarize_one_comparison <- function(comparison_data) {
1730884963767:# Extract the relevant data
1730884963767:species_names <- names(comparison_data$cusum)
1730884963767:cumulative_contributions <- unname(comparison_data$cusum)
1730884963767:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730884963767:# Create a data frame
1730884963768:df <- data.frame(
1730884963768:Species = species_names,
1730884963768:Cumulative_Percent = cumulative_contributions * 100,
1730884963768:Individual_Percent = individual_contributions * 100
1730884963768:)
1730884963769:return(df)
1730884963769:}
1730884963769:# Process sequential comparisons
1730884963769:print("Sequential Year Comparisons:")
1730884963770:for(i in seq_along(sequential_simper)) {
1730884963770:comparison_name <- names(sequential_simper[[i]])
1730884963770:cat(sprintf("\nComparison: %s\n", comparison_name))
1730884963770:# Process this comparison
1730884963770:summary_data <- summarize_one_comparison(sequential_simper[[i]][[1]]) %>%
1730884963771:filter(Cumulative_Percent <= 70)
1730884963771:print(kableExtra::kbl(summary_data,
1730884963771:caption = sprintf("Species contributions for %s", comparison_name),
1730884963771:digits = 2))
1730884963771:}
1730884964300:# Process baseline comparisons (1999)
1730884964300:if(exists("simper_baseline")) {
1730884964300:print("\nComparisons with 1999 Baseline:")
1730884964300:baseline_comps <- names(simper_baseline)[grep("1999_", names(simper_baseline))]
1730884964301:for(comp_name in baseline_comps) {
1730884964301:cat(sprintf("\n%s:\n", comp_name))
1730884964301:summary_data <- summarize_one_comparison(simper_baseline[[comp_name]]) %>%
1730884964301:filter(Cumulative_Percent <= 70)
1730884964301:print(kableExtra::kbl(summary_data,
1730884964302:caption = sprintf("Species contributions for %s", comp_name),
1730884964302:digits = 2))
1730884964302:}
1730884964302:}
1730885022053:species_names <- names(comparison_data$cusum)
1730885052300:summarize_one_comparison <- function(comparison_data, df_result, year1, year2, species_groups) {
1730885052301:species_names <- names(comparison_data$cusum)
1730885052301:cumulative_contributions <- unname(comparison_data$cusum)
1730885052301:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730885052301:abundance_changes <- sapply(species_names, function(species) {
1730885052301:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730885052302:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730885052302:change <- abundance_year2 - abundance_year1
1730885052302:return(change)
1730885052302:})
1730885052302:ecological_groups <- sapply(species_names, function(species) {
1730885052303:match_index <- match(species, species_groups$species)
1730885052303:if (!is.na(match_index)) {
1730885052303:return(species_groups$AMBI[match_index])
1730885052303:} else {
1730885052303:return(NA)
1730885052303:}
1730885052303:})
1730885052304:df <- data.frame(
1730885052304:Species = species_names,
1730885052304:Cumulative_Percent = cumulative_contributions * 100,
1730885052304:Individual_Percent = individual_contributions * 100,
1730885052304:Abundance_Change = abundance_changes,
1730885052305:Ecological_Group = ecological_groups
1730885052305:)
1730885052305:return(df)
1730885052305:}
1730885059619:df
1730885126036:summary_data <- summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups) %>%
1730885126036:filter(Cumulative_Percent <= 70)
1730885126059:rownames(summary_data) <- NULL
1730885130028:summary_data
1730885158100:species_groups
1730885167508:comparison_data
1730885289910:# Function to summarize one comparison
1730885289910:summarize_one_comparison <- function(comparison_data, df_result, year1, year2) {
1730885289910:# Extract the relevant data
1730885289910:species_names <- names(comparison_data$cusum)
1730885289910:cumulative_contributions <- unname(comparison_data$cusum)
1730885289911:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730885289911:# Calculate the change in abundance for each species
1730885289911:abundance_changes <- sapply(species_names, function(species) {
1730885289911:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730885289912:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730885289912:change <- abundance_year2 - abundance_year1
1730885289912:return(change)
1730885289912:})
1730885289913:# Create a data frame
1730885289913:df <- data.frame(
1730885289913:Species = species_names,
1730885289913:Cumulative_Percent = cumulative_contributions * 100,
1730885289913:Individual_Percent = individual_contributions * 100,
1730885289914:Abundance_Change = abundance_changes
1730885289914:)
1730885289914:return(df)
1730885289914:}
1730885289915:# Process sequential comparisons
1730885289915:print("Sequential Year Comparisons:")
1730885289915:for(i in seq_along(sequential_simper)) {
1730885289916:comparison_name <- names(sequential_simper[[i]])
1730885289916:years <- unlist(strsplit(comparison_name, "_"))
1730885289916:year1 <- as.numeric(years[1])
1730885289916:year2 <- as.numeric(years[2])
1730885289916:cat(sprintf("\nComparison: %s\n", comparison_name))
1730885289917:# Process this comparison
1730885289917:summary_data <- summarize_one_comparison(sequential_simper[[i]][[1]], df_result, year1, year2) %>%
1730885289917:filter(Cumulative_Percent <= 70)
1730885289917:print(kableExtra::kbl(summary_data,
1730885289917:caption = sprintf("Species contributions for %s", comparison_name),
1730885289917:digits = 2))
1730885289918:}
1730885290148:# Process baseline comparisons (1999)
1730885290148:if(exists("simper_baseline")) {
1730885290148:print("\nComparisons with 1999 Baseline:")
1730885290148:baseline_comps <- names(simper_baseline)[grep("1999_", names(simper_baseline))]
1730885290148:for(comp_name in baseline_comps) {
1730885290149:years <- unlist(strsplit(comp_name, "_"))
1730885290149:year1 <- as.numeric(years[1])
1730885290149:year2 <- as.numeric(years[2])
1730885290149:cat(sprintf("\n%s:\n", comp_name))
1730885290149:summary_data <- summarize_one_comparison(simper_baseline[[comp_name]], df_result, year1, year2) %>%
1730885290150:filter(Cumulative_Percent <= 70)
1730885290150:print(kableExtra::kbl(summary_data,
1730885290150:caption = sprintf("Species contributions for %s", comp_name),
1730885290150:digits = 2))
1730885290150:}
1730885290151:}
1730885430854:# Function to summarize one comparison
1730885430854:summarize_one_comparison <- function(comparison_data, df_result, year1, year2) {
1730885430854:# Extract the relevant data
1730885430855:species_names <- names(comparison_data$cusum)
1730885430855:cumulative_contributions <- unname(comparison_data$cusum)
1730885430855:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730885430855:# Calculate the change in abundance for each species
1730885430855:abundance_changes <- sapply(species_names, function(species) {
1730885430856:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730885430856:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730885430856:change <- abundance_year2 - abundance_year1
1730885430856:return(change)
1730885430856:})
1730885430857:# Create a data frame
1730885430857:df <- data.frame(
1730885430857:Species = species_names,
1730885430857:Cumulative_Percent = cumulative_contributions * 100,
1730885430857:Individual_Percent = individual_contributions * 100,
1730885430858:Abundance_Change = abundance_changes
1730885430858:)
1730885430858:return(df)
1730885430858:}
1730885430859:# Process sequential comparisons
1730885430859:print("Sequential Year Comparisons:")
1730885430859:for(i in seq_along(sequential_simper)) {
1730885430860:comparison_name <- names(sequential_simper[[i]])
1730885430860:years <- unlist(strsplit(comparison_name, "_"))
1730885430860:year1 <- as.numeric(years[1])
1730885430860:year2 <- as.numeric(years[2])
1730885430860:cat(sprintf("\nComparison: %s\n", comparison_name))
1730885430861:# Process this comparison
1730885430861:summary_data <- summarize_one_comparison(sequential_simper[[i]][[1]], df_result, year1, year2) %>%
1730885430861:filter(Cumulative_Percent <= 70)
1730885430862:print(kableExtra::kbl(summary_data,
1730885430862:caption = sprintf("Species contributions for %s", comparison_name),
1730885430862:digits = 2))
1730885430862:}
1730885431088:# Process baseline comparisons (1999)
1730885431088:if(exists("simper_baseline")) {
1730885431088:print("\nComparisons with 1999 Baseline:")
1730885431088:baseline_comps <- names(simper_baseline)[grep("1999_", names(simper_baseline))]
1730885431089:for(comp_name in baseline_comps) {
1730885431089:years <- unlist(strsplit(comp_name, "_"))
1730885431089:year1 <- as.numeric(years[1])
1730885431089:year2 <- as.numeric(years[2])
1730885431089:cat(sprintf("\n%s:\n", comp_name))
1730885431090:summary_data <- summarize_one_comparison(simper_baseline[[comp_name]], df_result, year1, year2) %>%
1730885431090:filter(Cumulative_Percent <= 70)
1730885431090:print(kableExtra::kbl(summary_data,
1730885431091:caption = sprintf("Species contributions for %s", comp_name),
1730885431091:digits = 2))
1730885431091:}
1730885431091:}
1730885515416:sequential_simper
1730885596004:species_groups
1730885777440:# Function to summarize one comparison without adding ecological group
1730885777440:summarize_comparison <- function(comparison_data, df_result, year1, year2) {
1730885777441:species_names <- names(comparison_data$cusum)
1730885777441:cumulative_contributions <- unname(comparison_data$cusum)
1730885777441:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730885777441:# Calculate abundance changes between years
1730885777441:abundance_changes <- sapply(species_names, function(species) {
1730885777442:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730885777442:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730885777442:change <- abundance_year2 - abundance_year1
1730885777442:return(change)
1730885777442:})
1730885777442:# Create data frame without ecological group
1730885777443:df <- data.frame(
1730885777443:Species = species_names,
1730885777443:Cumulative_Percent = cumulative_contributions * 100,
1730885777443:Individual_Percent = individual_contributions * 100,
1730885777443:Abundance_Change = abundance_changes
1730885777444:)
1730885777444:return(df)
1730885777444:}
1730885783388:# Function to add ecological group information
1730885783388:add_ecological_group <- function(summary_df, species_groups) {
1730885783389:# Match species names in summary_df with species_groups to get ecological group (AMBI score)
1730885783389:ecological_groups <- sapply(summary_df$Species, function(species) {
1730885783389:match_index <- match(species, species_groups$species)
1730885783389:if (!is.na(match_index)) {
1730885783389:return(species_groups$AMBI[match_index])
1730885783389:} else {
1730885783389:return(NA)
1730885783389:}
1730885783390:})
1730885783390:# Add ecological group as a new column to the summary data frame
1730885783390:summary_df$Ecological_Group <- ecological_groups
1730885783390:return(summary_df)
1730885783390:}
1730885794606:# Example usage
1730885794606:comparison_summary <- summarize_comparison(comparison_data, df_result, year1, year2)
1730885809864:# Process sequential comparisons
1730885809864:print("Sequential Year Comparisons:")
1730885809864:for (i in seq_along(sequential_simper)) {
1730885809865:comparison_name <- names(sequential_simper)[i]
1730885809865:years <- unlist(strsplit(comparison_name, "_"))
1730885809865:year1 <- as.numeric(years[1])
1730885809865:year2 <- as.numeric(years[2])
1730885809865:cat(sprintf("\nComparison: %s\n", comparison_name))
1730885809865:# Step 1: Summarize the comparison without ecological group
1730885809866:summary_data <- summarize_comparison(sequential_simper[[i]], df_result, year1, year2)
1730885809866:# Step 2: Add ecological group information from species_groups
1730885809866:summary_data_with_groups <- add_ecological_group(summary_data, species_groups)
1730885809866:# Step 3: Filter and display the results
1730885809867:filtered_summary <- summary_data_with_groups %>%
1730885809867:filter(Cumulative_Percent <= 70)
1730885809867:# Print the summary table
1730885809867:print(kableExtra::kbl(filtered_summary,
1730885809868:caption = sprintf("Species contributions for %s", comparison_name),
1730885809868:digits = 2))
1730885809868:}
1730885899373:# Example usage
1730885899374:comparison_summary <- summarize_comparison(sequential_simper[[i]][[1]], df_result, year1, year2)
1730885899382:comparison_summary_with_groups <- add_ecological_group(comparison_summary, species_groups)
1730885899384:# Display the final data frame with ecological group included
1730885899384:print(comparison_summary_with_groups)
1730890492546:# Process sequential comparisons
1730890492547:print("Sequential Year Comparisons:")
1730890495976:for(i in seq_along(sequential_simper)) {
1730890495976:comparison_name <- names(sequential_simper)[i]
1730890495976:years <- unlist(strsplit(comparison_name, "_"))
1730890495976:year1 <- years[1]
1730890495977:year2 <- years[2]
1730890495977:cat(sprintf("\nComparison: %s\n", comparison_name))
1730890495977:# Process this comparison
1730890495977:summary_data <- summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups) %>%
1730890495978:filter(Cumulative_Percent <= 70)
1730890495978:rownames(summary_data) <- NULL
1730890495978:if(nrow(summary_data) > 0) {
1730890495978:print(kableExtra::kbl(summary_data,
1730890495978:caption = sprintf("Species contributions for %s", comparison_name),
1730890495979:digits = 2))
1730890495979:} else {
1730890495979:cat("No species met the contribution threshold for this comparison.\n")
1730890495979:}
1730890495979:}
1730890508975:# Process sequential comparisons
1730890508975:print("Sequential Year Comparisons:")
1730890511158:for(i in seq_along(sequential_simper)) {
1730890511159:comparison_name <- names(sequential_simper)[i]
1730890511159:years <- unlist(strsplit(comparison_name, "_"))
1730890511159:year1 <- years[1]
1730890511159:year2 <- years[2]
1730890511159:cat(sprintf("\nComparison: %s\n", comparison_name))
1730890511160:# Process this comparison
1730890511160:summary_data <- summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups) %>%
1730890511160:filter(Cumulative_Percent <= 70)
1730890511160:rownames(summary_data) <- NULL
1730890511161:if(nrow(summary_data) > 0) {
1730890511161:print(kableExtra::kbl(summary_data,
1730890511161:caption = sprintf("Species contributions for %s", comparison_name),
1730890511161:digits = 2))
1730890511161:} else {
1730890511161:cat("No species met the contribution threshold for this comparison.\n")
1730890511162:}
1730890511162:}
1730890537030:# Process sequential comparisons
1730890537030:print("Sequential Year Comparisons:")
1730890537030:for (i in seq_along(sequential_simper)) {
1730890537031:comparison_name <- names(sequential_simper)[i]
1730890537031:years <- unlist(strsplit(comparison_name, "_"))
1730890537031:year1 <- as.numeric(years[1])
1730890537031:year2 <- as.numeric(years[2])
1730890537031:cat(sprintf("\nComparison: %s\n", comparison_name))
1730890537032:# Step 1: Summarize the comparison without ecological group
1730890537032:summary_data <- summarize_comparison(sequential_simper[[i]], df_result, year1, year2)
1730890537032:# Step 2: Add ecological group information from species_groups
1730890537032:summary_data_with_groups <- add_ecological_group(summary_data, species_groups)
1730890537033:# Step 3: Filter and display the results
1730890537033:filtered_summary <- summary_data_with_groups %>%
1730890537033:filter(Cumulative_Percent <= 70)
1730890537033:# Print the summary table
1730890537033:print(kableExtra::kbl(filtered_summary,
1730890537034:caption = sprintf("Species contributions for %s", comparison_name),
1730890537034:digits = 2))
1730890537034:}
1730890576896:sequential_simper[[i]]
1730890578629:i
1730890622749:# Process sequential comparisons
1730890622749:print("Sequential Year Comparisons:")
1730890622749:for (i in seq_along(sequential_simper)) {
1730890622749:comparison_name <- names(sequential_simper)[i]
1730890622750:years <- unlist(strsplit(comparison_name, "_"))
1730890622750:year1 <- as.numeric(years[1])
1730890622750:year2 <- as.numeric(years[2])
1730890622750:cat(sprintf("\nComparison: %s\n", comparison_name))
1730890622751:# Step 1: Summarize the comparison without ecological group
1730890622751:summary_data <- summarize_comparison(sequential_simper[[i]], df_result, year1, year2)
1730890622751:# Step 2: Add ecological group information from species_groups
1730890622751:summary_data_with_groups <- add_ecological_group(summary_data, species_groups)
1730890622752:# Step 3: Filter and display the results
1730890622752:filtered_summary <- summary_data_with_groups %>%
1730890622752:filter(Cumulative_Percent <= 70)
1730890622752:# Print the summary table
1730890622753:print(kableExtra::kbl(filtered_summary,
1730890622753:caption = sprintf("Species contributions for %s", comparison_name),
1730890622753:digits = 2))
1730890622753:}
1730890631383:# Function to summarize one comparison without adding ecological group
1730890631383:summarize_comparison <- function(comparison_data, df_result, year1, year2) {
1730890631383:# Extract species names and cumulative contributions from comparison_data
1730890631384:species_names <- names(comparison_data)
1730890631384:cumulative_contributions <- unname(comparison_data)
1730890631384:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730890631385:# Calculate abundance changes between years
1730890631385:abundance_changes <- sapply(species_names, function(species) {
1730890631385:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730890631385:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730890631385:change <- abundance_year2 - abundance_year1
1730890631385:return(change)
1730890631386:})
1730890631386:# Create data frame without ecological group
1730890631386:df <- data.frame(
1730890631386:Species = species_names,
1730890631387:Cumulative_Percent = cumulative_contributions * 100,
1730890631387:Individual_Percent = individual_contributions * 100,
1730890631387:Abundance_Change = abundance_changes
1730890631387:)
1730890631388:return(df)
1730890631388:}
1730890636646:sequential_simper[[i]]
1730890702062:comparison_summary <- summarize_comparison(sequential_simper[[i]][[1]], df_result, year1, year2)
1730890940305:# Function to summarize one comparison without adding ecological group
1730890940305:summarize_comparison <- function(comparison_data, df_result, year1, year2) {
1730890940306:# Extract species names and cumulative contributions from comparison_data
1730890940306:species_names <- names(comparison_data)
1730890940306:cumulative_contributions <- unname(comparison_data)
1730890940306:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730890940307:# Calculate abundance changes between years
1730890940307:abundance_changes <- sapply(species_names, function(species) {
1730890940307:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730890940307:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730890940307:change <- abundance_year2 - abundance_year1
1730890940308:return(change)
1730890940308:})
1730890940308:# Create data frame without ecological group
1730890940308:df <- data.frame(
1730890940308:Species = species_names,
1730890940309:Cumulative_Percent = cumulative_contributions * 100,
1730890940309:Individual_Percent = individual_contributions * 100,
1730890940309:Abundance_Change = abundance_changes
1730890940309:)
1730890940309:return(df)
1730890940310:}
1730890941559:# Function to add ecological group information
1730890941560:add_ecological_group <- function(summary_df, species_groups) {
1730890941560:# Match species names in summary_df with species_groups to get ecological group (AMBI score)
1730890941560:ecological_groups <- sapply(summary_df$Species, function(species) {
1730890941560:match_index <- match(species, species_groups$species)
1730890941560:if (!is.na(match_index)) {
1730890941560:return(species_groups$AMBI[match_index])
1730890941561:} else {
1730890941561:return(NA)
1730890941561:}
1730890941561:})
1730890941561:# Add ecological group as a new column to the summary data frame
1730890941561:summary_df$Ecological_Group <- ecological_groups
1730890941562:return(summary_df)
1730890941562:}
1730890943246:# Process sequential comparisons
1730890943246:print("Sequential Year Comparisons:")
1730890945079:for (i in seq_along(sequential_simper)) {
1730890945079:comparison_name <- names(sequential_simper)[i]
1730890945079:years <- unlist(strsplit(comparison_name, "_"))
1730890945080:year1 <- as.numeric(years[1])
1730890945080:year2 <- as.numeric(years[2])
1730890945080:cat(sprintf("\nComparison: %s\n", comparison_name))
1730890945080:# Step 1: Summarize the comparison without ecological group
1730890945081:summary_data <- summarize_comparison(sequential_simper[[i]], df_result, year1, year2)
1730890945081:# Step 2: Add ecological group information from species_groups
1730890945081:summary_data_with_groups <- add_ecological_group(summary_data, species_groups)
1730890945081:# Step 3: Filter and display the results
1730890945081:filtered_summary <- summary_data_with_groups %>%
1730890945082:filter(Cumulative_Percent <= 70)
1730890945082:# Print the summary table
1730890945082:print(kableExtra::kbl(filtered_summary,
1730890945082:caption = sprintf("Species contributions for %s", comparison_name),
1730890945082:digits = 2))
1730890945083:}
1730891016685:str(species_data)
1730891016782:str(env_data)
1730891016786:str(species_matrix)
1730891032030:species_data
1730891032203:str(env_data)
1730891032206:str(species_matrix)
1730891127441:# Function to summarize one comparison without adding ecological group
1730891127441:summarize_comparison <- function(comparison_data, df_result, year1, year2) {
1730891127441:# Extract species names and cumulative contributions from comparison_data
1730891127441:species_names <- names(comparison_data)
1730891127442:cumulative_contributions <- unname(comparison_data)
1730891127442:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730891127442:# Debugging: Print the names and contributions
1730891127442:cat("Species Names:", species_names, "\n")
1730891127442:cat("Cumulative Contributions:", cumulative_contributions, "\n")
1730891127443:# Calculate abundance changes between years
1730891127443:abundance_changes <- sapply(species_names, function(species) {
1730891127443:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730891127443:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730891127444:change <- abundance_year2 - abundance_year1
1730891127444:return(change)
1730891127444:})
1730891127444:# Create data frame without ecological group
1730891127444:df <- data.frame(
1730891127445:Species = species_names,
1730891127445:Cumulative_Percent = cumulative_contributions * 100,
1730891127445:Individual_Percent = individual_contributions * 100,
1730891127445:Abundance_Change = abundance_changes
1730891127446:)
1730891127446:# Debugging: Print the data frame after summarization
1730891127446:print(df)
1730891127446:return(df)
1730891127447:}
1730891128558:# Process sequential comparisons with debugging information
1730891128558:print("Sequential Year Comparisons:")
1730891129542:for (i in seq_along(sequential_simper)) {
1730891129543:comparison_name <- names(sequential_simper)[i]
1730891129543:years <- unlist(strsplit(comparison_name, "_"))
1730891129543:year1 <- as.numeric(years[1])
1730891129543:year2 <- as.numeric(years[2])
1730891129544:cat(sprintf("\nComparison: %s\n", comparison_name))
1730891129544:# Step 1: Summarize the comparison without ecological group
1730891129544:summary_data <- summarize_comparison(sequential_simper[[i]], df_result, year1, year2)
1730891129544:# Step 2: Add ecological group information from species_groups
1730891129545:summary_data_with_groups <- add_ecological_group(summary_data, species_groups)
1730891129545:# Step 3: Filter and display the results
1730891129545:filtered_summary <- summary_data_with_groups %>%
1730891129545:filter(Cumulative_Percent <= 70)
1730891129545:# Debugging: Check if filtered summary is empty
1730891129546:if (nrow(filtered_summary) == 0) {
1730891129546:cat("No rows meet the Cumulative_Percent filter threshold for this comparison.\n")
1730891129546:} else {
1730891129546:print(kableExtra::kbl(filtered_summary,
1730891129546:caption = sprintf("Species contributions for %s", comparison_name),
1730891129547:digits = 2))
1730891129547:}
1730891129547:}
1730891211148:# Define data preparation function
1730891211148:prepare_data <- function(data) {
1730891211148:# Check if required columns are present
1730891211148:required_columns <- c("station", "year", "species", "adjusted_density")
1730891211148:missing_columns <- setdiff(required_columns, names(data))
1730891211148:if (length(missing_columns) > 0) {
1730891211149:stop("The following required columns are missing from df_result: ", paste(missing_columns, collapse = ", "))
1730891211149:}
1730891211149:# Summarize and reshape data
1730891211149:species_data <- data %>%
1730891211149:group_by(station, year, species) %>%
1730891211150:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730891211150:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1730891211150:# Separate environmental and species data
1730891211150:env_data <- data.frame(
1730891211150:Station = factor(species_data$station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1730891211151:Year = factor(species_data$year)
1730891211151:)
1730891211151:# Create species matrix (only numeric columns)
1730891211151:species_matrix <- species_data %>%
1730891211151:select(-station, -year) %>%
1730891211152:as.matrix()
1730891211152:return(list(species_data = species_data, env_data = env_data, species_matrix = species_matrix))
1730891211152:}
1730891211153:# Run data preparation
1730891211153:prepared_data <- prepare_data(df_result)
1730891211197:# Extract prepared data elements for use
1730891211197:species_data <- prepared_data$species_data
1730891211197:env_data <- prepared_data$env_data
1730891211197:species_matrix <- prepared_data$species_matrix
1730891211198:# Function to summarize one comparison without adding ecological group
1730891211198:summarize_comparison <- function(comparison_data, df_result, year1, year2) {
1730891211198:# Extract species names and cumulative contributions from comparison_data
1730891211198:species_names <- names(comparison_data)
1730891211198:cumulative_contributions <- unname(comparison_data)
1730891211198:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730891211198:# Debugging: Print the names and contributions
1730891211198:cat("Species Names:", species_names, "\n")
1730891211198:cat("Cumulative Contributions:", cumulative_contributions, "\n")
1730891211198:# Calculate abundance changes between years
1730891211198:abundance_changes <- sapply(species_names, function(species) {
1730891211199:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730891211199:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730891211199:change <- abundance_year2 - abundance_year1
1730891211199:return(change)
1730891211199:})
1730891211199:# Create data frame without ecological group
1730891211199:df <- data.frame(
1730891211199:Species = species_names,
1730891211199:Cumulative_Percent = cumulative_contributions * 100,
1730891211200:Individual_Percent = individual_contributions * 100,
1730891211200:Abundance_Change = abundance_changes
1730891211200:)
1730891211200:# Debugging: Print the data frame after summarization
1730891211200:print(df)
1730891211200:return(df)
1730891211200:}
1730891211201:# Process sequential comparisons with debugging information
1730891211201:print("Sequential Year Comparisons:")
1730891211201:for (i in seq_along(sequential_simper)) {
1730891211201:comparison_name <- names(sequential_simper)[i]
1730891211201:years <- unlist(strsplit(comparison_name, "_"))
1730891211201:year1 <- as.numeric(years[1])
1730891211201:year2 <- as.numeric(years[2])
1730891211201:cat(sprintf("\nComparison: %s\n", comparison_name))
1730891211201:# Step 1: Summarize the comparison without ecological group
1730891211201:summary_data <- summarize_comparison(sequential_simper[[i]], df_result, year1, year2)
1730891211202:# Step 2: Add ecological group information from species_groups
1730891211202:summary_data_with_groups <- add_ecological_group(summary_data, species_groups)
1730891211202:# Step 3: Filter and display the results
1730891211202:filtered_summary <- summary_data_with_groups %>%
1730891211202:filter(Cumulative_Percent <= 70)
1730891211202:# Debugging: Check if filtered summary is empty
1730891211202:if (nrow(filtered_summary) == 0) {
1730891211202:cat("No rows meet the Cumulative_Percent filter threshold for this comparison.\n")
1730891211202:} else {
1730891211202:print(kableExtra::kbl(filtered_summary,
1730891211203:caption = sprintf("Species contributions for %s", comparison_name),
1730891211203:digits = 2))
1730891211203:}
1730891211203:}
1730891234613:str(comparison_data)
1730891262360:comparison_summary <- summarize_comparison(sequential_simper[[i]][[1]], df_result, year1, year2)
1730891303633:# Sample 20 observations from each year
1730891303633:set.seed(123)  # For reproducibility
1730891304677:subsample_data <- df_result %>%
1730891304677:group_by(year) %>%
1730891304677:sample_n(20, replace = TRUE) %>%  # Sample 20 observations per year
1730891304677:ungroup()
1730891311326:# Reshape data for SIMPER analysis
1730891311326:species_data <- subsample_data %>%
1730891311326:group_by(station, year, species) %>%
1730891311326:summarise(adjusted_density = sum(adjusted_density), .groups = "drop") %>%
1730891311327:pivot_wider(names_from = species, values_from = adjusted_density, values_fill = 0)
1730891312101:# Separate environmental and species data
1730891312101:env_data <- data.frame(
1730891312101:Station = factor(species_data$station),
1730891312101:Year = factor(species_data$year)
1730891312101:)
1730891319046:# Create species matrix (only numeric columns)
1730891319046:species_matrix <- species_data %>%
1730891319047:select(-station, -year) %>%
1730891319047:as.matrix()
1730891323135:# Perform SIMPER analysis for the subsample
1730891323135:years <- sort(unique(as.character(env_data$Year)))
1730891323688:sequential_simper <- list()
1730891324232:for(i in 1:(length(years)-1)) {
1730891324232:year_pair <- years[i:(i+1)]
1730891324233:year_data <- species_matrix[env_data$Year %in% year_pair, ]
1730891324233:year_groups <- env_data$Year[env_data$Year %in% year_pair]
1730891324233:# Run SIMPER analysis
1730891324233:comparison_name <- paste(year_pair[1], year_pair[2], sep="_")
1730891324233:sequential_simper[[comparison_name]] <- simper(year_data, group = year_groups, permutations = 999)
1730891324233:}
1730891327925:# Function to summarize one comparison
1730891327925:summarize_one_comparison <- function(comparison_data, df_result, year1, year2) {
1730891327925:species_names <- names(comparison_data$cusum)
1730891327925:cumulative_contributions <- unname(comparison_data$cusum)
1730891327926:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730891327926:abundance_changes <- sapply(species_names, function(species) {
1730891327926:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730891327926:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730891327926:change <- abundance_year2 - abundance_year1
1730891327927:return(change)
1730891327927:})
1730891327927:df <- data.frame(
1730891327927:Species = species_names,
1730891327927:Cumulative_Percent = cumulative_contributions * 100,
1730891327927:Individual_Percent = individual_contributions * 100,
1730891327928:Abundance_Change = abundance_changes
1730891327928:)
1730891327928:return(df)
1730891327928:}
1730891330127:# Process sequential comparisons
1730891330127:print("Sequential Year Comparisons:")
1730891333873:for(i in seq_along(sequential_simper)) {
1730891333874:comparison_name <- names(sequential_simper)[i]
1730891333874:years <- unlist(strsplit(comparison_name, "_"))
1730891333874:year1 <- years[1]
1730891333874:year2 <- years[2]
1730891333874:cat(sprintf("\nComparison: %s\n", comparison_name))
1730891333875:# Process this comparison
1730891333875:summary_data <- summarize_one_comparison(sequential_simper[[i]], subsample_data, year1, year2) %>%
1730891333875:filter(Cumulative_Percent <= 70)
1730891333875:rownames(summary_data) <- NULL
1730891333875:if(nrow(summary_data) > 0) {
1730891333875:print(kableExtra::kbl(summary_data,
1730891333875:caption = sprintf("Species contributions for %s", comparison_name),
1730891333876:digits = 2))
1730891333876:} else {
1730891333876:cat("No species met the contribution threshold for this comparison.\n")
1730891333876:}
1730891333876:}
1730891340438:######
1730891340439:# Load necessary libraries
1730891340439:library(dplyr)        # Data manipulation
1730891340640:library(tidyr)        # Data reshaping
1730891340937:library(vegan)        # Ecological analysis
1730891341273:library(BBI)          # Benthic Biotic Indices
1730891341626:library(kableExtra)   # Table formatting
1730891341952:# Step 1: Check if df_result is loaded and has required columns
1730891341952:if (!exists("df_result")) {
1730891341952:stop("df_result is not defined. Please load or create this data frame before running the script.")
1730891341952:}
1730891342284:required_columns <- c("station", "year", "species", "adjusted_density")
1730891342651:missing_columns <- setdiff(required_columns, names(df_result))
1730891342935:if (length(missing_columns) > 0) {
1730891342935:stop("The following required columns are missing from df_result: ", paste(missing_columns, collapse = ", "))
1730891342935:}
1730891343360:# Step 2: Summarize and reshape data
1730891343360:# Group data by station, year, and species, then sum the adjusted densities
1730891343361:species_data <- df_result %>%
1730891343361:group_by(station, year, species) %>%
1730891343361:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730891343361:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1730891344814:# Check the reshaped data
1730891344815:print("Species Data after reshaping:")
1730891345329:print(head(species_data))
1730891347150:# Step 3: Separate environmental and species data
1730891347150:env_data <- species_data %>%
1730891347150:select(station, year)
1730891349285:# Check the environmental data
1730891349285:print("Environmental Data:")
1730891349569:print(head(env_data))
1730891389174:# Run data preparation
1730891389174:prepared_data <- prepare_data(df_result)
1730891395976:prepared_data
1730891404686:species_data
1730891413790:unique(species_data$station)
1730891419496:unique(species_data$year)
1730891529080:# Function to summarize one comparison without adding ecological group
1730891529080:summarize_comparison <- function(comparison_data, df_result, year1, year2) {
1730891529080:# Extract species names and cumulative contributions from comparison_data
1730891529081:species_names <- names(comparison_data)
1730891529081:cumulative_contributions <- unname(comparison_data)
1730891529081:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730891529081:# Debugging: Print the names and contributions
1730891529081:cat("Species Names:", species_names, "\n")
1730891529082:cat("Cumulative Contributions:", cumulative_contributions, "\n")
1730891529082:# Calculate abundance changes between years
1730891529082:abundance_changes <- sapply(species_names, function(species) {
1730891529082:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730891529083:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730891529083:change <- abundance_year2 - abundance_year1
1730891529083:return(change)
1730891529083:})
1730891529084:# Create data frame without ecological group
1730891529084:df <- data.frame(
1730891529084:Species = species_names,
1730891529084:Cumulative_Percent = cumulative_contributions * 100,
1730891529084:Individual_Percent = individual_contributions * 100,
1730891529085:Abundance_Change = abundance_changes
1730891529085:)
1730891529085:# Debugging: Print the data frame after summarization
1730891529085:print(df)
1730891529086:return(df)
1730891529086:}
1730891544087:summarize_comparison <- function(comparison_data, df_result, year1, year2) {
1730891544088:# Debugging: Check the structure of comparison_data
1730891544088:cat("Structure of comparison_data:\n")
1730891544088:str(comparison_data)
1730891544088:# If comparison_data is a list with species names as keys
1730891544089:if (is.list(comparison_data)) {
1730891544089:# Extract species names and cumulative contributions from inner list
1730891544089:species_names <- names(comparison_data)
1730891544089:cumulative_contributions <- sapply(comparison_data, function(x) x)  # Unlist contributions safely
1730891544090:# Calculate individual contributions as differences in cumulative contributions
1730891544090:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730891544090:# Debugging: Print species names and cumulative contributions
1730891544090:cat("Species Names:\n")
1730891544090:print(species_names)
1730891544090:cat("Cumulative Contributions:\n")
1730891544091:print(cumulative_contributions)
1730891544091:} else {
1730891544091:stop("Unexpected structure in comparison_data: Expected list with species names.")
1730891544091:}
1730891553870:# Calculate abundance changes between years
1730891553871:abundance_changes <- sapply(species_names, function(species) {
1730891553871:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730891553871:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730891553871:change <- abundance_year2 - abundance_year1
1730891553872:return(change)
1730891553872:})
1730891553872:# Create data frame without ecological group
1730891553872:df <- data.frame(
1730891553872:Species = species_names,
1730891553873:Cumulative_Percent = as.numeric(cumulative_contributions) * 100,
1730891553873:Individual_Percent = as.numeric(individual_contributions) * 100,
1730891553873:Abundance_Change = abundance_changes
1730891553873:)
1730891553874:# Debugging: Print the data frame after summarization
1730891553874:print(df)
1730891553874:return(df)
1730891553874:}
1730891561074:summarize_comparison(sequential_simper[[i]][[1]], df_result, year1, year2)
1730891608048:summarize_comparison <- function(comparison_data, df_result, year1, year2) {
1730891608049:# Extract cumulative contributions from comparison_data$cusum
1730891608049:cumulative_contributions <- comparison_data$cusum
1730891608049:species_names <- names(cumulative_contributions)
1730891608050:# Ensure cumulative_contributions is numeric
1730891608050:if (!is.numeric(cumulative_contributions)) {
1730891608050:stop("cumulative_contributions is not numeric; check data structure.")
1730891608050:}
1730891608050:# Calculate individual contributions as differences in cumulative contributions
1730891608050:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730891608051:# Debugging: Print species names and cumulative contributions
1730891608051:cat("Species Names:\n")
1730891608051:print(species_names)
1730891608051:cat("Cumulative Contributions:\n")
1730891608051:print(cumulative_contributions)
1730891608052:# Calculate abundance changes between years
1730891608052:abundance_changes <- sapply(species_names, function(species) {
1730891608052:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730891608052:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730891608052:change <- abundance_year2 - abundance_year1
1730891608052:return(change)
1730891608053:})
1730891608053:# Create data frame without ecological group
1730891608053:df <- data.frame(
1730891608053:Species = species_names,
1730891608053:Cumulative_Percent = cumulative_contributions * 100,
1730891608053:Individual_Percent = individual_contributions * 100,
1730891608054:Abundance_Change = abundance_changes
1730891608054:)
1730891608054:# Debugging: Print the data frame after summarization
1730891608054:print(df)
1730891608055:return(df)
1730891608055:}
1730891613590:summarize_comparison(sequential_simper[[i]][[1]], df_result, year1, year2)
1730891640086:i
1730891688190:# Process sequential comparisons with debugging information
1730891688190:print("Sequential Year Comparisons:")
1730891689726:for (i in seq_along(sequential_simper)) {
1730891689727:comparison_name <- names(sequential_simper)[i]
1730891689727:years <- unlist(strsplit(comparison_name, "_"))
1730891689727:year1 <- as.numeric(years[1])
1730891689727:year2 <- as.numeric(years[2])
1730891689727:cat(sprintf("\nComparison: %s\n", comparison_name))
1730891689728:# Step 1: Summarize the comparison without ecological group
1730891689728:summary_data <- summarize_comparison(sequential_simper[[i]], df_result, year1, year2)
1730891689728:# Step 2: Add ecological group information from species_groups
1730891689728:summary_data_with_groups <- add_ecological_group(summary_data, species_groups)
1730891689729:# Step 3: Filter and display the results
1730891689729:filtered_summary <- summary_data_with_groups %>%
1730891689729:filter(Cumulative_Percent <= 70)
1730891689729:# Debugging: Check if filtered summary is empty
1730891689729:if (nrow(filtered_summary) == 0) {
1730891689730:cat("No rows meet the Cumulative_Percent filter threshold for this comparison.\n")
1730891689730:} else {
1730891689730:print(kableExtra::kbl(filtered_summary,
1730891689730:caption = sprintf("Species contributions for %s", comparison_name),
1730891689730:digits = 2))
1730891689730:}
1730891689731:}
1730891743791:for (i in seq_along(sequential_simper)) {
1730891743791:comparison_name <- names(sequential_simper)[i]
1730891743791:years <- unlist(strsplit(comparison_name, "_"))
1730891743791:year1 <- as.numeric(years[1])
1730891743791:year2 <- as.numeric(years[2])
1730891743792:cat(sprintf("\nComparison: %s\n", comparison_name))
1730891743792:# Step 1: Summarize the comparison without ecological group
1730891743792:summary_data <- summarize_comparison(sequential_simper[[i]], df_result, year1, year2)
1730891743793:# Step 2: Add ecological group information from species_groups
1730891743793:summary_data_with_groups <- add_ecological_group(summary_data, species_groups)
1730891743793:# Step 3: Filter and display the results
1730891743793:filtered_summary <- summary_data_with_groups %>%
1730891743793:filter(Cumulative_Percent <= 70)
1730891743794:# Debugging: Check if filtered summary is empty
1730891743794:if (nrow(filtered_summary) == 0) {
1730891743794:cat("No rows meet the Cumulative_Percent filter threshold for this comparison.\n")
1730891743794:} else {
1730891743794:print(kableExtra::kbl(filtered_summary,
1730891743794:caption = sprintf("Species contributions for %s", comparison_name),
1730891743795:digits = 2))
1730891743795:}
1730891743795:}
1730891790680:summarize_comparison <- function(comparison_data, df_result, year1, year2) {
1730891790681:# Extract cumulative contributions from comparison_data$cusum
1730891790681:cumulative_contributions <- comparison_data$cusum
1730891790681:species_names <- names(cumulative_contributions)
1730891790681:# Debugging: Check structure of cumulative_contributions
1730891790681:cat("Structure of cumulative_contributions:\n")
1730891790681:str(cumulative_contributions)
1730891790682:# Convert cumulative_contributions to numeric if needed
1730891790682:if (!is.numeric(cumulative_contributions)) {
1730891790682:cumulative_contributions <- as.numeric(cumulative_contributions)
1730891790682:}
1730891790682:# Recheck for numeric
1730891790683:if (any(is.na(cumulative_contributions))) {
1730891790683:stop("Conversion resulted in NA values, indicating non-numeric data.")
1730891790683:}
1730891790683:# Calculate individual contributions as differences in cumulative contributions
1730891790683:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730891790684:# Debugging: Print species names and cumulative contributions
1730891790684:cat("Species Names:\n")
1730891790684:print(species_names)
1730891790684:cat("Cumulative Contributions:\n")
1730891790684:print(cumulative_contributions)
1730891790685:# Calculate abundance changes between years
1730891790685:abundance_changes <- sapply(species_names, function(species) {
1730891790685:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730891790685:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730891790685:change <- abundance_year2 - abundance_year1
1730891790685:return(change)
1730891790686:})
1730891790686:# Create data frame without ecological group
1730891790686:df <- data.frame(
1730891790686:Species = species_names,
1730891790687:Cumulative_Percent = cumulative_contributions * 100,
1730891790687:Individual_Percent = individual_contributions * 100,
1730891790687:Abundance_Change = abundance_changes
1730891790687:)
1730891790687:# Debugging: Print the data frame after summarization
1730891790688:print(df)
1730891790688:return(df)
1730891790689:}
1730891793952:print("Sequential Year Comparisons:")
1730891793953:for (i in seq_along(sequential_simper)) {
1730891793953:comparison_name <- names(sequential_simper)[i]
1730891793953:years <- unlist(strsplit(comparison_name, "_"))
1730891793953:year1 <- as.numeric(years[1])
1730891793953:year2 <- as.numeric(years[2])
1730891793954:cat(sprintf("\nComparison: %s\n", comparison_name))
1730891793954:# Step 1: Summarize the comparison without ecological group
1730891793954:summary_data <- summarize_comparison(sequential_simper[[i]], df_result, year1, year2)
1730891793954:# Step 2: Add ecological group information from species_groups
1730891793955:summary_data_with_groups <- add_ecological_group(summary_data, species_groups)
1730891793955:# Step 3: Filter and display the results
1730891793955:filtered_summary <- summary_data_with_groups %>%
1730891793955:filter(Cumulative_Percent <= 70)
1730891793956:# Debugging: Check if filtered summary is empty
1730891793956:if (nrow(filtered_summary) == 0) {
1730891793956:cat("No rows meet the Cumulative_Percent filter threshold for this comparison.\n")
1730891793956:} else {
1730891793956:print(kableExtra::kbl(filtered_summary,
1730891793956:caption = sprintf("Species contributions for %s", comparison_name),
1730891793957:digits = 2))
1730891793957:}
1730891793957:}
1730892110872:species_data
1730892111026:str(env_data)
1730892111036:str(species_matrix)
1730892151182:# Function to summarize one comparison without adding ecological group
1730892151182:summarize_comparison <- function(comparison_data, df_result, year1, year2) {
1730892151183:# Extract cumulative contributions from comparison_data$cusum
1730892151183:cumulative_contributions <- comparison_data$cusum
1730892151183:species_names <- names(cumulative_contributions)
1730892151183:# Ensure cumulative_contributions is numeric
1730892151183:if (!is.numeric(cumulative_contributions)) {
1730892151183:stop("cumulative_contributions is not numeric; check data structure.")
1730892151184:}
1730892151184:# Calculate individual contributions as differences in cumulative contributions
1730892151184:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730892151184:# Debugging: Print species names and cumulative contributions
1730892151185:cat("Species Names:\n")
1730892151185:print(species_names)
1730892151185:cat("Cumulative Contributions:\n")
1730892151185:print(cumulative_contributions)
1730892151185:# Calculate abundance changes between years
1730892151185:abundance_changes <- sapply(species_names, function(species) {
1730892151186:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730892151186:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730892151186:change <- abundance_year2 - abundance_year1
1730892151186:return(change)
1730892151187:})
1730892151187:# Create data frame without ecological group
1730892151187:df <- data.frame(
1730892151188:Species = species_names,
1730892151188:Cumulative_Percent = cumulative_contributions * 100,
1730892151188:Individual_Percent = individual_contributions * 100,
1730892151188:Abundance_Change = abundance_changes
1730892151189:)
1730892151189:# Debugging: Print the data frame after summarization
1730892151189:print(df)
1730892151190:return(df)
1730892151190:}
1730892151856:# Process sequential comparisons with debugging information
1730892151856:# Process sequential comparisons with debugging information
1730892151856:print("Sequential Year Comparisons:")
1730892152583:for (i in seq_along(sequential_simper)) {
1730892152584:comparison_name <- names(sequential_simper)[i]
1730892152584:years <- unlist(strsplit(comparison_name, "_"))
1730892152584:year1 <- as.numeric(years[1])
1730892152584:year2 <- as.numeric(years[2])
1730892152584:cat(sprintf("\nComparison: %s\n", comparison_name))
1730892152585:# Step 1: Summarize the comparison without ecological group
1730892152585:summary_data <- summarize_comparison(sequential_simper[[i]], df_result, year1, year2)
1730892152585:# Step 2: Add ecological group information from species_groups
1730892152585:summary_data_with_groups <- add_ecological_group(summary_data, species_groups)
1730892152586:# Step 3: Filter and display the results
1730892152586:filtered_summary <- summary_data_with_groups %>%
1730892152586:filter(Cumulative_Percent <= 70)
1730892152586:# Debugging: Check if filtered summary is empty
1730892152587:if (nrow(filtered_summary) == 0) {
1730892152587:cat("No rows meet the Cumulative_Percent filter threshold for this comparison.\n")
1730892152587:} else {
1730892152587:print(kableExtra::kbl(filtered_summary,
1730892152587:caption = sprintf("Species contributions for %s", comparison_name),
1730892152588:digits = 2))
1730892152588:}
1730892152588:}
1730892365582:comparison_data$cusum
1730892392087:str(comparison_data)
1730892491365:sequential_simper
1730892495559:names(sequential_simper)[i]
1730892517822:names(sequential_simper)
1730892530534:summarize_comparison(sequential_simper[[i]], df_result, year1, year2)
1730892582294:sequential_simper
1730892594055:sequential_simper[[i]]
1730892637463:# Step 1: Summarize the comparison without ecological group
1730892637463:summary_data <- summarize_comparison(sequential_simper[[i]], df_result, year1, year2)
1730892647645:sequential_simper
1730892654334:sequential_simper[[i]]
1730892680535:df_result
1730892690837:year1
1730892693150:year2
1730892810087:summarize_comparison(sequential_simper[[i]], df_result, year1, year2)
1730892865655:# Function to summarize one comparison without adding ecological group
1730892865655:summarize_comparison <- function(comparison_data, df_result, year1, year2) {
1730892865655:# Extract cumulative contributions from comparison_data$cusum
1730892865655:cumulative_contributions <- as.numeric(unlist(comparison_data$cusum))
1730892865655:species_names <- names(cumulative_contributions)
1730892865656:# Ensure cumulative_contributions is numeric
1730892865656:if (!is.numeric(cumulative_contributions)) {
1730892865656:stop("cumulative_contributions is not numeric; check data structure.")
1730892865656:}
1730892865656:# Calculate individual contributions as differences in cumulative contributions
1730892865657:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730892865657:# Debugging: Print species names and cumulative contributions
1730892865657:cat("Species Names:\n")
1730892865657:print(species_names)
1730892865657:cat("Cumulative Contributions:\n")
1730892865658:print(cumulative_contributions)
1730892865658:# Calculate abundance changes between years
1730892865658:abundance_changes <- sapply(species_names, function(species) {
1730892865658:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730892865659:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730892865659:change <- abundance_year2 - abundance_year1
1730892865659:return(change)
1730892865659:})
1730892865659:# Create data frame without ecological group
1730892865660:df <- data.frame(
1730892865660:Species = species_names,
1730892865660:Cumulative_Percent = cumulative_contributions * 100,
1730892865660:Individual_Percent = individual_contributions * 100,
1730892865660:Abundance_Change = abundance_changes
1730892865660:)
1730892865661:# Debugging: Print the data frame after summarization
1730892865661:print(df)
1730892865661:return(df)
1730892865662:}
1730892870662:summarize_comparison(sequential_simper[[i]], df_result, year1, year2)
1730893044963:# Function to summarize one comparison without adding ecological group
1730893044963:summarize_comparison <- function(comparison_data, df_result, year1, year2) {
1730893044963:# Check if cusum exists and has data
1730893044963:if (is.null(comparison_data$cusum) || length(comparison_data$cusum) == 0) {
1730893044963:stop("`cusum` in `comparison_data` is empty. Check the data structure of `comparison_data`.")
1730893044963:}
1730893044964:# Extract cumulative contributions from comparison_data$cusum
1730893044964:cumulative_contributions <- as.numeric(unlist(comparison_data$cusum))
1730893044964:species_names <- names(cumulative_contributions)
1730893044964:# Ensure cumulative_contributions is numeric
1730893044965:if (!is.numeric(cumulative_contributions)) {
1730893044965:stop("cumulative_contributions is not numeric; check data structure.")
1730893044965:}
1730893044965:# Check if species names are available
1730893044965:if (is.null(species_names) || length(species_names) == 0) {
1730893044966:stop("Species names are missing; check the structure of comparison_data$cusum.")
1730893044966:}
1730893044966:# Calculate individual contributions as differences in cumulative contributions
1730893044966:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730893044967:# Debugging: Print species names and cumulative contributions
1730893044967:cat("Species Names:\n")
1730893044967:print(species_names)
1730893044967:cat("Cumulative Contributions:\n")
1730893044967:print(cumulative_contributions)
1730893044967:# Calculate abundance changes between years
1730893044968:abundance_changes <- sapply(species_names, function(species) {
1730893044968:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730893044968:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730893044968:change <- abundance_year2 - abundance_year1
1730893044968:return(change)
1730893044968:})
1730893044969:# Create data frame without ecological group
1730893044969:df <- data.frame(
1730893044969:Species = species_names,
1730893044969:Cumulative_Percent = cumulative_contributions * 100,
1730893044970:Individual_Percent = individual_contributions * 100,
1730893044970:Abundance_Change = abundance_changes
1730893044970:)
1730893044970:# Debugging: Print the data frame after summarization
1730893044971:print(df)
1730893044971:return(df)
1730893044971:}
1730893052389:summarize_comparison(sequential_simper[[i]], df_result, year1, year2)
1730893102653:sequential_simper[[i]]
1730893173717:simper(year_data, group = year_groups, permutations = 999)
1730893213167:sequential_simper[[i]]
1730893217192:sequential_simper[[i]]$1999_2013
1730893241175:sequential_simper[i]
1730893249999:sequential_simper[i]$1999_2013
1730893271600:sequential_simper[[i]]
1730893282064:summarize_comparison(sequential_simper[[i]], df_result, year1, year2)
1730893521231:# Summarize and reshape data
1730893521231:species_data <- df_result %>%
1730893521231:group_by(station, year, species) %>%
1730893521231:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1730893521231:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1730893525032:# Separate environmental and species data
1730893525032:env_data <- data.frame(
1730893525032:Station = factor(species_data$station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1730893525032:Year = factor(species_data$year)
1730893525032:)
1730893526239:# Create species matrix (only numeric columns)
1730893526239:species_matrix <- species_data %>%
1730893526239:select(-station, -year) %>%
1730893526239:as.matrix()
1730893527543:# Perform SIMPER analysis for year-to-year comparisons
1730893527543:years <- sort(unique(as.character(env_data$Year)))
1730893527940:sequential_simper <- list()
1730893533174:for(i in 1:(length(years)-1)) {
1730893533174:# Select data for consecutive years
1730893533174:year_pair <- years[i:(i+1)]
1730893533175:year_data <- species_matrix[env_data$Year %in% year_pair, ]
1730893533175:year_groups <- env_data$Year[env_data$Year %in% year_pair]
1730893533175:# Perform SIMPER analysis for this pair of years
1730893533175:comparison_name <- paste(year_pair[1], year_pair[2], sep="_")
1730893533175:sequential_simper[[comparison_name]] <- simper(year_data, group = year_groups, permutations = 999)
1730893533176:}
1730893543142:sequential_simper
1730893556630:# Baseline comparison (if 1999 data exists)
1730893556630:if ("1999" %in% years) {
1730893556630:baseline_data <- species_matrix[env_data$Year %in% c("1999", years), ]
1730893556630:baseline_groups <- env_data$Year[env_data$Year %in% c("1999", years)]
1730893556630:simper_baseline <- simper(baseline_data, group = baseline_groups, permutations = 999)
1730893556630:}
1730893576192:# Calculate Benthic Biotic Indices (BBI) for each year and station
1730893576192:calculate_biotic_indices <- function(data) {
1730893576192:required_cols <- c("year", "station", "species", "adjusted_density")
1730893576193:stopifnot(
1730893576193:"Missing required columns" = all(required_cols %in% colnames(data)),
1730893576193:"No data provided" = nrow(data) > 0,
1730893576193:"Negative density values found" = all(data$adjusted_density >= 0),
1730893576193:"Missing values found" = !any(is.na(data$adjusted_density))
1730893576193:)
1730893576194:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1730893576194:indices_list <- list()
1730893576194:species_ambi_mapping <- data.frame(species = character(), AMBI = numeric())
1730893576194:for (current_year in sort(unique(data$year))) {
1730893576194:year_data <- data %>%
1730893576195:filter(year == current_year, station %in% target_stations) %>%
1730893576195:group_by(station, species) %>%
1730893576195:summarise(density = sum(adjusted_density), .groups = 'drop') %>%
1730893576195:pivot_wider(names_from = station, values_from = density, values_fill = 0)
1730893576195:bbi_results <- BBI(year_data)
1730893576196:# Extract and accumulate species-AMBI mappings
1730893576196:current_species_groups <- data.frame(
1730893576196:species = bbi_results$taxa[, 1],
1730893576196:AMBI = bbi_results$table$AMBI
1730893576196:)
1730893576197:# Combine with existing mappings, keeping the first non-NA AMBI value for each species
1730893576197:species_ambi_mapping <- bind_rows(species_ambi_mapping, current_species_groups) %>%
1730893576197:group_by(species) %>%
1730893576197:summarise(AMBI = first(na.omit(AMBI))) %>%
1730893576198:ungroup()
1730893576198:indices_list[[as.character(current_year)]] <- list(
1730893576198:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1730893576199:classification = bbi_results$BBIclass,
1730893576199:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1730893576199:)
1730893576199:}
1730893576200:# Add the species-AMBI mapping to the return list
1730893576200:indices_list$species_groups <- species_ambi_mapping
1730893576200:return(indices_list)
1730893576201:}
1730893580007:# Use the result dataframe that already has the correct density calculations
1730893580007:biotic_indices <- calculate_biotic_indices(df_result)
1730893585968:biotic_indices
1730893594134:# Extract species groups from the accumulated mappings
1730893594134:species_groups <- biotic_indices$species_groups
1730893597904:species_groups
1730893634719:summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups)
1730893669701:# Function to summarize one comparison and add ecological group
1730893669701:summarize_one_comparison <- function(comparison_data, df_result, year1, year2, species_groups) {
1730893669702:species_names <- names(comparison_data$cusum)
1730893669702:cumulative_contributions <- unname(comparison_data$cusum)
1730893669702:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730893669702:abundance_changes <- sapply(species_names, function(species) {
1730893669702:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730893669703:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730893669703:change <- abundance_year2 - abundance_year1
1730893669703:return(change)
1730893669703:})
1730893669703:ecological_groups <- sapply(species_names, function(species) {
1730893669704:match_index <- match(species, species_groups$species)
1730893669704:if (!is.na(match_index)) {
1730893669704:return(species_groups$AMBI[match_index])
1730893669704:} else {
1730893669704:return(NA)
1730893669705:}
1730893669705:})
1730893669705:df <- data.frame(
1730893669705:Species = species_names,
1730893669705:Cumulative_Percent = cumulative_contributions * 100,
1730893669705:Individual_Percent = individual_contributions * 100,
1730893669706:Abundance_Change = abundance_changes,
1730893669706:Ecological_Group = ecological_groups
1730893669706:)
1730893669706:return(df)
1730893669707:}
1730893678399:summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups)
1730893690838:sequential_simper[[i]]
1730893700934:sequential_simper[[i]]$2016_2017
1730893707967:df_result
1730893713847:year1
1730893715758:year2
1730893717310:species_groups
1730893736456:seq_along(sequential_simper)
1730893744941:names(sequential_simper)[i]
1730893761055:comparison_name <- names(sequential_simper)[i]
1730893765222:unlist(strsplit(comparison_name, "_"))
1730893770757:years <- unlist(strsplit(comparison_name, "_"))
1730893770758:year1 <- years[1]
1730893770758:year2 <- years[2]
1730893774366:year1
1730893777230:year2
1730893779495:species_groups
1730893787039:summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups)
1730893798536:sequential_simper[[i]]
1730893815269:str(sequential_simper[[i]])
1730893862102:names(sequential_simper[[i]]$cusum)
1730893921541:sequential_simper[[i]]$species
1730893940415:str(sequential_simper[[i]])
1730893970065:sequential_simper[[i]][["2016_2017"]]$species
1730893984767:years
1730893990935:comparison_name
1730894096254:5*150
1730894239505:sequential_simper[[i]][["2016_2017"]]$cusum
1730894458568:sequential_simper[[i]][["2016_2017"]]$cusumyear_pair
1730894460326:year_pair
1730894467631:year_data
1730894470189:year_groups
1730894474992:year_pair
1730894557451:# Function to summarize one comparison and add ecological group
1730894557451:summarize_one_comparison <- function(comparison_data, df_result, year1, year2, species_groups) {
1730894557452:# Construct the dynamic key
1730894557452:comparison_key <- paste(year1, year2, sep = "_")
1730894557452:# Access cusum and other components dynamically
1730894557452:species_names <- names(comparison_data[[comparison_key]]$cusum)
1730894557452:cumulative_contributions <- unname(comparison_data[[comparison_key]]$cusum)
1730894557453:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1730894557453:abundance_changes <- sapply(species_names, function(species) {
1730894557453:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1730894557454:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1730894557454:change <- abundance_year2 - abundance_year1
1730894557454:return(change)
1730894557454:})
1730894557454:ecological_groups <- sapply(species_names, function(species) {
1730894557455:match_index <- match(species, species_groups$species)
1730894557455:if (!is.na(match_index)) {
1730894557455:return(species_groups$AMBI[match_index])
1730894557455:} else {
1730894557455:return(NA)
1730894557455:}
1730894557456:})
1730894557456:df <- data.frame(
1730894557456:Species = species_names,
1730894557456:Cumulative_Percent = cumulative_contributions * 100,
1730894557457:Individual_Percent = individual_contributions * 100,
1730894557457:Abundance_Change = abundance_changes,
1730894557457:Ecological_Group = ecological_groups
1730894557457:)
1730894557457:return(df)
1730894557458:}
1730894563158:summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups)
1730894576848:# Process sequential comparisons
1730894576848:print("Sequential Year Comparisons:")
1730894578320:for(i in seq_along(sequential_simper)) {
1730894578320:comparison_name <- names(sequential_simper)[i]
1730894578320:years <- unlist(strsplit(comparison_name, "_"))
1730894578321:year1 <- years[1]
1730894578321:year2 <- years[2]
1730894578321:cat(sprintf("\nComparison: %s\n", comparison_name))
1730894578321:# Process this comparison
1730894578322:summary_data <- summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups) %>%
1730894578322:filter(Cumulative_Percent <= 70)
1730894578322:rownames(summary_data) <- NULL
1730894578322:if(nrow(summary_data) > 0) {
1730894578322:print(kableExtra::kbl(summary_data,
1730894578323:caption = sprintf("Species contributions for %s", comparison_name),
1730894578323:digits = 2))
1730894578323:} else {
1730894578323:cat("No species met the contribution threshold for this comparison.\n")
1730894578323:}
1730894578324:}
1730894601327:for(i in seq_along(sequential_simper)) {
1730894601328:comparison_name <- names(sequential_simper)[i]
1730894601328:years <- unlist(strsplit(comparison_name, "_"))
1730894601328:year1 <- years[1]
1730894601328:year2 <- years[2]
1730894601329:cat(sprintf("\nComparison: %s\n", comparison_name))
1730894601329:# Process this comparison
1730894601329:summary_data <- summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups) %>%
1730894601329:filter(Cumulative_Percent <= 70)
1730894601329:rownames(summary_data) <- NULL
1730894601329:if(nrow(summary_data) > 0) {
1730894601330:print(kableExtra::kbl(summary_data,
1730894601330:caption = sprintf("Species contributions for %s", comparison_name),
1730894601330:digits = 2))
1730894601330:} else {
1730894601330:cat("No species met the contribution threshold for this comparison.\n")
1730894601330:}
1730894601331:}
1730894604424:# Process baseline comparisons (1999)
1730894604424:if(exists("simper_baseline")) {
1730894604424:print("\nComparisons with 1999 Baseline:")
1730894604424:baseline_comps <- names(simper_baseline)[grep("1999_", names(simper_baseline))]
1730894604425:for(comp_name in baseline_comps) {
1730894604425:years <- unlist(strsplit(comp_name, "_"))
1730894604425:year1 <- as.numeric(years[1])
1730894604425:year2 <- as.numeric(years[2])
1730894604425:cat(sprintf("\n%s:\n", comp_name))
1730894604426:summary_data <- summarize_one_comparison(simper_baseline[[comp_name]], df_result, year1, year2, species_groups) %>%
1730894604426:filter(Cumulative_Percent <= 70)
1730894604426:rownames(summary_data) <- NULL
1730894604426:print(kableExtra::kbl(summary_data,
1730894604426:caption = sprintf("Species contributions for %s", comp_name),
1730894604426:digits = 2))
1730894604427:}
1730894604427:}
1730894728704:simper_baseline
1730894735574:names(simper_baseline)[grep("1999_", names(simper_baseline))]
1730894755862:simper_baseline[[comp_name]
1730894759696:]
1730902318752:5+5
1730902343503:simper_baseline
1730902364312:names(simper_baseline)
1730903568610:summary_data <- summarize_one_comparison(sequential_simper[["1999_2017"]], df_result, 1999, 2017, species_groups) %>%
1730903568610:filter(Cumulative_Percent <= 70)
1730903568613:rownames(summary_data) <- NULL
1730903572783:summary_data
1730903583583:sequential_simper[["1999_2017"]]
1730903587568:i
1730903782299:combn(years, 2, simplify = FALSE)
1730903784505:combn(years, 2, simplify = FALSE)
1730903785217:combn(years, 2, simplify = FALSE)
1730903795584:?combn
1730903819178:years
1730903971081:str(years)
1730903985001:c("1999","2017")
1730903992316:# Generate all possible pairs of years for arbitrary comparison
1730903992316:arbitrary_year_pairs <- combn(c("1999","2017"), 2, simplify = FALSE)
1730903995067:arbitrary_year_pairs
1730903997906:# Initialize a new list to store results for arbitrary year pairs
1730903997906:sequential_simper_arbitrary <- list()
1730903999090:# New loop for arbitrary year pairs
1730903999090:for (pair in arbitrary_year_pairs) {
1730903999090:# Extract the two years from the current pair
1730903999090:year1 <- pair[1]
1730903999090:year2 <- pair[2]
1730903999091:# Select data for these two specific years
1730903999091:year_data <- species_matrix[env_data$Year %in% c(year1, year2), ]
1730903999091:year_groups <- env_data$Year[env_data$Year %in% c(year1, year2)]
1730903999091:# Generate a unique name for this comparison
1730903999091:comparison_name <- paste(year1, year2, sep = "_")
1730903999092:# Perform SIMPER analysis for this arbitrary pair of years
1730903999092:sequential_simper_arbitrary[[comparison_name]] <- simper(year_data, group = year_groups, permutations = 999)
1730903999092:}
1730904008891:sequential_simper_arbitrary
1730904039906:print(kableExtra::kbl(sequential_simper_arbitrary,
1730904039906:caption = sprintf("Species contributions for %s", comparison_name),
1730904039906:digits = 2))
1730904124658:year1
1730904132299:for(i in seq_along(sequential_simper_arbitrary)) {
1730904132299:# Retrieve the comparison name for the arbitrary pair
1730904132300:comparison_name <- names(sequential_simper_arbitrary)[i]
1730904132300:years <- unlist(strsplit(comparison_name, "_"))
1730904132300:year1 <- years[1]
1730904132300:year2 <- years[2]
1730904132300:cat(sprintf("\nComparison: %s\n", comparison_name))
1730904132301:# Process this arbitrary comparison
1730904132301:summary_data <- summarize_one_comparison(sequential_simper_arbitrary[[i]], df_result, year1, year2, species_groups) %>%
1730904132301:filter(Cumulative_Percent <= 70)
1730904132301:rownames(summary_data) <- NULL
1730904132301:if(nrow(summary_data) > 0) {
1730904132302:print(kableExtra::kbl(summary_data,
1730904132302:caption = sprintf("Species contributions for %s", comparison_name),
1730904132302:digits = 2))
1730904132302:} else {
1730904132302:cat("No species met the contribution threshold for this comparison.\n")
1730904132302:}
1730904132303:}
1730904280355:write.csv(summary_data, file = file_name, row.names = FALSE)
1730904353355:for(i in seq_along(sequential_simper_arbitrary)) {
1730904353355:# Retrieve the comparison name for the arbitrary pair
1730904353355:comparison_name <- names(sequential_simper_arbitrary)[i]
1730904353355:years <- unlist(strsplit(comparison_name, "_"))
1730904353356:year1 <- years[1]
1730904353356:year2 <- years[2]
1730904353356:cat(sprintf("\nComparison: %s\n", comparison_name))
1730904353356:# Process this arbitrary comparison
1730904353356:summary_data <- summarize_one_comparison(sequential_simper_arbitrary[[i]], df_result, year1, year2, species_groups) %>%
1730904353357:filter(Cumulative_Percent <= 70)
1730904353357:rownames(summary_data) <- NULL
1730904353357:if(nrow(summary_data) > 0) {
1730904353357:# Export the summary table to a CSV file
1730904353358:file_name <- sprintf("species_contributions_%s.csv", comparison_name)
1730904353358:write.csv(summary_data, file = file_name, row.names = FALSE)
1730904353358:print(kableExtra::kbl(summary_data,
1730904353358:caption = sprintf("Species contributions for %s", comparison_name),
1730904353358:digits = 2))
1730904353358:} else {
1730904353359:cat("No species met the contribution threshold for this comparison.\n")
1730904353359:}
1730904353359:}
1730905108380:print("Arbitrary Year Comparisons:")
1730905112851:for(i in seq_along(sequential_simper_arbitrary)) {
1730905112851:# Retrieve the comparison name for the arbitrary pair
1730905112851:comparison_name <- names(sequential_simper_arbitrary)[i]
1730905112851:years <- unlist(strsplit(comparison_name, "_"))
1730905112852:year1 <- years[1]
1730905112852:year2 <- years[2]
1730905112852:cat(sprintf("\nComparison: %s\n", comparison_name))
1730905112852:# Process this arbitrary comparison
1730905112852:summary_data <- summarize_one_comparison(sequential_simper_arbitrary[[i]], df_result, year1, year2, species_groups) %>%
1730905112852:filter(Cumulative_Percent <= 70)
1730905112853:rownames(summary_data) <- NULL
1730905112853:summary_data <- summary_data %>% mutate_if(is.numeric, ~ round(.x, 2))
1730905112853:if(nrow(summary_data) > 0) {
1730905112854:# Export the summary table to a CSV file
1730905112854:file_name <- sprintf("species_contributions_%s.csv", comparison_name)
1730905112854:write.csv(summary_data, file = file_name, row.names = FALSE)
1730905112854:print(kableExtra::kbl(summary_data,
1730905112854:caption = sprintf("Species contributions for %s", comparison_name),
1730905112855:digits = 2))
1730905112855:} else {
1730905112855:cat("No species met the contribution threshold for this comparison.\n")
1730905112855:}
1730905112855:}
1730905497069:print("Sequential Year Comparisons:")
1730905497069:for(i in seq_along(sequential_simper)) {
1730905497069:comparison_name <- names(sequential_simper)[i]
1730905497070:years <- unlist(strsplit(comparison_name, "_"))
1730905497070:year1 <- years[1]
1730905497070:year2 <- years[2]
1730905497070:cat(sprintf("\nComparison: %s\n", comparison_name))
1730905497070:# Process this comparison
1730905497071:summary_data <- summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups) %>%
1730905497071:filter(Cumulative_Percent <= 70) %>%
1730905497071:mutate_if(is.numeric, ~ round(.x, 2))  # Round all numeric columns to 2 decimal places
1730905497071:rownames(summary_data) <- NULL
1730905497072:if(nrow(summary_data) > 0) {
1730905497072:# Export the summary data to a CSV file with a descriptive filename
1730905497072:file_name <- sprintf("species_contributions_sequential_%s_%s.csv", year1, year2)
1730905497072:write.csv(summary_data, file = file_name, row.names = FALSE)
1730905497073:# Print the table in console for reference
1730905497073:print(kableExtra::kbl(summary_data,
1730905497073:caption = sprintf("Species contributions for %s", comparison_name),
1730905497073:digits = 2))
1730905497074:cat(sprintf("Exported summary data for %s to %s\n", comparison_name, file_name))
1730905497074:} else {
1730905497074:cat("No species met the contribution threshold for this comparison.\n")
1730905497074:}
1730905497075:}
1730905925130:print(
1730905925130:kableExtra::kbl(
1730905925130:summary_data,
1730905925130:caption = sprintf("Species contributions for %s", comparison_name),
1730905925131:digits = 2,
1730905925131:format = "html"
1730905925131:) %>%
1730905925131:kableExtra::kable_styling(
1730905925131:full_width = FALSE,
1730905925131:bootstrap_options = c("striped", "hover", "condensed", "responsive")
1730905925132:) %>%
1730905925132:kableExtra::row_spec(0, bold = TRUE, color = "white", background = "#4CAF50") %>%  # Header styling
1730905925132:kableExtra::column_spec(1, bold = TRUE, width = "5em") %>%  # First column bold
1730905925132:kableExtra::add_header_above(c(" " = 1, "Species Contributions" = ncol(summary_data) - 1))  # Custom header
1730905925132:)
1730906002473:print(
1730906002473:kableExtra::kbl(
1730906002473:summary_data,
1730906002473:caption = sprintf("Species contributions for %s", comparison_name),
1730906002474:digits = 2,
1730906002474:format = "html"
1730906002474:) %>%
1730906002474:kableExtra::kable_styling(
1730906002474:full_width = FALSE,
1730906002474:bootstrap_options = c("striped", "hover", "condensed", "responsive")
1730906002474:) %>%
1730906002474:kableExtra::row_spec(0, bold = TRUE, color = "black", background = "#e5f5e0") %>%  # Header styling
1730906002475:kableExtra::column_spec(1, bold = TRUE, width = "5em") %>%  # First column bold
1730906002475:kableExtra::add_header_above(c(" " = 1, "Species Contributions" = ncol(summary_data) - 1))  # Custom header
1730906002475:)
1730906064677:for(i in seq_along(sequential_simper_arbitrary)) {
1730906064677:# Retrieve the comparison name for the arbitrary pair
1730906064677:comparison_name <- names(sequential_simper_arbitrary)[i]
1730906064678:years <- unlist(strsplit(comparison_name, "_"))
1730906064678:year1 <- years[1]
1730906064678:year2 <- years[2]
1730906064678:cat(sprintf("\nComparison: %s\n", comparison_name))
1730906064678:# Process this arbitrary comparison
1730906064678:summary_data <- summarize_one_comparison(sequential_simper_arbitrary[[i]], df_result, year1, year2, species_groups) %>%
1730906064679:filter(Cumulative_Percent <= 70)
1730906064679:rownames(summary_data) <- NULL
1730906064679:summary_data <- summary_data %>% mutate_if(is.numeric, ~ round(.x, 2))
1730906064680:colnames(summary_data) <- gsub(" ", "<br>", colnames(summary_data))
1730906064680:if(nrow(summary_data) > 0) {
1730906064680:# Export the summary table to a CSV file
1730906064680:#file_name <- sprintf("species_contributions_%s.csv", comparison_name)
1730906064680:#write.csv(summary_data, file = file_name, row.names = FALSE)
1730906064681:print(
1730906064681:kableExtra::kbl(
1730906064681:summary_data,
1730906064681:caption = sprintf("Species contributions for %s", comparison_name),
1730906064681:digits = 2,
1730906064682:format = "html"
1730906064682:) %>%
1730906064682:kableExtra::kable_styling(
1730906064682:full_width = FALSE,
1730906064682:bootstrap_options = c("striped", "hover", "condensed", "responsive")
1730906064683:) %>%
1730906064683:kableExtra::row_spec(0, bold = TRUE, color = "black", background = "#e5f5e0") %>%  # Header styling
1730906064683:kableExtra::column_spec(1, bold = TRUE, width = "5em") %>%  # First column bold
1730906064683:kableExtra::add_header_above(c(" " = 1, "Species Contributions" = ncol(summary_data) - 1))  # Custom header
1730906064683:)
1730906064684:} else {
1730906064684:cat("No species met the contribution threshold for this comparison.\n")
1730906064684:}
1730906064684:}
1730906076953:colnames(summary_data)
1730906087652:for(i in seq_along(sequential_simper_arbitrary)) {
1730906087652:# Retrieve the comparison name for the arbitrary pair
1730906087652:comparison_name <- names(sequential_simper_arbitrary)[i]
1730906087652:years <- unlist(strsplit(comparison_name, "_"))
1730906087652:year1 <- years[1]
1730906087652:year2 <- years[2]
1730906087652:cat(sprintf("\nComparison: %s\n", comparison_name))
1730906087653:# Process this arbitrary comparison
1730906087653:summary_data <- summarize_one_comparison(sequential_simper_arbitrary[[i]], df_result, year1, year2, species_groups) %>%
1730906087653:filter(Cumulative_Percent <= 70)
1730906087653:rownames(summary_data) <- NULL
1730906087653:summary_data <- summary_data %>% mutate_if(is.numeric, ~ round(.x, 2))
1730906087653:colnames(summary_data) <- gsub("_", "<br>", colnames(summary_data))
1730906087654:if(nrow(summary_data) > 0) {
1730906087654:# Export the summary table to a CSV file
1730906087654:#file_name <- sprintf("species_contributions_%s.csv", comparison_name)
1730906087654:#write.csv(summary_data, file = file_name, row.names = FALSE)
1730906087655:print(
1730906087655:kableExtra::kbl(
1730906087655:summary_data,
1730906087655:caption = sprintf("Species contributions for %s", comparison_name),
1730906087655:digits = 2,
1730906087656:format = "html"
1730906087656:) %>%
1730906087656:kableExtra::kable_styling(
1730906087656:full_width = FALSE,
1730906087656:bootstrap_options = c("striped", "hover", "condensed", "responsive")
1730906087657:) %>%
1730906087657:kableExtra::row_spec(0, bold = TRUE, color = "black", background = "#e5f5e0") %>%  # Header styling
1730906087657:kableExtra::column_spec(1, bold = TRUE, width = "5em") %>%  # First column bold
1730906087657:kableExtra::add_header_above(c(" " = 1, "Species Contributions" = ncol(summary_data) - 1))  # Custom header
1730906087657:)
1730906087658:} else {
1730906087658:cat("No species met the contribution threshold for this comparison.\n")
1730906087658:}
1730906087658:}
1730906125026:summary_data <- summarize_one_comparison(sequential_simper_arbitrary[[i]], df_result, year1, year2, species_groups) %>%
1730906125026:filter(Cumulative_Percent <= 70)
1730906125172:rownames(summary_data) <- NULL
1730906125172:summary_data <- summary_data %>% mutate_if(is.numeric, ~ round(.x, 2))
1730906131882:colnames(summary_data)
1730906153883:gsub("_", "<br>", colnames(summary_data))
1730906444805:for(i in seq_along(sequential_simper_arbitrary)) {
1730906444805:# Retrieve the comparison name for the arbitrary pair
1730906444805:comparison_name <- names(sequential_simper_arbitrary)[i]
1730906444805:years <- unlist(strsplit(comparison_name, "_"))
1730906444806:year1 <- years[1]
1730906444806:year2 <- years[2]
1730906444806:cat(sprintf("\nComparison: %s\n", comparison_name))
1730906444806:# Process this arbitrary comparison
1730906444806:summary_data <- summarize_one_comparison(sequential_simper_arbitrary[[i]], df_result, year1, year2, species_groups) %>%
1730906444806:filter(Cumulative_Percent <= 70)
1730906444807:rownames(summary_data) <- NULL
1730906444807:summary_data <- summary_data %>% mutate_if(is.numeric, ~ round(.x, 2))
1730906444807:# Apply line breaks to column names
1730906444807:colnames(summary_data) <- kableExtra::linebreak(gsub("_", " ", colnames(summary_data)), align = "c")
1730906444808:if(nrow(summary_data) > 0) {
1730906444808:# Export the summary table to a CSV file
1730906444808:#file_name <- sprintf("species_contributions_%s.csv", comparison_name)
1730906444808:#write.csv(summary_data, file = file_name, row.names = FALSE)
1730906444809:print(
1730906444809:kableExtra::kbl(
1730906444809:summary_data,
1730906444809:caption = sprintf("Species contributions for %s", comparison_name),
1730906444810:digits = 2,
1730906444810:format = "html"
1730906444810:) %>%
1730906444810:kableExtra::kable_styling(
1730906444810:full_width = FALSE,
1730906444810:bootstrap_options = c("striped", "hover", "condensed", "responsive")
1730906444811:) %>%
1730906444811:kableExtra::row_spec(0, bold = TRUE, color = "black", background = "#e5f5e0") %>%  # Header styling
1730906444811:kableExtra::column_spec(1, bold = TRUE, width = "5em") %>%  # First column bold
1730906444811:kableExtra::add_header_above(c(" " = 1, "Species Contributions" = ncol(summary_data) - 1))  # Custom header
1730906444811:)
1730906444812:} else {
1730906444812:cat("No species met the contribution threshold for this comparison.\n")
1730906444812:}
1730906444812:}
1730906548716:colnames(summary_data)
1730906844190:for(i in seq_along(sequential_simper_arbitrary)) {
1730906844190:# Retrieve the comparison name for the arbitrary pair
1730906844190:comparison_name <- names(sequential_simper_arbitrary)[i]
1730906844191:years <- unlist(strsplit(comparison_name, "_"))
1730906844191:year1 <- years[1]
1730906844191:year2 <- years[2]
1730906844191:cat(sprintf("\nComparison: %s\n", comparison_name))
1730906844191:# Process this arbitrary comparison
1730906844191:summary_data <- summarize_one_comparison(sequential_simper_arbitrary[[i]], df_result, year1, year2, species_groups) %>%
1730906844191:filter(Cumulative_Percent <= 70)
1730906844192:rownames(summary_data) <- NULL
1730906844192:summary_data <- summary_data %>% mutate_if(is.numeric, ~ round(.x, 2))
1730906844192:# Apply line breaks to column names
1730906844192:colnames(summary_data) <- gsub("_", "<br>", colnames(summary_data))
1730906844192:if(nrow(summary_data) > 0) {
1730906844193:# Export the summary table to a CSV file
1730906844193:#file_name <- sprintf("species_contributions_%s.csv", comparison_name)
1730906844193:#write.csv(summary_data, file = file_name, row.names = FALSE)
1730906844193:print(
1730906844193:kableExtra::kbl(
1730906844193:summary_data,
1730906844194:caption = sprintf("Species contributions for %s", comparison_name),
1730906844194:digits = 2,
1730906844194:format = "html",
1730906844194:escape = F
1730906844194:) %>%
1730906844195:kableExtra::kable_styling(
1730906844195:full_width = FALSE,
1730906844195:bootstrap_options = c("striped", "hover", "condensed", "responsive")
1730906844195:) %>%
1730906844195:kableExtra::row_spec(0, bold = TRUE, color = "black", background = "#e5f5e0") %>%  # Header styling
1730906844196:kableExtra::column_spec(1, bold = TRUE, width = "5em") %>%  # First column bold
1730906844196:kableExtra::add_header_above(c(" " = 1, "Species Contributions" = ncol(summary_data) - 1))  # Custom header
1730906844196:)
1730906844196:} else {
1730906844197:cat("No species met the contribution threshold for this comparison.\n")
1730906844197:}
1730906844197:}
1730906876940:for(i in seq_along(sequential_simper_arbitrary)) {
1730906876940:# Retrieve the comparison name for the arbitrary pair
1730906876941:comparison_name <- names(sequential_simper_arbitrary)[i]
1730906876941:years <- unlist(strsplit(comparison_name, "_"))
1730906876941:year1 <- years[1]
1730906876941:year2 <- years[2]
1730906876941:cat(sprintf("\nComparison: %s\n", comparison_name))
1730906876941:# Process this arbitrary comparison
1730906876942:summary_data <- summarize_one_comparison(sequential_simper_arbitrary[[i]], df_result, year1, year2, species_groups) %>%
1730906876942:filter(Cumulative_Percent <= 70)
1730906876942:rownames(summary_data) <- NULL
1730906876942:summary_data <- summary_data %>% mutate_if(is.numeric, ~ round(.x, 2))
1730906876942:# Apply line breaks to column names
1730906876942:colnames(summary_data) <- gsub("_", "<br>", colnames(summary_data))
1730906876943:if(nrow(summary_data) > 0) {
1730906876943:# Export the summary table to a CSV file
1730906876943:#file_name <- sprintf("species_contributions_%s.csv", comparison_name)
1730906876943:#write.csv(summary_data, file = file_name, row.names = FALSE)
1730906876944:print(
1730906876944:kableExtra::kbl(
1730906876944:summary_data,
1730906876944:caption = sprintf("Species contributions for %s", comparison_name),
1730906876944:digits = 2,
1730906876944:format = "html",
1730906876945:escape = F
1730906876945:) %>%
1730906876945:kableExtra::kable_styling(
1730906876945:full_width = FALSE,
1730906876945:bootstrap_options = c("striped", "hover", "condensed", "responsive")
1730906876945:) %>%
1730906876946:kableExtra::row_spec(0, bold = TRUE, color = "black", background = "#f0f0f0") %>%  # Header styling
1730906876946:kableExtra::column_spec(1, bold = TRUE, width = "5em") %>%  # First column bold
1730906876946:kableExtra::add_header_above(c(" " = 1, "Species Contributions" = ncol(summary_data) - 1))  # Custom header
1730906876946:)
1730906876946:} else {
1730906876946:cat("No species met the contribution threshold for this comparison.\n")
1730906876947:}
1730906876947:}
1730906936575:for(i in seq_along(sequential_simper)) {
1730906936576:comparison_name <- names(sequential_simper)[i]
1730906936576:years <- unlist(strsplit(comparison_name, "_"))
1730906936576:year1 <- years[1]
1730906936576:year2 <- years[2]
1730906936576:cat(sprintf("\nComparison: %s\n", comparison_name))
1730906936577:# Process this comparison
1730906936577:summary_data <- summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups) %>%
1730906936577:filter(Cumulative_Percent <= 70) %>%
1730906936577:mutate_if(is.numeric, ~ round(.x, 2))  # Round all numeric columns to 2 decimal places
1730906936577:rownames(summary_data) <- NULL
1730906936577:# Apply line breaks to column names
1730906936577:colnames(summary_data) <- gsub("_", "<br>", colnames(summary_data))
1730906936578:if(nrow(summary_data) > 0) {
1730906936578:# Export the summary data to a CSV file with a descriptive filename
1730906936578:#file_name <- sprintf("species_contributions_sequential_%s_%s.csv", year1, year2)
1730906936578:#write.csv(summary_data, file = file_name, row.names = FALSE)
1730906936579:# Print the table in console for reference
1730906936579:print(
1730906936579:kableExtra::kbl(
1730906936579:summary_data,
1730906936579:caption = sprintf("Species contributions for %s", comparison_name),
1730906936579:digits = 2,
1730906936579:format = "html",
1730906936580:escape = F
1730906936580:) %>%
1730906936580:kableExtra::kable_styling(
1730906936580:full_width = FALSE,
1730906936580:bootstrap_options = c("striped", "hover", "condensed", "responsive")
1730906936581:) %>%
1730906936581:kableExtra::row_spec(0, bold = TRUE, color = "black", background = "#f0f0f0") %>%  # Header styling
1730906936581:kableExtra::column_spec(1, bold = TRUE, width = "5em") %>%  # First column bold
1730906936581:kableExtra::add_header_above(c(" " = 1, "Species Contributions" = ncol(summary_data) - 1))  # Custom header
1730906936581:)
1730906936582:cat(sprintf("Exported summary data for %s to %s\n", comparison_name, file_name))
1730906936582:} else {
1730906936582:cat("No species met the contribution threshold for this comparison.\n")
1730906936582:}
1730906936582:}
1730909798308:# Create a ggplot visualization showing temporal changes
1730909798308:ggplot(simper_summary, aes(x = Year, y = Abundance, fill = Species)) +
1730909798308:geom_bar(stat = "identity", position = "dodge") +
1730909798309:facet_wrap(~Species, scales = "free_y") +
1730909798309:theme_bw() +
1730909798309:labs(
1730909798309:x = "Year",
1730909798310:y = "Abundance (individuals/m²)",
1730909798310:title = "Temporal changes in key species abundance (2013-2017)",
1730909798310:caption = "Species shown contributed >5% to between-year dissimilarity"
1730909798310:) +
1730909798310:theme(
1730909798311:axis.text.x = element_text(angle = 45, hjust = 1),
1730909798311:panel.grid.minor = element_blank()
1730909798311:)
1730909926974:# Create a function to prepare data for visualization
1730909926974:prepare_simper_viz_data <- function(sequential_simper, df_result, species_groups) {
1730909926974:viz_data <- data.frame()
1730909926975:for(i in seq_along(sequential_simper)) {
1730909926975:comparison_name <- names(sequential_simper)[i]
1730909926975:years <- unlist(strsplit(comparison_name, "_"))
1730909926975:year1 <- years[1]
1730909926976:year2 <- years[2]
1730909926976:# Get summary data for this comparison
1730909926976:summary_data <- summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups) %>%
1730909926976:filter(Cumulative_Percent <= 70)
1730909926977:# Calculate mean abundance for each species in each year
1730909926977:year_data <- bind_rows(
1730909926977:df_result %>%
1730909926978:filter(year == year1, species %in% summary_data$Species) %>%
1730909926978:group_by(species) %>%
1730909926978:summarise(abundance = mean(adjusted_density), year = year1),
1730909926979:df_result %>%
1730909926979:filter(year == year2, species %in% summary_data$Species) %>%
1730909926980:group_by(species) %>%
1730909926980:summarise(abundance = mean(adjusted_density), year = year2)
1730909926980:)
1730909926980:# Add contribution information
1730909926981:year_data <- year_data %>%
1730909926981:left_join(summary_data %>%
1730909926981:select(Species, Individual_Percent, Ecological_Group),
1730909926981:by = c("species" = "Species"))
1730909926982:viz_data <- bind_rows(viz_data, year_data)
1730909926982:}
1730909926982:return(viz_data)
1730909926983:}
1730909930519:# Prepare visualization data
1730909930519:viz_data <- prepare_simper_viz_data(sequential_simper, df_result, species_groups)
1730909935373:# Create main SIMPER visualization
1730909935373:simper_plot <- ggplot(viz_data %>%
1730909935373:filter(Individual_Percent >= 5), # Focus on major contributors
1730909935373:aes(x = year, y = abundance, fill = factor(Ecological_Group))) +
1730909935374:geom_bar(stat = "identity", position = "dodge") +
1730909935374:facet_wrap(~species, scales = "free_y") +
1730909935374:scale_fill_brewer(palette = "Set2", name = "AMBI Group") +
1730909935374:theme_bw() +
1730909935374:labs(
1730909935375:x = "Year",
1730909935375:y = expression(paste("Abundance (individuals/m"^2, ")")),
1730909935375:title = "Temporal changes in key species abundance (2013-2017)",
1730909935375:subtitle = "Species contributing >5% to between-year dissimilarity"
1730909935375:) +
1730909935376:theme(
1730909935376:axis.text.x = element_text(angle = 45, hjust = 1),
1730909935376:panel.grid.minor = element_blank(),
1730909935376:strip.text = element_text(face = "italic"),
1730909935376:legend.position = "bottom"
1730909935377:)
1730909943860:simper_plot
1730909982700:# Create summary table
1730909982701:summary_table <- viz_data %>%
1730909982701:group_by(species, year) %>%
1730909982701:summarise(
1730909982701:abundance = mean(abundance),
1730909982701:AMBI_Group = first(Ecological_Group),
1730909982702:contribution = first(Individual_Percent)
1730909982702:) %>%
1730909982702:pivot_wider(
1730909982702:names_from = year,
1730909982702:values_from = abundance,
1730909982702:names_prefix = "Year_"
1730909982703:) %>%
1730909982703:arrange(desc(contribution)) %>%
1730909982703:mutate(across(starts_with("Year_"), ~round(., 0))) %>%
1730909982703:mutate(contribution = round(contribution, 1))
1730909990470:# Export plot and table
1730909990470:ggsave("output/simper_temporal_changes.png", simper_plot,
1730909990470:width = 12, height = 8, dpi = 300)
1730909996205:summary_table
1730910005580:# Print formatted table for manuscript
1730910005580:kableExtra::kbl(
1730910005580:summary_table,
1730910005581:caption = "Species contributions to community dissimilarity (2013-2017)",
1730910005581:format = "html",
1730910005581:col.names = c("Species", "AMBI Group", "% Contribution", "2013", "2014", "2015", "2016", "2017"),
1730910005581:align = c("l", "c", "r", "r", "r", "r", "r", "r")
1730910005581:) %>%
1730910005581:kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
1730910005581:full_width = FALSE) %>%
1730910005582:row_spec(0, bold = TRUE) %>%
1730910005582:column_spec(1, italic = TRUE) %>%
1730910005582:add_header_above(c(" " = 3, "Abundance (ind./m²)" = 5))
1730910061487:str(summary_table)
1730910133821:# Create summary table
1730910133821:summary_table <- viz_data %>%
1730910133821:group_by(species) %>%
1730910133822:summarise(
1730910133822:AMBI_Group = first(Ecological_Group),
1730910133822:contribution = first(Individual_Percent),
1730910133822:`2013` = mean(abundance[year == "2013"], na.rm = TRUE),
1730910133822:`2014` = mean(abundance[year == "2014"], na.rm = TRUE),
1730910133822:`2015` = mean(abundance[year == "2015"], na.rm = TRUE),
1730910133822:`2016` = mean(abundance[year == "2016"], na.rm = TRUE),
1730910133823:`2017` = mean(abundance[year == "2017"], na.rm = TRUE),
1730910133823:.groups = 'drop'
1730910133823:) %>%
1730910133823:# Remove rows where all abundance values are NA or 0
1730910133823:filter(rowSums(!is.na(across(starts_with("20")))) > 0) %>%
1730910133824:# Replace NAs with 0
1730910133824:mutate(across(starts_with("20"), ~replace_na(., 0))) %>%
1730910133824:# Round numeric values
1730910133824:mutate(
1730910133824:across(starts_with("20"), ~round(., 0)),
1730910133825:contribution = round(contribution, 1)
1730910133825:) %>%
1730910133825:# Sort by contribution
1730910133825:arrange(desc(contribution))
1730910134749:# Now create the formatted table
1730910134750:kableExtra::kbl(
1730910134750:summary_table,
1730910134750:caption = "Species contributions to community dissimilarity (2013-2017)",
1730910134750:format = "html",
1730910134750:col.names = c("Species", "AMBI Group", "% Contribution", "2013", "2014", "2015", "2016", "2017"),
1730910134750:align = c("l", "c", "r", "r", "r", "r", "r", "r")
1730910134750:) %>%
1730910134750:kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
1730910134751:full_width = FALSE) %>%
1730910134751:row_spec(0, bold = TRUE) %>%
1730910134751:column_spec(1, italic = TRUE) %>%
1730910134751:add_header_above(c(" " = 3, "Abundance (ind./m²)" = 5))
1730910145550:# Export plot and table
1730910145550:ggsave("output/simper_temporal_changes.png", simper_plot,
1730910145550:width = 12, height = 8, dpi = 300)
1730968006028:# Test multivariate dispersion
1730968006029:# First for sequential comparisons
1730968006029:year_dispersion <- vegan::betadisper(
1730968006029:vegdist(species_matrix, method = "bray"),
1730968006029:group = env_data$Year
1730968006029:)
1730968006136:# Perform permutation test for significance
1730968006136:year_perm <- permutest(year_dispersion, pairwise = TRUE, permutations = 999)
1730968006989:# For visualization of the dispersion
1730968006989:year_disp_plot <- plot(year_dispersion, hull = FALSE, ellipse = TRUE) +
1730968006989:theme_bw() +
1730968006989:labs(
1730968006989:title = "Multivariate dispersion between years",
1730968006989:caption = "Distance to group centroid based on Bray-Curtis dissimilarity"
1730968006990:)
1730968158475:year_dispersion <- vegan::betadisper(
1730968158475:vegdist(species_matrix, method = "bray"),
1730968158476:group = env_data$Year
1730968158476:)
1730968158553:# Extract scores for plotting
1730968158553:scores <- data.frame(
1730968158553:scores(year_dispersion, display = "sites"),
1730968158553:Year = env_data$Year
1730968158553:)
1730968158554:centroids <- data.frame(
1730968158554:scores(year_dispersion, display = "centroids"),
1730968158554:Year = rownames(scores(year_dispersion, display = "centroids"))
1730968158554:)
1730968158555:# Create dispersion plot using ggplot2
1730968158555:year_disp_plot <- ggplot() +
1730968158555:geom_point(data = scores, aes(x = PCoA1, y = PCoA2, color = Year)) +
1730968158555:geom_point(data = centroids, aes(x = PCoA1, y = PCoA2, fill = Year),
1730968158555:size = 4, shape = 23) +
1730968158555:stat_ellipse(data = scores, aes(x = PCoA1, y = PCoA2, color = Year),
1730968158555:type = "t", level = 0.95) +
1730968158555:theme_bw() +
1730968158555:labs(
1730968158555:title = "Multivariate dispersion between years",
1730968158556:x = "PCoA1",
1730968158556:y = "PCoA2",
1730968158556:caption = "Distance to group centroid based on Bray-Curtis dissimilarity"
1730968158556:)
1730968163250:year_disp_plot
1730968317533:df <- df_result
1730968317533:# Prepare data for NMDS - exclude 1999 data
1730968317534:species_matrix <- df %>%
1730968317534:filter(year >= 2013) %>%  # Only include 2013-2017 data
1730968317534:select(station, year, species, adjusted_density) %>%
1730968317534:pivot_wider(
1730968317534:names_from = species,
1730968317534:values_from = adjusted_density,
1730968317534:values_fill = 0
1730968317535:) %>%
1730968317535:# Store station and year before removing them for NMDS
1730968317535:mutate(
1730968317535:station_temp = station,
1730968317535:year_temp = year
1730968317535:) %>%
1730968317535:select(-station, -year)
1730968328292:# Test multivariate dispersion
1730968328292:year_dispersion <- vegan::betadisper(
1730968328292:vegdist(species_matrix, method = "bray"),
1730968328293:group = env_data$Year
1730968328293:)
1730968350467:str(species_matrix)
1730968360288:species_matrix
1730968429740:# Prepare numeric matrix for dispersion test
1730968429740:species_matrix_numeric <- species_matrix %>%
1730968429740:select(-station_temp, -year_temp) %>%
1730968429741:as.matrix()
1730968429743:# Test multivariate dispersion
1730968429743:year_dispersion <- vegan::betadisper(
1730968429744:vegdist(species_matrix_numeric, method = "bray"),
1730968429744:group = species_matrix$year_temp
1730968429744:)
1730968429788:# Extract scores for plotting with ggplot2
1730968429788:disp_scores <- data.frame(
1730968429788:scores(year_dispersion, display = "sites"),
1730968429788:Year = species_matrix$year_temp
1730968429788:)
1730968429788:disp_centroids <- data.frame(
1730968429789:scores(year_dispersion, display = "centroids"),
1730968429789:Year = rownames(scores(year_dispersion, display = "centroids"))
1730968429789:)
1730968429789:# Create dispersion plot using ggplot2
1730968429789:year_disp_plot <- ggplot() +
1730968429789:geom_point(data = disp_scores, aes(x = PCoA1, y = PCoA2, color = factor(Year))) +
1730968429789:geom_point(data = disp_centroids, aes(x = PCoA1, y = PCoA2),
1730968429789:size = 4, shape = 23, fill = "black") +
1730968429790:stat_ellipse(data = disp_scores, aes(x = PCoA1, y = PCoA2, color = factor(Year)),
1730968429790:type = "t", level = 0.95) +
1730968429790:theme_bw() +
1730968429790:labs(
1730968429790:title = "Multivariate dispersion between years",
1730968429790:x = "PCoA1",
1730968429790:y = "PCoA2",
1730968429790:color = "Year",
1730968429790:caption = "Distance to group centroid based on Bray-Curtis dissimilarity"
1730968429790:)
1730968527883:# Prepare numeric matrix for dispersion test
1730968527883:species_matrix_numeric <- species_matrix %>%
1730968527883:select(-station_temp, -year_temp) %>%
1730968527883:as.matrix()
1730968527886:# Test multivariate dispersion
1730968527886:year_dispersion <- vegan::betadisper(
1730968527886:vegdist(species_matrix_numeric, method = "bray"),
1730968527887:group = species_matrix$year_temp
1730968527887:)
1730968527964:# Extract scores for plotting with ggplot2
1730968527965:disp_scores <- data.frame(
1730968527965:scores(year_dispersion, display = "sites"),
1730968527965:Year = species_matrix$year_temp
1730968527965:)
1730968527966:disp_centroids <- data.frame(
1730968527966:scores(year_dispersion, display = "centroids"),
1730968527966:Year = rownames(scores(year_dispersion, display = "centroids"))
1730968527966:)
1730968527967:# Create dispersion plot using ggplot2
1730968527969:year_disp_plot <- ggplot() +
1730968527969:geom_point(data = disp_scores, aes(x = PCoA1, y = PCoA2, color = factor(Year))) +
1730968527969:geom_point(data = disp_centroids, aes(x = PCoA1, y = PCoA2),
1730968527969:size = 4, shape = 23, fill = "black") +
1730968527969:stat_ellipse(data = disp_scores, aes(x = PCoA1, y = PCoA2, color = factor(Year)),
1730968527969:type = "t", level = 0.95) +
1730968527970:theme_bw() +
1730968527970:labs(
1730968527970:title = "Multivariate dispersion between years",
1730968527970:x = "PCoA1",
1730968527970:y = "PCoA2",
1730968527970:color = "Year",
1730968527970:caption = "Distance to group centroid based on Bray-Curtis dissimilarity"
1730968527970:)
1730968651107:year_dispersion <- vegan::betadisper(
1730968651107:vegdist(species_matrix, method = "bray"),
1730968651107:group = env_data$Year
1730968651108:)
1730968666435:# Prepare numeric matrix for dispersion test
1730968666435:species_matrix_numeric <- species_matrix %>%
1730968666435:select(-station_temp, -year_temp) %>%
1730968666435:as.matrix()
1730968666438:year_dispersion <- vegan::betadisper(
1730968666438:vegdist(species_matrix, method = "bray"),
1730968666438:group = env_data$Year
1730968666439:)
1730968680522:# Prepare numeric matrix for dispersion test
1730968680522:species_matrix_numeric <- species_matrix %>%
1730968680522:select(-station_temp, -year_temp) %>%
1730968680522:as.matrix()
1730968680525:year_dispersion <- vegan::betadisper(
1730968680525:vegdist(species_matrix_numeric, method = "bray"),
1730968680525:group = env_data$Year
1730968680525:)
1730968686155:# Prepare numeric matrix for dispersion test
1730968686155:species_matrix_numeric <- species_matrix %>%
1730968686155:select(-station_temp, -year_temp) %>%
1730968686156:as.matrix()
1730968686158:year_dispersion <- vegan::betadisper(
1730968686159:vegdist(species_matrix_numeric, method = "bray"),
1730968686159:group = env_data$Year
1730968686159:)
1730969369878:# Add after species matrix creation in scripts/03_nmds_analysis.R
1730969369878:# Perform PCA
1730969369878:species_pca <- rda(species_matrix)
1730969392116:# Add after species matrix creation in scripts/03_nmds_analysis.R
1730969392117:# Perform PCA
1730969392117:species_pca <- rda(species_matrix_numeric)
1730969392130:# Create biplot
1730969392130:biplot_data <- summary(species_pca, scaling = 2)
1730969392132:# Extract variance explained
1730969392132:var_explained <- round(biplot_data$cont$importance[2,1:2] * 100, 1)
1730969392132:# Create PCA biplot using ggplot2
1730969392133:pca_plot <- ggplot() +
1730969392133:geom_point(data = data.frame(biplot_data$sites),
1730969392133:aes(PC1, PC2, color = env_data$Year)) +
1730969392133:geom_segment(data = data.frame(biplot_data$species)[1:10,],
1730969392133:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1730969392133:arrow = arrow(length = unit(0.2, "cm"))) +
1730969392133:theme_bw() +
1730969392134:labs(
1730969392134:x = paste0("PC1 (", var_explained[1], "%)"),
1730969392134:y = paste0("PC2 (", var_explained[2], "%)")
1730969392134:)
1730969397114:pca_plot
1730969403574:rlang::last_trace()
1730969443842:species_matrix_numeric
1730969481636:# Prepare data for PCA
1730969481636:species_pca <- rda(select(species_matrix, -station_temp, -year_temp))
1730969481641:# Extract scores and create plotting data
1730969481641:pca_scores <- data.frame(
1730969481641:scores(species_pca, display = "sites"),
1730969481641:Year = species_matrix$year_temp
1730969481641:)
1730969481642:species_loadings <- data.frame(
1730969481642:scores(species_pca, display = "species"),
1730969481643:Species = rownames(scores(species_pca, display = "species"))
1730969481643:) %>%
1730969481643:# Filter to show only important species (>1% relative abundance)
1730969481643:filter(Species %in% important_species)
1730969481645:# Calculate variance explained
1730969481645:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1730969481646:# Create PCA biplot
1730969481646:pca_plot <- ggplot() +
1730969481647:# Add site scores
1730969481647:geom_point(data = pca_scores,
1730969481647:aes(x = PC1, y = PC2, color = factor(Year))) +
1730969481647:# Add species arrows for important species
1730969481647:geom_segment(data = species_loadings,
1730969481647:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1730969481647:arrow = arrow(length = unit(0.2, "cm"))) +
1730969481648:# Add species labels
1730969481648:geom_text(data = species_loadings,
1730969481648:aes(x = PC1, y = PC2, label = Species),
1730969481648:hjust = -0.2, size = 3) +
1730969481648:theme_bw() +
1730969481648:labs(
1730969481649:x = paste0("PC1 (", var_explained[1], "%)"),
1730969481649:y = paste0("PC2 (", var_explained[2], "%)"),
1730969481649:color = "Year",
1730969481649:title = "PCA of benthic community composition",
1730969481649:subtitle = "Arrows show species with >1% relative abundance"
1730969481650:)
1730969481660:# Save plot
1730969481660:ggsave("output/pca_biplot.png", pca_plot,
1730969481660:width = 10, height = 8, dpi = 300, bg = "white")
1730969616799:# Function to create PCA biplot for a specific year
1730969616799:create_year_pca <- function(year_data, year, important_species) {
1730969616799:# Perform PCA for this year
1730969616799:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1730969616800:# Extract scores
1730969616800:site_scores <- data.frame(
1730969616800:scores(species_pca, display = "sites"),
1730969616800:Station = year_data$station_temp
1730969616800:)
1730969616801:species_loadings <- data.frame(
1730969616801:scores(species_pca, display = "species"),
1730969616801:Species = rownames(scores(species_pca, display = "species"))
1730969616801:) %>%
1730969616801:filter(Species %in% important_species)
1730969616802:# Calculate variance explained
1730969616802:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1730969616802:# Create PCA biplot
1730969616802:pca_plot <- ggplot() +
1730969616803:# Add site scores
1730969616803:geom_point(data = site_scores,
1730969616803:aes(x = PC1, y = PC2, color = Station),
1730969616803:size = 3) +
1730969616804:# Add species arrows
1730969616804:geom_segment(data = species_loadings,
1730969616804:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1730969616804:arrow = arrow(length = unit(0.2, "cm"))) +
1730969616804:# Add species labels
1730969616805:geom_text_repel(data = species_loadings,
1730969616805:aes(x = PC1, y = PC2, label = Species),
1730969616805:size = 3) +
1730969616805:theme_bw() +
1730969616805:labs(
1730969616806:title = paste("PCA of benthic community composition -", year),
1730969616806:x = paste0("PC1 (", var_explained[1], "%)"),
1730969616806:y = paste0("PC2 (", var_explained[2], "%)"),
1730969616806:subtitle = "Arrows show species with >1% relative abundance"
1730969616806:)
1730969616807:return(pca_plot)
1730969616807:}
1730969616808:# Create PCA plots for each year
1730969616808:years <- sort(unique(species_matrix$year_temp))
1730969616808:pca_plots <- list()
1730969616809:for(year in years) {
1730969616809:# Subset data for this year
1730969616809:year_data <- species_matrix %>%
1730969616809:filter(year_temp == year)
1730969616809:# Create PCA plot
1730969616809:pca_plots[[as.character(year)]] <- create_year_pca(
1730969616810:year_data,
1730969616810:year,
1730969616810:important_species
1730969616810:)
1730969616810:# Save individual plot
1730969616810:ggsave(
1730969616811:paste0("output/pca_biplot_", year, ".png"),
1730969616811:pca_plots[[as.character(year)]],
1730969616811:width = 10, height = 8,
1730969616811:dpi = 300,
1730969616812:bg = "white"
1730969616812:)
1730969616812:}
1730969672564:install.packages("ggrepel")
1730969676709:# Function to create PCA biplot for a specific year
1730969676710:create_year_pca <- function(year_data, year, important_species) {
1730969676710:# Perform PCA for this year
1730969676710:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1730969676710:# Extract scores
1730969676710:site_scores <- data.frame(
1730969676711:scores(species_pca, display = "sites"),
1730969676711:Station = year_data$station_temp
1730969676711:)
1730969676711:species_loadings <- data.frame(
1730969676711:scores(species_pca, display = "species"),
1730969676712:Species = rownames(scores(species_pca, display = "species"))
1730969676712:) %>%
1730969676712:filter(Species %in% important_species)
1730969676712:# Calculate variance explained
1730969676712:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1730969676713:# Create PCA biplot
1730969676713:pca_plot <- ggplot() +
1730969676713:# Add site scores
1730969676713:geom_point(data = site_scores,
1730969676713:aes(x = PC1, y = PC2, color = Station),
1730969676714:size = 3) +
1730969676714:# Add species arrows
1730969676714:geom_segment(data = species_loadings,
1730969676714:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1730969676714:arrow = arrow(length = unit(0.2, "cm"))) +
1730969676715:# Add species labels
1730969676715:geom_text_repel(data = species_loadings,
1730969676715:aes(x = PC1, y = PC2, label = Species),
1730969676715:size = 3) +
1730969676715:theme_bw() +
1730969676715:labs(
1730969676716:title = paste("PCA of benthic community composition -", year),
1730969676716:x = paste0("PC1 (", var_explained[1], "%)"),
1730969676716:y = paste0("PC2 (", var_explained[2], "%)"),
1730969676716:subtitle = "Arrows show species with >1% relative abundance"
1730969676716:)
1730969676717:return(pca_plot)
1730969676717:}
1730969676718:# Create PCA plots for each year
1730969676718:years <- sort(unique(species_matrix$year_temp))
1730969676718:pca_plots <- list()
1730969676718:for(year in years) {
1730969676719:# Subset data for this year
1730969676719:year_data <- species_matrix %>%
1730969676719:filter(year_temp == year)
1730969676719:# Create PCA plot
1730969676719:pca_plots[[as.character(year)]] <- create_year_pca(
1730969676719:year_data,
1730969676720:year,
1730969676720:important_species
1730969676720:)
1730969676720:# Save individual plot
1730969676720:ggsave(
1730969676721:paste0("output/pca_biplot_", year, ".png"),
1730969676721:pca_plots[[as.character(year)]],
1730969676721:width = 10, height = 8,
1730969676721:dpi = 300,
1730969676721:bg = "white"
1730969676721:)
1730969676721:}
1730969713645:library(ggrepel)
1730969713665:# Function to create PCA biplot for a specific year
1730969713665:create_year_pca <- function(year_data, year, important_species) {
1730969713665:# Perform PCA for this year
1730969713665:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1730969713666:# Extract scores
1730969713666:site_scores <- data.frame(
1730969713666:scores(species_pca, display = "sites"),
1730969713666:Station = year_data$station_temp
1730969713666:)
1730969713666:species_loadings <- data.frame(
1730969713667:scores(species_pca, display = "species"),
1730969713667:Species = rownames(scores(species_pca, display = "species"))
1730969713667:) %>%
1730969713667:filter(Species %in% important_species)
1730969713667:# Calculate variance explained
1730969713668:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1730969713668:# Create PCA biplot
1730969713668:pca_plot <- ggplot() +
1730969713668:# Add site scores
1730969713668:geom_point(data = site_scores,
1730969713669:aes(x = PC1, y = PC2, color = Station),
1730969713669:size = 3) +
1730969713669:# Add species arrows
1730969713669:geom_segment(data = species_loadings,
1730969713669:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1730969713670:arrow = arrow(length = unit(0.2, "cm"))) +
1730969713670:# Add species labels
1730969713670:geom_text_repel(data = species_loadings,
1730969713670:aes(x = PC1, y = PC2, label = Species),
1730969713670:size = 3) +
1730969713670:theme_bw() +
1730969713671:labs(
1730969713671:title = paste("PCA of benthic community composition -", year),
1730969713671:x = paste0("PC1 (", var_explained[1], "%)"),
1730969713671:y = paste0("PC2 (", var_explained[2], "%)"),
1730969713671:subtitle = "Arrows show species with >1% relative abundance"
1730969713672:)
1730969713672:return(pca_plot)
1730969713672:}
1730969713673:# Create PCA plots for each year
1730969713673:years <- sort(unique(species_matrix$year_temp))
1730969713673:pca_plots <- list()
1730969713673:for(year in years) {
1730969713673:# Subset data for this year
1730969713674:year_data <- species_matrix %>%
1730969713674:filter(year_temp == year)
1730969713674:# Create PCA plot
1730969713674:pca_plots[[as.character(year)]] <- create_year_pca(
1730969713674:year_data,
1730969713674:year,
1730969713674:important_species
1730969713675:)
1730969713675:# Save individual plot
1730969713675:ggsave(
1730969713675:paste0("output/pca_biplot_", year, ".png"),
1730969713675:pca_plots[[as.character(year)]],
1730969713675:width = 10, height = 8,
1730969713676:dpi = 300,
1730969713676:bg = "white"
1730969713676:)
1730969713676:}
1730969716199:# Combine all plots into a single figure
1730969716199:combined_plot <- wrap_plots(pca_plots, ncol = 2) +
1730969716199:plot_annotation(
1730969716199:title = "Temporal changes in community composition (2013-2017)",
1730969716199:caption = "Based on species abundance data. Only species with >1% relative abundance shown."
1730969716200:)
1730969750716:install.packages("patchwork")
1730969766774:library(ggrepel)
1730969766775:library("patchwork")
1730969766800:# Function to create PCA biplot for a specific year
1730969766800:create_year_pca <- function(year_data, year, important_species) {
1730969766801:# Perform PCA for this year
1730969766801:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1730969766801:# Extract scores
1730969766801:site_scores <- data.frame(
1730969766801:scores(species_pca, display = "sites"),
1730969766801:Station = year_data$station_temp
1730969766801:)
1730969766802:species_loadings <- data.frame(
1730969766802:scores(species_pca, display = "species"),
1730969766802:Species = rownames(scores(species_pca, display = "species"))
1730969766802:) %>%
1730969766802:filter(Species %in% important_species)
1730969766803:# Calculate variance explained
1730969766803:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1730969766803:# Create PCA biplot
1730969766803:pca_plot <- ggplot() +
1730969766803:# Add site scores
1730969766804:geom_point(data = site_scores,
1730969766804:aes(x = PC1, y = PC2, color = Station),
1730969766804:size = 3) +
1730969766804:# Add species arrows
1730969766804:geom_segment(data = species_loadings,
1730969766804:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1730969766805:arrow = arrow(length = unit(0.2, "cm"))) +
1730969766805:# Add species labels
1730969766805:geom_text_repel(data = species_loadings,
1730969766805:aes(x = PC1, y = PC2, label = Species),
1730969766805:size = 3) +
1730969766805:theme_bw() +
1730969766806:labs(
1730969766806:title = paste("PCA of benthic community composition -", year),
1730969766806:x = paste0("PC1 (", var_explained[1], "%)"),
1730969766806:y = paste0("PC2 (", var_explained[2], "%)"),
1730969766806:subtitle = "Arrows show species with >1% relative abundance"
1730969766807:)
1730969766807:return(pca_plot)
1730969766807:}
1730969766808:# Create PCA plots for each year
1730969766808:years <- sort(unique(species_matrix$year_temp))
1730969766808:pca_plots <- list()
1730969766808:for(year in years) {
1730969766808:# Subset data for this year
1730969766809:year_data <- species_matrix %>%
1730969766809:filter(year_temp == year)
1730969766809:# Create PCA plot
1730969766809:pca_plots[[as.character(year)]] <- create_year_pca(
1730969766809:year_data,
1730969766809:year,
1730969766809:important_species
1730969766809:)
1730969766810:# Save individual plot
1730969766810:ggsave(
1730969766810:paste0("output/pca_biplot_", year, ".png"),
1730969766810:pca_plots[[as.character(year)]],
1730969766810:width = 10, height = 8,
1730969766810:dpi = 300,
1730969766810:bg = "white"
1730969766811:)
1730969766811:}
1730969769263:# Combine all plots into a single figure
1730969769263:combined_plot <- wrap_plots(pca_plots, ncol = 2) +
1730969769263:plot_annotation(
1730969769263:title = "Temporal changes in community composition (2013-2017)",
1730969769263:caption = "Based on species abundance data. Only species with >1% relative abundance shown."
1730969769263:)
1730969769268:# Save combined plot
1730969769268:ggsave("output/pca_biplots_all_years.png",
1730969769268:combined_plot,
1730969769268:width = 15, height = 12,
1730969769268:dpi = 300,
1730969769269:bg = "white")
1730969961376:df_result[grep("tubifi", df_result$species, ignore.case = TRUE), ]
1730970150453:library(ggrepel)
1730970150454:library(patchwork)
1730970150454:# Prepare data including 1999
1730970150454:species_matrix_all <- df %>%
1730970150455:select(station, year, species, adjusted_density) %>%
1730970150455:pivot_wider(
1730970150455:names_from = species,
1730970150455:values_from = adjusted_density,
1730970150455:values_fill = 0
1730970150456:) %>%
1730970150456:mutate(
1730970150456:station_temp = station,
1730970150456:year_temp = year
1730970150456:) %>%
1730970150456:select(-station, -year)
1730970150472:# Find dominant species (>1% relative abundance) including 1999
1730970150472:dominant_species <- species_matrix_all %>%
1730970150472:select(where(is.numeric)) %>%
1730970150472:select(-year_temp) %>%
1730970150472:summarise(across(everything(), sum)) %>%
1730970150472:pivot_longer(everything(),
1730970150472:names_to = "species",
1730970150472:values_to = "total_abundance") %>%
1730970150473:arrange(desc(total_abundance)) %>%
1730970150473:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1730970150473:filter(relative_abundance > 0.01)
1730970150506:# Create PCA plots for each year
1730970150506:years <- sort(unique(species_matrix_all$year_temp))
1730970150506:pca_plots <- list()
1730970150506:for(year in years) {
1730970150506:year_data <- species_matrix_all %>%
1730970150506:filter(year_temp == year)
1730970150506:pca_plots[[as.character(year)]] <- create_year_pca(
1730970150506:year_data,
1730970150507:year,
1730970150507:dominant_species$species
1730970150507:)
1730970150507:ggsave(
1730970150507:paste0("output/pca_biplot_", year, ".png"),
1730970150507:pca_plots[[as.character(year)]],
1730970150507:width = 10, height = 8,
1730970150507:dpi = 300,
1730970150507:bg = "white"
1730970150507:)
1730970150507:}
1730970153454:# Combine all plots
1730970153454:combined_plot <- wrap_plots(pca_plots, ncol = 2) +
1730970153455:plot_annotation(
1730970153455:title = "Temporal changes in community composition (1999, 2013-2017)",
1730970153455:caption = "Based on species abundance data. Only species with >1% relative abundance shown."
1730970153455:)
1730970153459:ggsave("output/pca_biplots_all_years.png",
1730970153459:combined_plot,
1730970153460:width = 20, height = 15,
1730970153460:dpi = 300,
1730970153460:bg = "white")
1730971116905:# Function to create reversed PCA biplot
1730971116905:create_year_pca_reversed <- function(year_data, year, important_species) {
1730971116905:# Perform PCA
1730971116906:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1730971116906:# Extract scores - note the reversed roles
1730971116906:species_scores <- data.frame(
1730971116906:scores(species_pca, display = "species"),
1730971116907:Species = rownames(scores(species_pca, display = "species"))
1730971116907:) %>%
1730971116907:filter(Species %in% important_species)
1730971116908:station_loadings <- data.frame(
1730971116908:scores(species_pca, display = "sites"),
1730971116908:Station = year_data$station_temp
1730971116908:)
1730971116908:# Calculate variance explained
1730971116909:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1730971116909:# Create reversed PCA biplot
1730971116909:pca_plot <- ggplot() +
1730971116910:# Add species points
1730971116910:geom_point(data = species_scores,
1730971116910:aes(x = PC1, y = PC2),
1730971116911:size = 3) +
1730971116911:# Add station arrows
1730971116911:geom_segment(data = station_loadings,
1730971116911:aes(x = 0, y = 0, xend = PC1, yend = PC2, color = Station),
1730971116913:arrow = arrow(length = unit(0.2, "cm"))) +
1730971116914:# Add species labels
1730971116914:geom_text_repel(data = species_scores,
1730971116914:aes(x = PC1, y = PC2, label = Species),
1730971116914:size = 3) +
1730971116914:theme_bw() +
1730971116915:labs(
1730971116915:title = paste("PCA of benthic community composition -", year),
1730971116916:subtitle = "Species shown as points, stations as arrows",
1730971116916:x = paste0("PC1 (", var_explained[1], "%)"),
1730971116916:y = paste0("PC2 (", var_explained[2], "%)")
1730971116917:)
1730971116917:return(pca_plot)
1730971116917:}
1730971119789:# Create reversed PCA plots for each year
1730971119790:years <- sort(unique(species_matrix_all$year_temp))
1730971120940:pca_plots_reversed <- list()
1730971122667:for(year in years) {
1730971122668:year_data <- species_matrix_all %>%
1730971122668:filter(year_temp == year)
1730971122668:pca_plots_reversed[[as.character(year)]] <- create_year_pca_reversed(
1730971122668:year_data,
1730971122668:year,
1730971122668:dominant_species$species
1730971122669:)
1730971122669:ggsave(
1730971122669:paste0("output/pca_biplot_reversed_", year, ".png"),
1730971122669:pca_plots_reversed[[as.character(year)]],
1730971122669:width = 10, height = 8,
1730971122670:dpi = 300,
1730971122670:bg = "white"
1730971122670:)
1730971122670:}
1730971126157:# Combine all reversed plots
1730971126157:combined_plot_reversed <- wrap_plots(pca_plots_reversed, ncol = 2) +
1730971126157:plot_annotation(
1730971126157:title = "Temporal changes in community composition (1999, 2013-2017)",
1730971126157:subtitle = "Species shown as points, stations as arrows",
1730971126157:caption = "Based on species abundance data. Only species with >1% relative abundance shown."
1730971126157:)
1730971127371:ggsave("output/pca_biplots_reversed_all_years.png",
1730971127371:combined_plot_reversed,
1730971127371:width = 20, height = 15,
1730971127372:dpi = 300,
1730971127373:bg = "white")
1730971380477:library(ggrepel)
1730971380478:library(patchwork)
1730971380478:# Function to create reversed PCA biplot
1730971380478:create_year_pca_reversed <- function(year_data, year, important_species) {
1730971380478:# Perform PCA
1730971380478:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1730971380479:# Extract scores - note the reversed roles
1730971380479:species_scores <- data.frame(
1730971380479:scores(species_pca, display = "species"),
1730971380479:Species = rownames(scores(species_pca, display = "species"))
1730971380479:) #%>%
1730971380479:#filter(Species %in% important_species)
1730971380480:station_loadings <- data.frame(
1730971380488:scores(species_pca, display = "sites"),
1730971380488:Station = year_data$station_temp
1730971380488:)
1730971380488:# Calculate variance explained
1730971380488:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1730971380489:# Create reversed PCA biplot
1730971380489:pca_plot <- ggplot() +
1730971380489:# Add species points
1730971380489:geom_point(data = species_scores,
1730971380490:aes(x = PC1, y = PC2),
1730971380490:size = 3) +
1730971380490:# Add station arrows
1730971380490:geom_segment(data = station_loadings,
1730971380490:aes(x = 0, y = 0, xend = PC1, yend = PC2, color = Station),
1730971380491:arrow = arrow(length = unit(0.2, "cm"))) +
1730971380491:# Add species labels
1730971380491:geom_text_repel(data = species_scores,
1730971380491:aes(x = PC1, y = PC2, label = Species),
1730971380492:size = 3) +
1730971380492:theme_bw() +
1730971380492:labs(
1730971380492:title = paste("PCA of benthic community composition -", year),
1730971380492:subtitle = "Species shown as points, stations as arrows",
1730971380493:x = paste0("PC1 (", var_explained[1], "%)"),
1730971380493:y = paste0("PC2 (", var_explained[2], "%)")
1730971380493:)
1730971380493:return(pca_plot)
1730971380494:}
1730971380494:# Create reversed PCA plots for each year
1730971380494:years <- sort(unique(species_matrix_all$year_temp))
1730971380495:pca_plots_reversed <- list()
1730971380495:for(year in years) {
1730971380495:year_data <- species_matrix_all %>%
1730971380496:filter(year_temp == year)
1730971380496:pca_plots_reversed[[as.character(year)]] <- create_year_pca_reversed(
1730971380496:year_data,
1730971380496:year,
1730971380496:dominant_species$species
1730971380497:)
1730971380497:ggsave(
1730971380497:paste0("output/pca_biplot_reversed_", year, ".png"),
1730971380497:pca_plots_reversed[[as.character(year)]],
1730971380497:width = 10, height = 8,
1730971380497:dpi = 300,
1730971380497:bg = "white"
1730971380498:)
1730971380498:}
1730971384892:# Combine all reversed plots
1730971384892:combined_plot_reversed <- wrap_plots(pca_plots_reversed, ncol = 2) +
1730971384892:plot_annotation(
1730971384892:title = "Temporal changes in community composition (1999, 2013-2017)",
1730971384892:subtitle = "Species shown as points, stations as arrows",
1730971384893:caption = "Based on species abundance data. Only species with >1% relative abundance shown."
1730971384893:)
1730971384897:ggsave("output/pca_biplots_reversed_all_years.png",
1730971384897:combined_plot_reversed,
1730971384897:width = 20, height = 15,
1730971384897:dpi = 300,
1730971384898:bg = "white")
1730972208426:df
1730972260052:write.csv(df, file = "output/hreinsad.csv", row.names = FALSE)
1731311883771:# Now create the formatted table
1731311883771:kableExtra::kbl(
1731311883772:summary_table,
1731311883772:caption = "Species contributions to community dissimilarity (2013-2017)",
1731311883772:format = "html",
1731311883772:col.names = c("Species", "AMBI Group", "% Contribution", "2013", "2014", "2015", "2016", "2017"),
1731311883772:align = c("l", "c", "r", "r", "r", "r", "r", "r")
1731311883772:) %>%
1731311883773:kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
1731311883773:full_width = FALSE) %>%
1731311883773:row_spec(0, bold = TRUE) %>%
1731311883773:column_spec(1, italic = TRUE) %>%
1731311883773:add_header_above(c(" " = 3, "Abundance (ind./m²)" = 5))
1731312982284:ekkiungvidi
1731315542710:remove_list <- paste(c(
1731315542711:"Paranonidae",
1731315542711:"ungviði",
1731315542711:"ungv",
1731315542711:"ungv.",
1731315542711:"juv",
1731315542711:"harpacticoida"
1731315542712:), collapse = '|')
1731315542712:remove_ind <- lapply(strsplit(remove_list , "\\|")[[1]] , \(x) grep(x , KolgrTaxa$gamalt , fixed = T)) |>
1731315542712:unlist() |>
1731315542712:unique()
1731315542721:KolgrTaxa[remove_ind,]
1731315553750:warnings()
1731315661563:KolgrTaxa$gamalt <- iconv(KolgrTaxa$gamalt, from = "UTF-8", to = "UTF-8", sub = NA)
1731315664061:remove_list <- paste(c(
1731315664062:"Paranonidae",
1731315664062:"ungviði",
1731315664062:"ungv",
1731315664062:"ungv.",
1731315664062:"juv",
1731315664062:"harpacticoida"
1731315664063:), collapse = '|')
1731315664063:remove_ind <- lapply(strsplit(remove_list , "\\|")[[1]] , \(x) grep(x , KolgrTaxa$gamalt , fixed = T)) |>
1731315664063:unlist() |>
1731315664063:unique()
1731315664080:KolgrTaxa[remove_ind,]
1731315977116:shiny::runApp('henda')
1731316124727:runApp('henda')
1731316142667:getwd()
1731316188507:runApp('henda')
1731316209294:list.files("/home/rstudio")
1731316209297:list.files("/home/rstudio/data/raw")
1731316267444:runApp('henda')
1731316277375:runApp('henda')
1731316394720:runApp('henda')
1731316403547:runApp('henda')
1731316773530:runApp('henda')
1731317068092:KolgrTaxa
1731317146286:KolgrTaxa %>% filter(str_detect(Genus, "Abra")) %>% print()
1731317178590:KolgrTaxa %>% filter_all(any_vars(str_detect(., "Abra"))) %>% print()
1731317215823:KolgrTaxa %>% filter_all(any_vars(str_detect(tolower(.), "abra"))) %>% print()
1731317233381:KolgrTaxa %>% filter_all(any_vars(str_detect(tolower(.), "par"))) %>% print()
1731317255693:KolgrTaxa %>% filter_all(any_vars(str_detect(tolower(.), "paran"))) %>% print()
1731317309708:KolgrTaxa %>% filter_all(any_vars(str_detect(tolower(.), "Dorvilleidae"))) %>% print()
1731317315053:KolgrTaxa %>% filter_all(any_vars(str_detect(tolower(.), "Dorvil"))) %>% print()
1731317328885:KolgrTaxa %>% filter_all(any_vars(str_detect(tolower(.), "dorvil"))) %>% print()
1731317355500:KolgrTaxa %>% filter_all(any_vars(str_detect(tolower(.), tolower("Dorvil")))) %>% print()
1731317376821:KolgrTaxa %>% filter_all(any_vars(str_detect(tolower(.), tolower("Dorvil")))) %>% print()
1731317394844:KolgrTaxa %>% filter_all(any_vars(str_detect(tolower(.), tolower("Dorvil")))) %>% print()
1731317448836:KolgrTaxa %>% filter_all(any_vars(str_detect(tolower(.), tolower("Dorvil"))))  %>%
1731317448836:select(Kingdom, Phylum, Class, Genus, Species) %>%
1731317448836:print()
1731317473597:KolgrTaxa %>% filter_all(any_vars(str_detect(tolower(.), tolower("Dorvil"))))  %>%
1731317473598:select(Kingdom, Phylum, Class, Genus, Species, N) %>%
1731317473598:print()
1731317494765:KolgrTaxa %>% filter_all(any_vars(str_detect(tolower(.), tolower("Dorvil"))))  %>%
1731317494765:select(Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731317494765:print()
1731317656478:KolgrTaxa %>%
1731317656479:filter_all(any_vars(str_detect(tolower(.), tolower(Dorvil)))) %>%
1731317656479:mutate(across(everything(), ~ ifelse(str_detect(tolower(.), tolower(Dorvil)), ., NA))) %>%
1731317656479:select_if(~ any(!is.na(.))) %>%
1731317656479:print()
1731317673861:search_term <- "Dorvil"
1731317673862:KolgrTaxa %>%
1731317673862:filter_all(any_vars(str_detect(tolower(.), tolower(search_term)))) %>%
1731317673862:mutate(across(everything(), ~ ifelse(str_detect(tolower(.), tolower(search_term)), ., NA))) %>%
1731317673862:select_if(~ any(!is.na(.))) %>%
1731317673862:print()
1731317693862:search_term <- "Dorvil"
1731317693862:KolgrTaxa %>%
1731317693862:filter_all(any_vars(str_detect(tolower(.), tolower(search_term)))) %>%
1731317693863:mutate(across(everything(), ~ ifelse(str_detect(tolower(.), tolower(search_term)), ., NA))) %>%
1731317693863:select_if(~ any(!is.na(.)),Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731317693863:print()
1731317760564:search_term <- "Dorvil"
1731317760564:KolgrTaxa %>%
1731317760564:filter_all(any_vars(str_detect(tolower(.), tolower(search_term)))) %>%
1731317760564:mutate(across(everything(), ~ ifelse(str_detect(tolower(.), tolower(search_term)), ., NA))) %>%
1731317760565:select(where(~ any(!is.na(.))), Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731317760565:print()
1731317798974:search_term <- "capitata"
1731317798974:KolgrTaxa %>%
1731317798974:filter_all(any_vars(str_detect(tolower(.), tolower(search_term)))) %>%
1731317798975:mutate(across(everything(), ~ ifelse(str_detect(tolower(.), tolower(search_term)), ., NA))) %>%
1731317798975:select(where(~ any(!is.na(.))), Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731317798975:print()
1731317855335:search_term <- "Dorvil"
1731317855335:KolgrTaxa %>%
1731317855335:filter_all(any_vars(str_detect(tolower(.), tolower(search_term)))) %>%
1731317855335:mutate(across(where(is.character), ~ ifelse(str_detect(tolower(.), tolower(search_term)), ., NA))) %>%
1731317855335:select(where(~ any(!is.na(.))), Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731317855336:print()
1731317878014:search_term <- "Dorvil"
1731317878014:KolgrTaxa %>%
1731317878015:filter_all(any_vars(str_detect(tolower(.), tolower(search_term)))) %>%
1731317878015:mutate(across(where(is.character), ~ ifelse(str_detect(tolower(.), tolower(search_term)), ., NA))) %>%
1731317878015:select(where(~ any(!is.na(.)))) %>%
1731317878015:print()
1731318016702:search_term <- "Paranonidae"
1731318016702:KolgrTaxa %>%
1731318016702:filter_all(any_vars(str_detect(tolower(.), tolower(search_term)))) %>%
1731318016703:mutate(across(where(is.character), ~ ifelse(str_detect(tolower(.), tolower(search_term)), ., NA))) %>%
1731318016703:select(where(~ any(!is.na(.)))) %>%
1731318016703:print()
1731318025862:search_term <- "Para"
1731318025863:KolgrTaxa %>%
1731318025863:filter_all(any_vars(str_detect(tolower(.), tolower(search_term)))) %>%
1731318025863:mutate(across(where(is.character), ~ ifelse(str_detect(tolower(.), tolower(search_term)), ., NA))) %>%
1731318025863:select(where(~ any(!is.na(.)))) %>%
1731318025863:print()
1731318099726:search_term <- "Para"
1731318099726:KolgrTaxa %>%
1731318099727:filter_all(any_vars(str_detect(tolower(.), tolower(search_term)))) %>%
1731318099727:mutate(across(where(is.character), ~ ifelse(str_detect(tolower(.), tolower(search_term)), ., NA))) %>%
1731318099727:select(where(~ any(!is.na(.)))) %>%
1731318099727:print()search_term <- "Dorvil"
1731318103253:search_term <- "Dorvil"
1731318103254:KolgrTaxa %>%
1731318103254:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731318103254:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731318103254:print()
1731318143350:search_term <- "Paranonidae"
1731318143350:KolgrTaxa %>%
1731318143350:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731318143351:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731318143351:print()
1731318148446:search_term <- "Paraonidae"
1731318148446:KolgrTaxa %>%
1731318148447:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731318148447:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731318148447:print()
1731318168263:search_term <- "Paraonidae"
1731318168263:KolgrTaxa %>%
1731318168264:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731318168264:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731318168264:print(n=1000)
1731318272309:search_term <- "Pectinaria"
1731318272310:KolgrTaxa %>%
1731318272310:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731318272310:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731318272310:print(n=1000)
1731318562375:search_term <- "Cistenides"
1731318562375:KolgrTaxa %>%
1731318562375:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731318562375:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731318562375:print(n=1000)
1731318596110:search_term <- "Lagis"
1731318596110:KolgrTaxa %>%
1731318596110:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731318596110:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731318596111:print(n=1000)
1731318700877:search_term <- "Pectinar"
1731318700878:KolgrTaxa %>%
1731318700878:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731318700878:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731318700878:print(n=1000)
1731318774230:search_term <- "hyperborea"
1731318774230:KolgrTaxa %>%
1731318774231:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731318774231:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731318774231:print(n=1000)
1731318805454:search_term <- "Lagis koreni"
1731318805454:KolgrTaxa %>%
1731318805454:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731318805455:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731318805455:print(n=1000)
1731318809693:search_term <- "koreni"
1731318809693:KolgrTaxa %>%
1731318809693:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731318809694:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731318809694:print(n=1000)
1731318943343:search_term <- "Pectinar"
1731318943344:KolgrTaxa %>%
1731318943344:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731318943344:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731318943345:print(n=1000)
1731319188927:search_term <- "Pseudopolydora"
1731319188927:KolgrTaxa %>%
1731319188927:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731319188928:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731319188928:print(n=1000)
1731319268614:search_term <- "Sphaerosyllis"
1731319268614:KolgrTaxa %>%
1731319268615:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731319268615:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731319268615:print(n=1000)
1731319339911:search_term <- "Sphaerosyllis"
1731319339911:ekkiungvidi %>%
1731319339911:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731319339911:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731319339911:print(n=1000)
1731319356775:search_term <- "cpit"
1731319356775:ekkiungvidi %>%
1731319356775:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731319356776:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731319356776:print(n=1000)
1731319372312:KolgrTaxa <- KolgrTaxa %>%
1731319372312:filter(if_all(where(is.character), ~ !. %in% taxa_to_remove))
1731319372319:KolgrTaxa$gamalt <- iconv(KolgrTaxa$gamalt, from = "UTF-8", to = "UTF-8", sub = NA)
1731319372319:remove_list <- paste(c(
1731319372320:"nýsestir",
1731319372320:"ungviði",
1731319372320:"ungv",
1731319372320:"ungv.",
1731319372320:"juv",
1731319372320:"harpacticoida"
1731319372320:), collapse = '|')
1731319372320:remove_ind <- lapply(strsplit(remove_list , "\\|")[[1]] , \(x) grep(x , KolgrTaxa$gamalt , fixed = T)) |>
1731319372321:unlist() |>
1731319372321:unique()
1731319372324:ekkiungvidi <- KolgrTaxa[-remove_ind,]
1731319375949:search_term <- "cpit"
1731319375949:ekkiungvidi %>%
1731319375950:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731319375950:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731319375950:print(n=1000)
1731319380486:search_term <- "capit"
1731319380487:ekkiungvidi %>%
1731319380487:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731319380487:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731319380488:print(n=1000)
1731319384815:search_term <- "Sphaerosyllis"
1731319384815:ekkiungvidi %>%
1731319384815:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731319384816:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731319384816:print(n=1000)
1731319436094:search_term <- "Gattyana"
1731319436095:ekkiungvidi %>%
1731319436095:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731319436095:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731319436095:print(n=1000)
1731319541230:search_term <- "Leaena"
1731319541231:ekkiungvidi %>%
1731319541231:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731319541231:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731319541231:print(n=1000)
1731319602429:search_term <- "terebellides"
1731319602429:ekkiungvidi %>%
1731319602429:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731319602430:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731319602430:print(n=1000)
1731319630559:search_term <- "terebellides"
1731319630559:ekkiungvidi %>%
1731319630560:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731319630560:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal, worms) %>%
1731319630560:print(n=1000)
1731319805616:search_term <- "Maldanide"
1731319805616:ekkiungvidi %>%
1731319805616:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731319805616:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal, worms) %>%
1731319805617:print(n=1000)
1731319813374:search_term <- "Maldan"
1731319813374:ekkiungvidi %>%
1731319813375:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731319813375:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal, worms) %>%
1731319813375:print(n=1000)
1731320386892:search_term <- "Dorvil"
1731320386892:ekkiungvidi %>%
1731320386892:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731320386892:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731320386893:print()
1731320400236:KolgrTaxa <- read_csv(file("data/raw/KolgrTaxa.csv", encoding = "UTF-8"), na = "empty")
1731320400573:taxa_to_remove <- c(
1731320400573:"Foraminifera",
1731320400573:"Nematoda",
1731320400573:"Cirripedia",
1731320400573:"Porifera",
1731320400573:"Cnidaria",
1731320400573:"Bryozoa",
1731320400573:"Sipuncula",
1731320400573:"Platyhelminthes",
1731320400573:"Nemertea",
1731320400573:"Oligochaeta",
1731320400574:"Ostracoda"
1731320400574:)
1731320400574:# Filter out the specified taxa using if_all()
1731320400574:KolgrTaxa <- KolgrTaxa %>%
1731320400574:filter(if_all(where(is.character), ~ !. %in% taxa_to_remove))
1731320400581:KolgrTaxa$gamalt <- iconv(KolgrTaxa$gamalt, from = "UTF-8", to = "UTF-8", sub = NA)
1731320400582:remove_list <- paste(c(
1731320400582:"nýsestir",
1731320400582:"ungviði",
1731320400582:"ungv",
1731320400582:"ungv.",
1731320400582:"juv",
1731320400583:"harpacticoida"
1731320400583:), collapse = '|')
1731320400583:remove_ind <- lapply(strsplit(remove_list , "\\|")[[1]] , \(x) grep(x , KolgrTaxa$gamalt , fixed = T)) |>
1731320400583:unlist() |>
1731320400583:unique()
1731320400586:ekkiungvidi <- KolgrTaxa[-remove_ind,]
1731320404085:search_term <- "Dorvil"
1731320404085:ekkiungvidi %>%
1731320404085:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731320404086:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731320404086:print()
1731320552943:search_term <- "Maldani"
1731320552943:ekkiungvidi %>%
1731320552943:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731320552943:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731320552944:print()
1731320559757:search_term <- "Maldani"
1731320559757:ekkiungvidi %>%
1731320559757:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731320559758:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731320559758:print(n=1000)
1731320665767:search_term <- "Gattyana"
1731320665767:ekkiungvidi %>%
1731320665767:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731320665767:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731320665768:print(n=1000)
1731320796551:search_term <- "Maldani"
1731320796552:ekkiungvidi %>%
1731320796552:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731320796553:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731320796553:print(n=1000)
1731320849414:search_term <- "Maldani"
1731320849414:ekkiungvidi %>%
1731320849414:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731320849415:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731320849415:print(n=1000) %>% distinct(Flokkun)
1731321023486:search_term <- "Maldani"
1731321023487:ekkiungvidi %>%
1731321023487:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731321023487:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731321023487:print(n=1000) %>% distinct(Flokkun,Artal)
1731321111037:search_term <- "Gattyana"
1731321111038:ekkiungvidi %>%
1731321111038:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731321111038:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731321111038:print(n=1000)
1731321120620:search_term <- "Gattyana"
1731321120621:ekkiungvidi %>%
1731321120621:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731321120621:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731321120621:print(n=1000) %>% distinct(Flokkun,Artal)
1731321162078:search_term <- "Gattyana"
1731321162079:ekkiungvidi %>%
1731321162079:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731321162079:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731321162079:print(n=1000) %>% distinct(Flokkun,Artal,stod)
1731321170837:search_term <- "Gattyana"
1731321170838:ekkiungvidi %>%
1731321170838:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731321170838:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731321170838:print(n=1000) %>% distinct(Flokkun,Artal,Stod)
1731321184279:unique(ekkiungvidi$stod)
1731321216334:search_term <- "Gattyana"
1731321216335:ekkiungvidi %>%
1731321216335:filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731321216335:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731321216335:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731321216335:print(n=1000) %>% distinct(Flokkun,Artal)
1731321222639:search_term <- "Gattyana"
1731321222639:ekkiungvidi %>%
1731321222639:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731321222639:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731321222640:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731321222640:print(n=1000) %>% distinct(Flokkun,Artal)
1731321307413:search_term <- "maldanid"
1731321307414:ekkiungvidi %>%
1731321307414:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731321307414:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731321307414:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731321307414:print(n=1000) %>% distinct(Flokkun,Artal)
1731321357223:search_term <- "maldan"
1731321357223:ekkiungvidi %>%
1731321357223:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731321357223:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731321357223:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731321357224:print(n=1000) %>% distinct(Flokkun,Artal)
1731321482502:search_term <- "maldan"
1731321482502:ekkiungvidi %>%
1731321482502:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731321482502:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731321482502:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731321482503:print(n=1000) %>% distinct(Flokkun)
1731325900905:search_term <- "sipunc"
1731325900906:ekkiungvidi %>%
1731325900906:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731325900906:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731325900906:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731325900906:print(n=1000) %>% distinct(Flokkun,Artal)
1731326935890:search_term <- "tubif"
1731326935890:ekkiungvidi %>%
1731326935890:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731326935890:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731326935891:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731326935891:print(n=1000) %>% distinct(Flokkun,Artal)
1731326967348:KolgrTaxa <- read_csv(file("data/raw/KolgrTaxa.csv", encoding = "UTF-8"), na = "empty")
1731326967665:taxa_to_remove <- c(
1731326967665:"Foraminifera",
1731326967665:"Nematoda",
1731326967665:"Cirripedia",
1731326967665:"Porifera",
1731326967665:"Cnidaria",
1731326967665:"Bryozoa",
1731326967665:"Sipuncula",
1731326967665:"Platyhelminthes",
1731326967666:"Nemertea",
1731326967666:#"Oligochaeta",
1731326967666:"Ostracoda"
1731326967666:)
1731326968659:# Filter out the specified taxa using if_all()
1731326968659:KolgrTaxa <- KolgrTaxa %>%
1731326968660:filter(if_all(where(is.character), ~ !. %in% taxa_to_remove))
1731326971625:KolgrTaxa$gamalt <- iconv(KolgrTaxa$gamalt, from = "UTF-8", to = "UTF-8", sub = NA)
1731326972560:remove_list <- paste(c(
1731326972561:"nýsestir",
1731326972561:"ungviði",
1731326972561:"ungv",
1731326972561:"ungv.",
1731326972561:"juv",
1731326972561:"harpacticoida"
1731326972561:), collapse = '|')
1731326974521:remove_ind <- lapply(strsplit(remove_list , "\\|")[[1]] , \(x) grep(x , KolgrTaxa$gamalt , fixed = T)) |>
1731326974521:unlist() |>
1731326974521:unique()
1731326976792:ekkiungvidi <- KolgrTaxa[-remove_ind,]
1731326982192:search_term <- "tubif"
1731326982193:ekkiungvidi %>%
1731326982193:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731326982193:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731326982193:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731326982193:print(n=1000) %>% distinct(Flokkun,Artal)
1731327016767:search_term <- "oligoc"
1731327016767:ekkiungvidi %>%
1731327016768:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731327016768:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731327016768:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731327016768:print(n=1000) %>% distinct(Flokkun,Artal)
1731327079520:search_term <- "oligoc"
1731327079521:ekkiungvidi %>%
1731327079521:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731327079521:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731327079521:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731327079521:print(n=1000) %>% distinct(Flokkun)
1731327308473:search_term <- "oligoc"
1731327308473:ekkiungvidi %>%
1731327308474:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731327308474:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731327308474:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731327308474:print(n=1000) %>% distinct(Flokkun,Artal,N)
1731327334962:search_term <- "oligoc"
1731327334962:ekkiungvidi %>%
1731327334962:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731327334962:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731327334963:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731327334963:print(n=1000) %>% distinct(Flokkun,Artal,N) %>% print(n=1000)
1731327492890:search_term <- "oligoc"
1731327492891:ekkiungvidi %>%
1731327492891:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731327492891:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731327492891:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731327492892:print(n=1000) %>% distinct(Flokkun,Artal,N) %>% group_by(Flokkun,Artal) %>% summarise(N=sum(N)) %>%  print(n=1000)
1731329902026:library(dplyr)
1731329902027:library(tidyr)
1731329902027:library(stringr)
1731329902028:# Load the combined data
1731329902028:allartalningar <- readRDS("data/allartalningar.rds")
1731329902044:df <- allartalningar
1731329902044:# Capitalize the first letter of each word in the 'Flokkun' column
1731329902045:df <- df %>%
1731329902045:mutate(Flokkun = str_to_sentence(Flokkun))
1731329902052:# Create a 'gamalt' column with the original 'Flokkun' values
1731329902052:df <- df %>%
1731329902052:mutate(gamalt = Flokkun)
1731329902054:# Clean the 'Flokkun' column by removing specific patterns
1731329902054:df <- df %>%
1731329902054:mutate(Flokkun = str_remove_all(Flokkun,
1731329902054:" kemur líka Heteromastus filiformis| Sipunculidea/|\\.| TUNICATA EÐA FLEIRI?| nýsestir| ungviði| ungv\\.| ungv| juv| sp\\.| sp| ath"
1731329902054:))
1731329902058:# Standardize species names
1731329902058:df <- df %>% mutate(Flokkun = case_when(
1731329902059:str_detect(Flokkun, "Campanulariidae sp") ~ "Campanulariidae",
1731329902059:str_detect(Flokkun, "Cycloterus lumpus") ~ "Cyclopterus lumpus",
1731329902059:str_detect(Flokkun, "Götungar") ~ "Foraminifera",
1731329902059:str_detect(Flokkun, "Möttuldýr?" ) ~ "Tunicata",
1731329902059:str_detect(Flokkun, "Nephtiydae" ) ~ "Nephtyidae",
1731329902059:str_detect(Flokkun, "Phyllodoce maculata" ) ~ "Phyllodoce maculata",
1731329902059:str_detect(Flokkun, "Polynoida" ) ~ "Polynoidae",
1731329902060:str_detect(Flokkun, "Sternapsis scutata") ~ "Sternaspis scutata",
1731329902060:str_detect(Flokkun, "Terribellides stroemi") ~ "Terebellides stroemii",
1731329902060:str_detect(Flokkun, "Tubificoides benedict") ~ "Tubificoides benedii",
1731329902060:str_detect(Flokkun, "Clinocardium cillaturn" ) ~ "Ciliatocardium ciliatum ciliatum",
1731329902060:str_detect(Flokkun, "Gattyana cirrosa" ) ~ "Gattyana cirrhosa",
1731329902060:str_detect(Flokkun, "Möttuldýr" ) ~ "Tunicata",
1731329902061:str_detect(Flokkun, "Nemertea=nemertina" ) ~ "Nemertea",
1731329902061:str_detect(Flokkun, "Nudibranch"  ) ~ "Nudibranchia",
1731329902061:str_detect(Flokkun, "Priapulus candatus" ) ~ "Priapulus caudatus",
1731329902061:str_detect(Flokkun, "Priapulus camelus" ) ~ "Priapulus caudatus",
1731329902061:str_detect(Flokkun, "Sipunculidea/Sipunculidae") ~ "Sipunculidae",
1731329902061:str_detect(Flokkun, "Terribellides kozloffi" ) ~ "Tubificoides kozloffi",
1731329902062:str_detect(Flokkun, "Tubicoides kozloffi" ) ~ "Tubificoides kozloffi",
1731329902062:str_detect(Flokkun, "Tubificoides benedict" ) ~ "Tubificoides benedii",
1731329902062:str_detect(Flokkun, "Tubificoides benedi" ) ~ "Tubificoides benedii",
1731329902062:str_detect(Flokkun, "Terebellides benedi" ) ~ "Tubificoides benedii",
1731329902062:str_detect(Flokkun, "Astartidae borealis" ) ~ "Astarte borealis",
1731329902063:str_detect(Flokkun, "Cerastoderma ovale") ~ "Parvicardium pinnulatum",
1731329902063:str_detect(Flokkun, "Exogone verrugera") ~ "Exogone verugera",
1731329902063:str_detect(Flokkun, "Nuculana tenuis" ) ~ "Ennucula tenuis",
1731329902063:str_detect(Flokkun, "Opistobranchia") ~ "Opisthobranchia",
1731329902064:str_detect(Flokkun, "Serripes groenlandica") ~ "Serripes groenlandicus",
1731329902064:str_detect(Flokkun, "Cardidae"   ) ~ "Cardiidae",
1731329902064:str_detect(Flokkun, "Henricia sanguinolenta") ~ "Henricia sanguinolenta",
1731329902064:str_detect(Flokkun, "Macoma calcaria" ) ~ "Macoma calcarea",
1731329902064:str_detect(Flokkun, "Ophryotrocha cf Cosmetandra") ~ "Ophryotrocha cosmetandra",
1731329902065:str_detect(Flokkun, "Praxillella m"  ) ~ "Praxillella",
1731329902065:str_detect(Flokkun, "Ranaormur"  ) ~ "Nemertea",
1731329902065:str_detect(Flokkun, "Terebellidae"  ) ~ "Terebellidae",
1731329902065:str_detect(Flokkun, "Terebellides benedi"  ) ~ "Terebellides",
1731329902066:str_detect(Flokkun, "Tubicoides benedi" ) ~ "Tubificoides benedii",
1731329902066:str_detect(Flokkun, "Cardidae" ) ~ "Cardiidae",
1731329902066:str_detect(Flokkun, "Corophium bonellii" ) ~ "Crassicorophium bonellii",
1731329902066:str_detect(Flokkun, "Corophium bonnellii" ) ~ "Crassicorophium bonellii",
1731329902067:str_detect(Flokkun, "Plergonium spinosum" ) ~ "Pleurogonium spinosissimum",
1731329902067:str_detect(Flokkun, "spio" ) ~ "Spio",
1731329902067:str_detect(Flokkun, "Skeljar" ) ~ "Bivalvia",
1731329902067:TRUE ~ Flokkun
1731329902068:))
1731329938050:search_term <- "Lirfurogdrasl"
1731329938050:df %>%
1731329938050:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731329938050:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731329938051:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731329938051:print(n=1000) %>% distinct(Flokkun,Artal,N) %>% group_by(Flokkun,Artal) %>% summarise(N=sum(N)) %>%  print(n=1000)
1731329952420:search_term <- "Lirfurogdrasl"
1731329952421:df %>%
1731329952421:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731329952421:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731329952421:#select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731329952421:print(n=1000) %>% distinct(Flokkun,Artal,N) %>% group_by(Flokkun,Artal) %>% summarise(N=sum(N)) %>%  print(n=1000)
1731329981397:search_term <- "Terebellides benedi"
1731329981397:df %>%
1731329981397:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731329981397:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731329981398:#select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731329981398:print(n=1000) %>% distinct(Flokkun,Artal,N) %>% group_by(Flokkun,Artal) %>% summarise(N=sum(N)) %>%  print(n=1000)
1731330490980:library(readr)
1731330490981:henda <- read_csv("data/processed/henda.csv")
1731330491172:View(henda)
1731330501633:library(readr)
1731330501634:henda <- read_csv("data/processed/henda.csv")
1731330501792:henda
1731331060588:library(readr)
1731331060590:henda <- read_csv("data/processed/henda.csv")
1731331060867:henda
1731331158796:library(readr)
1731331158797:henda <- read_csv("data/processed/henda.csv")
1731331159018:henda %>% select(Flokkun:last_col())
1731331502044:henda %>%
1731331502044:column_to_rownames(var = "Flokkun") %>%
1731331502044:t() %>%
1731331502044:as.data.frame() %>%
1731331502045:mutate(station_temp = rownames(.))
1731331538126:# Load cleaned data
1731331538127:#df_result <- result # just so this won't be accidentally changed
1731331538127:df <- df_result
1731331544884:# Prepare data including 1999
1731331544884:species_matrix_all <- df %>%
1731331544884:select(station, year, species, adjusted_density) %>%
1731331544884:pivot_wider(
1731331544885:names_from = species,
1731331544885:values_from = adjusted_density,
1731331544885:values_fill = 0
1731331544885:) %>%
1731331544885:mutate(
1731331544885:station_temp = station,
1731331544886:year_temp = year
1731331544886:) %>%
1731331544886:select(-station, -year)
1731331548289:df
1731331558932:species_matrix_all <- df %>%
1731331558932:select(station, year, species, adjusted_density) %>%
1731331558932:pivot_wider(
1731331558933:names_from = species,
1731331558933:values_from = adjusted_density,
1731331558933:values_fill = 0
1731331558933:) %>%
1731331558933:mutate(
1731331558933:station_temp = station,
1731331558934:year_temp = year
1731331558934:) %>%
1731331558934:select(-station, -year)
1731331562555:species_matrix_all
1731331652779:henda %>%
1731331652780:select(Flokkun:last_col()) %>%
1731331652780:pivot_longer(
1731331652780:cols = -Flokkun,
1731331652780:names_to = "station_temp",
1731331652780:values_to = "adjusted_density"
1731331652780:) %>%
1731331652781:pivot_wider(
1731331652781:names_from = Flokkun,
1731331652781:values_from = adjusted_density,
1731331652781:values_fill = 0
1731331652781:)
1731331656116:rlang::last_trace()
1731331695042:henda %>%
1731331695043:select(Flokkun:last_col()) %>%
1731331695043:pivot_longer(
1731331695043:cols = c(A7, B5, B8, C4, E3, E4),
1731331695043:names_to = "station_temp",
1731331695043:values_to = "adjusted_density"
1731331695043:) %>%
1731331695044:pivot_wider(
1731331695044:names_from = Flokkun,
1731331695044:values_from = adjusted_density
1731331695044:) %>%
1731331695044:mutate(across(-station_temp, ~replace_na(., 0)))
1731331743771:henda %>%
1731331743771:select(Flokkun:last_col()) %>%
1731331743771:# No need for first pivot since data is already in wide format
1731331743771:# Just rename columns to match original code structure
1731331743772:rename(species = Flokkun) %>%
1731331743772:pivot_longer(
1731331743772:cols = c(A7, B5, B8, C4, E3, E4),
1731331743772:names_to = "station_temp",
1731331743772:values_to = "adjusted_density"
1731331743772:) %>%
1731331743773:pivot_wider(
1731331743773:names_from = species,
1731331743773:values_from = adjusted_density,
1731331743773:values_fill = 0
1731331743774:)
1731331749833:rlang::last_trace()
1731331779410:henda %>%
1731331779410:select(Flokkun:last_col()) %>%
1731331779410:column_to_rownames(var = "Flokkun") %>%
1731331779410:t() %>%
1731331779410:as.data.frame() %>%
1731331779411:rownames_to_column("station_temp")
1731331823655:species_matrix_all
1731331882130:henda %>%
1731331882130:pivot_longer(cols = A7:E4, names_to = "station", values_to = "density") %>%
1731331882131:pivot_wider(names_from = Flokkun, values_from = density, values_fill = 0) %>%
1731331882131:mutate(station_temp = station)
1731331883846:rlang::last_trace()
1731331912546:henda %>%
1731331912546:pivot_longer(cols = A7:E4, names_to = "station", values_to = "density") %>%
1731331912547:mutate(density = as.numeric(density)) %>%  # Ensure density is numeric
1731331912547:pivot_wider(names_from = Flokkun, values_from = density, values_fill = list(density = 0)) %>%
1731331912547:mutate(station_temp = station)
1731331946764:henda %>%
1731331946764:pivot_longer(cols = A7:E4, names_to = "station", values_to = "density") %>%
1731331946764:mutate(density = replace_na(density, 0)) %>%  # Fill missing values with 0
1731331946764:pivot_wider(names_from = Flokkun, values_from = density, values_fill = list(density = 0)) %>%
1731331946764:mutate(station_temp = station)
1731331949661:rlang::last_trace()
1731331974634:henda %>%
1731331974634:pivot_longer(cols = A7:E4, names_to = "station", values_to = "density") %>%
1731331974635:mutate(density = replace_na(density, 0)) %>%  # Fill missing values with 0
1731331974635:pivot_wider(names_from = Flokkun, values_from = density, values_fill = 0) %>%
1731331974635:mutate(station_temp = station)
1731331977377:rlang::last_trace()
1731332031835:henda %>%
1731332031835:pivot_longer(cols = A7:E4, names_to = "station", values_to = "density") %>%
1731332031835:mutate(density = replace_na(density, 0)) %>%  # Fill missing values with 0
1731332031836:pivot_wider(names_from = Flokkun, values_from = density, values_fill = list(density = 0)) %>%
1731332031836:mutate(station_temp = station)
1731332184293:library(dplyr)
1731332184293:library(tidyr)
1731332184294:# Clean species names in henda
1731332184294:henda_clean <- henda %>%
1731332184294:mutate(Flokkun = gsub(" ", "_", Flokkun))
1731332184297:# Pivot the data to match species_matrix_all format
1731332184297:species_matrix_henda <- henda_clean %>%
1731332184298:pivot_wider(
1731332184298:names_from = Flokkun,
1731332184298:values_from = c(A7, B5, B8, C4, E3, E4),
1731332184298:values_fill = 0
1731332184299:)
1731332187238:rlang::last_trace()
1731332192257:henda
1731332251106:library(dplyr)
1731332251106:library(tidyr)
1731332251106:# Clean species names in henda
1731332251106:henda_clean <- henda %>%
1731332251107:mutate(Flokkun = gsub(" ", "_", Flokkun))
1731332251108:# Pivot the data to match species_matrix_all format
1731332251109:species_matrix_henda <- henda_clean %>%
1731332251109:pivot_wider(
1731332251109:names_from = Flokkun,
1731332251109:values_from = c(A7, B5, B8, C4, E3, E4),
1731332251109:values_fill = list(A7 = 0, B5 = 0, B8 = 0, C4 = 0, E3 = 0, E4 = 0)
1731332251109:)
1731332257594:henda
1731332277435:print(henda , n=1000)
1731332327245:henda <- read_csv("data/processed/henda.csv", na = c("", "NA")) %>%
1731332327245:replace(is.na(.), 0)
1731332327459:# View the dataset to confirm changes
1731332327459:print(henda)
1731332335041:henda <- read_csv("data/processed/henda.csv", na = c("", "NA")) %>%
1731332335042:replace(is.na(.), 0)
1731332335225:# View the dataset to confirm changes
1731332335225:print(henda, n=10000)
1731332376907:henda %>%
1731332376908:pivot_longer(cols = A7:E4, names_to = "station", values_to = "density") %>%
1731332376908:mutate(density = replace_na(density, 0)) %>%  # Fill missing values with 0
1731332376908:pivot_wider(names_from = Flokkun, values_from = density, values_fill = list(density = 0)) %>%
1731332376908:mutate(station_temp = station)henda_clean <- henda %>%
1731332400298:henda_clean <- henda %>%
1731332400299:mutate(Flokkun = gsub(" ", "_", Flokkun))
1731332400301:# Pivot the data to match species_matrix_all format
1731332400301:species_matrix_henda <- henda_clean %>%
1731332400301:pivot_wider(
1731332400301:names_from = Flokkun,
1731332400301:values_from = c(A7, B5, B8, C4, E3, E4),
1731332400301:values_fill = 0
1731332400302:)
1731332406573:rlang::last_trace()
1731332449090:library(readr)
1731332449090:# Read in the henda dataset, specifying numeric columns as integers
1731332449090:henda <- read_csv(
1731332449091:"data/processed/henda.csv",
1731332449091:col_types = cols(
1731332449091:.default = col_double(),  # Default to double for unspecified columns
1731332449091:A7 = col_integer(),
1731332449091:B5 = col_integer(),
1731332449091:B8 = col_integer(),
1731332449091:C4 = col_integer(),
1731332449092:E3 = col_integer(),
1731332449092:E4 = col_integer()
1731332449092:),
1731332449092:na = c("", "NA")
1731332449092:) %>%
1731332449092:replace(is.na(.), 0)
1731332449205:# View the dataset to confirm changes
1731332449205:print(henda,n=1000)
1731332494570:library(readr)
1731332494570:# Read in the henda dataset, specifying column types
1731332494571:henda <- read_csv(
1731332494571:"data/processed/henda.csv",
1731332494571:col_types = cols(
1731332494571:.default = col_double(),  # Default to double for unspecified columns
1731332494571:Flokkun = col_character(),  # Ensure Flokkun is read as character
1731332494571:A7 = col_integer(),
1731332494572:B5 = col_integer(),
1731332494572:B8 = col_integer(),
1731332494572:C4 = col_integer(),
1731332494572:E3 = col_integer(),
1731332494572:E4 = col_integer()
1731332494572:),
1731332494572:na = c("", "NA")
1731332494573:) %>%
1731332494573:mutate(across(where(is.numeric), ~ replace_na(., 0)))  # Replace NA with 0 for numeric columns
1731332494686:# View the dataset to confirm changes
1731332494686:print(henda,n=10000)
1731332532907:henda_clean <- henda %>%
1731332532907:mutate(Flokkun = gsub(" ", "_", Flokkun))
1731332532910:# Pivot the data to match species_matrix_all format
1731332532910:species_matrix_henda <- henda_clean %>%
1731332532911:pivot_wider(
1731332532911:names_from = Flokkun,
1731332532911:values_from = c(A7, B5, B8, C4, E3, E4),
1731332532911:values_fill = 0
1731332532911:)
1731332535060:rlang::last_trace()
1731332583052:# Read in the henda dataset, specifying column types
1731332583053:henda <- read_csv(
1731332583053:"data/processed/henda.csv",
1731332583053:col_types = cols(
1731332583053:.default = col_double(),  # Default to double for unspecified columns
1731332583054:Flokkun = col_character(),  # Ensure Flokkun is read as character
1731332583054:A7 = col_integer(),
1731332583054:B5 = col_integer(),
1731332583054:B8 = col_integer(),
1731332583054:C4 = col_integer(),
1731332583054:E3 = col_integer(),
1731332583055:E4 = col_integer()
1731332583055:),
1731332583055:na = c("", "NA")
1731332583055:) %>%
1731332583055:mutate(across(where(is.numeric), ~ replace_na(., 0)))  %>% # Replace NA with 0 for numeric columns
1731332583056:select(Flokkun:last_col())
1731332584981:# View the dataset to confirm changes
1731332584981:print(henda)
1731332600393:# View the dataset to confirm changes
1731332600393:print(henda, n=1000)
1731332612861:henda_clean <- henda %>%
1731332612861:mutate(Flokkun = gsub(" ", "_", Flokkun))
1731332612863:# Pivot the data to match species_matrix_all format
1731332612863:species_matrix_henda <- henda_clean %>%
1731332612863:pivot_wider(
1731332612863:names_from = Flokkun,
1731332612864:values_from = c(A7, B5, B8, C4, E3, E4),
1731332612864:values_fill = 0
1731332612864:)
1731332632075:henda %>%
1731332632075:mutate(Flokkun = gsub(" ", "_", Flokkun))
1731332655949:henda_clean <- henda %>%
1731332655950:mutate(Flokkun = gsub(" ", "_", Flokkun))
1731332655952:# Pivot the data to match species_matrix_all format
1731332655953:species_matrix_henda <- henda_clean %>%
1731332655953:pivot_wider(
1731332655953:names_from = Flokkun,
1731332655953:values_from = c(A7, B5, B8, C4, E3, E4),
1731332655953:values_fill = 0
1731332655953:)
1731332657540:rlang::last_trace()
1731332835402:henda_clean <- henda_clean %>%
1731332835403:mutate(across(c(A7, B5, B8, C4, E3, E4), as.numeric))
1731332835412:# Pivot to wider format
1731332835412:species_matrix_henda <- henda_clean %>%
1731332835413:pivot_wider(
1731332835413:names_from = Flokkun,
1731332835413:values_from = c(A7, B5, B8, C4, E3, E4),
1731332835429:values_fill = list(A7 = 0, B5 = 0, B8 = 0, C4 = 0, E3 = 0, E4 = 0)
1731332835430:)
1731332952378:# Load necessary libraries
1731332952379:library(tidyr)
1731332952379:library(dplyr)
1731332952379:# Reshape `henda` to match `species_matrix` format
1731332952379:henda_matrix <- henda %>%
1731332952380:pivot_wider(names_from = Flokkun, values_from = c(A7, B5, B8, C4, E3, E4), values_fill = list(value = 0)) %>%
1731332952380:select(-`...1`)
1731332974356:# Read in the henda dataset, specifying column types
1731332974356:henda <- read_csv(
1731332974357:"data/processed/henda.csv",
1731332974357:col_types = cols(
1731332974357:.default = col_double(),  # Default to double for unspecified columns
1731332974357:Flokkun = col_character(),  # Ensure Flokkun is read as character
1731332974357:A7 = col_integer(),
1731332974358:B5 = col_integer(),
1731332974358:B8 = col_integer(),
1731332974358:C4 = col_integer(),
1731332974358:E3 = col_integer(),
1731332974359:E4 = col_integer()
1731332974359:),
1731332974359:na = c("", "NA")
1731332974359:) %>%
1731332974359:mutate(across(where(is.numeric), ~ replace_na(., 0)))  %>% # Replace NA with 0 for numeric columns
1731332974359:select(Flokkun:last_col())
1731332983138:henda
1731333016483:henda_matrix <- henda %>%
1731333016483:pivot_wider(names_from = Flokkun, values_from = c(A7, B5, B8, C4, E3, E4), values_fill = list(value = 0)) %>%
1731333016483:select(-`...1`)
1731333182554:# Load necessary libraries
1731333182554:library(tidyr)
1731333182555:library(dplyr)
1731333182555:# Aggregate duplicate entries by summing them before pivoting
1731333182555:henda_summarized <- henda %>%
1731333182556:group_by(Flokkun) %>%
1731333182556:summarise(across(A7:E4, sum, na.rm = TRUE), .groups = "drop")
1731333182990:# Pivot to wider format after aggregating duplicates
1731333182991:henda_matrix <- henda_summarized %>%
1731333182991:pivot_wider(names_from = Flokkun, values_from = c(A7, B5, B8, C4, E3, E4), values_fill = list(value = 0))
1731333183003:# Preview the reshaped matrix structure
1731333183003:print(henda_matrix)
1731333220915:# Load necessary libraries
1731333220915:library(tidyr)
1731333220915:library(dplyr)
1731333220916:# Step 1: Pivot the data longer so that each row represents a site-species combination
1731333220916:henda_long <- henda %>%
1731333220916:pivot_longer(cols = A7:E4, names_to = "Site", values_to = "Count")
1731333220921:# Step 2: Pivot back to wide format, with each species as a separate column
1731333220921:henda_matrix <- henda_long %>%
1731333220921:pivot_wider(names_from = Flokkun, values_from = Count, values_fill = list(Count = 0))
1731333234866:df
1731333504845:# Read in the henda dataset, specifying column types
1731333504846:henda <- read_csv(
1731333504846:"data/processed/henda.csv",
1731333504846:col_types = cols(
1731333504847:.default = col_double(),  # Default to double for unspecified columns
1731333504847:Flokkun = col_character(),  # Ensure Flokkun is read as character
1731333504847:A7 = col_integer(),
1731333504847:B5 = col_integer(),
1731333504847:B8 = col_integer(),
1731333504847:C4 = col_integer(),
1731333504848:E3 = col_integer(),
1731333504848:E4 = col_integer()
1731333504848:),
1731333504848:na = c("", "NA")
1731333504848:) %>%
1731333504848:mutate(across(where(is.numeric), ~ replace_na(., 0)))  %>% # Replace NA with 0 for numeric columns
1731333504849:select(Flokkun:last_col())
1731333518237:henda <- read_csv(
1731333518237:"data/processed/henda.csv")
1731333555283:# Read in the henda dataset, specifying column types
1731333555283:henda <- read_csv(
1731333555284:"data/processed/henda.csv",
1731333555284:col_types = cols(
1731333555284:Year = col_integer(),
1731333555284:Flokkun = col_character(),  # Ensure Flokkun is read as character
1731333555284:A7 = col_integer(),
1731333555284:B5 = col_integer(),
1731333555284:B8 = col_integer(),
1731333555285:C4 = col_integer(),
1731333555285:E3 = col_integer(),
1731333555285:E4 = col_integer()
1731333555285:),
1731333555285:na = c("", "NA")
1731333555285:) %>%
1731333555285:mutate(across(where(is.numeric), ~ replace_na(., 0)))  %>% # Replace NA with 0 for numeric columns
1731333555285:select(Flokkun:last_col())
1731333564507:# View the dataset to confirm changes
1731333564508:print(henda, n=1000)
1731333689059:henda %>%
1731333689059:pivot_longer(
1731333689060:names_from = Flokkun,
1731333689060:)
1731333743490:henda_long <- henda %>%
1731333743490:pivot_longer(
1731333743490:cols = A7:E4,               # Specify the columns to pivot
1731333743491:names_to = "Station",       # New column for the names of stations
1731333743491:values_to = "Count"         # New column for the count values
1731333743491:)
1731333746786:henda_long
1731333833813:# Read in the henda dataset, specifying column types
1731333833813:henda <- read_csv(
1731333833814:"data/processed/henda.csv",
1731333833814:col_types = cols(
1731333833814:Year = col_integer(),
1731333833814:Flokkun = col_character(),  # Ensure Flokkun is read as character
1731333833814:A7 = col_integer(),
1731333833814:B5 = col_integer(),
1731333833814:B8 = col_integer(),
1731333833814:C4 = col_integer(),
1731333833815:E3 = col_integer(),
1731333833815:E4 = col_integer()
1731333833815:),
1731333833815:na = c("", "NA")
1731333833815:) %>%
1731333833815:mutate(across(where(is.numeric), ~ replace_na(., 0)))  %>% # Replace NA with 0 for numeric columns
1731333833815:select(Flokkun:last_col())
1731333834547:# View the dataset to confirm changes
1731333834548:print(henda, n=1000)
1731333838932:henda_long <- henda %>%
1731333838932:pivot_longer(
1731333838932:cols = A7:E4,               # Specify the columns to pivot
1731333838932:names_to = "Station",       # New column for the station names
1731333838932:values_to = "Count"         # New column for the count values
1731333838933:) %>%
1731333838933:rename(
1731333838933:station = Station,          # Rename Station to station
1731333838933:year = Year,                # Rename Year to year
1731333838933:species = Flokkun,          # Rename Flokkun to species
1731333838933:adjusted_density = Count    # Rename Count to adjusted_density
1731333838934:)
1731333859044:species_matrix_all <- henda_long %>%
1731333859044:select(station, year, species, adjusted_density) %>%
1731333859045:pivot_wider(
1731333859045:names_from = species,
1731333859045:values_from = adjusted_density,
1731333859045:values_fill = 0
1731333859045:) %>%
1731333859045:mutate(
1731333859045:station_temp = station,
1731333859046:year_temp = year
1731333859046:) %>%
1731333859046:select(-station, -year)
1731333878396:# Find dominant species (>1% relative abundance) including 1999
1731333878396:dominant_species <- species_matrix_all %>%
1731333878396:select(where(is.numeric)) %>%
1731333878396:select(-year_temp) %>%
1731333878396:summarise(across(everything(), sum)) %>%
1731333878396:pivot_longer(everything(),
1731333878396:names_to = "species",
1731333878396:values_to = "total_abundance") %>%
1731333878397:arrange(desc(total_abundance)) %>%
1731333878397:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1731333878397:filter(relative_abundance > 0.01)
1731333888363:# Create PCA plots for each year
1731333888363:years <- sort(unique(species_matrix_all$year_temp))
1731333889028:pca_plots <- list()
1731333890100:for(year in years) {
1731333890100:year_data <- species_matrix_all %>%
1731333890100:filter(year_temp == year)
1731333890100:pca_plots[[as.character(year)]] <- create_year_pca(
1731333890100:year_data,
1731333890100:year,
1731333890100:dominant_species$species
1731333890100:)
1731333890101:ggsave(
1731333890101:paste0("output/pca_biplot_", year, ".png"),
1731333890101:pca_plots[[as.character(year)]],
1731333890101:width = 10, height = 8,
1731333890101:dpi = 300,
1731333890101:bg = "white"
1731333890101:)
1731333890102:}
1731334184748:library("vegan")
1731334197676:for(year in years) {
1731334197676:year_data <- species_matrix_all %>%
1731334197676:filter(year_temp == year)
1731334197676:pca_plots[[as.character(year)]] <- create_year_pca(
1731334197677:year_data,
1731334197677:year,
1731334197677:dominant_species$species
1731334197677:)
1731334197677:ggsave(
1731334197677:paste0("output/pca_biplot_", year, ".png"),
1731334197678:pca_plots[[as.character(year)]],
1731334197678:width = 10, height = 8,
1731334197678:dpi = 300,
1731334197678:bg = "white"
1731334197678:)
1731334197678:}
1731334203971:library(ggrepel)
1731334205108:library(patchwork)
1731334211436:for(year in years) {
1731334211436:year_data <- species_matrix_all %>%
1731334211436:filter(year_temp == year)
1731334211436:pca_plots[[as.character(year)]] <- create_year_pca(
1731334211436:year_data,
1731334211436:year,
1731334211436:dominant_species$species
1731334211437:)
1731334211437:ggsave(
1731334211437:paste0("output/pca_biplot_", year, ".png"),
1731334211437:pca_plots[[as.character(year)]],
1731334211437:width = 10, height = 8,
1731334211437:dpi = 300,
1731334211438:bg = "white"
1731334211438:)
1731334211438:}
1731334329719:# Combine all plots
1731334329719:combined_plot <- wrap_plots(pca_plots, ncol = 2) +
1731334329720:plot_annotation(
1731334329720:title = "Temporal changes in community composition (1999, 2013-2017)",
1731334329720:caption = "Based on species abundance data. Only species with >1% relative abundance shown."
1731334329720:)
1731334332388:ggsave("output/pca_biplots_all_years.png",
1731334332389:combined_plot,
1731334332389:width = 20, height = 15,
1731334332389:dpi = 300,
1731334332389:bg = "white")
1731334337259:library(ggrepel)
1731334337574:library(patchwork)
1731334338845:# Function to create reversed PCA biplot
1731334338845:create_year_pca_reversed <- function(year_data, year, important_species) {
1731334338845:# Perform PCA
1731334338846:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731334338846:# Extract scores - note the reversed roles
1731334338846:species_scores <- data.frame(
1731334338846:scores(species_pca, display = "species"),
1731334338846:Species = rownames(scores(species_pca, display = "species"))
1731334338846:) #%>%
1731334338846:#filter(Species %in% important_species)
1731334338847:station_loadings <- data.frame(
1731334338847:scores(species_pca, display = "sites"),
1731334338847:Station = year_data$station_temp
1731334338847:)
1731334338847:# Calculate variance explained
1731334338847:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731334338848:# Create reversed PCA biplot
1731334338848:pca_plot <- ggplot() +
1731334338848:# Add species points
1731334338848:geom_point(data = species_scores,
1731334338848:aes(x = PC1, y = PC2),
1731334338849:size = 3) +
1731334338849:# Add station arrows
1731334338849:geom_segment(data = station_loadings,
1731334338849:aes(x = 0, y = 0, xend = PC1, yend = PC2, color = Station),
1731334338849:arrow = arrow(length = unit(0.2, "cm"))) +
1731334338850:# Add species labels
1731334338850:geom_text_repel(data = species_scores,
1731334338850:aes(x = PC1, y = PC2, label = Species),
1731334338850:size = 3) +
1731334338850:theme_bw() +
1731334338850:labs(
1731334338851:title = paste("PCA of benthic community composition -", year),
1731334338851:subtitle = "Species shown as points, stations as arrows",
1731334338851:x = paste0("PC1 (", var_explained[1], "%)"),
1731334338851:y = paste0("PC2 (", var_explained[2], "%)")
1731334338851:)
1731334338852:return(pca_plot)
1731334338852:}
1731334340238:# Create reversed PCA plots for each year
1731334340238:years <- sort(unique(species_matrix_all$year_temp))
1731334340719:pca_plots_reversed <- list()
1731334352957:for(year in years) {
1731334352957:year_data <- species_matrix_all %>%
1731334352957:filter(year_temp == year)
1731334352957:pca_plots_reversed[[as.character(year)]] <- create_year_pca_reversed(
1731334352957:year_data,
1731334352957:year,
1731334352958:dominant_species$species
1731334352958:)
1731334352958:ggsave(
1731334352958:paste0("output/pca_biplot_reversed_", year, ".png"),
1731334352958:pca_plots_reversed[[as.character(year)]],
1731334352958:width = 10, height = 8,
1731334352959:dpi = 300,
1731334352959:bg = "white"
1731334352959:)
1731334352959:}
1731334360750:# Combine all reversed plots
1731334360750:combined_plot_reversed <- wrap_plots(pca_plots_reversed, ncol = 2) +
1731334360750:plot_annotation(
1731334360750:title = "Temporal changes in community composition (1999, 2013-2017)",
1731334360750:subtitle = "Species shown as points, stations as arrows",
1731334360750:caption = "Based on species abundance data. Only species with >1% relative abundance shown."
1731334360751:)
1731334362087:ggsave("output/pca_biplots_reversed_all_years.png",
1731334362088:combined_plot_reversed,
1731334362088:width = 20, height = 15,
1731334362088:dpi = 300,
1731334362088:bg = "white")
1731335254301:pca_result <- prcomp(species_matrix_henda, center = TRUE, scale. = TRUE)
1731335275188:pca_result <- prcomp(species_matrix_all, center = TRUE, scale. = TRUE)
1731335288676:species_matrix_all
1731335315532:species_matrix_all %>%
1731335315533:select(where(is.numeric))
1731335339989:sapply(species_matrix_all, class)
1731335339999:# Remove non-numeric columns if any
1731335339999:species_matrix_numeric <- species_matrix_all %>%
1731335339999:select(where(is.numeric))
1731335340003:# Perform PCA on the cleaned data
1731335340004:pca_result <- prcomp(species_matrix_numeric, center = TRUE, scale. = TRUE)
1731335340007:# Summary of PCA
1731335340008:summary(pca_result)
1731335340012:# Variance explained by each component
1731335340012:explained_variance <- pca_result$sdev^2 / sum(pca_result$sdev^2) * 100
1731335340012:print(explained_variance)
1731335607733:# Create PCA plots for each year
1731335607734:years <- sort(unique(species_matrix_all$year_temp))
1731335609061:pca_plots <- list()
1731335609988:for(year in years) {
1731335609988:year_data <- species_matrix_all %>%
1731335609989:filter(year_temp == year)
1731335609989:# Perform PCA on the filtered data
1731335609989:pca_result <- prcomp(year_data, center = TRUE, scale. = TRUE)
1731335609989:# Create the PCA plot
1731335609989:pca_plots[[as.character(year)]] <- create_year_pca(
1731335609989:year_data,
1731335609989:year,
1731335609990:dominant_species$species
1731335609990:)
1731335609990:ggsave(
1731335609990:paste0("output/pca_biplot_", year, ".png"),
1731335609990:pca_plots[[as.character(year)]],
1731335609991:width = 10, height = 8,
1731335609991:dpi = 300,
1731335609991:bg = "white"
1731335609991:)
1731335609991:}
1731335617911:henda <- read_csv(
1731335617911:"data/processed/henda.csv",
1731335617911:col_types = cols(
1731335617911:Year = col_integer(),
1731335617912:Flokkun = col_character(),  # Ensure Flokkun is read as character
1731335617912:A7 = col_integer(),
1731335617912:B5 = col_integer(),
1731335617912:B8 = col_integer(),
1731335617912:C4 = col_integer(),
1731335617912:E3 = col_integer(),
1731335617912:E4 = col_integer()
1731335617913:),
1731335617913:na = c("", "NA")
1731335617913:) %>%
1731335617913:mutate(across(where(is.numeric), ~ replace_na(., 0)))  %>% # Replace NA with 0 for numeric columns
1731335617913:select(Flokkun:last_col())
1731335618011:# View the dataset to confirm changes
1731335618011:print(henda, n=1000)
1731335618151:henda_long <- henda %>%
1731335618151:pivot_longer(
1731335618151:cols = A7:E4,               # Specify the columns to pivot
1731335618151:names_to = "Station",       # New column for the station names
1731335618151:values_to = "Count"         # New column for the count values
1731335618151:) %>%
1731335618151:rename(
1731335618151:station = Station,          # Rename Station to station
1731335618151:year = Year,                # Rename Year to year
1731335618151:species = Flokkun,          # Rename Flokkun to species
1731335618152:adjusted_density = Count    # Rename Count to adjusted_density
1731335618152:)
1731335618157:species_matrix_all <- henda_long %>%
1731335618158:select(station, year, species, adjusted_density) %>%
1731335618158:pivot_wider(
1731335618158:names_from = species,
1731335618158:values_from = adjusted_density,
1731335618158:values_fill = 0
1731335618158:) %>%
1731335618158:mutate(
1731335618158:station_temp = station,
1731335618158:year_temp = year
1731335618159:) %>%
1731335618159:select(-station, -year)
1731335618172:# Find dominant species (>1% relative abundance) including 1999
1731335618172:dominant_species <- species_matrix_all %>%
1731335618172:select(where(is.numeric)) %>%
1731335618172:select(-year_temp) %>%
1731335618173:summarise(across(everything(), sum)) %>%
1731335618173:pivot_longer(everything(),
1731335618173:names_to = "species",
1731335618173:values_to = "total_abundance") %>%
1731335618173:arrange(desc(total_abundance)) %>%
1731335618173:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1731335618173:filter(relative_abundance > 0.01)
1731335618199:# Create PCA plots for each year
1731335618199:years <- sort(unique(species_matrix_all$year_temp))
1731335618199:pca_plots <- list()
1731335618199:for(year in years) {
1731335618199:year_data <- species_matrix_all %>%
1731335618200:filter(year_temp == year)
1731335618200:# Perform PCA on the filtered data
1731335618200:pca_result <- prcomp(year_data, center = TRUE, scale. = TRUE)
1731335618200:# Create the PCA plot
1731335618200:pca_plots[[as.character(year)]] <- create_year_pca(
1731335618200:year_data,
1731335618200:year,
1731335618200:dominant_species$species
1731335618200:)
1731335618200:ggsave(
1731335618200:paste0("output/pca_biplot_", year, ".png"),
1731335618201:pca_plots[[as.character(year)]],
1731335618201:width = 10, height = 8,
1731335618201:dpi = 300,
1731335618201:bg = "white"
1731335618201:)
1731335618201:}
1731335642211:for(year in years) {
1731335642211:year_data <- species_matrix_all %>%
1731335642212:filter(year_temp == year)
1731335642212:# Perform PCA on the filtered data
1731335642212:pca_result <- prcomp(year_data, center = TRUE, scale. = F)
1731335642212:# Create the PCA plot
1731335642212:pca_plots[[as.character(year)]] <- create_year_pca(
1731335642212:year_data,
1731335642213:year,
1731335642213:dominant_species$species
1731335642213:)
1731335642213:ggsave(
1731335642213:paste0("output/pca_biplot_", year, ".png"),
1731335642213:pca_plots[[as.character(year)]],
1731335642213:width = 10, height = 8,
1731335642214:dpi = 300,
1731335642214:bg = "white"
1731335642214:)
1731335642214:}
1731335655317:species_matrix_all
1731335695533:species_matrix_all <- henda_long %>%
1731335695533:select(station, year, species, adjusted_density) %>%
1731335695533:pivot_wider(
1731335695533:names_from = species,
1731335695533:values_from = adjusted_density,
1731335695533:values_fill = 0
1731335695534:) %>%
1731335695534:mutate(
1731335695534:station_temp = station,
1731335695534:year_temp = year
1731335695534:) %>%
1731335695534:select(-station, -year)%>%
1731335695534:select(where(!is.numeric))
1731335704941:species_matrix_all <- henda_long %>%
1731335704941:select(station, year, species, adjusted_density) %>%
1731335704942:pivot_wider(
1731335704942:names_from = species,
1731335704942:values_from = adjusted_density,
1731335704942:values_fill = 0
1731335704942:) %>%
1731335704942:mutate(
1731335704942:station_temp = station,
1731335704943:year_temp = year
1731335704943:) %>%
1731335704943:select(-station, -year)%>%
1731335704943:select(!where(is.numeric))
1731335708469:species_matrix_all
1731335715733:species_matrix_all <- henda_long %>%
1731335715734:select(station, year, species, adjusted_density) %>%
1731335715734:pivot_wider(
1731335715734:names_from = species,
1731335715734:values_from = adjusted_density,
1731335715734:values_fill = 0
1731335715734:) %>%
1731335715734:mutate(
1731335715735:station_temp = station,
1731335715735:year_temp = year
1731335715735:) %>%
1731335715735:select(-station, -year)%>%
1731335715735:select(where(is.numeric))
1731335718627:species_matrix_all
1731335729494:# Create PCA plots for each year
1731335729494:years <- sort(unique(species_matrix_all$year_temp))
1731335729494:pca_plots <- list()
1731335729494:for(year in years) {
1731335729494:year_data <- species_matrix_all %>%
1731335729494:filter(year_temp == year)
1731335729495:# Perform PCA on the filtered data
1731335729495:pca_result <- prcomp(year_data, center = TRUE, scale. = F)
1731335729495:# Create the PCA plot
1731335729495:pca_plots[[as.character(year)]] <- create_year_pca(
1731335729495:year_data,
1731335729496:year,
1731335729496:dominant_species$species
1731335729496:)
1731335729496:ggsave(
1731335729496:paste0("output/pca_biplot_", year, ".png"),
1731335729497:pca_plots[[as.character(year)]],
1731335729497:width = 10, height = 8,
1731335729497:dpi = 300,
1731335729497:bg = "white"
1731335729497:)
1731335729497:}
1731335736805:species_matrix_all
1731335770484:species_matrix_all <- henda_long %>%
1731335770484:select(station, year, species, adjusted_density) %>%
1731335770484:pivot_wider(
1731335770484:names_from = species,
1731335770484:values_from = adjusted_density,
1731335770485:values_fill = 0
1731335770485:) %>%
1731335770485:mutate(
1731335770485:station_temp = station,
1731335770485:year_temp = year
1731335770485:) %>%
1731335770486:select(-station, -year) #%>%
1731335774215:# Find dominant species (>1% relative abundance) including 1999
1731335774215:dominant_species <- species_matrix_all %>%
1731335774215:select(where(is.numeric)) %>%
1731335774215:select(-year_temp) %>%
1731335774215:summarise(across(everything(), sum)) %>%
1731335774215:pivot_longer(everything(),
1731335774216:names_to = "species",
1731335774216:values_to = "total_abundance") %>%
1731335774216:arrange(desc(total_abundance)) %>%
1731335774216:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1731335774216:filter(relative_abundance > 0.01)
1731335781757:species_matrix_all
1731335808235:# Find dominant species (>1% relative abundance) including 1999
1731335808236:dominant_species <- species_matrix_all %>%
1731335808236:select(where(is.numeric)) %>%
1731335808236:select(-year_temp) %>%
1731335808236:summarise(across(everything(), sum)) %>%
1731335808236:pivot_longer(everything(),
1731335808236:names_to = "species",
1731335808236:values_to = "total_abundance") %>%
1731335808237:arrange(desc(total_abundance)) %>%
1731335808237:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1731335808237:filter(relative_abundance > 0.01)
1731335810532:# Create PCA plots for each year
1731335810532:years <- sort(unique(species_matrix_all$year_temp))
1731335811048:pca_plots <- list()
1731335811605:for(year in years) {
1731335811605:year_data <- species_matrix_all %>%
1731335811605:filter(year_temp == year)
1731335811605:# Perform PCA on the filtered data
1731335811606:pca_result <- prcomp(year_data, center = TRUE, scale. = F)
1731335811606:# Create the PCA plot
1731335811606:pca_plots[[as.character(year)]] <- create_year_pca(
1731335811606:year_data,
1731335811606:year,
1731335811607:dominant_species$species
1731335811607:)
1731335811607:ggsave(
1731335811607:paste0("output/pca_biplot_", year, ".png"),
1731335811607:pca_plots[[as.character(year)]],
1731335811608:width = 10, height = 8,
1731335811608:dpi = 300,
1731335811608:bg = "white"
1731335811608:)
1731335811608:}
1731335978148:# Read in the henda dataset, specifying column types
1731335978148:henda <- read_csv(
1731335978148:"data/processed/henda.csv",
1731335978148:col_types = cols(
1731335978148:Year = col_integer(),
1731335978148:Flokkun = col_character(),  # Ensure Flokkun is read as character
1731335978148:A7 = col_integer(),
1731335978149:B5 = col_integer(),
1731335978149:B8 = col_integer(),
1731335978149:C4 = col_integer(),
1731335978149:E3 = col_integer(),
1731335978149:E4 = col_integer()
1731335978149:),
1731335978150:na = c("", "NA")
1731335978150:) %>%
1731335978150:mutate(across(where(is.numeric), ~ replace_na(., 0)))  %>% # Replace NA with 0 for numeric columns
1731335978150:select(Flokkun:last_col())
1731335979678:# View the dataset to confirm changes
1731335979678:print(henda, n=1000)
1731335998861:henda_long <- henda %>%
1731335998862:pivot_longer(
1731335998862:cols = A7:E4,               # Specify the columns to pivot
1731335998862:names_to = "Station",       # New column for the station names
1731335998862:values_to = "Count"         # New column for the count values
1731335998862:) %>%
1731335998862:rename(
1731335998862:station = Station,          # Rename Station to station
1731335998862:year = Year,                # Rename Year to year
1731335998862:species = Flokkun,          # Rename Flokkun to species
1731335998863:adjusted_density = Count    # Rename Count to adjusted_density
1731335998863:)
1731336003205:henda_long
1731336029892:hist(henda_long$adjusted_density)
1731336037349:table(henda_long$adjusted_density)
1731336048767:species_matrix_all <- henda_long %>%
1731336048768:select(station, year, species, adjusted_density) %>%
1731336048768:pivot_wider(
1731336048768:names_from = species,
1731336048768:values_from = adjusted_density,
1731336048768:values_fill = 0
1731336048768:) %>%
1731336048768:mutate(
1731336048768:station_temp = station,
1731336048769:year_temp = year
1731336048769:) %>%
1731336048769:select(-station, -year) #%>%
1731336052197:# Find dominant species (>1% relative abundance) including 1999
1731336052197:dominant_species <- species_matrix_all %>%
1731336052197:select(where(is.numeric)) %>%
1731336052197:select(-year_temp) %>%
1731336052198:summarise(across(everything(), sum)) %>%
1731336052198:pivot_longer(everything(),
1731336052198:names_to = "species",
1731336052198:values_to = "total_abundance") %>%
1731336052198:arrange(desc(total_abundance)) %>%
1731336052198:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1731336052199:filter(relative_abundance > 0.01)
1731336056091:# Create PCA plots for each year
1731336056092:years <- sort(unique(species_matrix_all$year_temp))
1731336056638:pca_plots <- list()
1731336057206:for(year in years) {
1731336057206:year_data <- species_matrix_all %>%
1731336057206:filter(year_temp == year)
1731336057206:# Perform PCA on the filtered data
1731336057206:pca_result <- prcomp(year_data, center = TRUE, scale. = F)
1731336057206:# Create the PCA plot
1731336057207:pca_plots[[as.character(year)]] <- create_year_pca(
1731336057207:year_data,
1731336057207:year,
1731336057207:dominant_species$species
1731336057207:)
1731336057207:ggsave(
1731336057208:paste0("output/pca_biplot_", year, ".png"),
1731336057208:pca_plots[[as.character(year)]],
1731336057208:width = 10, height = 8,
1731336057208:dpi = 300,
1731336057208:bg = "white"
1731336057208:)
1731336057209:}
1731336631548:for(year in years) {
1731336631549:year_data <- species_matrix_all %>%
1731336631549:filter(year_temp == year) %>%
1731336631549:select(where(is.numeric))  # Select only numeric columns
1731336631549:# Perform PCA on the filtered data
1731336631549:pca_result <- prcomp(year_data, center = TRUE, scale. = TRUE)  # Ensure scaling is TRUE
1731336631549:# Create the PCA plot
1731336631550:pca_plots[[as.character(year)]] <- create_year_pca(
1731336631550:year_data,
1731336631550:year,
1731336631550:dominant_species$species
1731336631550:)
1731336631550:ggsave(
1731336631550:paste0("output/pca_biplot_", year, ".png"),
1731336631550:pca_plots[[as.character(year)]],
1731336631551:width = 10, height = 8,
1731336631551:dpi = 300,
1731336631551:bg = "white"
1731336631551:)
1731336631551:}
1731336680234:for(year in years) {
1731336680235:year_data <- species_matrix_all %>%
1731336680235:filter(year_temp == year) %>%
1731336680235:select(where(is.numeric)) %>%
1731336680235:select_if(~ var(.) != 0)  # Remove constant columns
1731336680236:# Perform PCA on the filtered data
1731336680236:pca_result <- prcomp(year_data, center = TRUE, scale. = TRUE)  # Ensure scaling is TRUE
1731336680236:# Create the PCA plot
1731336680236:pca_plots[[as.character(year)]] <- create_year_pca(
1731336680237:year_data,
1731336680237:year,
1731336680237:dominant_species$species
1731336680237:)
1731336680237:ggsave(
1731336680237:paste0("output/pca_biplot_", year, ".png"),
1731336680238:pca_plots[[as.character(year)]],
1731336680238:width = 10, height = 8,
1731336680238:dpi = 300,
1731336680238:bg = "white"
1731336680238:)
1731336680239:}
1731336699621:# Read in the henda dataset, specifying column types
1731336699621:henda <- read_csv(
1731336699621:"data/processed/henda.csv",
1731336699621:col_types = cols(
1731336699622:Year = col_integer(),
1731336699622:Flokkun = col_character(),  # Ensure Flokkun is read as character
1731336699622:A7 = col_integer(),
1731336699622:B5 = col_integer(),
1731336699622:B8 = col_integer(),
1731336699622:C4 = col_integer(),
1731336699622:E3 = col_integer(),
1731336699623:E4 = col_integer()
1731336699623:),
1731336699623:na = c("", "NA")
1731336699623:) %>%
1731336699623:mutate(across(where(is.numeric), ~ replace_na(., 0)))  %>% # Replace NA with 0 for numeric columns
1731336699623:select(Flokkun:last_col())
1731336699729:# View the dataset to confirm changes
1731336699729:print(henda, n=1000)
1731336699856:henda_long <- henda %>%
1731336699856:pivot_longer(
1731336699856:cols = A7:E4,               # Specify the columns to pivot
1731336699856:names_to = "Station",       # New column for the station names
1731336699856:values_to = "Count"         # New column for the count values
1731336699857:) %>%
1731336699857:rename(
1731336699857:station = Station,          # Rename Station to station
1731336699857:year = Year,                # Rename Year to year
1731336699857:species = Flokkun,          # Rename Flokkun to species
1731336699857:adjusted_density = Count    # Rename Count to adjusted_density
1731336699857:)
1731336699863:species_matrix_all <- henda_long %>%
1731336699863:select(station, year, species, adjusted_density) %>%
1731336699863:pivot_wider(
1731336699863:names_from = species,
1731336699864:values_from = adjusted_density,
1731336699864:values_fill = 0
1731336699864:) %>%
1731336699864:mutate(
1731336699864:station_temp = station,
1731336699864:year_temp = year
1731336699865:) %>%
1731336699865:select(-station, -year)
1731336699907:# Find dominant species (>1% relative abundance) including 1999
1731336699907:dominant_species <- species_matrix_all %>%
1731336699907:select(where(is.numeric)) %>%
1731336699907:select(-year_temp) %>%
1731336699907:summarise(across(everything(), sum)) %>%
1731336699907:pivot_longer(everything(),
1731336699907:names_to = "species",
1731336699907:values_to = "total_abundance") %>%
1731336699907:arrange(desc(total_abundance)) %>%
1731336699907:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1731336699907:filter(relative_abundance > 0.01)
1731336699931:# Create PCA plots for each year
1731336699931:years <- sort(unique(species_matrix_all$year_temp))
1731336699931:pca_plots <- list()
1731336699931:for(year in years) {
1731336699932:year_data <- species_matrix_all %>%
1731336699932:filter(year_temp == year) %>%
1731336699932:select(where(is.numeric)) %>%
1731336699932:select_if(~ var(.) != 0)  # Remove constant columns
1731336699932:# Perform PCA on the filtered data
1731336699932:pca_result <- prcomp(year_data, center = TRUE, scale. = TRUE)  # Ensure scaling is TRUE
1731336699932:# Create the PCA plot
1731336699932:pca_plots[[as.character(year)]] <- create_year_pca(
1731336699932:year_data,
1731336699932:year,
1731336699932:dominant_species$species
1731336699932:)
1731336699933:ggsave(
1731336699933:paste0("output/pca_biplot_", year, ".png"),
1731336699933:pca_plots[[as.character(year)]],
1731336699933:width = 10, height = 8,
1731336699933:dpi = 300,
1731336699933:bg = "white"
1731336699933:)
1731336699933:}
1731336832716:years <- sort(unique(species_matrix_all$year_temp))
1731336838844:years
1731336907096:# Create PCA plots for each year
1731336907096:years <- sort(unique(species_matrix_all$year_temp))
1731336907360:pca_plots <- list()
1731336908484:for(year in years) {
1731336908485:year_data <- species_matrix_all %>%
1731336908485:filter(year_temp == year) %>%
1731336908485:select(where(is.numeric)) %>%
1731336908485:select_if(~ var(.) != 0)  # Remove constant columns
1731336908486:# Perform PCA on the filtered data
1731336908486:pca_result <- prcomp(year_data, center = TRUE, scale. = TRUE)  # Ensure scaling is TRUE
1731336908486:# Create the PCA plot
1731336908486:pca_plots[[as.character(year)]] <- create_year_pca(
1731336908486:year_data,
1731336908486:year,
1731336908487:dominant_species$species
1731336908487:)
1731336908487:ggsave(
1731336908487:paste0("output/pca_biplot_", year, ".png"),
1731336908487:pca_plots[[as.character(year)]],
1731336908488:width = 10, height = 8,
1731336908488:dpi = 300,
1731336908488:bg = "white"
1731336908488:)
1731336908488:}
1731336930685:year
1731336937949:species_matrix_all %>%
1731336937949:filter(year_temp == year) %>%
1731336937949:select(where(is.numeric)) %>%
1731336937949:select_if(~ var(.) != 0)
1731336946216:prcomp(year_data, center = TRUE, scale. = TRUE)  # Ensure scaling is TRUE
1731337013101:create_year_pca
1731398748597:# Create PCA plots for each year
1731398748597:years <- sort(unique(species_matrix_all$year_temp))
1731398749262:pca_plots <- list()
1731398749780:for(year in years) {
1731398749781:year_data <- species_matrix_all %>%
1731398749781:filter(year_temp == year) %>%
1731398749781:select(where(is.numeric), station_temp, year_temp) %>%  # Ensure these columns are included
1731398749781:select_if(~ var(.) != 0)  # Remove constant columns
1731398749781:# Perform PCA on the filtered data
1731398749781:pca_result <- prcomp(select(year_data, -station_temp, -year_temp), center = TRUE, scale. = TRUE)
1731398749782:# Create the PCA plot
1731398749782:pca_plots[[as.character(year)]] <- create_year_pca(
1731398749782:year_data,
1731398749782:year,
1731398749782:dominant_species$species
1731398749783:)
1731398749783:ggsave(
1731398749783:paste0("output/pca_biplot_", year, ".png"),
1731398749783:pca_plots[[as.character(year)]],
1731398749784:width = 10, height = 8,
1731398749784:dpi = 300,
1731398749784:bg = "white"
1731398749784:)
1731398749784:}
1731398763943:# PCA plot function
1731398763944:create_year_pca <- function(year_data, year, important_species) {
1731398763944:# Perform PCA for this year
1731398763944:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731398763944:# Extract scores
1731398763944:site_scores <- data.frame(
1731398763944:scores(species_pca, display = "sites"),
1731398763945:Station = year_data$station_temp
1731398763945:)
1731398763945:species_loadings <- data.frame(
1731398763945:scores(species_pca, display = "species"),
1731398763945:Species = rownames(scores(species_pca, display = "species"))
1731398763946:) %>%
1731398763946:filter(Species %in% important_species)
1731398763946:# Calculate variance explained
1731398763946:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731398763947:# Create PCA biplot
1731398763947:pca_plot <- ggplot() +
1731398763947:# Add site scores
1731398763947:geom_point(data = site_scores,
1731398763947:aes(x = PC1, y = PC2, color = Station),
1731398763948:size = 3) +
1731398763948:# Add species arrows
1731398763948:geom_segment(data = species_loadings,
1731398763948:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731398763948:arrow = arrow(length = unit(0.2, "cm"))) +
1731398763948:# Add species labels
1731398763949:geom_text_repel(data = species_loadings,
1731398763949:aes(x = PC1, y = PC2, label = Species),
1731398763949:size = 3) +
1731398763949:theme_bw() +
1731398763949:labs(
1731398763950:title = paste("PCA of benthic community composition -", year),
1731398763950:x = paste0("PC1 (", var_explained[1], "%)"),
1731398763950:y = paste0("PC2 (", var_explained[2], "%)"),
1731398763950:subtitle = "Arrows show species with >1% relative abundance"
1731398763951:)
1731398763951:return(pca_plot)
1731398763951:}
1731398768988:for(year in years) {
1731398768988:year_data <- species_matrix_all %>%
1731398768988:filter(year_temp == year) %>%
1731398768988:select(where(is.numeric), station_temp, year_temp) %>%  # Ensure these columns are included
1731398768989:select_if(~ var(.) != 0)  # Remove constant columns
1731398768989:# Perform PCA on the filtered data
1731398768989:pca_result <- prcomp(select(year_data, -station_temp, -year_temp), center = TRUE, scale. = TRUE)
1731398768989:# Create the PCA plot
1731398768989:pca_plots[[as.character(year)]] <- create_year_pca(
1731398768989:year_data,
1731398768990:year,
1731398768990:dominant_species$species
1731398768990:)
1731398768990:ggsave(
1731398768991:paste0("output/pca_biplot_", year, ".png"),
1731398768991:pca_plots[[as.character(year)]],
1731398768991:width = 10, height = 8,
1731398768991:dpi = 300,
1731398768991:bg = "white"
1731398768991:)
1731398768992:}
1731398805397:years
1731398809980:pca_plots
1731398820572:year
1731398824884:pca_plots[[as.character(year)]] <- create_year_pca(
1731398824885:year_data,
1731398824885:year,
1731398824885:dominant_species$species
1731398824885:)
1731398835034:year_data
1731398881428:species_matrix_all
1731398917916:anyNA(species_matrix_all)
1731398942988:year_data
1731398950585:anyNA(year_data)
1731398956651:dominant_species$species
1731399091667:create_year_pca(
1731399091667:year_data,
1731399091667:year,
1731399091667:dominant_species$species
1731399091667:)
1731399097635:rlang::last_trace()
1731399137163:# PCA plot function without station_temp and year_temp
1731399137163:create_year_pca <- function(year_data, year, important_species) {
1731399137164:# Perform PCA for this year
1731399137164:species_pca <- rda(year_data)  # No need to exclude non-existent columns
1731399137164:# Extract scores
1731399137164:site_scores <- data.frame(
1731399137165:scores(species_pca, display = "sites")
1731399137165:)
1731399137165:species_loadings <- data.frame(
1731399137165:scores(species_pca, display = "species"),
1731399137165:Species = rownames(scores(species_pca, display = "species"))
1731399137165:) %>%
1731399137166:filter(Species %in% important_species)
1731399137166:# Calculate variance explained
1731399137166:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731399137166:# Create PCA biplot
1731399137167:pca_plot <- ggplot() +
1731399137167:# Add site scores
1731399137167:geom_point(data = site_scores,
1731399137167:aes(x = PC1, y = PC2),
1731399137167:size = 3) +
1731399137167:# Add species arrows
1731399137168:geom_segment(data = species_loadings,
1731399137168:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731399137168:arrow = arrow(length = unit(0.2, "cm"))) +
1731399137168:# Add species labels
1731399137168:geom_text_repel(data = species_loadings,
1731399137169:aes(x = PC1, y = PC2, label = Species),
1731399137169:size = 3) +
1731399137169:theme_bw() +
1731399137170:labs(
1731399137170:title = paste("PCA of benthic community composition -", year),
1731399137170:x = paste0("PC1 (", var_explained[1], "%)"),
1731399137170:y = paste0("PC2 (", var_explained[2], "%)"),
1731399137171:subtitle = "Arrows show species with >1% relative abundance"
1731399137171:)
1731399137171:return(pca_plot)
1731399137171:}
1731399140987:create_year_pca(
1731399140987:year_data,
1731399140987:year,
1731399140988:dominant_species$species
1731399140988:)
1731399853739:# PCA plot function with scaling
1731399853739:create_year_pca <- function(year_data, year, important_species) {
1731399853739:# Scale the data
1731399853740:scaled_data <- scale(year_data)
1731399853740:# Perform PCA for this year
1731399853740:species_pca <- rda(scaled_data)  # Use scaled data
1731399853740:# Extract scores
1731399853741:site_scores <- data.frame(
1731399853741:scores(species_pca, display = "sites")
1731399853741:)
1731399853741:species_loadings <- data.frame(
1731399853741:scores(species_pca, display = "species"),
1731399853741:Species = rownames(scores(species_pca, display = "species"))
1731399853741:) %>%
1731399853742:filter(Species %in% important_species)
1731399853742:# Calculate variance explained
1731399853742:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731399853742:# Create PCA biplot
1731399853743:pca_plot <- ggplot() +
1731399853743:# Add site scores
1731399853743:geom_point(data = site_scores,
1731399853743:aes(x = PC1, y = PC2),
1731399853743:size = 3) +
1731399853743:# Add species arrows
1731399853744:geom_segment(data = species_loadings,
1731399853744:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731399853744:arrow = arrow(length = unit(0.2, "cm"))) +
1731399853744:# Add species labels
1731399853744:geom_text_repel(data = species_loadings,
1731399853744:aes(x = PC1, y = PC2, label = Species),
1731399853745:size = 3) +
1731399853745:theme_bw() +
1731399853745:labs(
1731399853745:title = paste("PCA of benthic community composition -", year),
1731399853745:x = paste0("PC1 (", var_explained[1], "%)"),
1731399853746:y = paste0("PC2 (", var_explained[2], "%)"),
1731399853746:subtitle = "Arrows show species with >1% relative abundance"
1731399853746:)
1731399853746:return(pca_plot)
1731399853747:}
1731399855603:create_year_pca(
1731399855603:year_data,
1731399855603:year,
1731399855603:dominant_species$species
1731399855603:)
1731399969915:# PCA plot function with reversed roles
1731399969915:create_year_pca_reversed <- function(year_data, year, important_species) {
1731399969915:# Scale the data
1731399969916:scaled_data <- scale(year_data)
1731399969916:# Perform PCA for this year
1731399969916:species_pca <- rda(scaled_data)  # Use scaled data
1731399969916:# Extract scores - reverse roles
1731399969916:species_scores <- data.frame(
1731399969917:scores(species_pca, display = "species"),
1731399969917:Species = rownames(scores(species_pca, display = "species"))
1731399969917:) %>%
1731399969917:filter(Species %in% important_species)
1731399969917:station_loadings <- data.frame(
1731399969918:scores(species_pca, display = "sites"),
1731399969918:Station = rownames(scores(species_pca, display = "sites"))
1731399969918:)
1731399969918:# Calculate variance explained
1731399969918:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731399969919:# Create reversed PCA biplot
1731399969919:pca_plot <- ggplot() +
1731399969919:# Add species points
1731399969919:geom_point(data = species_scores,
1731399969919:aes(x = PC1, y = PC2, label = Species),
1731399969920:size = 3) +
1731399969920:# Add station arrows
1731399969920:geom_segment(data = station_loadings,
1731399969920:aes(x = 0, y = 0, xend = PC1, yend = PC2, color = Station),
1731399969920:arrow = arrow(length = unit(0.2, "cm"))) +
1731399969920:# Add species labels
1731399969921:geom_text_repel(data = species_scores,
1731399969921:aes(x = PC1, y = PC2, label = Species),
1731399969921:size = 3) +
1731399969921:theme_bw() +
1731399969922:labs(
1731399969922:title = paste("PCA of benthic community composition -", year),
1731399969922:x = paste0("PC1 (", var_explained[1], "%)"),
1731399969923:y = paste0("PC2 (", var_explained[2], "%)"),
1731399969923:subtitle = "Species shown as points, stations as arrows"
1731399969923:)
1731399969924:return(pca_plot)
1731399969924:}
1731399984108:create_year_pca_reversed(
1731399984108:year_data,
1731399984108:year,
1731399984109:dominant_species$species
1731399984109:)
1731400833021:# Function to create reversed PCA biplot with scaled arrows
1731400833021:create_year_pca_reversed <- function(year_data, year, important_species) {
1731400833021:# Scale the data
1731400833021:scaled_data <- scale(year_data)
1731400833021:# Perform PCA for this year
1731400833022:species_pca <- rda(scaled_data)  # Use scaled data
1731400833022:# Extract scores - note the reversed roles
1731400833022:species_scores <- data.frame(
1731400833022:scores(species_pca, display = "species"),
1731400833022:Species = rownames(scores(species_pca, display = "species"))
1731400833023:)
1731400833023:station_loadings <- data.frame(
1731400833023:scores(species_pca, display = "sites"),
1731400833023:Station = rownames(scores(species_pca, display = "sites"))
1731400833024:)
1731400833024:# Calculate variance explained
1731400833024:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731400833024:# Create reversed PCA biplot
1731400833025:pca_plot <- ggplot() +
1731400833025:# Add species points
1731400833025:geom_point(data = species_scores,
1731400833025:aes(x = PC1, y = PC2),
1731400833025:size = 3) +
1731400833026:# Add station arrows with scaling
1731400833026:geom_segment(data = station_loadings,
1731400833026:aes(x = 0, y = 0, xend = PC1 * 0.1, yend = PC2 * 0.1, color = Station),  # Scale arrows
1731400833026:arrow = arrow(length = unit(0.2, "cm"))) +
1731400833026:# Add species labels
1731400833027:geom_text_repel(data = species_scores,
1731400833027:aes(x = PC1, y = PC2, label = Species),
1731400833027:size = 3) +
1731400833027:theme_bw() +
1731400833027:labs(
1731400833028:title = paste("PCA of benthic community composition -", year),
1731400833028:subtitle = "Species shown as points, stations as arrows",
1731400833028:x = paste0("PC1 (", var_explained[1], "%)"),
1731400833028:y = paste0("PC2 (", var_explained[2], "%)")
1731400833028:) +
1731400833029:coord_fixed()  # Ensure equal scaling of axes
1731400833029:return(pca_plot)
1731400833029:}
1731400835314:create_year_pca_reversed(
1731400835314:year_data,
1731400835315:year,
1731400835315:dominant_species$species
1731400835315:)
1731400927085:# Create reversed PCA plots for each year
1731400927085:years <- sort(unique(species_matrix_all$year_temp))
1731400930588:pca_plots_reversed <- list()
1731400933090:for(year in years) {
1731400933090:year_data <- species_matrix_all %>%
1731400933090:filter(year_temp == year)
1731400933091:# Call the reversed PCA function
1731400933091:pca_plots_reversed[[as.character(year)]] <- create_year_pca_reversed(
1731400933091:year_data,
1731400933091:year,
1731400933091:dominant_species$species
1731400933091:)
1731400933092:# Save the reversed PCA plot with a unique filename
1731400933092:ggsave(
1731400933092:paste0("output/pca_biplot_reversed_", year, ".png"),
1731400933092:pca_plots_reversed[[as.character(year)]],
1731400933092:width = 10, height = 8,
1731400933092:dpi = 300,
1731400933092:bg = "white"
1731400933093:)
1731400933093:}
1731400962483:year_data
1731400967404:year
1731400977043:create_year_pca_reversed(
1731400977043:year_data,
1731400977043:year,
1731400977044:dominant_species$species
1731400977044:)
1731400989203:dominant_species$species
1731401001429:create_year_pca_reversed(
1731401001429:year_data,
1731401001429:year,
1731401001429:dominant_species$species
1731401001429:)
1731401013459:# PCA plot function with reversed roles
1731401013459:# Function to create reversed PCA biplot with scaled arrows
1731401013459:create_year_pca_reversed <- function(year_data, year, important_species) {
1731401013460:# Scale the data
1731401013460:scaled_data <- scale(year_data)
1731401013460:# Perform PCA for this year
1731401013460:species_pca <- rda(scaled_data)  # Use scaled data
1731401013460:# Extract scores - note the reversed roles
1731401013461:species_scores <- data.frame(
1731401013461:scores(species_pca, display = "species"),
1731401013461:Species = rownames(scores(species_pca, display = "species"))
1731401013461:)
1731401013461:station_loadings <- data.frame(
1731401013461:scores(species_pca, display = "sites"),
1731401013461:Station = rownames(scores(species_pca, display = "sites"))
1731401013461:)
1731401013462:# Calculate variance explained
1731401013462:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731401013462:# Create reversed PCA biplot
1731401013462:pca_plot <- ggplot() +
1731401013462:# Add species points
1731401013463:geom_point(data = species_scores,
1731401013463:aes(x = PC1, y = PC2),
1731401013463:size = 3) +
1731401013463:# Add station arrows with scaling
1731401013463:geom_segment(data = station_loadings,
1731401013463:aes(x = 0, y = 0, xend = PC1 * 0.1, yend = PC2 * 0.1, color = Station),  # Scale arrows
1731401013464:arrow = arrow(length = unit(0.2, "cm"))) +
1731401013464:# Add species labels
1731401013464:geom_text_repel(data = species_scores,
1731401013464:aes(x = PC1, y = PC2, label = Species),
1731401013464:size = 3) +
1731401013464:theme_bw() +
1731401013465:labs(
1731401013465:title = paste("PCA of benthic community composition -", year),
1731401013465:subtitle = "Species shown as points, stations as arrows",
1731401013465:x = paste0("PC1 (", var_explained[1], "%)"),
1731401013465:y = paste0("PC2 (", var_explained[2], "%)")
1731401013465:) +
1731401013466:coord_fixed()  # Ensure equal scaling of axes
1731401013466:return(pca_plot)
1731401013466:}
1731401016644:# Create reversed PCA plots for each year
1731401016644:years <- sort(unique(species_matrix_all$year_temp))
1731401017222:pca_plots_reversed <- list()
1731401018092:for(year in years) {
1731401018093:year_data <- species_matrix_all %>%
1731401018093:filter(year_temp == year)
1731401018093:# Call the reversed PCA function
1731401018093:pca_plots_reversed[[as.character(year)]] <- create_year_pca_reversed(
1731401018093:year_data,
1731401018093:year,
1731401018093:dominant_species$species
1731401018094:)
1731401018094:# Save the reversed PCA plot with a unique filename
1731401018094:ggsave(
1731401018094:paste0("output/pca_biplot_reversed_", year, ".png"),
1731401018094:pca_plots_reversed[[as.character(year)]],
1731401018094:width = 10, height = 8,
1731401018095:dpi = 300,
1731401018095:bg = "white"
1731401018095:)
1731401018095:}
1731401028100:as.character(year)
1731401033195:create_year_pca_reversed(
1731401033195:year_data,
1731401033195:year,
1731401033195:dominant_species$species
1731401033196:)
1731401051652:# Function to create reversed PCA biplot with scaled arrows
1731401051652:create_year_pca_reversed <- function(year_data, year, important_species) {
1731401051652:# Scale the data
1731401051652:scaled_data <- scale(year_data)
1731401051653:# Perform PCA for this year
1731401051653:species_pca <- rda(scaled_data)  # Use scaled data
1731401051653:# Extract scores - note the reversed roles
1731401051653:species_scores <- data.frame(
1731401051653:scores(species_pca, display = "species"),
1731401051654:Species = rownames(scores(species_pca, display = "species"))
1731401051654:)
1731401051654:station_loadings <- data.frame(
1731401051654:scores(species_pca, display = "sites"),
1731401051654:Station = rownames(scores(species_pca, display = "sites"))
1731401051655:)
1731401051655:# Calculate variance explained
1731401051655:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731401051655:# Create reversed PCA biplot
1731401051656:pca_plot <- ggplot() +
1731401051656:# Add species points
1731401051656:geom_point(data = species_scores,
1731401051656:aes(x = PC1, y = PC2),
1731401051656:size = 3) +
1731401051656:# Add station arrows with scaling
1731401051657:geom_segment(data = station_loadings,
1731401051657:aes(x = 0, y = 0, xend = PC1 * 0.1, yend = PC2 * 0.1, color = Station),  # Scale arrows
1731401051657:arrow = arrow(length = unit(0.2, "cm"))) +
1731401051657:# Add species labels
1731401051657:geom_text_repel(data = species_scores,
1731401051657:aes(x = PC1, y = PC2, label = Species),
1731401051658:size = 3) +
1731401051658:theme_bw() +
1731401051658:labs(
1731401051658:title = paste("PCA of benthic community composition -", year),
1731401051658:subtitle = "Species shown as points, stations as arrows",
1731401051659:x = paste0("PC1 (", var_explained[1], "%)"),
1731401051659:y = paste0("PC2 (", var_explained[2], "%)")
1731401051659:) +
1731401051659:coord_fixed()  # Ensure equal scaling of axes
1731401051659:return(pca_plot)
1731401051660:}
1731401053483:create_year_pca_reversed(
1731401053483:year_data,
1731401053483:year,
1731401053484:dominant_species$species
1731401053484:)
1731401081236:# Find dominant species (>1% relative abundance) including 1999
1731401081236:dominant_species <- species_matrix_all %>%
1731401081236:select(where(is.numeric)) %>%
1731401081236:select(-year_temp) %>%
1731401081237:summarise(across(everything(), sum)) %>%
1731401081237:pivot_longer(everything(),
1731401081237:names_to = "species",
1731401081237:values_to = "total_abundance") %>%
1731401081237:arrange(desc(total_abundance)) %>%
1731401081237:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1731401081237:filter(relative_abundance > 0.01)
1731401086117:# PCA plot function with scaling
1731401086117:create_year_pca <- function(year_data, year, important_species) {
1731401086117:# Scale the data
1731401086117:scaled_data <- scale(year_data)
1731401086117:# Perform PCA for this year
1731401086118:species_pca <- rda(scaled_data)  # Use scaled data
1731401086118:# Extract scores
1731401086118:site_scores <- data.frame(
1731401086118:scores(species_pca, display = "sites")
1731401086118:)
1731401086118:species_loadings <- data.frame(
1731401086119:scores(species_pca, display = "species"),
1731401086119:Species = rownames(scores(species_pca, display = "species"))
1731401086119:) %>%
1731401086119:filter(Species %in% important_species)
1731401086119:# Calculate variance explained
1731401086119:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731401086120:# Create PCA biplot
1731401086120:pca_plot <- ggplot() +
1731401086120:# Add site scores
1731401086121:geom_point(data = site_scores,
1731401086121:aes(x = PC1, y = PC2),
1731401086121:size = 3) +
1731401086121:# Add species arrows
1731401086121:geom_segment(data = species_loadings,
1731401086121:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731401086122:arrow = arrow(length = unit(0.2, "cm"))) +
1731401086122:# Add species labels
1731401086122:geom_text_repel(data = species_loadings,
1731401086122:aes(x = PC1, y = PC2, label = Species),
1731401086122:size = 3) +
1731401086123:theme_bw() +
1731401086123:labs(
1731401086123:title = paste("PCA of benthic community composition -", year),
1731401086123:x = paste0("PC1 (", var_explained[1], "%)"),
1731401086123:y = paste0("PC2 (", var_explained[2], "%)"),
1731401086123:subtitle = "Arrows show species with >1% relative abundance"
1731401086123:)
1731401086124:return(pca_plot)
1731401086124:}
1731401098665:# Find dominant species (>1% relative abundance) including 1999
1731401098665:dominant_species <- species_matrix_all %>%
1731401098665:select(where(is.numeric)) %>%
1731401098665:select(-year_temp) %>%
1731401098666:summarise(across(everything(), sum)) %>%
1731401098666:pivot_longer(everything(),
1731401098666:names_to = "species",
1731401098666:values_to = "total_abundance") %>%
1731401098666:arrange(desc(total_abundance)) %>%
1731401098666:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1731401098667:filter(relative_abundance > 0.01)
1731401101987:dominant_species
1731401110460:# PCA plot function with scaling
1731401110461:create_year_pca <- function(year_data, year, important_species) {
1731401110461:# Scale the data
1731401110461:scaled_data <- scale(year_data)
1731401110461:# Perform PCA for this year
1731401110461:species_pca <- rda(scaled_data)  # Use scaled data
1731401110461:# Extract scores
1731401110461:site_scores <- data.frame(
1731401110462:scores(species_pca, display = "sites")
1731401110462:)
1731401110462:species_loadings <- data.frame(
1731401110462:scores(species_pca, display = "species"),
1731401110462:Species = rownames(scores(species_pca, display = "species"))
1731401110462:) %>%
1731401110463:filter(Species %in% important_species)
1731401110463:# Calculate variance explained
1731401110463:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731401110463:# Create PCA biplot
1731401110464:pca_plot <- ggplot() +
1731401110464:# Add site scores
1731401110464:geom_point(data = site_scores,
1731401110464:aes(x = PC1, y = PC2),
1731401110464:size = 3) +
1731401110464:# Add species arrows
1731401110464:geom_segment(data = species_loadings,
1731401110464:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731401110465:arrow = arrow(length = unit(0.2, "cm"))) +
1731401110465:# Add species labels
1731401110465:geom_text_repel(data = species_loadings,
1731401110465:aes(x = PC1, y = PC2, label = Species),
1731401110465:size = 3) +
1731401110466:theme_bw() +
1731401110466:labs(
1731401110466:title = paste("PCA of benthic community composition -", year),
1731401110466:x = paste0("PC1 (", var_explained[1], "%)"),
1731401110466:y = paste0("PC2 (", var_explained[2], "%)"),
1731401110467:subtitle = "Arrows show species with >1% relative abundance"
1731401110467:)
1731401110467:return(pca_plot)
1731401110467:}
1731401111275:# Create PCA plots for each year
1731401111275:years <- sort(unique(species_matrix_all$year_temp))
1731401111591:pca_plots <- list()
1731401112122:for(year in years) {
1731401112123:year_data <- species_matrix_all %>%
1731401112123:filter(year_temp == year)
1731401112123:pca_plots[[as.character(year)]] <- create_year_pca(
1731401112123:year_data,
1731401112123:year,
1731401112123:dominant_species$species
1731401112123:)
1731401112123:ggsave(
1731401112123:paste0("output/pca_biplot_", year, ".png"),
1731401112123:pca_plots[[as.character(year)]],
1731401112123:width = 10, height = 8,
1731401112124:dpi = 300,
1731401112124:bg = "white"
1731401112124:)
1731401112124:}
1731401125235:year_data
1731401129612:year
1731401134218:dominant_species$species
1731401154979:# PCA plot function with reversed roles
1731401154979:# Function to create reversed PCA biplot with scaled arrows
1731401154979:create_year_pca_reversed <- function(year_data, year, important_species) {
1731401154980:# Scale the data
1731401154980:scaled_data <- scale(year_data)
1731401154980:# Perform PCA for this year
1731401154980:species_pca <- rda(scaled_data)  # Use scaled data
1731401154981:# Extract scores - note the reversed roles
1731401154981:species_scores <- data.frame(
1731401154981:scores(species_pca, display = "species"),
1731401154981:Species = rownames(scores(species_pca, display = "species"))
1731401154981:)
1731401154981:station_loadings <- data.frame(
1731401154982:scores(species_pca, display = "sites"),
1731401154982:Station = rownames(scores(species_pca, display = "sites"))
1731401154982:)
1731401154982:# Calculate variance explained
1731401154982:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731401154982:# Create reversed PCA biplot
1731401154983:pca_plot <- ggplot() +
1731401154983:# Add species points
1731401154983:geom_point(data = species_scores,
1731401154983:aes(x = PC1, y = PC2),
1731401154984:size = 3) +
1731401154984:# Add station arrows with scaling
1731401154984:geom_segment(data = station_loadings,
1731401154984:aes(x = 0, y = 0, xend = PC1 * 0.1, yend = PC2 * 0.1, color = Station),  # Scale arrows
1731401154984:arrow = arrow(length = unit(0.2, "cm"))) +
1731401154984:# Add species labels
1731401154985:geom_text_repel(data = species_scores,
1731401154985:aes(x = PC1, y = PC2, label = Species),
1731401154985:size = 3) +
1731401154985:theme_bw() +
1731401154985:labs(
1731401154986:title = paste("PCA of benthic community composition -", year),
1731401154986:subtitle = "Species shown as points, stations as arrows",
1731401154986:x = paste0("PC1 (", var_explained[1], "%)"),
1731401154986:y = paste0("PC2 (", var_explained[2], "%)")
1731401154986:) +
1731401154987:coord_fixed()  # Ensure equal scaling of axes
1731401154987:return(pca_plot)
1731401154987:}
1731401157324:# Create reversed PCA plots for each year
1731401157324:years <- sort(unique(species_matrix_all$year_temp))
1731401157719:pca_plots_reversed <- list()
1731401158350:for(year in years) {
1731401158350:year_data <- species_matrix_all %>%
1731401158350:filter(year_temp == year)
1731401158351:# Call the reversed PCA function
1731401158351:pca_plots_reversed[[as.character(year)]] <- create_year_pca_reversed(
1731401158351:year_data,
1731401158351:year,
1731401158351:dominant_species$species
1731401158351:)
1731401158351:# Save the reversed PCA plot with a unique filename
1731401158352:ggsave(
1731401158352:paste0("output/pca_biplot_reversed_", year, ".png"),
1731401158352:pca_plots_reversed[[as.character(year)]],
1731401158352:width = 10, height = 8,
1731401158352:dpi = 300,
1731401158352:bg = "white"
1731401158353:)
1731401158353:}
1731401194101:year_data
1731401212148:year
1731401235251:dominant_species$species
1731401338613:create_year_pca_reversed(
1731401338613:year_data,
1731401338613:year,
1731401338613:dominant_species$species
1731401338613:)
1731401354484:dev.off()
1731401356156:dev.off()
1731401358346:create_year_pca_reversed(
1731401358346:year_data,
1731401358347:year,
1731401358347:dominant_species$species
1731401358347:)
1731401768518:# Function to create reversed PCA biplot with scaled arrows
1731401768519:create_year_pca_reversed <- function(year_data, year, important_species) {
1731401768519:# Ensure only numeric data is used
1731401768519:numeric_data <- year_data %>%
1731401768520:select(where(is.numeric))
1731401768520:# Scale the data
1731401768520:scaled_data <- scale(numeric_data)
1731401768520:# Perform PCA for this year
1731401768521:species_pca <- rda(scaled_data)  # Use scaled data
1731401768521:# Extract scores - note the reversed roles
1731401768521:species_scores <- data.frame(
1731401768521:scores(species_pca, display = "species"),
1731401768521:Species = rownames(scores(species_pca, display = "species"))
1731401768521:)
1731401768522:station_loadings <- data.frame(
1731401768522:scores(species_pca, display = "sites"),
1731401768522:Station = rownames(scores(species_pca, display = "sites"))
1731401768522:)
1731401768522:# Calculate variance explained
1731401768523:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731401768523:# Create reversed PCA biplot
1731401768524:pca_plot <- ggplot() +
1731401768524:# Add species points
1731401768524:geom_point(data = species_scores,
1731401768524:aes(x = PC1, y = PC2),
1731401768525:size = 3) +
1731401768525:# Add station arrows with scaling
1731401768525:geom_segment(data = station_loadings,
1731401768525:aes(x = 0, y = 0, xend = PC1 * 0.1, yend = PC2 * 0.1, color = Station),  # Scale arrows
1731401768526:arrow = arrow(length = unit(0.2, "cm"))) +
1731401768526:# Add species labels
1731401768526:geom_text_repel(data = species_scores,
1731401768526:aes(x = PC1, y = PC2, label = Species),
1731401768526:size = 3) +
1731401768527:theme_bw() +
1731401768527:labs(
1731401768527:title = paste("PCA of benthic community composition -", year),
1731401768527:subtitle = "Species shown as points, stations as arrows",
1731401768527:x = paste0("PC1 (", var_explained[1], "%)"),
1731401768528:y = paste0("PC2 (", var_explained[2], "%)")
1731401768528:) +
1731401768528:coord_fixed()  # Ensure equal scaling of axes
1731401768529:return(pca_plot)
1731401768529:}
1731401770219:create_year_pca_reversed(
1731401770219:year_data,
1731401770220:year,
1731401770220:dominant_species$species
1731401770220:)
1731401896646:# Function to create reversed PCA biplot with scaled arrows
1731401896646:create_year_pca_reversed <- function(year_data, year, important_species) {
1731401896646:# Convert all columns to numeric, if necessary
1731401896646:numeric_data <- year_data %>%
1731401896647:mutate(across(everything(), as.numeric)) %>%
1731401896647:select(where(is.numeric))
1731401896647:# Scale the data
1731401896648:scaled_data <- scale(numeric_data)
1731401896648:# Perform PCA for this year
1731401896648:species_pca <- rda(scaled_data)  # Use scaled data
1731401896649:# Extract scores - note the reversed roles
1731401896649:species_scores <- data.frame(
1731401896649:scores(species_pca, display = "species"),
1731401896649:Species = rownames(scores(species_pca, display = "species"))
1731401896649:)
1731401896650:station_loadings <- data.frame(
1731401896650:scores(species_pca, display = "sites"),
1731401896650:Station = rownames(scores(species_pca, display = "sites"))
1731401896650:)
1731401896650:# Calculate variance explained
1731401896650:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731401896651:# Create reversed PCA biplot
1731401896651:pca_plot <- ggplot() +
1731401896651:# Add species points
1731401896651:geom_point(data = species_scores,
1731401896651:aes(x = PC1, y = PC2),
1731401896652:size = 3) +
1731401896652:# Add station arrows with scaling
1731401896652:geom_segment(data = station_loadings,
1731401896652:aes(x = 0, y = 0, xend = PC1 * 0.1, yend = PC2 * 0.1, color = Station),  # Scale arrows
1731401896652:arrow = arrow(length = unit(0.2, "cm"))) +
1731401896652:# Add species labels
1731401896653:geom_text_repel(data = species_scores,
1731401896653:aes(x = PC1, y = PC2, label = Species),
1731401896653:size = 3) +
1731401896653:theme_bw() +
1731401896654:labs(
1731401896654:title = paste("PCA of benthic community composition -", year),
1731401896654:subtitle = "Species shown as points, stations as arrows",
1731401896654:x = paste0("PC1 (", var_explained[1], "%)"),
1731401896654:y = paste0("PC2 (", var_explained[2], "%)")
1731401896654:) +
1731401896655:coord_fixed()  # Ensure equal scaling of axes
1731401896655:return(pca_plot)
1731401896655:}
1731401898060:create_year_pca_reversed(
1731401898060:year_data,
1731401898060:year,
1731401898060:dominant_species$species
1731401898061:)
1731401947498:# Function to create reversed PCA biplot with scaled arrows
1731401947498:create_year_pca_reversed <- function(year_data, year, important_species) {
1731401947499:# Ensure only numeric data is used
1731401947499:numeric_data <- year_data %>%
1731401947500:select(where(is.numeric))
1731401947500:# Scale the data
1731401947500:scaled_data <- scale(numeric_data)
1731401947500:# Perform PCA for this year
1731401947501:species_pca <- rda(scaled_data)  # Use scaled data
1731401947501:# Extract scores - note the reversed roles
1731401947501:species_scores <- data.frame(
1731401947501:scores(species_pca, display = "species"),
1731401947502:Species = rownames(scores(species_pca, display = "species"))
1731401947502:)
1731401947502:station_loadings <- data.frame(
1731401947502:scores(species_pca, display = "sites"),
1731401947503:Station = rownames(scores(species_pca, display = "sites"))
1731401947503:)
1731401947503:# Calculate variance explained
1731401947503:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731401947504:# Create reversed PCA biplot
1731401947504:pca_plot <- ggplot() +
1731401947504:# Add species points
1731401947504:geom_point(data = species_scores,
1731401947505:aes(x = PC1, y = PC2),
1731401947505:size = 3) +
1731401947505:# Add station arrows with scaling
1731401947505:geom_segment(data = station_loadings,
1731401947505:aes(x = 0, y = 0, xend = PC1 * 0.1, yend = PC2 * 0.1, color = Station),  # Scale arrows
1731401947506:arrow = arrow(length = unit(0.2, "cm"))) +
1731401947506:# Add species labels
1731401947506:geom_text_repel(data = species_scores,
1731401947506:aes(x = PC1, y = PC2, label = Species),
1731401947506:size = 3) +
1731401947507:theme_bw() +
1731401947507:labs(
1731401947507:title = paste("PCA of benthic community composition -", year),
1731401947507:subtitle = "Species shown as points, stations as arrows",
1731401947507:x = paste0("PC1 (", var_explained[1], "%)"),
1731401947508:y = paste0("PC2 (", var_explained[2], "%)")
1731401947508:) +
1731401947508:coord_fixed()  # Ensure equal scaling of axes
1731401947508:return(pca_plot)
1731401947509:}
1731401949229:create_year_pca_reversed(
1731401949229:year_data,
1731401949229:year,
1731401949230:dominant_species$species
1731401949230:)
1731401961726:# PCA plot function with reversed roles
1731401961726:# Function to create reversed PCA biplot with scaled arrows
1731401961726:create_year_pca_reversed <- function(year_data, year, important_species) {
1731401961726:# Scale the data
1731401961726:scaled_data <- scale(year_data)
1731401961727:# Perform PCA for this year
1731401961727:species_pca <- rda(scaled_data)  # Use scaled data
1731401961727:# Extract scores - note the reversed roles
1731401961727:species_scores <- data.frame(
1731401961727:scores(species_pca, display = "species"),
1731401961727:Species = rownames(scores(species_pca, display = "species"))
1731401961728:)
1731401961728:station_loadings <- data.frame(
1731401961728:scores(species_pca, display = "sites"),
1731401961728:Station = rownames(scores(species_pca, display = "sites"))
1731401961728:)
1731401961729:# Calculate variance explained
1731401961729:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731401961729:# Create reversed PCA biplot
1731401961730:pca_plot <- ggplot() +
1731401961730:# Add species points
1731401961730:geom_point(data = species_scores,
1731401961730:aes(x = PC1, y = PC2),
1731401961730:size = 3) +
1731401961731:# Add station arrows with scaling
1731401961731:geom_segment(data = station_loadings,
1731401961731:aes(x = 0, y = 0, xend = PC1 * 0.1, yend = PC2 * 0.1, color = Station),  # Scale arrows
1731401961731:arrow = arrow(length = unit(0.2, "cm"))) +
1731401961731:# Add species labels
1731401961731:geom_text_repel(data = species_scores,
1731401961732:aes(x = PC1, y = PC2, label = Species),
1731401961732:size = 3) +
1731401961732:theme_bw() +
1731401961732:labs(
1731401961732:title = paste("PCA of benthic community composition -", year),
1731401961733:subtitle = "Species shown as points, stations as arrows",
1731401961733:x = paste0("PC1 (", var_explained[1], "%)"),
1731401961733:y = paste0("PC2 (", var_explained[2], "%)")
1731401961733:) +
1731401961733:coord_fixed()  # Ensure equal scaling of axes
1731401961734:return(pca_plot)
1731401961734:}
1731401962965:# Create reversed PCA plots for each year
1731401962966:years <- sort(unique(species_matrix_all$year_temp))
1731401963296:pca_plots_reversed <- list()
1731401963750:for(year in years) {
1731401963750:year_data <- species_matrix_all %>%
1731401963750:filter(year_temp == year)
1731401963750:# Call the reversed PCA function
1731401963750:pca_plots_reversed[[as.character(year)]] <- create_year_pca_reversed(
1731401963750:year_data,
1731401963750:year,
1731401963751:dominant_species$species
1731401963751:)
1731401963751:# Save the reversed PCA plot with a unique filename
1731401963751:ggsave(
1731401963751:paste0("output/pca_biplot_reversed_", year, ".png"),
1731401963751:pca_plots_reversed[[as.character(year)]],
1731401963752:width = 10, height = 8,
1731401963752:dpi = 300,
1731401963752:bg = "white"
1731401963752:)
1731401963752:}
1731401964655:# Combine all reversed plots
1731401964655:combined_plot_reversed <- wrap_plots(pca_plots_reversed, ncol = 2) +
1731401964655:plot_annotation(
1731401964655:title = "Temporal changes in community composition (1999, 2013-2017)",
1731401964656:subtitle = "Species shown as points, stations as arrows",
1731401964656:caption = "Based on species abundance data. Only species with >1% relative abundance shown."
1731401964656:)
1731402005332:create_year_pca_reversed(
1731402005333:year_data,
1731402005333:year,
1731402005333:dominant_species$species
1731402005333:)
1731402033644:year_data;year;dominant_species$species
1731402079213:year_data %>%
1731402079214:select(-station_temp, -year_temp) %>%  # Remove these columns if they exist
1731402079214:select(where(is.numeric))
1731402087132:# Function to create reversed PCA biplot with scaled arrows
1731402087132:create_year_pca_reversed <- function(year_data, year, important_species) {
1731402087132:# Remove non-numeric columns and select only numeric columns
1731402087133:numeric_data <- year_data %>%
1731402087133:select(-station_temp, -year_temp) %>%  # Remove these columns if they exist
1731402087133:select(where(is.numeric))              # Select only numeric columns
1731402087133:# Perform PCA for this year (rda will handle the scaling internally)
1731402087133:species_pca <- rda(numeric_data)
1731402087134:# Extract scores - note the reversed roles
1731402087134:species_scores <- data.frame(
1731402087134:scores(species_pca, display = "species"),
1731402087134:Species = rownames(scores(species_pca, display = "species"))
1731402087134:)
1731402087135:station_loadings <- data.frame(
1731402087135:scores(species_pca, display = "sites"),
1731402087135:Station = paste("Station", 1:nrow(numeric_data))  # Create station labels
1731402087135:)
1731402087135:# Calculate variance explained
1731402087136:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731402087136:# Create reversed PCA biplot
1731402087136:pca_plot <- ggplot() +
1731402087136:# Add species points
1731402087137:geom_point(data = species_scores,
1731402087137:aes(x = PC1, y = PC2),
1731402087137:size = 3) +
1731402087137:# Add station arrows with scaling
1731402087137:geom_segment(data = station_loadings,
1731402087138:aes(x = 0, y = 0, xend = PC1 * 0.1, yend = PC2 * 0.1, color = Station),  # Scale arrows
1731402087138:arrow = arrow(length = unit(0.2, "cm"))) +
1731402087138:# Add species labels
1731402087138:geom_text_repel(data = species_scores,
1731402087138:aes(x = PC1, y = PC2, label = Species),
1731402087139:size = 3) +
1731402087139:theme_bw() +
1731402087139:labs(
1731402087139:title = paste("PCA of benthic community composition -", year),
1731402087139:subtitle = "Species shown as points, stations as arrows",
1731402087140:x = paste0("PC1 (", var_explained[1], "%)"),
1731402087140:y = paste0("PC2 (", var_explained[2], "%)")
1731402087140:) +
1731402087140:coord_fixed()  # Ensure equal scaling of axes
1731402087141:return(pca_plot)
1731402087141:}
1731402089796:create_year_pca_reversed(
1731402089796:year_data,
1731402089796:year,
1731402089796:dominant_species$species
1731402089797:)
1731402113095:create_year_pca_reversed(
1731402113095:year_data,
1731402113095:year,
1731402113095:dominant_species$species
1731402113096:)
1731402120309:for(year in years) {
1731402120310:year_data <- species_matrix_all %>%
1731402120310:filter(year_temp == year)
1731402120310:# Call the reversed PCA function
1731402120310:pca_plots_reversed[[as.character(year)]] <- create_year_pca_reversed(
1731402120310:year_data,
1731402120310:year,
1731402120310:dominant_species$species
1731402120311:)
1731402120311:# Save the reversed PCA plot with a unique filename
1731402120311:ggsave(
1731402120311:paste0("output/pca_biplot_reversed_", year, ".png"),
1731402120311:pca_plots_reversed[[as.character(year)]],
1731402120312:width = 10, height = 8,
1731402120312:dpi = 300,
1731402120312:bg = "white"
1731402120312:)
1731402120312:}
1731402504374:search_term <- "sipunc"
1731402504374:ekkiungvidi %>%
1731402504374:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731402504374:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731402504374:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731402504375:print(n=1000) %>% distinct(Flokkun,Artal)
1731402514421:search_term <- "oligoch"
1731402514421:ekkiungvidi %>%
1731402514421:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731402514421:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731402514421:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731402514422:print(n=1000) %>% distinct(Flokkun,Artal)
1731403293518:KolgrTaxa <- read_csv(file("data/raw/KolgrTaxa.csv", encoding = "UTF-8"), na = "empty")
1731403293879:taxa_to_remove <- c(
1731403293879:"Foraminifera",
1731403293879:"Nematoda",
1731403293879:"Cirripedia",
1731403293879:"Porifera",
1731403293879:"Cnidaria",
1731403293879:"Bryozoa",
1731403293879:"Sipuncula",
1731403293879:"Platyhelminthes",
1731403293879:"Nemertea",
1731403293879:#"Oligochaeta",
1731403293879:"Ostracoda"
1731403293879:)
1731403293880:# Filter out the specified taxa using if_all()
1731403293880:KolgrTaxa <- KolgrTaxa %>%
1731403293880:filter(if_all(where(is.character), ~ !. %in% taxa_to_remove))
1731403293905:KolgrTaxa$gamalt <- iconv(KolgrTaxa$gamalt, from = "UTF-8", to = "UTF-8", sub = NA)
1731403293906:remove_list <- paste(c(
1731403293906:"nýsestir",
1731403293906:"ungviði",
1731403293906:"ungv",
1731403293906:"ungv.",
1731403293906:"juv",
1731403293906:"harpacticoida"
1731403293907:), collapse = '|')
1731403293907:remove_ind <- lapply(strsplit(remove_list , "\\|")[[1]] , \(x) grep(x , KolgrTaxa$gamalt , fixed = T)) |>
1731403293907:unlist() |>
1731403293907:unique()
1731403293911:ekkiungvidi <- KolgrTaxa[-remove_ind,]
1731403293912:jorundur <- ekkiungvidi %>%
1731403293912:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1731403293912:mutate(
1731403293912:Flokkun = case_when(
1731403293912:# General taxonomic standardization (no year-specific)
1731403293912:str_detect(tolower(Flokkun), "^sipuncul") ~ "Sipuncula",
1731403293912:tolower(Flokkun) == "ostracoda" ~ "Ostracoda",
1731403293912:tolower(Flokkun) == "terebellides stroemi" ~ "Terebellides stroemii",
1731403293912:tolower(Flokkun) == "bivalvia" ~ "NA",
1731403293913:tolower(Flokkun) == "pectinaria koreni" ~ "Lagis koreni",
1731403293913:tolower(Flokkun) == "sphaerosyllis" ~ "Sphaerosyllis erinaceus",
1731403293913:tolower(Flokkun) %in% c("maldane sarsi", "maldanidae", "praxillella praetermissa") ~ "Praxillella",
1731403293913:tolower(Flokkun) == "oligochaeta" ~ "NA",
1731403293913:tolower(Flokkun) == "Tubificidae" ~ "NA",
1731403293913:# 1999 specific matches
1731403293913:Artal == "1999" & tolower(Flokkun) %in% c("ampharetinae", "ampharete acutifrons") ~ "Ampharetidae",
1731403293913:Artal == "1999" & tolower(Flokkun) == "bivalvia" ~ "NA",
1731403293913:Artal == "1999" & tolower(Flokkun) == "leucon acutirostris" ~ "Cumacea",
1731403293914:Artal == "1999" & tolower(Flokkun) == "eudorella emarginata" ~ "Cumacea",
1731403293914:Artal == "1999" & tolower(Flokkun) == "musculus discors" ~ "Musculus",
1731403293914:Artal == "1999" & tolower(Flokkun) == "aricidea (acmira) cerrutii" ~ "Aricidea suecica",
1731403293914:Artal == "1999" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1731403293914:# 2013 specific matches
1731403293914:Artal == "2013" & tolower(Flokkun) %in% c("harmothoe", "polynoidae") ~ "Harmothoe extenuata",
1731403293914:Artal == "2013" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731403293915:# 2014 specific matches
1731403293915:Artal == "2014" & tolower(Flokkun) == "ampharete acutifrons" ~ "Ampharetidae",
1731403293915:Artal == "2014" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731403293915:Artal == "2014" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1731403293915:Artal == "2014" & tolower(Flokkun) == "caprellidae" ~ "Caprella septemtrionalis",
1731403293915:Artal == "2014" & tolower(Flokkun) == "praxillella" ~ "Praxillella praetermissa",
1731403293916:Artal == "2014" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1731403293916:Artal == "2014" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1731403293916:Artal == "2014" & tolower(Flokkun) == "mytilus edulis" ~ "Mytilidae",
1731403293916:Artal == "2014" & tolower(Flokkun) == "nephtyidae" ~ "Nephthys",
1731403293916:Artal == "2014" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1731403293916:Artal == "2014" & tolower(Flokkun) == "tubificidae" ~ "Tubificoides kozloffi",
1731403293916:Artal == "2014" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1731403293917:# 2015 specific matches
1731403293917:Artal == "2015" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731403293917:Artal == "2015" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1731403293917:Artal == "2015" & tolower(Flokkun) == "crenella" ~ "Crenella decussata",
1731403293917:Artal == "2015" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1731403293918:Artal == "2015" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1731403293918:Artal == "2015" & tolower(Flokkun) == "mytilidae" ~ "Mytilus edulis",
1731403293918:Artal == "2015" & tolower(Flokkun) == "ampharetidae" ~ "NA",
1731403293918:Artal == "2015" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1731403293918:Artal == "2015" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1731403293919:Artal == "2015" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1731403293919:# 2016 specific matches
1731403293919:Artal == "2016" & tolower(Flokkun) == "leaena ebranchiata" ~ "Terebellides stroemii",
1731403293919:Artal == "2016" & tolower(Flokkun) == "pseudopolydora antennata" ~ "Polydora",
1731403293920:Artal == "2016" & tolower(Flokkun) == "cistenides hyperborea" ~ "Cistenides granulata",
1731403293920:Artal == "2016" & tolower(Flokkun) == "paraonidae" ~ "Aricidea suecica",
1731403293920:Artal == "2016" & tolower(Flokkun) == "dorvilleidae" ~ "Capitella capitata",
1731403293920:Artal == "2016" & tolower(Flokkun) == "orbiniidae" ~ "Scoloplos armiger",
1731403293920:Artal == "2016" & tolower(Flokkun) == "polychaeta" ~ "NA",
1731403293921:Artal == "2016" & tolower(Flokkun) == "polynoidae" ~ "Harmothoe imbricata",
1731403293921:Artal == "2016" & tolower(Flokkun) %in% c("spio filicornis", "spionidae") ~ "Spionidae",
1731403293921:Artal == "2016" & tolower(Flokkun) %in% c("syllis", "syllidae") ~ "Syllis cornuta",
1731403293921:Artal == "2016" & tolower(Flokkun) %in% c("terebellidae", "terebelliformia") ~ "Terebellides stroemii",
1731403293922:Artal == "2016" & tolower(Flokkun) == "amphipoda" ~ "NA",
1731403293922:Artal == "2016" & tolower(Flokkun) == "bivalvia" ~ "NA",
1731403293922:Artal == "2016" & tolower(Flokkun) == "cardium" ~ "NA",
1731403293922:Artal == "2016" & tolower(Flokkun) == "aricidea" ~ "Amphitrite cirrata",
1731403293922:Artal == "2016" & tolower(Flokkun) == "capitellidae" ~ "Capitella capitata",
1731403293923:Artal == "2016" & tolower(Flokkun) == "cirratulidae" ~ "Cirratulus cirratus",
1731403293923:Artal == "2016" & tolower(Flokkun) == "cossuridae" ~ "Cossura longocirrata",
1731403293923:Artal == "2016" & tolower(Flokkun) == "pectinariidae" ~ "Pectinaria koreni",
1731403293924:Artal == "2016" & tolower(Flokkun) == "phyllodocida" ~ "Phyllodoce maculata",
1731403293924:Artal == "2016" & tolower(Flokkun) == "lumbrineridae" ~ "Lumbrineris",
1731403293924:Artal == "2016" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1731403293924:Artal == "2016" & tolower(Flokkun) == "balanus balanus" ~ "Balanus",
1731403293925:Artal == "2016" & tolower(Flokkun) %in% c("priapulidae", "priapulidae") ~ "Priapulus caudatus",
1731403293925:# 2017 specific matches
1731403293925:Artal == "2017" & tolower(Flokkun) == "oligochaeta" ~ "NA",
1731403293926:Artal == "2017" & tolower(Flokkun) == "tubificidae" ~ "NA",
1731403293926:Artal == "2017" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1731403293926:Artal == "2017" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731403293927:Artal == "2017" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1731403293927:Artal == "2017" & tolower(Flokkun) == "caprellidae" ~ "Caprella septentrionalis",
1731403293927:Artal == "2017" & tolower(Flokkun) == "opisthobranchia" ~ "Retusa pertenuis",
1731403293928:Artal == "2017" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1731403293928:Artal == "2017" & tolower(Flokkun) == "maldanidae" ~ "Praxillella praetermissa",
1731403293929:Artal == "2017" & tolower(Flokkun) %in% c("ampharete", "ampharete acutifrons") ~ "Ampharetidae",
1731403293929:Artal == "2017" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1731403293929:Artal == "2017" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1731403293930:# Default case
1731403293930:TRUE ~ Flokkun
1731403293931:)
1731403293931:) %>%
1731403293932:drop_na()
1731403294084:df <- jorundur  %>%
1731403294084:rename(
1731403294084:species = Flokkun,
1731403294084:sample_id = id,
1731403294085:year = Artal,
1731403294085:station = stod,
1731403294085:subdivision = skipting,
1731403294085:count = N,
1731403294085:density = Nu
1731403294085:)
1731403294088:result <- df %>%
1731403294088:filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731403294088:# First, apply the subdivision to the count
1731403294088:mutate(adjusted_count = count * subdivision) %>%
1731403294088:# Calculate the correct number of samples and total area for each station-year combination
1731403294088:group_by(station, year) %>%
1731403294088:mutate(
1731403294089:n_samples = n_distinct(sample_id),
1731403294089:grab_area = case_when(
1731403294089:year == 1999 ~ 0.0225,
1731403294089:TRUE ~ 0.04
1731403294089:),
1731403294089:total_area = grab_area * n_samples
1731403294089:) %>%
1731403294089:ungroup() %>%
1731403294089:# Now group by station, year, and species to get total counts
1731403294089:group_by(station, year, species) %>%
1731403294089:summarise(
1731403294089:original_total_count = sum(count),
1731403294089:adjusted_total_count = sum(adjusted_count),
1731403294090:n_samples = first(n_samples),  # Use the previously calculated n_samples
1731403294090:total_area = first(total_area),  # Use the previously calculated total_area
1731403294090:.groups = 'keep'
1731403294090:) %>%
1731403294090:# Calculate densities
1731403294090:mutate(
1731403294090:original_density = original_total_count / total_area,
1731403294090:adjusted_density = adjusted_total_count / total_area,
1731403294090:density_difference = adjusted_density - original_density,
1731403294090:density_ratio = adjusted_density / original_density
1731403294091:) %>%
1731403294091:# Ungroup
1731403294091:ungroup()
1731404076997:jorundur <- "sipunc"
1731404076998:ekkiungvidi %>%
1731404076998:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731404076998:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731404076998:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731404076998:print(n=1000) %>% distinct(Flokkun,Artal)
1731404095057:KolgrTaxa <- read_csv(file("data/raw/KolgrTaxa.csv", encoding = "UTF-8"), na = "empty")
1731404095229:taxa_to_remove <- c(
1731404095229:"Foraminifera",
1731404095229:"Nematoda",
1731404095229:"Cirripedia",
1731404095229:"Porifera",
1731404095230:"Cnidaria",
1731404095230:"Bryozoa",
1731404095230:"Sipuncula",
1731404095230:"Platyhelminthes",
1731404095230:"Nemertea",
1731404095230:#"Oligochaeta",
1731404095230:"Ostracoda"
1731404095230:)
1731404095230:# Filter out the specified taxa using if_all()
1731404095230:KolgrTaxa <- KolgrTaxa %>%
1731404095230:filter(if_all(where(is.character), ~ !. %in% taxa_to_remove))
1731404095236:KolgrTaxa$gamalt <- iconv(KolgrTaxa$gamalt, from = "UTF-8", to = "UTF-8", sub = NA)
1731404095237:remove_list <- paste(c(
1731404095237:"nýsestir",
1731404095237:"ungviði",
1731404095237:"ungv",
1731404095237:"ungv.",
1731404095237:"juv",
1731404095238:"harpacticoida"
1731404095238:), collapse = '|')
1731404095238:remove_ind <- lapply(strsplit(remove_list , "\\|")[[1]] , \(x) grep(x , KolgrTaxa$gamalt , fixed = T)) |>
1731404095238:unlist() |>
1731404095238:unique()
1731404095241:ekkiungvidi <- KolgrTaxa[-remove_ind,]
1731404095242:jorundur <- ekkiungvidi %>%
1731404095242:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1731404095242:mutate(
1731404095242:Flokkun = case_when(
1731404095242:# General taxonomic standardization (no year-specific)
1731404095242:str_detect(tolower(Flokkun), "^sipuncul") ~ "Sipuncula",
1731404095242:tolower(Flokkun) == "ostracoda" ~ "Ostracoda",
1731404095242:tolower(Flokkun) == "terebellides stroemi" ~ "Terebellides stroemii",
1731404095242:tolower(Flokkun) == "bivalvia" ~ "NA",
1731404095243:tolower(Flokkun) == "pectinaria koreni" ~ "Lagis koreni",
1731404095243:tolower(Flokkun) == "sphaerosyllis" ~ "Sphaerosyllis erinaceus",
1731404095243:tolower(Flokkun) %in% c("maldane sarsi", "maldanidae", "praxillella praetermissa") ~ "Praxillella",
1731404095243:tolower(Flokkun) == "oligochaeta" ~ "NA",
1731404095243:tolower(Flokkun) == "Tubificidae" ~ "NA",
1731404095243:# 1999 specific matches
1731404095243:Artal == "1999" & tolower(Flokkun) %in% c("ampharetinae", "ampharete acutifrons") ~ "Ampharetidae",
1731404095244:Artal == "1999" & tolower(Flokkun) == "bivalvia" ~ "NA",
1731404095244:Artal == "1999" & tolower(Flokkun) == "leucon acutirostris" ~ "Cumacea",
1731404095244:Artal == "1999" & tolower(Flokkun) == "eudorella emarginata" ~ "Cumacea",
1731404095244:Artal == "1999" & tolower(Flokkun) == "musculus discors" ~ "Musculus",
1731404095244:Artal == "1999" & tolower(Flokkun) == "aricidea (acmira) cerrutii" ~ "Aricidea suecica",
1731404095245:Artal == "1999" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1731404095245:# 2013 specific matches
1731404095245:Artal == "2013" & tolower(Flokkun) %in% c("harmothoe", "polynoidae") ~ "Harmothoe extenuata",
1731404095245:Artal == "2013" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731404095246:# 2014 specific matches
1731404095246:Artal == "2014" & tolower(Flokkun) == "ampharete acutifrons" ~ "Ampharetidae",
1731404095246:Artal == "2014" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731404095246:Artal == "2014" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1731404095247:Artal == "2014" & tolower(Flokkun) == "caprellidae" ~ "Caprella septemtrionalis",
1731404095247:Artal == "2014" & tolower(Flokkun) == "praxillella" ~ "Praxillella praetermissa",
1731404095247:Artal == "2014" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1731404095247:Artal == "2014" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1731404095248:Artal == "2014" & tolower(Flokkun) == "mytilus edulis" ~ "Mytilidae",
1731404095248:Artal == "2014" & tolower(Flokkun) == "nephtyidae" ~ "Nephthys",
1731404095248:Artal == "2014" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1731404095248:Artal == "2014" & tolower(Flokkun) == "tubificidae" ~ "Tubificoides kozloffi",
1731404095249:Artal == "2014" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1731404095249:# 2015 specific matches
1731404095249:Artal == "2015" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731404095250:Artal == "2015" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1731404095250:Artal == "2015" & tolower(Flokkun) == "crenella" ~ "Crenella decussata",
1731404095250:Artal == "2015" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1731404095250:Artal == "2015" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1731404095251:Artal == "2015" & tolower(Flokkun) == "mytilidae" ~ "Mytilus edulis",
1731404095251:Artal == "2015" & tolower(Flokkun) == "ampharetidae" ~ "NA",
1731404095251:Artal == "2015" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1731404095251:Artal == "2015" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1731404095252:Artal == "2015" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1731404095252:# 2016 specific matches
1731404095252:Artal == "2016" & tolower(Flokkun) == "leaena ebranchiata" ~ "Terebellides stroemii",
1731404095253:Artal == "2016" & tolower(Flokkun) == "pseudopolydora antennata" ~ "Polydora",
1731404095253:Artal == "2016" & tolower(Flokkun) == "cistenides hyperborea" ~ "Cistenides granulata",
1731404095253:Artal == "2016" & tolower(Flokkun) == "paraonidae" ~ "Aricidea suecica",
1731404095254:Artal == "2016" & tolower(Flokkun) == "dorvilleidae" ~ "Capitella capitata",
1731404095254:Artal == "2016" & tolower(Flokkun) == "orbiniidae" ~ "Scoloplos armiger",
1731404095254:Artal == "2016" & tolower(Flokkun) == "polychaeta" ~ "NA",
1731404095255:Artal == "2016" & tolower(Flokkun) == "polynoidae" ~ "Harmothoe imbricata",
1731404095255:Artal == "2016" & tolower(Flokkun) %in% c("spio filicornis", "spionidae") ~ "Spionidae",
1731404095255:Artal == "2016" & tolower(Flokkun) %in% c("syllis", "syllidae") ~ "Syllis cornuta",
1731404095255:Artal == "2016" & tolower(Flokkun) %in% c("terebellidae", "terebelliformia") ~ "Terebellides stroemii",
1731404095256:Artal == "2016" & tolower(Flokkun) == "amphipoda" ~ "NA",
1731404095256:Artal == "2016" & tolower(Flokkun) == "bivalvia" ~ "NA",
1731404095256:Artal == "2016" & tolower(Flokkun) == "cardium" ~ "NA",
1731404095257:Artal == "2016" & tolower(Flokkun) == "aricidea" ~ "Amphitrite cirrata",
1731404095257:Artal == "2016" & tolower(Flokkun) == "capitellidae" ~ "Capitella capitata",
1731404095257:Artal == "2016" & tolower(Flokkun) == "cirratulidae" ~ "Cirratulus cirratus",
1731404095257:Artal == "2016" & tolower(Flokkun) == "cossuridae" ~ "Cossura longocirrata",
1731404095258:Artal == "2016" & tolower(Flokkun) == "pectinariidae" ~ "Pectinaria koreni",
1731404095258:Artal == "2016" & tolower(Flokkun) == "phyllodocida" ~ "Phyllodoce maculata",
1731404095258:Artal == "2016" & tolower(Flokkun) == "lumbrineridae" ~ "Lumbrineris",
1731404095259:Artal == "2016" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1731404095259:Artal == "2016" & tolower(Flokkun) == "balanus balanus" ~ "Balanus",
1731404095259:Artal == "2016" & tolower(Flokkun) %in% c("priapulidae", "priapulidae") ~ "Priapulus caudatus",
1731404095260:# 2017 specific matches
1731404095260:Artal == "2017" & tolower(Flokkun) == "oligochaeta" ~ "NA",
1731404095261:Artal == "2017" & tolower(Flokkun) == "tubificidae" ~ "NA",
1731404095261:Artal == "2017" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1731404095261:Artal == "2017" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731404095262:Artal == "2017" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1731404095262:Artal == "2017" & tolower(Flokkun) == "caprellidae" ~ "Caprella septentrionalis",
1731404095262:Artal == "2017" & tolower(Flokkun) == "opisthobranchia" ~ "Retusa pertenuis",
1731404095263:Artal == "2017" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1731404095263:Artal == "2017" & tolower(Flokkun) == "maldanidae" ~ "Praxillella praetermissa",
1731404095263:Artal == "2017" & tolower(Flokkun) %in% c("ampharete", "ampharete acutifrons") ~ "Ampharetidae",
1731404095264:Artal == "2017" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1731404095264:Artal == "2017" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1731404095265:# Default case
1731404095265:TRUE ~ Flokkun
1731404095266:)
1731404095266:) %>%
1731404095266:drop_na()
1731404095412:df <- jorundur  %>%
1731404095412:rename(
1731404095412:species = Flokkun,
1731404095412:sample_id = id,
1731404095412:year = Artal,
1731404095412:station = stod,
1731404095413:subdivision = skipting,
1731404095413:count = N,
1731404095413:density = Nu
1731404095413:)
1731404095415:result <- df %>%
1731404095415:filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731404095415:# First, apply the subdivision to the count
1731404095415:mutate(adjusted_count = count * subdivision) %>%
1731404095415:# Calculate the correct number of samples and total area for each station-year combination
1731404095416:group_by(station, year) %>%
1731404095416:mutate(
1731404095416:n_samples = n_distinct(sample_id),
1731404095416:grab_area = case_when(
1731404095416:year == 1999 ~ 0.0225,
1731404095416:TRUE ~ 0.04
1731404095416:),
1731404095416:total_area = grab_area * n_samples
1731404095416:) %>%
1731404095416:ungroup() %>%
1731404095416:# Now group by station, year, and species to get total counts
1731404095417:group_by(station, year, species) %>%
1731404095417:summarise(
1731404095417:original_total_count = sum(count),
1731404095417:adjusted_total_count = sum(adjusted_count),
1731404095417:n_samples = first(n_samples),  # Use the previously calculated n_samples
1731404095417:total_area = first(total_area),  # Use the previously calculated total_area
1731404095417:.groups = 'keep'
1731404095417:) %>%
1731404095417:# Calculate densities
1731404095417:mutate(
1731404095418:original_density = original_total_count / total_area,
1731404095418:adjusted_density = adjusted_total_count / total_area,
1731404095418:density_difference = adjusted_density - original_density,
1731404095418:density_ratio = adjusted_density / original_density
1731404095418:) %>%
1731404095418:# Ungroup
1731404095418:ungroup()
1731404112678:search_term <- "oligoch"
1731404112678:jorundur %>%
1731404112679:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731404112679:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731404112679:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731404112679:print(n=1000) %>% distinct(Flokkun,Artal)
1731404127022:search_term <- "sipuncul"
1731404127022:jorundur %>%
1731404127023:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731404127023:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731404127023:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731404127023:print(n=1000) %>% distinct(Flokkun,Artal)
1731407719066:jorundur <- ekkiungvidi %>%
1731407719066:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1731407719066:mutate(
1731407719067:Flokkun = case_when(
1731407719067:# General taxonomic standardization (no year-specific)
1731407719067:str_detect(tolower(Flokkun), "^sipuncul") ~ "NA",
1731407719067:tolower(Flokkun) == "ostracoda" ~ "Ostracoda",
1731407719067:tolower(Flokkun) == "terebellides stroemi" ~ "Terebellides stroemii",
1731407719067:tolower(Flokkun) == "bivalvia" ~ "NA",
1731407719067:tolower(Flokkun) == "pectinaria koreni" ~ "Lagis koreni",
1731407719068:tolower(Flokkun) == "sphaerosyllis" ~ "Sphaerosyllis erinaceus",
1731407719068:tolower(Flokkun) %in% c("maldane sarsi", "maldanidae", "praxillella praetermissa") ~ "Praxillella",
1731407719068:tolower(Flokkun) == "oligochaeta" ~ "NA",
1731407719068:tolower(Flokkun) == "Tubificidae" ~ "NA",
1731407719068:# 1999 specific matches
1731407719069:Artal == "1999" & tolower(Flokkun) %in% c("ampharetinae", "ampharete acutifrons") ~ "Ampharetidae",
1731407719069:Artal == "1999" & tolower(Flokkun) == "bivalvia" ~ "NA",
1731407719069:Artal == "1999" & tolower(Flokkun) == "leucon acutirostris" ~ "Cumacea",
1731407719069:Artal == "1999" & tolower(Flokkun) == "eudorella emarginata" ~ "Cumacea",
1731407719069:Artal == "1999" & tolower(Flokkun) == "musculus discors" ~ "Musculus",
1731407719069:Artal == "1999" & tolower(Flokkun) == "aricidea (acmira) cerrutii" ~ "Aricidea suecica",
1731407719070:Artal == "1999" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1731407719070:# 2013 specific matches
1731407719070:Artal == "2013" & tolower(Flokkun) %in% c("harmothoe", "polynoidae") ~ "Harmothoe extenuata",
1731407719070:Artal == "2013" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731407719071:# 2014 specific matches
1731407719071:Artal == "2014" & tolower(Flokkun) == "ampharete acutifrons" ~ "Ampharetidae",
1731407719071:Artal == "2014" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731407719071:Artal == "2014" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1731407719072:Artal == "2014" & tolower(Flokkun) == "caprellidae" ~ "Caprella septemtrionalis",
1731407719072:Artal == "2014" & tolower(Flokkun) == "praxillella" ~ "Praxillella praetermissa",
1731407719072:Artal == "2014" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1731407719072:Artal == "2014" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1731407719072:Artal == "2014" & tolower(Flokkun) == "mytilus edulis" ~ "Mytilidae",
1731407719073:Artal == "2014" & tolower(Flokkun) == "nephtyidae" ~ "Nephthys",
1731407719073:Artal == "2014" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1731407719073:Artal == "2014" & tolower(Flokkun) == "tubificidae" ~ "Tubificoides kozloffi",
1731407719073:Artal == "2014" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1731407719074:# 2015 specific matches
1731407719074:Artal == "2015" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731407719074:Artal == "2015" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1731407719075:Artal == "2015" & tolower(Flokkun) == "crenella" ~ "Crenella decussata",
1731407719075:Artal == "2015" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1731407719075:Artal == "2015" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1731407719075:Artal == "2015" & tolower(Flokkun) == "mytilidae" ~ "Mytilus edulis",
1731407719075:Artal == "2015" & tolower(Flokkun) == "ampharetidae" ~ "NA",
1731407719076:Artal == "2015" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1731407719076:Artal == "2015" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1731407719076:Artal == "2015" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1731407719077:# 2016 specific matches
1731407719077:Artal == "2016" & tolower(Flokkun) == "leaena ebranchiata" ~ "Terebellides stroemii",
1731407719077:Artal == "2016" & tolower(Flokkun) == "pseudopolydora antennata" ~ "Polydora",
1731407719078:Artal == "2016" & tolower(Flokkun) == "cistenides hyperborea" ~ "Cistenides granulata",
1731407719078:Artal == "2016" & tolower(Flokkun) == "paraonidae" ~ "Aricidea suecica",
1731407719078:Artal == "2016" & tolower(Flokkun) == "dorvilleidae" ~ "Capitella capitata",
1731407719078:Artal == "2016" & tolower(Flokkun) == "orbiniidae" ~ "Scoloplos armiger",
1731407719079:Artal == "2016" & tolower(Flokkun) == "polychaeta" ~ "NA",
1731407719079:Artal == "2016" & tolower(Flokkun) == "polynoidae" ~ "Harmothoe imbricata",
1731407719079:Artal == "2016" & tolower(Flokkun) %in% c("spio filicornis", "spionidae") ~ "Spionidae",
1731407719080:Artal == "2016" & tolower(Flokkun) %in% c("syllis", "syllidae") ~ "Syllis cornuta",
1731407719080:Artal == "2016" & tolower(Flokkun) %in% c("terebellidae", "terebelliformia") ~ "Terebellides stroemii",
1731407719081:Artal == "2016" & tolower(Flokkun) == "amphipoda" ~ "NA",
1731407719081:Artal == "2016" & tolower(Flokkun) == "bivalvia" ~ "NA",
1731407719082:Artal == "2016" & tolower(Flokkun) == "cardium" ~ "NA",
1731407719082:Artal == "2016" & tolower(Flokkun) == "aricidea" ~ "Amphitrite cirrata",
1731407719083:Artal == "2016" & tolower(Flokkun) == "capitellidae" ~ "Capitella capitata",
1731407719083:Artal == "2016" & tolower(Flokkun) == "cirratulidae" ~ "Cirratulus cirratus",
1731407719084:Artal == "2016" & tolower(Flokkun) == "cossuridae" ~ "Cossura longocirrata",
1731407719085:Artal == "2016" & tolower(Flokkun) == "pectinariidae" ~ "Pectinaria koreni",
1731407719085:Artal == "2016" & tolower(Flokkun) == "phyllodocida" ~ "Phyllodoce maculata",
1731407719085:Artal == "2016" & tolower(Flokkun) == "lumbrineridae" ~ "Lumbrineris",
1731407719086:Artal == "2016" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1731407719086:Artal == "2016" & tolower(Flokkun) == "balanus balanus" ~ "Balanus",
1731407719086:Artal == "2016" & tolower(Flokkun) %in% c("priapulidae", "priapulidae") ~ "Priapulus caudatus",
1731407719087:# 2017 specific matches
1731407719087:Artal == "2017" & tolower(Flokkun) == "oligochaeta" ~ "NA",
1731407719088:Artal == "2017" & tolower(Flokkun) == "tubificidae" ~ "NA",
1731407719088:Artal == "2017" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1731407719088:Artal == "2017" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731407719089:Artal == "2017" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1731407719089:Artal == "2017" & tolower(Flokkun) == "caprellidae" ~ "Caprella septentrionalis",
1731407719089:Artal == "2017" & tolower(Flokkun) == "opisthobranchia" ~ "Retusa pertenuis",
1731407719090:Artal == "2017" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1731407719090:Artal == "2017" & tolower(Flokkun) == "maldanidae" ~ "Praxillella praetermissa",
1731407719091:Artal == "2017" & tolower(Flokkun) %in% c("ampharete", "ampharete acutifrons") ~ "Ampharetidae",
1731407719091:Artal == "2017" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1731407719091:Artal == "2017" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1731407719092:# Default case
1731407719092:TRUE ~ Flokkun
1731407719093:)
1731407719093:) %>%
1731407719094:drop_na()
1731407723142:search_term <- "sipuncul"
1731407723142:jorundur %>%
1731407723142:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731407723142:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731407723143:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731407723143:print(n=1000) %>% distinct(Flokkun,Artal)
1731407733995:jorundur <- ekkiungvidi %>%
1731407733995:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1731407733995:mutate(
1731407733995:Flokkun = case_when(
1731407733996:# General taxonomic standardization (no year-specific)
1731407733996:str_detect(tolower(Flokkun), "^sipuncul") ~ "NA",
1731407733996:tolower(Flokkun) == "ostracoda" ~ "Ostracoda",
1731407733996:tolower(Flokkun) == "terebellides stroemi" ~ "Terebellides stroemii",
1731407733996:tolower(Flokkun) == "bivalvia" ~ "NA",
1731407733996:tolower(Flokkun) == "pectinaria koreni" ~ "Lagis koreni",
1731407733997:tolower(Flokkun) == "sphaerosyllis" ~ "Sphaerosyllis erinaceus",
1731407733997:tolower(Flokkun) %in% c("maldane sarsi", "maldanidae", "praxillella praetermissa") ~ "Praxillella",
1731407733997:tolower(Flokkun) == "oligochaeta" ~ "NA",
1731407733997:tolower(Flokkun) == "Tubificidae" ~ "NA",
1731407733997:# 1999 specific matches
1731407733997:Artal == "1999" & tolower(Flokkun) %in% c("ampharetinae", "ampharete acutifrons") ~ "Ampharetidae",
1731407733998:Artal == "1999" & tolower(Flokkun) == "bivalvia" ~ "NA",
1731407733998:Artal == "1999" & tolower(Flokkun) == "leucon acutirostris" ~ "Cumacea",
1731407733998:Artal == "1999" & tolower(Flokkun) == "eudorella emarginata" ~ "Cumacea",
1731407733998:Artal == "1999" & tolower(Flokkun) == "musculus discors" ~ "Musculus",
1731407733998:Artal == "1999" & tolower(Flokkun) == "aricidea (acmira) cerrutii" ~ "Aricidea suecica",
1731407733998:Artal == "1999" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1731407733999:# 2013 specific matches
1731407733999:Artal == "2013" & tolower(Flokkun) %in% c("harmothoe", "polynoidae") ~ "Harmothoe extenuata",
1731407733999:Artal == "2013" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731407734000:# 2014 specific matches
1731407734000:Artal == "2014" & tolower(Flokkun) == "ampharete acutifrons" ~ "Ampharetidae",
1731407734000:Artal == "2014" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731407734001:Artal == "2014" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1731407734001:Artal == "2014" & tolower(Flokkun) == "caprellidae" ~ "Caprella septemtrionalis",
1731407734001:Artal == "2014" & tolower(Flokkun) == "praxillella" ~ "Praxillella praetermissa",
1731407734002:Artal == "2014" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1731407734002:Artal == "2014" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1731407734002:Artal == "2014" & tolower(Flokkun) == "mytilus edulis" ~ "Mytilidae",
1731407734002:Artal == "2014" & tolower(Flokkun) == "nephtyidae" ~ "Nephthys",
1731407734003:Artal == "2014" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1731407734003:Artal == "2014" & tolower(Flokkun) == "tubificidae" ~ "Tubificoides kozloffi",
1731407734003:Artal == "2014" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1731407734003:# 2015 specific matches
1731407734004:Artal == "2015" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731407734004:Artal == "2015" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1731407734004:Artal == "2015" & tolower(Flokkun) == "crenella" ~ "Crenella decussata",
1731407734005:Artal == "2015" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1731407734005:Artal == "2015" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1731407734005:Artal == "2015" & tolower(Flokkun) == "mytilidae" ~ "Mytilus edulis",
1731407734005:Artal == "2015" & tolower(Flokkun) == "ampharetidae" ~ "NA",
1731407734006:Artal == "2015" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1731407734006:Artal == "2015" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1731407734006:Artal == "2015" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1731407734007:# 2016 specific matches
1731407734007:Artal == "2016" & tolower(Flokkun) == "leaena ebranchiata" ~ "Terebellides stroemii",
1731407734007:Artal == "2016" & tolower(Flokkun) == "pseudopolydora antennata" ~ "Polydora",
1731407734008:Artal == "2016" & tolower(Flokkun) == "cistenides hyperborea" ~ "Cistenides granulata",
1731407734008:Artal == "2016" & tolower(Flokkun) == "paraonidae" ~ "Aricidea suecica",
1731407734008:Artal == "2016" & tolower(Flokkun) == "dorvilleidae" ~ "Capitella capitata",
1731407734008:Artal == "2016" & tolower(Flokkun) == "orbiniidae" ~ "Scoloplos armiger",
1731407734009:Artal == "2016" & tolower(Flokkun) == "polychaeta" ~ "NA",
1731407734009:Artal == "2016" & tolower(Flokkun) == "polynoidae" ~ "Harmothoe imbricata",
1731407734009:Artal == "2016" & tolower(Flokkun) %in% c("spio filicornis", "spionidae") ~ "Spionidae",
1731407734009:Artal == "2016" & tolower(Flokkun) %in% c("syllis", "syllidae") ~ "Syllis cornuta",
1731407734010:Artal == "2016" & tolower(Flokkun) %in% c("terebellidae", "terebelliformia") ~ "Terebellides stroemii",
1731407734010:Artal == "2016" & tolower(Flokkun) == "amphipoda" ~ "NA",
1731407734010:Artal == "2016" & tolower(Flokkun) == "bivalvia" ~ "NA",
1731407734011:Artal == "2016" & tolower(Flokkun) == "cardium" ~ "NA",
1731407734011:Artal == "2016" & tolower(Flokkun) == "aricidea" ~ "Amphitrite cirrata",
1731407734012:Artal == "2016" & tolower(Flokkun) == "capitellidae" ~ "Capitella capitata",
1731407734012:Artal == "2016" & tolower(Flokkun) == "cirratulidae" ~ "Cirratulus cirratus",
1731407734012:Artal == "2016" & tolower(Flokkun) == "cossuridae" ~ "Cossura longocirrata",
1731407734013:Artal == "2016" & tolower(Flokkun) == "pectinariidae" ~ "Pectinaria koreni",
1731407734013:Artal == "2016" & tolower(Flokkun) == "phyllodocida" ~ "Phyllodoce maculata",
1731407734014:Artal == "2016" & tolower(Flokkun) == "lumbrineridae" ~ "Lumbrineris",
1731407734014:Artal == "2016" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1731407734014:Artal == "2016" & tolower(Flokkun) == "balanus balanus" ~ "Balanus",
1731407734015:Artal == "2016" & tolower(Flokkun) %in% c("priapulidae", "priapulidae") ~ "Priapulus caudatus",
1731407734016:# 2017 specific matches
1731407734016:Artal == "2017" & tolower(Flokkun) == "oligochaeta" ~ "NA",
1731407734016:Artal == "2017" & tolower(Flokkun) == "tubificidae" ~ "NA",
1731407734017:Artal == "2017" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1731407734017:Artal == "2017" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731407734017:Artal == "2017" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1731407734018:Artal == "2017" & tolower(Flokkun) == "caprellidae" ~ "Caprella septentrionalis",
1731407734018:Artal == "2017" & tolower(Flokkun) == "opisthobranchia" ~ "Retusa pertenuis",
1731407734018:Artal == "2017" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1731407734019:Artal == "2017" & tolower(Flokkun) == "maldanidae" ~ "Praxillella praetermissa",
1731407734019:Artal == "2017" & tolower(Flokkun) %in% c("ampharete", "ampharete acutifrons") ~ "Ampharetidae",
1731407734019:Artal == "2017" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1731407734020:Artal == "2017" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1731407734020:# Default case
1731407734021:TRUE ~ Flokkun
1731407734021:)
1731407734022:) %>%
1731407734022:drop_na()
1731407738502:search_term <- "sipuncul"
1731407738502:jorundur %>%
1731407738502:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731407738503:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731407738503:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731407738503:print(n=1000) %>% distinct(Flokkun,Artal)
1731407820839:jorundur <- ekkiungvidi %>%
1731407820839:mutate(
1731407820839:Flokkun = case_when(
1731407820839:str_detect(tolower(Flokkun), "^sipuncul") ~ "NA",
1731407820839:TRUE ~ Flokkun
1731407820839:)
1731407820839:) %>%
1731407820840:drop_na()
1731407826071:search_term <- "sipuncul"
1731407826071:jorundur %>%
1731407826072:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731407826072:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731407826072:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731407826072:print(n=1000) %>% distinct(Flokkun,Artal)
1731407902988:jorundur <- ekkiungvidi %>%
1731407902988:mutate(
1731407902988:Flokkun = case_when(
1731407902989:str_detect(tolower(Flokkun), "^sipuncul") ~ "NA",
1731407902989:TRUE ~ Flokkun
1731407902989:)
1731407902989:) %>%
1731407902989:drop_na(Flokkun)
1731407915918:search_term <- "sipuncul"
1731407915918:jorundur %>%
1731407915918:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731407915918:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731407915919:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731407915919:print(n=1000) %>% distinct(Flokkun,Artal)
1731407970887:jorundur <- ekkiungvidi %>%
1731407970887:mutate(
1731407970888:Flokkun = case_when(
1731407970888:str_detect(tolower(Flokkun), "^sipuncul") ~ NA_character_,
1731407970888:TRUE ~ Flokkun
1731407970888:)
1731407970888:) %>%
1731407970888:drop_na(Flokkun)
1731407972911:search_term <- "sipuncul"
1731407972912:jorundur %>%
1731407972912:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731407972912:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731407972912:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731407972912:print(n=1000) %>% distinct(Flokkun,Artal)
1731408087286:jorundur <- ekkiungvidi %>%
1731408087286:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1731408087286:mutate(
1731408087286:Flokkun = case_when(
1731408087287:# General taxonomic standardization (no year-specific)
1731408087287:str_detect(tolower(Flokkun), "^sipuncul") ~ NA_character_,
1731408087287:tolower(Flokkun) == "ostracoda" ~ "Ostracoda",
1731408087287:tolower(Flokkun) == "terebellides stroemi" ~ "Terebellides stroemii",
1731408087287:tolower(Flokkun) == "bivalvia" ~ NA_character_,
1731408087287:tolower(Flokkun) == "pectinaria koreni" ~ "Lagis koreni",
1731408087287:tolower(Flokkun) == "sphaerosyllis" ~ "Sphaerosyllis erinaceus",
1731408087288:tolower(Flokkun) %in% c("maldane sarsi", "maldanidae", "praxillella praetermissa") ~ "Praxillella",
1731408087288:tolower(Flokkun) == "oligochaeta" ~ NA_character_,
1731408087288:tolower(Flokkun) == "Tubificidae" ~ NA_character_,
1731408087288:# 1999 specific matches
1731408087288:Artal == "1999" & tolower(Flokkun) %in% c("ampharetinae", "ampharete acutifrons") ~ "Ampharetidae",
1731408087289:Artal == "1999" & tolower(Flokkun) == "bivalvia" ~ NA_character_,
1731408087289:Artal == "1999" & tolower(Flokkun) == "leucon acutirostris" ~ "Cumacea",
1731408087289:Artal == "1999" & tolower(Flokkun) == "eudorella emarginata" ~ "Cumacea",
1731408087289:Artal == "1999" & tolower(Flokkun) == "musculus discors" ~ "Musculus",
1731408087289:Artal == "1999" & tolower(Flokkun) == "aricidea (acmira) cerrutii" ~ "Aricidea suecica",
1731408087289:Artal == "1999" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1731408087290:# 2013 specific matches
1731408087290:Artal == "2013" & tolower(Flokkun) %in% c("harmothoe", "polynoidae") ~ "Harmothoe extenuata",
1731408087290:Artal == "2013" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731408087291:# 2014 specific matches
1731408087291:Artal == "2014" & tolower(Flokkun) == "ampharete acutifrons" ~ "Ampharetidae",
1731408087291:Artal == "2014" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731408087291:Artal == "2014" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1731408087291:Artal == "2014" & tolower(Flokkun) == "caprellidae" ~ "Caprella septemtrionalis",
1731408087292:Artal == "2014" & tolower(Flokkun) == "praxillella" ~ "Praxillella praetermissa",
1731408087292:Artal == "2014" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1731408087292:Artal == "2014" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1731408087292:Artal == "2014" & tolower(Flokkun) == "mytilus edulis" ~ "Mytilidae",
1731408087292:Artal == "2014" & tolower(Flokkun) == "nephtyidae" ~ "Nephthys",
1731408087293:Artal == "2014" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1731408087293:Artal == "2014" & tolower(Flokkun) == "tubificidae" ~ "Tubificoides kozloffi",
1731408087293:Artal == "2014" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1731408087294:# 2015 specific matches
1731408087294:Artal == "2015" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731408087294:Artal == "2015" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1731408087294:Artal == "2015" & tolower(Flokkun) == "crenella" ~ "Crenella decussata",
1731408087295:Artal == "2015" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1731408087295:Artal == "2015" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1731408087295:Artal == "2015" & tolower(Flokkun) == "mytilidae" ~ "Mytilus edulis",
1731408087295:Artal == "2015" & tolower(Flokkun) == "ampharetidae" ~ NA_character_,
1731408087296:Artal == "2015" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1731408087296:Artal == "2015" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1731408087296:Artal == "2015" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1731408087297:# 2016 specific matches
1731408087297:Artal == "2016" & tolower(Flokkun) == "leaena ebranchiata" ~ "Terebellides stroemii",
1731408087297:Artal == "2016" & tolower(Flokkun) == "pseudopolydora antennata" ~ "Polydora",
1731408087298:Artal == "2016" & tolower(Flokkun) == "cistenides hyperborea" ~ "Cistenides granulata",
1731408087298:Artal == "2016" & tolower(Flokkun) == "paraonidae" ~ "Aricidea suecica",
1731408087298:Artal == "2016" & tolower(Flokkun) == "dorvilleidae" ~ "Capitella capitata",
1731408087299:Artal == "2016" & tolower(Flokkun) == "orbiniidae" ~ "Scoloplos armiger",
1731408087302:Artal == "2016" & tolower(Flokkun) == "polychaeta" ~ NA_character_,
1731408087303:Artal == "2016" & tolower(Flokkun) == "polynoidae" ~ "Harmothoe imbricata",
1731408087304:Artal == "2016" & tolower(Flokkun) %in% c("spio filicornis", "spionidae") ~ "Spionidae",
1731408087305:Artal == "2016" & tolower(Flokkun) %in% c("syllis", "syllidae") ~ "Syllis cornuta",
1731408087305:Artal == "2016" & tolower(Flokkun) %in% c("terebellidae", "terebelliformia") ~ "Terebellides stroemii",
1731408087306:Artal == "2016" & tolower(Flokkun) == "amphipoda" ~ NA_character_,
1731408087306:Artal == "2016" & tolower(Flokkun) == "bivalvia" ~ NA_character_,
1731408087306:Artal == "2016" & tolower(Flokkun) == "cardium" ~ NA_character_,
1731408087307:Artal == "2016" & tolower(Flokkun) == "aricidea" ~ "Amphitrite cirrata",
1731408087307:Artal == "2016" & tolower(Flokkun) == "capitellidae" ~ "Capitella capitata",
1731408087307:Artal == "2016" & tolower(Flokkun) == "cirratulidae" ~ "Cirratulus cirratus",
1731408087308:Artal == "2016" & tolower(Flokkun) == "cossuridae" ~ "Cossura longocirrata",
1731408087308:Artal == "2016" & tolower(Flokkun) == "pectinariidae" ~ "Pectinaria koreni",
1731408087308:Artal == "2016" & tolower(Flokkun) == "phyllodocida" ~ "Phyllodoce maculata",
1731408087309:Artal == "2016" & tolower(Flokkun) == "lumbrineridae" ~ "Lumbrineris",
1731408087309:Artal == "2016" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1731408087309:Artal == "2016" & tolower(Flokkun) == "balanus balanus" ~ "Balanus",
1731408087310:Artal == "2016" & tolower(Flokkun) %in% c("priapulidae", "priapulidae") ~ "Priapulus caudatus",
1731408087310:# 2017 specific matches
1731408087311:Artal == "2017" & tolower(Flokkun) == "oligochaeta" ~ NA_character_,
1731408087311:Artal == "2017" & tolower(Flokkun) == "tubificidae" ~ NA_character_,
1731408087311:Artal == "2017" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1731408087312:Artal == "2017" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731408087312:Artal == "2017" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1731408087312:Artal == "2017" & tolower(Flokkun) == "caprellidae" ~ "Caprella septentrionalis",
1731408087313:Artal == "2017" & tolower(Flokkun) == "opisthobranchia" ~ "Retusa pertenuis",
1731408087313:Artal == "2017" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1731408087313:Artal == "2017" & tolower(Flokkun) == "maldanidae" ~ "Praxillella praetermissa",
1731408087314:Artal == "2017" & tolower(Flokkun) %in% c("ampharete", "ampharete acutifrons") ~ "Ampharetidae",
1731408087314:Artal == "2017" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1731408087314:Artal == "2017" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1731408087315:# Default case
1731408087315:TRUE ~ Flokkun
1731408087316:)
1731408087316:) %>%
1731408087316:drop_na(Flokkun)
1731408093919:search_term <- "sipuncul"
1731408093919:jorundur %>%
1731408093919:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731408093920:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731408093920:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731408093920:print(n=1000) %>% distinct(Flokkun,Artal)
1731408098648:df <- jorundur  %>%
1731408098648:rename(
1731408098648:species = Flokkun,
1731408098649:sample_id = id,
1731408098649:year = Artal,
1731408098649:station = stod,
1731408098649:subdivision = skipting,
1731408098649:count = N,
1731408098649:density = Nu
1731408098649:)
1731408100997:result <- df %>%
1731408100998:filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731408100998:# First, apply the subdivision to the count
1731408100998:mutate(adjusted_count = count * subdivision) %>%
1731408100998:# Calculate the correct number of samples and total area for each station-year combination
1731408100998:group_by(station, year) %>%
1731408100998:mutate(
1731408100999:n_samples = n_distinct(sample_id),
1731408100999:grab_area = case_when(
1731408100999:year == 1999 ~ 0.0225,
1731408100999:TRUE ~ 0.04
1731408100999:),
1731408100999:total_area = grab_area * n_samples
1731408100999:) %>%
1731408101000:ungroup() %>%
1731408101000:# Now group by station, year, and species to get total counts
1731408101000:group_by(station, year, species) %>%
1731408101000:summarise(
1731408101000:original_total_count = sum(count),
1731408101001:adjusted_total_count = sum(adjusted_count),
1731408101001:n_samples = first(n_samples),  # Use the previously calculated n_samples
1731408101001:total_area = first(total_area),  # Use the previously calculated total_area
1731408101001:.groups = 'keep'
1731408101001:) %>%
1731408101001:# Calculate densities
1731408101002:mutate(
1731408101002:original_density = original_total_count / total_area,
1731408101002:adjusted_density = adjusted_total_count / total_area,
1731408101002:density_difference = adjusted_density - original_density,
1731408101002:density_ratio = adjusted_density / original_density
1731408101002:) %>%
1731408101003:# Ungroup
1731408101003:ungroup()
1731408144374:df_result <- result
1731408154687:df <- df_result
1731408169176:# Prepare data including 1999
1731408169177:species_matrix_all <- df %>%
1731408169177:select(station, year, species, adjusted_density) %>%
1731408169178:pivot_wider(
1731408169178:names_from = species,
1731408169179:values_from = adjusted_density,
1731408169179:values_fill = 0
1731408169180:) %>%
1731408169180:mutate(
1731408169180:station_temp = station,
1731408169180:year_temp = year
1731408169181:) %>%
1731408169181:select(-station, -year)
1731408171318:# Find dominant species (>1% relative abundance) including 1999
1731408171318:dominant_species <- species_matrix_all %>%
1731408171318:select(where(is.numeric)) %>%
1731408171318:select(-year_temp) %>%
1731408171318:summarise(across(everything(), sum)) %>%
1731408171319:pivot_longer(everything(),
1731408171319:names_to = "species",
1731408171319:values_to = "total_abundance") %>%
1731408171319:arrange(desc(total_abundance)) %>%
1731408171319:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1731408171319:filter(relative_abundance > 0.01)
1731408173119:# PCA plot function
1731408173120:create_year_pca <- function(year_data, year, important_species) {
1731408173120:# Perform PCA for this year
1731408173120:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731408173120:# Extract scores
1731408173120:site_scores <- data.frame(
1731408173121:scores(species_pca, display = "sites"),
1731408173121:Station = year_data$station_temp
1731408173121:)
1731408173121:species_loadings <- data.frame(
1731408173121:scores(species_pca, display = "species"),
1731408173121:Species = rownames(scores(species_pca, display = "species"))
1731408173122:) %>%
1731408173122:filter(Species %in% important_species)
1731408173122:# Calculate variance explained
1731408173122:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731408173123:# Create PCA biplot
1731408173123:pca_plot <- ggplot() +
1731408173123:# Add site scores
1731408173123:geom_point(data = site_scores,
1731408173123:aes(x = PC1, y = PC2, color = Station),
1731408173124:size = 3) +
1731408173124:# Add species arrows
1731408173124:geom_segment(data = species_loadings,
1731408173124:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731408173124:arrow = arrow(length = unit(0.2, "cm"))) +
1731408173124:# Add species labels
1731408173125:geom_text_repel(data = species_loadings,
1731408173125:aes(x = PC1, y = PC2, label = Species),
1731408173125:size = 3) +
1731408173125:theme_bw() +
1731408173125:labs(
1731408173126:title = paste("PCA of benthic community composition -", year),
1731408173126:x = paste0("PC1 (", var_explained[1], "%)"),
1731408173126:y = paste0("PC2 (", var_explained[2], "%)"),
1731408173126:subtitle = "Arrows show species with >1% relative abundance"
1731408173126:)
1731408173127:return(pca_plot)
1731408173127:}
1731408175252:# Create PCA plots for each year
1731408175252:years <- sort(unique(species_matrix_all$year_temp))
1731408177391:pca_plots <- list()
1731408178449:for(year in years) {
1731408178449:year_data <- species_matrix_all %>%
1731408178449:filter(year_temp == year)
1731408178450:pca_plots[[as.character(year)]] <- create_year_pca(
1731408178450:year_data,
1731408178450:year,
1731408178450:dominant_species$species
1731408178450:)
1731408178451:ggsave(
1731408178451:paste0("output/pca_biplot_", year, ".png"),
1731408178451:pca_plots[[as.character(year)]],
1731408178451:width = 10, height = 8,
1731408178451:dpi = 300,
1731408178452:bg = "white"
1731408178452:)
1731408178452:}
1731408183672:# Combine all plots
1731408183673:combined_plot <- wrap_plots(pca_plots, ncol = 2) +
1731408183673:plot_annotation(
1731408183673:title = "Temporal changes in community composition (1999, 2013-2017)",
1731408183673:caption = "Based on species abundance data. Only species with >1% relative abundance shown."
1731408183673:)
1731408184471:ggsave("output/pca_biplots_all_years.png",
1731408184472:combined_plot,
1731408184472:width = 20, height = 15,
1731408184472:dpi = 300,
1731408184472:bg = "white")
1731408188202:library(ggrepel)
1731408188416:library(patchwork)
1731408189269:# Function to create reversed PCA biplot
1731408189269:create_year_pca_reversed <- function(year_data, year, important_species) {
1731408189269:# Perform PCA
1731408189270:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731408189270:# Extract scores - note the reversed roles
1731408189270:species_scores <- data.frame(
1731408189270:scores(species_pca, display = "species"),
1731408189270:Species = rownames(scores(species_pca, display = "species"))
1731408189271:) #%>%
1731408189271:#filter(Species %in% important_species)
1731408189271:station_loadings <- data.frame(
1731408189271:scores(species_pca, display = "sites"),
1731408189271:Station = year_data$station_temp
1731408189272:)
1731408189272:# Calculate variance explained
1731408189272:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731408189272:# Create reversed PCA biplot
1731408189273:pca_plot <- ggplot() +
1731408189273:# Add species points
1731408189273:geom_point(data = species_scores,
1731408189273:aes(x = PC1, y = PC2),
1731408189273:size = 3) +
1731408189273:# Add station arrows
1731408189274:geom_segment(data = station_loadings,
1731408189274:aes(x = 0, y = 0, xend = PC1, yend = PC2, color = Station),
1731408189274:arrow = arrow(length = unit(0.2, "cm"))) +
1731408189274:# Add species labels
1731408189274:geom_text_repel(data = species_scores,
1731408189275:aes(x = PC1, y = PC2, label = Species),
1731408189275:size = 3) +
1731408189275:theme_bw() +
1731408189275:labs(
1731408189275:title = paste("PCA of benthic community composition -", year),
1731408189276:subtitle = "Species shown as points, stations as arrows",
1731408189276:x = paste0("PC1 (", var_explained[1], "%)"),
1731408189276:y = paste0("PC2 (", var_explained[2], "%)")
1731408189276:)
1731408189276:return(pca_plot)
1731408189277:}
1731408190358:# Create reversed PCA plots for each year
1731408190359:years <- sort(unique(species_matrix_all$year_temp))
1731408190770:pca_plots_reversed <- list()
1731408200349:for(year in years) {
1731408200350:year_data <- species_matrix_all %>%
1731408200350:filter(year_temp == year)
1731408200350:pca_plots_reversed[[as.character(year)]] <- create_year_pca_reversed(
1731408200350:year_data,
1731408200350:year,
1731408200350:dominant_species$species
1731408200350:)
1731408200351:ggsave(
1731408200351:paste0("output/pca_biplot_reversed_", year, ".png"),
1731408200351:pca_plots_reversed[[as.character(year)]],
1731408200351:width = 10, height = 8,
1731408200351:dpi = 300,
1731408200351:bg = "white"
1731408200351:)
1731408200352:}
