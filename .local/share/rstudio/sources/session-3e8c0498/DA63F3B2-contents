library(readxl)
library(ggplot2)
library(factoextra)

# 1. Load Data
data <- read_excel("data/processed/gogn.xlsx", sheet = "1999")
data <- as.data.frame(data)
data <- data[,-c(1:3)]
# 2. Prepare Data
rownames(data) <- data$Flokkun  # Set species/taxa as rownames
data_matrix <- as.matrix(data[, -1])  # Select only station columns

# 3. Run PCA with Covariance Scaling
pca <- prcomp(data_matrix, center = TRUE, scale. = T)  
variance_explained <- summary(pca)$importance[2, 1:2] * 100
print(variance_explained) 

# 4. Visualize the Results
# Plot biplot
fviz_pca_biplot(pca,
                repel = TRUE,                   # Avoid overlapping labels
                label = "var",                  # Label variables (stations)
                habillage = rownames(data),     # Taxa names as labels
                addEllipses = FALSE,            # No group ellipses
                title = "Multidimensional Preference Analysis") +
  labs(x = paste0("Component 1 (", round(100 * summary(pca)$importance[2, 1], 2), "%)"),
       y = paste0("Component 2 (", round(100 * summary(pca)$importance[2, 2], 2), "%)"))



















# Load necessary libraries
library(dplyr)
library(tidyr)
library(vegan)
library(kableExtra)
library(BBI)

# Sample 20 observations from each year
set.seed(123)  # For reproducibility
subsample_data <- df_result %>%
  group_by(year) %>%
  sample_n(20, replace = TRUE) %>%  # Sample 20 observations per year
  ungroup()

# Reshape data for SIMPER analysis
species_data <- subsample_data %>%
  group_by(station, year, species) %>%
  summarise(adjusted_density = sum(adjusted_density), .groups = "drop") %>%
  pivot_wider(names_from = species, values_from = adjusted_density, values_fill = 0)

# Separate environmental and species data
env_data <- data.frame(
  Station = factor(species_data$station),
  Year = factor(species_data$year)
)

# Create species matrix (only numeric columns)
species_matrix <- species_data %>%
  select(-station, -year) %>%
  as.matrix()

# Perform SIMPER analysis for the subsample
years <- sort(unique(as.character(env_data$Year)))
sequential_simper <- list()

for(i in 1:(length(years)-1)) {
  year_pair <- years[i:(i+1)]
  year_data <- species_matrix[env_data$Year %in% year_pair, ]
  year_groups <- env_data$Year[env_data$Year %in% year_pair]
  
  # Run SIMPER analysis
  comparison_name <- paste(year_pair[1], year_pair[2], sep="_")
  sequential_simper[[comparison_name]] <- simper(year_data, group = year_groups, permutations = 999)
}

# Function to summarize one comparison
summarize_one_comparison <- function(comparison_data, df_result, year1, year2) {
  species_names <- names(comparison_data$cusum)
  cumulative_contributions <- unname(comparison_data$cusum)
  individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
  
  abundance_changes <- sapply(species_names, function(species) {
    abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
    abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
    change <- abundance_year2 - abundance_year1
    return(change)
  })
  
  df <- data.frame(
    Species = species_names,
    Cumulative_Percent = cumulative_contributions * 100,
    Individual_Percent = individual_contributions * 100,
    Abundance_Change = abundance_changes
  )
  
  return(df)
}

# Process sequential comparisons
print("Sequential Year Comparisons:")
for(i in seq_along(sequential_simper)) {
  comparison_name <- names(sequential_simper)[i]
  years <- unlist(strsplit(comparison_name, "_"))
  year1 <- years[1]
  year2 <- years[2]
  
  cat(sprintf("/nComparison: %s/n", comparison_name))
  
  # Process this comparison
  summary_data <- summarize_one_comparison(sequential_simper[[i]], subsample_data, year1, year2) %>%
    filter(Cumulative_Percent <= 70)
  rownames(summary_data) <- NULL
  
  if(nrow(summary_data) > 0) {
    print(kableExtra::kbl(summary_data,
                          caption = sprintf("Species contributions for %s", comparison_name),
                          digits = 2))
  } else {
    cat("No species met the contribution threshold for this comparison./n")
  }
}

######
# Load necessary libraries
library(dplyr)        # Data manipulation
library(tidyr)        # Data reshaping
library(vegan)        # Ecological analysis
library(BBI)          # Benthic Biotic Indices
library(kableExtra)   # Table formatting

# Step 1: Check if df_result is loaded and has required columns
if (!exists("df_result")) {
  stop("df_result is not defined. Please load or create this data frame before running the script.")
}

required_columns <- c("station", "year", "species", "adjusted_density")
missing_columns <- setdiff(required_columns, names(df_result))

if (length(missing_columns) > 0) {
  stop("The following required columns are missing from df_result: ", paste(missing_columns, collapse = ", "))
}

# Step 2: Summarize and reshape data
# Group data by station, year, and species, then sum the adjusted densities
species_data <- df_result %>%
  group_by(station, year, species) %>%
  summarise(N = sum(adjusted_density), .groups = "drop") %>%
  pivot_wider(names_from = species, values_from = N, values_fill = 0)

# Check the reshaped data
print("Species Data after reshaping:")
print(head(species_data))

# Step 3: Separate environmental and species data
env_data <- species_data %>%
  select(station, year)

# Check the environmental data
print("Environmental Data:")
print(head(env_data))

# Step 4: Create species matrix (numeric data only)
species_matrix <- species_data %>%
  select(-station, -year) %>%
  as.matrix()

# Check the species matrix
print("Species Matrix:")
print(head(species_matrix))

# Step 5: Perform SIMPER analysis for year-to-year comparisons
years <- sort(unique(env_data$year))
sequential_simper <- list()

for (i in 1:(length(years) - 1)) {
  year_pair <- years[i:(i + 1)]
  
  # Select data for the pair of years
  year_indices <- which(env_data$year %in% year_pair)
  year_data <- species_matrix[year_indices, ]
  year_groups <- env_data$year[year_indices]
  
  # Perform SIMPER analysis
  comparison_name <- paste(year_pair[1], year_pair[2], sep = "_")
  simper_result <- simper(year_data, group = year_groups, permutations = 999)
  
  # Store the result
  sequential_simper[[comparison_name]] <- simper_result
  
  # Check intermediate SIMPER result
  print(paste("SIMPER result for", comparison_name))
  print(summary(simper_result))
}

# Step 6: Calculate Benthic Biotic Indices (BBI) for each year
calculate_biotic_indices <- function(data) {
  indices_list <- list()
  
  for (current_year in unique(data$year)) {
    year_data <- data %>%
      filter(year == current_year) %>%
      group_by(station, species) %>%
      summarise(density = sum(adjusted_density), .groups = "drop") %>%
      pivot_wider(names_from = station, values_from = density, values_fill = 0)
    
    # Compute BBI
    bbi_results <- BBI(year_data)
    
    # Store results
    indices_list[[as.character(current_year)]] <- bbi_results
    
    # Check BBI results for the current year
    print(paste("BBI results for year", current_year))
    print(bbi_results$BBI)
  }
  
  return(indices_list)
}

# Calculate biotic indices
biotic_indices <- calculate_biotic_indices(df_result)

# Step 7: Summarize SIMPER results and check intermediate data
summarize_one_comparison <- function(simper_data, df_result, year1, year2) {
  species_names <- names(simper_data$average)
  cumulative_contributions <- simper_data$cumsum
  
  # Calculate individual contributions
  individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
  
  # Calculate abundance changes between the two years
  abundance_changes <- sapply(species_names, function(species) {
    abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
    abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
    change <- abundance_year2 - abundance_year1
    return(change)
  })
  
  # Create a summary data frame
  summary_df <- data.frame(
    Species = species_names,
    Cumulative_Contribution = cumulative_contributions * 100,
    Individual_Contribution = individual_contributions * 100,
    Abundance_Change = abundance_changes
  )
  
  return(summary_df)
}

# Process sequential comparisons
print("Sequential Year Comparisons:")
for (comparison_name in names(sequential_simper)) {
  years <- unlist(strsplit(comparison_name, "_"))
  year1 <- as.numeric(years[1])
  year2 <- as.numeric(years[2])
  
  print(paste("Comparison:", comparison_name))
  
  # Summarize the SIMPER result
  summary_data <- summarize_one_comparison(sequential_simper[[comparison_name]], df_result, year1, year2)
  
  # Filter to cumulative contributions up to 70%
  summary_data <- summary_data %>%
    filter(Cumulative_Contribution <= 70)
  
  # Check the summary data
  print("Summary of species contributions:")
  print(summary_data)
  
  # Display the summary in a formatted table
  if (nrow(summary_data) > 0) {
    print(kable(summary_data, digits = 2))
  } else {
    print("No species met the contribution threshold for this comparison.")
  }
}

# Step 8: Examine the structure of df_result
print("Structure of df_result:")
str(df_result)
