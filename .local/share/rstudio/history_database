1731408205913:# Combine all reversed plots
1731408205913:combined_plot_reversed <- wrap_plots(pca_plots_reversed, ncol = 2) +
1731408205913:plot_annotation(
1731408205913:title = "Temporal changes in community composition (1999, 2013-2017)",
1731408205913:subtitle = "Species shown as points, stations as arrows",
1731408205913:caption = "Based on species abundance data. Only species with >1% relative abundance shown."
1731408205913:)
1731408214511:ggsave("output/pca_biplots_reversed_all_years.png",
1731408214511:combined_plot_reversed,
1731408214512:width = 20, height = 15,
1731408214512:dpi = 300,
1731408214512:bg = "white")
1731408666832:format_species_names <- function(species_names) {
1731408666833:# Split each name into words
1731408666833:formatted_names <- sapply(species_names, function(name) {
1731408666833:words <- unlist(strsplit(name, "(?<=[a-z])(?=[A-Z])", perl = TRUE))
1731408666833:if (length(words) == 1) {
1731408666833:# If it's a single word, add "sp."
1731408666833:paste0(words, " sp.")
1731408666834:} else {
1731408666834:# If it's multiple words, leave as is
1731408666834:paste(words, collapse = " ")
1731408666834:}
1731408666834:})
1731408666834:return(formatted_names)
1731408666835:}
1731408667992:# PCA plot function
1731408667992:create_year_pca <- function(year_data, year, important_species) {
1731408667993:# Perform PCA for this year
1731408667993:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731408667993:# Extract scores
1731408667993:site_scores <- data.frame(
1731408667993:scores(species_pca, display = "sites"),
1731408667993:Station = year_data$station_temp
1731408667994:)
1731408667994:species_loadings <- data.frame(
1731408667994:scores(species_pca, display = "species"),
1731408667994:Species = rownames(scores(species_pca, display = "species"))
1731408667994:) %>%
1731408667995:filter(Species %in% important_species) %>%
1731408667995:mutate(Species = format_species_names(Species))  # Format species names
1731408667995:# Calculate variance explained
1731408667995:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731408667996:# Create PCA biplot
1731408667996:pca_plot <- ggplot() +
1731408667996:# Add site scores
1731408667996:geom_point(data = site_scores,
1731408667996:aes(x = PC1, y = PC2, color = Station),
1731408667996:size = 3) +
1731408667997:# Add species arrows
1731408667997:geom_segment(data = species_loadings,
1731408667997:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731408667997:arrow = arrow(length = unit(0.2, "cm"))) +
1731408667997:# Add species labels
1731408667998:geom_text_repel(data = species_loadings,
1731408667998:aes(x = PC1, y = PC2, label = Species),
1731408667998:size = 3) +
1731408667998:theme_bw() +
1731408667998:labs(
1731408667999:title = paste("PCA of benthic community composition -", year),
1731408667999:x = paste0("PC1 (", var_explained[1], "%)"),
1731408667999:y = paste0("PC2 (", var_explained[2], "%)"),
1731408667999:subtitle = "Arrows show species with >1% relative abundance"
1731408667999:)
1731408668000:return(pca_plot)
1731408668000:}
1731408669958:# Create PCA plots for each year
1731408669959:years <- sort(unique(species_matrix_all$year_temp))
1731408671022:pca_plots <- list()
1731408671790:for(year in years) {
1731408671790:year_data <- species_matrix_all %>%
1731408671790:filter(year_temp == year)
1731408671791:pca_plots[[as.character(year)]] <- create_year_pca(
1731408671791:year_data,
1731408671791:year,
1731408671791:dominant_species$species
1731408671792:)
1731408671792:ggsave(
1731408671792:paste0("output/pca_biplot_", year, ".png"),
1731408671792:pca_plots[[as.character(year)]],
1731408671792:width = 10, height = 8,
1731408671793:dpi = 300,
1731408671793:bg = "white"
1731408671793:)
1731408671793:}
1731408840765:important_species
1731408902872:format_species_names <- function(species_names) {
1731408902873:formatted_names <- sapply(species_names, function(name) {
1731408902873:# If there's a space, it's already formatted (species name or family), leave it as is
1731408902873:if (grepl(" ", name)) {
1731408902873:return(name)
1731408902873:}
1731408902873:# If it's a single word, add "sp."
1731408902873:paste0(name, " sp.")
1731408902874:})
1731408902874:return(formatted_names)
1731408902874:}
1731408913222:format_species_names(important_species)
1731408959512:# PCA plot function
1731408959512:create_year_pca <- function(year_data, year, important_species) {
1731408959512:# Perform PCA for this year
1731408959512:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731408959512:# Extract scores
1731408959512:site_scores <- data.frame(
1731408959513:scores(species_pca, display = "sites"),
1731408959513:Station = year_data$station_temp
1731408959513:)
1731408959513:species_loadings <- data.frame(
1731408959514:scores(species_pca, display = "species"),
1731408959514:Species = rownames(scores(species_pca, display = "species"))
1731408959514:) %>%
1731408959514:filter(Species %in% important_species) %>%
1731408959514:mutate(Species = format_species_names(Species))  # Format species names
1731408959514:# Calculate variance explained
1731408959515:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731408959515:# Create PCA biplot
1731408959515:pca_plot <- ggplot() +
1731408959515:# Add site scores
1731408959515:geom_point(data = site_scores,
1731408959516:aes(x = PC1, y = PC2, color = Station),
1731408959516:size = 3) +
1731408959516:# Add species arrows
1731408959516:geom_segment(data = species_loadings,
1731408959516:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731408959517:arrow = arrow(length = unit(0.2, "cm"))) +
1731408959517:# Add species labels
1731408959517:geom_text_repel(data = species_loadings,
1731408959517:aes(x = PC1, y = PC2, label = Species),
1731408959518:size = 3) +
1731408959518:theme_bw() +
1731408959518:labs(
1731408959518:title = paste("PCA of benthic community composition -", year),
1731408959518:x = paste0("PC1 (", var_explained[1], "%)"),
1731408959519:y = paste0("PC2 (", var_explained[2], "%)"),
1731408959519:subtitle = "Arrows show species with >1% relative abundance"
1731408959519:)
1731408959519:return(pca_plot)
1731408959519:}
1731408961457:# Create PCA plots for each year
1731408961457:years <- sort(unique(species_matrix_all$year_temp))
1731408961658:pca_plots <- list()
1731408962623:for(year in years) {
1731408962623:year_data <- species_matrix_all %>%
1731408962623:filter(year_temp == year)
1731408962624:pca_plots[[as.character(year)]] <- create_year_pca(
1731408962624:year_data,
1731408962624:year,
1731408962624:dominant_species$species
1731408962624:)
1731408962625:ggsave(
1731408962625:paste0("output/pca_biplot_", year, ".png"),
1731408962625:pca_plots[[as.character(year)]],
1731408962625:width = 10, height = 8,
1731408962625:dpi = 300,
1731408962625:bg = "white"
1731408962626:)
1731408962626:}
1731409121090:# PCA plot function
1731409121090:create_year_pca <- function(year_data, year, important_species) {
1731409121090:# Perform PCA for this year
1731409121091:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731409121091:# Extract scores
1731409121091:site_scores <- data.frame(
1731409121091:scores(species_pca, display = "sites"),
1731409121091:Station = year_data$station_temp
1731409121091:)
1731409121092:species_loadings <- data.frame(
1731409121092:scores(species_pca, display = "species"),
1731409121092:Species = rownames(scores(species_pca, display = "species"))
1731409121092:) %>%
1731409121092:filter(Species %in% important_species) %>%
1731409121092:mutate(Species = format_species_names(Species))  # Format species names
1731409121093:# Calculate variance explained
1731409121093:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731409121093:# Create PCA biplot
1731409121093:pca_plot <- ggplot() +
1731409121094:# Add site scores
1731409121094:geom_text_repel(data = site_scores,
1731409121094:aes(x = PC1, y = PC2, label = Station),
1731409121094:size = 3) +
1731409121094:# Add species arrows
1731409121094:geom_segment(data = species_loadings,
1731409121095:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731409121095:arrow = arrow(length = unit(0.2, "cm"))) +
1731409121095:# Add species labels
1731409121095:geom_text_repel(data = species_loadings,
1731409121095:aes(x = PC1, y = PC2, label = Species),
1731409121096:size = 3) +
1731409121096:theme_bw() +
1731409121096:labs(
1731409121096:title = paste("PCA of benthic community composition -", year),
1731409121096:x = paste0("PC1 (", var_explained[1], "%)"),
1731409121097:y = paste0("PC2 (", var_explained[2], "%)"),
1731409121097:subtitle = "Arrows show species with >1% relative abundance"
1731409121097:)
1731409121097:return(pca_plot)
1731409121098:}
1731409122289:# Create PCA plots for each year
1731409122289:years <- sort(unique(species_matrix_all$year_temp))
1731409122543:pca_plots <- list()
1731409123487:for(year in years) {
1731409123488:year_data <- species_matrix_all %>%
1731409123488:filter(year_temp == year)
1731409123488:pca_plots[[as.character(year)]] <- create_year_pca(
1731409123488:year_data,
1731409123488:year,
1731409123488:dominant_species$species
1731409123488:)
1731409123489:ggsave(
1731409123489:paste0("output/pca_biplot_", year, ".png"),
1731409123489:pca_plots[[as.character(year)]],
1731409123489:width = 10, height = 8,
1731409123489:dpi = 300,
1731409123490:bg = "white"
1731409123490:)
1731409123490:}
1731409127122:# Combine all plots
1731409127122:combined_plot <- wrap_plots(pca_plots, ncol = 2) +
1731409127122:plot_annotation(
1731409127122:title = "Temporal changes in community composition (1999, 2013-2017)",
1731409127123:caption = "Based on species abundance data. Only species with >1% relative abundance shown."
1731409127123:)
1731409128727:ggsave("output/pca_biplots_all_years.png",
1731409128727:combined_plot,
1731409128727:width = 20, height = 15,
1731409128727:dpi = 300,
1731409128727:bg = "white")
1731409187109:?geom_text_repel
1731409274264:# PCA plot function
1731409274264:create_year_pca <- function(year_data, year, important_species) {
1731409274264:# Perform PCA for this year
1731409274264:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731409274264:# Extract scores
1731409274265:site_scores <- data.frame(
1731409274265:scores(species_pca, display = "sites"),
1731409274265:Station = year_data$station_temp
1731409274265:)
1731409274265:species_loadings <- data.frame(
1731409274265:scores(species_pca, display = "species"),
1731409274266:Species = rownames(scores(species_pca, display = "species"))
1731409274266:) %>%
1731409274266:filter(Species %in% important_species) %>%
1731409274266:mutate(Species = format_species_names(Species))  # Format species names
1731409274266:# Calculate variance explained
1731409274266:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731409274267:# Create PCA biplot
1731409274267:pca_plot <- ggplot() +
1731409274267:# Add site scores
1731409274267:geom_text_repel(
1731409274267:aes(label = Station),
1731409274267:size = 5,                       # Stærri stærð fyrir áberandi texta
1731409274268:fontface = "bold",              # Þykkari texti
1731409274268:box.padding = 0.5,              # Aukið bil frá punktum
1731409274268:point.padding = 0.3,            # Bil frá endapunkti línunnar að texta
1731409274268:max.overlaps = Inf,             # Leyfir alla merkimiða að vera sýnilega
1731409274268:segment.color = "grey50",       # Þykkri lína til að tengja texta og punkta
1731409274269:segment.size = 0.5,             # Þykkri lína fyrir betri sýnileika
1731409274269:bg.color = "white",             # Bakgrunnur undir texta fyrir betri skerpu
1731409274269:bg.r = 0.2                      # Smá umferð á bakgrunninn fyrir mýkt
1731409274269:) +
1731409274269:# Add species arrows
1731409274269:geom_segment(data = species_loadings,
1731409274270:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731409274270:arrow = arrow(length = unit(0.2, "cm"))) +
1731409274270:# Add species labels
1731409274270:geom_text_repel(data = species_loadings,
1731409274270:aes(x = PC1, y = PC2, label = Species),
1731409274271:size = 3) +
1731409274271:theme_bw() +
1731409274271:labs(
1731409274271:title = paste("PCA of benthic community composition -", year),
1731409274271:x = paste0("PC1 (", var_explained[1], "%)"),
1731409274271:y = paste0("PC2 (", var_explained[2], "%)"),
1731409274272:subtitle = "Arrows show species with >1% relative abundance"
1731409274272:)
1731409274272:return(pca_plot)
1731409274272:}
1731409275239:# Create PCA plots for each year
1731409275239:years <- sort(unique(species_matrix_all$year_temp))
1731409275744:pca_plots <- list()
1731409276049:for(year in years) {
1731409276049:year_data <- species_matrix_all %>%
1731409276050:filter(year_temp == year)
1731409276050:pca_plots[[as.character(year)]] <- create_year_pca(
1731409276050:year_data,
1731409276050:year,
1731409276050:dominant_species$species
1731409276050:)
1731409276051:ggsave(
1731409276051:paste0("output/pca_biplot_", year, ".png"),
1731409276051:pca_plots[[as.character(year)]],
1731409276051:width = 10, height = 8,
1731409276051:dpi = 300,
1731409276052:bg = "white"
1731409276052:)
1731409276052:}
1731409357367:# PCA plot function
1731409357367:create_year_pca <- function(year_data, year, important_species) {
1731409357367:# Perform PCA for this year
1731409357367:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731409357367:# Extract scores
1731409357368:site_scores <- data.frame(
1731409357368:scores(species_pca, display = "sites"),
1731409357368:Station = year_data$station_temp
1731409357368:)
1731409357368:species_loadings <- data.frame(
1731409357368:scores(species_pca, display = "species"),
1731409357369:Species = rownames(scores(species_pca, display = "species"))
1731409357369:) %>%
1731409357369:filter(Species %in% important_species) %>%
1731409357369:mutate(Species = format_species_names(Species))  # Format species names
1731409357369:# Calculate variance explained
1731409357370:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731409357370:# Create PCA biplot
1731409357370:pca_plot <- ggplot() +
1731409357370:# Add site scores
1731409357370:geom_text_repel(
1731409357371:data = site_scores,
1731409357371:aes(x = PC1, y = PC2, label = Station),
1731409357371:size = 5,                       # Stærri stærð fyrir áberandi texta
1731409357371:fontface = "bold",              # Þykkari texti
1731409357371:box.padding = 0.5,              # Aukið bil frá punktum
1731409357371:point.padding = 0.3,            # Bil frá endapunkti línunnar að texta
1731409357372:max.overlaps = Inf,             # Leyfir alla merkimiða að vera sýnilega
1731409357372:segment.color = "grey50",       # Þykkri lína til að tengja texta og punkta
1731409357372:segment.size = 0.5,             # Þykkri lína fyrir betri sýnileika
1731409357372:bg.color = "white",             # Bakgrunnur undir texta fyrir betri skerpu
1731409357372:bg.r = 0.2                      # Smá umferð á bakgrunninn fyrir mýkt
1731409357373:) +
1731409357373:# Add species arrows
1731409357373:geom_segment(data = species_loadings,
1731409357373:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731409357373:arrow = arrow(length = unit(0.2, "cm"))) +
1731409357374:# Add species labels
1731409357374:geom_text_repel(data = species_loadings,
1731409357374:aes(x = PC1, y = PC2, label = Species),
1731409357374:size = 3) +
1731409357374:theme_bw() +
1731409357375:labs(
1731409357375:title = paste("PCA of benthic community composition -", year),
1731409357375:x = paste0("PC1 (", var_explained[1], "%)"),
1731409357375:y = paste0("PC2 (", var_explained[2], "%)"),
1731409357375:subtitle = "Arrows show species with >1% relative abundance"
1731409357376:)
1731409357376:return(pca_plot)
1731409357376:}
1731409358167:# Create PCA plots for each year
1731409358168:years <- sort(unique(species_matrix_all$year_temp))
1731409358434:pca_plots <- list()
1731409358761:for(year in years) {
1731409358761:year_data <- species_matrix_all %>%
1731409358761:filter(year_temp == year)
1731409358761:pca_plots[[as.character(year)]] <- create_year_pca(
1731409358762:year_data,
1731409358762:year,
1731409358762:dominant_species$species
1731409358762:)
1731409358762:ggsave(
1731409358762:paste0("output/pca_biplot_", year, ".png"),
1731409358763:pca_plots[[as.character(year)]],
1731409358763:width = 10, height = 8,
1731409358763:dpi = 300,
1731409358763:bg = "white"
1731409358763:)
1731409358763:}
1731409428470:# PCA plot function
1731409428470:create_year_pca <- function(year_data, year, important_species) {
1731409428471:# Perform PCA for this year
1731409428471:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731409428471:# Extract scores
1731409428471:site_scores <- data.frame(
1731409428471:scores(species_pca, display = "sites"),
1731409428472:Station = year_data$station_temp
1731409428472:)
1731409428472:species_loadings <- data.frame(
1731409428472:scores(species_pca, display = "species"),
1731409428472:Species = rownames(scores(species_pca, display = "species"))
1731409428472:) %>%
1731409428473:filter(Species %in% important_species) %>%
1731409428473:mutate(Species = format_species_names(Species))  # Format species names
1731409428473:# Calculate variance explained
1731409428473:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731409428474:# Create PCA biplot
1731409428474:pca_plot <- ggplot() +
1731409428474:# Add site scores
1731409428474:geom_text_repel(
1731409428474:data = site_scores,
1731409428475:aes(x = PC1, y = PC2, label = Station),
1731409428475:size = 4,                       # Stærri stærð fyrir áberandi texta
1731409428475:fontface = "bold",              # Þykkari texti
1731409428475:box.padding = 0.5,              # Aukið bil frá punktum
1731409428476:point.padding = 0.3,            # Bil frá endapunkti línunnar að texta
1731409428476:segment.size = 0.5,             # Þykkri lína fyrir betri sýnileika
1731409428476:bg.color = "white",             # Bakgrunnur undir texta fyrir betri skerpu
1731409428476:bg.r = 0.2                      # Smá umferð á bakgrunninn fyrir mýkt
1731409428476:) +
1731409428476:# Add species arrows
1731409428477:geom_segment(data = species_loadings,
1731409428477:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731409428477:arrow = arrow(length = unit(0.2, "cm"))) +
1731409428477:# Add species labels
1731409428477:geom_text_repel(data = species_loadings,
1731409428477:aes(x = PC1, y = PC2, label = Species),
1731409428478:size = 3) +
1731409428478:theme_bw() +
1731409428478:labs(
1731409428478:title = paste("PCA of benthic community composition -", year),
1731409428478:x = paste0("PC1 (", var_explained[1], "%)"),
1731409428479:y = paste0("PC2 (", var_explained[2], "%)"),
1731409428479:subtitle = "Arrows show species with >1% relative abundance"
1731409428479:)
1731409428479:return(pca_plot)
1731409428480:}
1731409429999:# Create PCA plots for each year
1731409430000:years <- sort(unique(species_matrix_all$year_temp))
1731409430192:pca_plots <- list()
1731409430560:for(year in years) {
1731409430561:year_data <- species_matrix_all %>%
1731409430561:filter(year_temp == year)
1731409430561:pca_plots[[as.character(year)]] <- create_year_pca(
1731409430561:year_data,
1731409430561:year,
1731409430561:dominant_species$species
1731409430561:)
1731409430562:ggsave(
1731409430562:paste0("output/pca_biplot_", year, ".png"),
1731409430562:pca_plots[[as.character(year)]],
1731409430562:width = 10, height = 8,
1731409430562:dpi = 300,
1731409430562:bg = "white"
1731409430562:)
1731409430563:}
1731409456965:# Create PCA biplot
1731409456965:pca_plot <- ggplot() +
1731409456965:# Add site scores
1731409456966:geom_text_repel(
1731409456966:data = site_scores,
1731409456966:aes(x = PC1, y = PC2, label = Station),
1731409456966:size = 4,                       # Stærri stærð fyrir áberandi texta
1731409456966:fontface = "bold",              # Þykkari texti
1731409456966:bg.color = "white",             # Bakgrunnur undir texta fyrir betri skerpu
1731409456966:bg.r = 0.2                      # Smá umferð á bakgrunninn fyrir mýkt
1731409456966:) +
1731409456967:# Add species arrows
1731409456967:geom_segment(data = species_loadings,
1731409456967:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731409456967:arrow = arrow(length = unit(0.2, "cm"))) +
1731409456967:# Add species labels
1731409456967:geom_text_repel(data = species_loadings,
1731409456968:aes(x = PC1, y = PC2, label = Species),
1731409456968:size = 3) +
1731409456968:theme_bw() +
1731409456968:labs(
1731409456968:title = paste("PCA of benthic community composition -", year),
1731409456969:x = paste0("PC1 (", var_explained[1], "%)"),
1731409456969:y = paste0("PC2 (", var_explained[2], "%)"),
1731409456969:subtitle = "Arrows show species with >1% relative abundance"
1731409456969:)
1731409458696:# PCA plot function
1731409458696:create_year_pca <- function(year_data, year, important_species) {
1731409458696:# Perform PCA for this year
1731409458696:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731409458696:# Extract scores
1731409458697:site_scores <- data.frame(
1731409458697:scores(species_pca, display = "sites"),
1731409458697:Station = year_data$station_temp
1731409458697:)
1731409458697:species_loadings <- data.frame(
1731409458697:scores(species_pca, display = "species"),
1731409458697:Species = rownames(scores(species_pca, display = "species"))
1731409458698:) %>%
1731409458698:filter(Species %in% important_species) %>%
1731409458698:mutate(Species = format_species_names(Species))  # Format species names
1731409458698:# Calculate variance explained
1731409458698:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731409458699:# Create PCA biplot
1731409458699:pca_plot <- ggplot() +
1731409458699:# Add site scores
1731409458699:geom_text_repel(
1731409458699:data = site_scores,
1731409458700:aes(x = PC1, y = PC2, label = Station),
1731409458700:size = 4,                       # Stærri stærð fyrir áberandi texta
1731409458700:fontface = "bold",              # Þykkari texti
1731409458700:bg.color = "white",             # Bakgrunnur undir texta fyrir betri skerpu
1731409458700:bg.r = 0.2                      # Smá umferð á bakgrunninn fyrir mýkt
1731409458701:) +
1731409458701:# Add species arrows
1731409458701:geom_segment(data = species_loadings,
1731409458701:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731409458701:arrow = arrow(length = unit(0.2, "cm"))) +
1731409458702:# Add species labels
1731409458702:geom_text_repel(data = species_loadings,
1731409458702:aes(x = PC1, y = PC2, label = Species),
1731409458702:size = 3) +
1731409458702:theme_bw() +
1731409458703:labs(
1731409458703:title = paste("PCA of benthic community composition -", year),
1731409458703:x = paste0("PC1 (", var_explained[1], "%)"),
1731409458703:y = paste0("PC2 (", var_explained[2], "%)"),
1731409458703:subtitle = "Arrows show species with >1% relative abundance"
1731409458704:)
1731409458704:return(pca_plot)
1731409458704:}
1731409460503:# Create PCA plots for each year
1731409460503:years <- sort(unique(species_matrix_all$year_temp))
1731409460746:pca_plots <- list()
1731409461057:for(year in years) {
1731409461057:year_data <- species_matrix_all %>%
1731409461057:filter(year_temp == year)
1731409461058:pca_plots[[as.character(year)]] <- create_year_pca(
1731409461058:year_data,
1731409461058:year,
1731409461058:dominant_species$species
1731409461058:)
1731409461058:ggsave(
1731409461058:paste0("output/pca_biplot_", year, ".png"),
1731409461058:pca_plots[[as.character(year)]],
1731409461059:width = 10, height = 8,
1731409461059:dpi = 300,
1731409461059:bg = "white"
1731409461059:)
1731409461059:}
1731409587246:# PCA plot function
1731409587246:create_year_pca <- function(year_data, year, important_species) {
1731409587246:# Perform PCA for this year
1731409587246:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731409587247:# Extract scores
1731409587247:site_scores <- data.frame(
1731409587247:scores(species_pca, display = "sites"),
1731409587247:Station = year_data$station_temp
1731409587247:)
1731409587248:species_loadings <- data.frame(
1731409587248:scores(species_pca, display = "species"),
1731409587248:Species = rownames(scores(species_pca, display = "species"))
1731409587248:) %>%
1731409587248:filter(Species %in% important_species) %>%
1731409587248:mutate(Species = format_species_names(Species))  # Format species names
1731409587248:# Calculate variance explained
1731409587249:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731409587249:# Create PCA biplot
1731409587249:pca_plot <- ggplot() +
1731409587249:# Add site scores
1731409587249:geom_text_repel(
1731409587250:data = site_scores,
1731409587250:aes(x = PC1, y = PC2, label = Station),
1731409587250:size = 4,                       # Stærri stærð fyrir áberandi texta
1731409587250:fontface = "bold",              # Þykkari texti
1731409587250:bg.color = "white",             # Bakgrunnur undir texta fyrir betri skerpu
1731409587251:bg.r = 0.2                      # Smá umferð á bakgrunninn fyrir mýkt
1731409587251:) +
1731409587251:# Add species arrows
1731409587251:geom_segment(data = species_loadings,
1731409587251:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731409587251:arrow = arrow(length = unit(0.2, "cm"))) +
1731409587252:# Add species labels
1731409587252:geom_text_repel(data = species_loadings,
1731409587252:aes(x = PC1, y = PC2, label = Species),
1731409587252:size = 3,
1731409587252:fontface = "italic") +
1731409587253:theme_bw() +
1731409587253:labs(
1731409587253:title = paste("PCA of benthic community composition -", year),
1731409587253:x = paste0("PC1 (", var_explained[1], "%)"),
1731409587253:y = paste0("PC2 (", var_explained[2], "%)"),
1731409587254:subtitle = "Arrows show species with >1% relative abundance"
1731409587254:)
1731409587254:return(pca_plot)
1731409587254:}
1731409588495:# Create PCA plots for each year
1731409588495:years <- sort(unique(species_matrix_all$year_temp))
1731409589563:pca_plots <- list()
1731409589904:for(year in years) {
1731409589904:year_data <- species_matrix_all %>%
1731409589904:filter(year_temp == year)
1731409589905:pca_plots[[as.character(year)]] <- create_year_pca(
1731409589905:year_data,
1731409589905:year,
1731409589905:dominant_species$species
1731409589905:)
1731409589905:ggsave(
1731409589906:paste0("output/pca_biplot_", year, ".png"),
1731409589906:pca_plots[[as.character(year)]],
1731409589906:width = 10, height = 8,
1731409589906:dpi = 300,
1731409589906:bg = "white"
1731409589906:)
1731409589907:}
1731409656168:# Combine all plots
1731409656169:combined_plot <- wrap_plots(pca_plots, ncol = 2) +
1731409656169:plot_annotation(
1731409656169:title = "Temporal changes in community composition (1999, 2013-2017)",
1731409656169:caption = "Based on species abundance data. Only species with >1% relative abundance shown."
1731409656169:)
1731409657310:ggsave("output/pca_biplots_all_years.png",
1731409657311:combined_plot,
1731409657311:width = 20, height = 15,
1731409657311:dpi = 300,
1731409657311:bg = "white")
1731410215808:# Function to create reversed PCA biplot
1731410215808:create_year_pca_reversed <- function(year_data, year, important_species) {
1731410215808:# Perform PCA
1731410215808:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731410215809:# Extract scores - note the reversed roles
1731410215809:species_scores <- data.frame(
1731410215809:scores(species_pca, display = "species"),
1731410215809:Species = rownames(scores(species_pca, display = "species"))
1731410215809:) %>%
1731410215809:mutate(Species = format_species_names(Species))  # Format species names
1731410215810:station_loadings <- data.frame(
1731410215810:scores(species_pca, display = "sites"),
1731410215810:Station = year_data$station_temp
1731410215810:)
1731410215811:# Calculate variance explained
1731410215811:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731410215811:# Create reversed PCA biplot
1731410215811:pca_plot <- ggplot() +
1731410215811:# Add species points
1731410215812:geom_point(data = species_scores,
1731410215812:aes(x = PC1, y = PC2),
1731410215812:size = 3) +
1731410215812:# Add station arrows
1731410215812:geom_segment(data = station_loadings,
1731410215813:aes(x = 0, y = 0, xend = PC1, yend = PC2, color = Station),
1731410215813:arrow = arrow(length = unit(0.2, "cm"))) +
1731410215813:# Add species labels
1731410215813:geom_text_repel(data = species_scores,
1731410215813:aes(x = PC1, y = PC2, label = Species),
1731410215813:size = 3) +
1731410215814:theme_bw() +
1731410215814:labs(
1731410215814:title = paste("PCA of benthic community composition -", year),
1731410215814:subtitle = "Species shown as points, stations as arrows",
1731410215814:x = paste0("PC1 (", var_explained[1], "%)"),
1731410215815:y = paste0("PC2 (", var_explained[2], "%)")
1731410215815:)
1731410215815:return(pca_plot)
1731410215816:}
1731410217072:# Create reversed PCA plots for each year
1731410217072:years <- sort(unique(species_matrix_all$year_temp))
1731410217458:pca_plots_reversed <- list()
1731410218000:for(year in years) {
1731410218000:year_data <- species_matrix_all %>%
1731410218000:filter(year_temp == year)
1731410218000:pca_plots_reversed[[as.character(year)]] <- create_year_pca_reversed(
1731410218000:year_data,
1731410218000:year,
1731410218001:dominant_species$species
1731410218001:)
1731410218001:ggsave(
1731410218001:paste0("output/pca_biplot_reversed_", year, ".png"),
1731410218001:pca_plots_reversed[[as.character(year)]],
1731410218001:width = 10, height = 8,
1731410218001:dpi = 300,
1731410218001:bg = "white"
1731410218001:)
1731410218001:}
1731410381990:# Function to create reversed PCA biplot
1731410381990:create_year_pca_reversed <- function(year_data, year, important_species) {
1731410381990:# Perform PCA
1731410381990:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731410381991:# Extract scores - note the reversed roles
1731410381991:species_scores <- data.frame(
1731410381991:scores(species_pca, display = "species"),
1731410381991:Species = rownames(scores(species_pca, display = "species"))
1731410381991:) %>%
1731410381991:mutate(Species = format_species_names(Species))  # Format species names
1731410381992:station_loadings <- data.frame(
1731410381992:scores(species_pca, display = "sites"),
1731410381992:Station = year_data$station_temp
1731410381992:)
1731410381992:# Calculate variance explained
1731410381992:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731410381993:# Create reversed PCA biplot
1731410381993:pca_plot <- ggplot() +
1731410381993:# Add species points - make them more distinct
1731410381993:geom_point(data = species_scores,
1731410381993:aes(x = PC1, y = PC2),
1731410381994:size = 3,
1731410381994:shape = 19,  # Solid circle
1731410381994:color = "black") +  # Consistent color for all points
1731410381994:# Add station arrows with colorblind-friendly palette and labels
1731410381994:geom_segment(data = station_loadings,
1731410381994:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731410381995:arrow = arrow(length = unit(0.2, "cm"))) +
1731410381995:# Add station labels directly
1731410381995:geom_text_repel(data = station_loadings,
1731410381995:aes(x = PC1, y = PC2, label = Station),
1731410381995:size = 3,
1731410381995:fontface = "bold") +
1731410381996:# Add species labels
1731410381996:geom_text_repel(data = species_scores,
1731410381997:aes(x = PC1, y = PC2, label = Species),
1731410381997:size = 3,
1731410381997:color = "grey30") +  # Slightly muted text for better contrast
1731410381998:theme_bw() +
1731410381998:theme(
1731410381998:panel.grid.minor = element_blank(),  # Remove minor grid lines
1731410381999:panel.grid.major = element_line(color = "grey90"),  # Lighten major grid lines
1731410381999:axis.text = element_text(color = "black"),  # Ensure axis text is clearly visible
1731410381999:plot.title = element_text(size = 12, face = "bold"),
1731410382000:plot.subtitle = element_text(size = 10)
1731410382000:) +
1731410382000:labs(
1731410382000:title = paste("PCA of benthic community composition -", year),
1731410382000:subtitle = "Species shown as points, stations as arrows",
1731410382000:x = paste0("PC1 (", var_explained[1], "%)"),
1731410382001:y = paste0("PC2 (", var_explained[2], "%)")
1731410382001:)
1731410382001:return(pca_plot)
1731410382002:}
1731410382871:# Create reversed PCA plots for each year
1731410382871:years <- sort(unique(species_matrix_all$year_temp))
1731410383104:pca_plots_reversed <- list()
1731410383362:for(year in years) {
1731410383362:year_data <- species_matrix_all %>%
1731410383362:filter(year_temp == year)
1731410383363:pca_plots_reversed[[as.character(year)]] <- create_year_pca_reversed(
1731410383363:year_data,
1731410383363:year,
1731410383363:dominant_species$species
1731410383363:)
1731410383363:ggsave(
1731410383364:paste0("output/pca_biplot_reversed_", year, ".png"),
1731410383364:pca_plots_reversed[[as.character(year)]],
1731410383364:width = 10, height = 8,
1731410383364:dpi = 300,
1731410383364:bg = "white"
1731410383364:)
1731410383365:}
1731410484909:# Function to create reversed PCA biplot
1731410484909:create_year_pca_reversed <- function(year_data, year, important_species) {
1731410484909:# Perform PCA
1731410484910:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731410484910:# Extract scores - note the reversed roles
1731410484910:species_scores <- data.frame(
1731410484910:scores(species_pca, display = "species"),
1731410484910:Species = rownames(scores(species_pca, display = "species"))
1731410484910:) %>%
1731410484910:mutate(Species = format_species_names(Species))  # Format species names
1731410484911:station_loadings <- data.frame(
1731410484911:scores(species_pca, display = "sites"),
1731410484911:Station = year_data$station_temp
1731410484911:)
1731410484911:# Calculate variance explained
1731410484911:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731410484912:# Create reversed PCA biplot
1731410484912:pca_plot <- ggplot() +
1731410484912:# Add species points - make them more distinct
1731410484912:geom_point(data = species_scores,
1731410484912:aes(x = PC1, y = PC2),
1731410484912:size = 3,
1731410484913:shape = 19,  # Solid circle
1731410484913:color = "black") +  # Consistent color for all points
1731410484913:# Add station arrows with colorblind-friendly palette and labels
1731410484913:geom_segment(data = station_loadings,
1731410484913:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731410484913:arrow = arrow(length = unit(0.2, "cm"))) +
1731410484914:# Add station labels directly
1731410484914:geom_text_repel(data = station_loadings,
1731410484914:aes(x = PC1, y = PC2, label = Station),
1731410484914:size = 4,
1731410484914:fontface = "bold") +
1731410484914:# Add species labels
1731410484915:geom_text_repel(data = species_scores,
1731410484915:aes(x = PC1, y = PC2, label = Species),
1731410484915:size = 3,
1731410484915:fontface = "italic",
1731410484915:color = "grey30") +  # Slightly muted text for better contrast
1731410484916:theme_bw() +
1731410484916:theme(
1731410484916:panel.grid.minor = element_blank(),  # Remove minor grid lines
1731410484916:panel.grid.major = element_line(color = "grey90"),  # Lighten major grid lines
1731410484916:axis.text = element_text(color = "black"),  # Ensure axis text is clearly visible
1731410484917:plot.title = element_text(size = 12, face = "bold"),
1731410484917:plot.subtitle = element_text(size = 10)
1731410484917:) +
1731410484917:labs(
1731410484918:title = paste("PCA of benthic community composition -", year),
1731410484918:subtitle = "Species shown as points, stations as arrows",
1731410484918:x = paste0("PC1 (", var_explained[1], "%)"),
1731410484918:y = paste0("PC2 (", var_explained[2], "%)")
1731410484918:)
1731410484919:return(pca_plot)
1731410484919:}
1731410485654:# Create reversed PCA plots for each year
1731410485655:years <- sort(unique(species_matrix_all$year_temp))
1731410485850:pca_plots_reversed <- list()
1731410486217:for(year in years) {
1731410486218:year_data <- species_matrix_all %>%
1731410486218:filter(year_temp == year)
1731410486218:pca_plots_reversed[[as.character(year)]] <- create_year_pca_reversed(
1731410486218:year_data,
1731410486218:year,
1731410486218:dominant_species$species
1731410486219:)
1731410486219:ggsave(
1731410486219:paste0("output/pca_biplot_reversed_", year, ".png"),
1731410486219:pca_plots_reversed[[as.character(year)]],
1731410486219:width = 10, height = 8,
1731410486219:dpi = 300,
1731410486219:bg = "white"
1731410486220:)
1731410486220:}
1731410504871:# Combine all reversed plots
1731410504871:combined_plot_reversed <- wrap_plots(pca_plots_reversed, ncol = 2) +
1731410504872:plot_annotation(
1731410504872:title = "Temporal changes in community composition (1999, 2013-2017)",
1731410504872:subtitle = "Species shown as points, stations as arrows",
1731410504872:caption = "Based on species abundance data. Only species with >1% relative abundance shown."
1731410504872:)
1731410506079:ggsave("output/pca_biplots_reversed_all_years.png",
1731410506079:combined_plot_reversed,
1731410506080:width = 20, height = 15,
1731410506080:dpi = 300,
1731410506080:bg = "white")
1731410779531:create_year_pca_reversed <- function(year_data, year, important_species) {
1731410779531:# Perform PCA
1731410779531:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731410779531:# Extract scores - note the reversed roles
1731410779531:species_scores <- data.frame(
1731410779532:scores(species_pca, display = "species"),
1731410779532:Species = rownames(scores(species_pca, display = "species"))
1731410779532:) %>%
1731410779532:mutate(Species = format_species_names(Species))  # Format species names
1731410779532:station_loadings <- data.frame(
1731410779533:scores(species_pca, display = "sites"),
1731410779533:Station = year_data$station_temp
1731410779533:)
1731410779533:# Calculate variance explained
1731410779533:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731410779534:# Set consistent axis limits across all plots
1731410779534:axis_limits <- max(abs(c(
1731410779534:species_scores$PC1, species_scores$PC2,
1731410779534:station_loadings$PC1, station_loadings$PC2
1731410779535:))) * 1.2  # Add 20% padding
1731410779535:# Create reversed PCA biplot
1731410779535:pca_plot <- ggplot() +
1731410779535:# Add species points
1731410779536:geom_point(data = species_scores,
1731410779536:aes(x = PC1, y = PC2),
1731410779536:size = 2,
1731410779536:shape = 19,
1731410779536:color = "black") +
1731410779536:# Add station arrows
1731410779537:geom_segment(data = station_loadings,
1731410779537:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731410779537:arrow = arrow(length = unit(0.2, "cm")),
1731410779537:color = "darkgrey") +
1731410779537:# Add station labels
1731410779538:geom_text_repel(data = station_loadings,
1731410779538:aes(x = PC1, y = PC2, label = Station),
1731410779538:size = 3.5,
1731410779538:fontface = "bold",
1731410779538:box.padding = 0.5,
1731410779538:point.padding = 0.3) +
1731410779539:# Add species labels
1731410779539:geom_text_repel(data = species_scores,
1731410779539:aes(x = PC1, y = PC2, label = Species),
1731410779539:size = 2.8,
1731410779539:fontface = "italic",
1731410779540:color = "grey30",
1731410779540:box.padding = 0.5,
1731410779540:point.padding = 0.3) +
1731410779540:# Set consistent axis limits
1731410779540:coord_fixed(xlim = c(-axis_limits, axis_limits),
1731410779541:ylim = c(-axis_limits, axis_limits)) +
1731410779541:theme_bw() +
1731410779541:theme(
1731410779541:panel.grid.minor = element_blank(),
1731410779542:panel.grid.major = element_line(color = "grey95"),
1731410779542:axis.text = element_text(color = "black", size = 8),
1731410779542:axis.title = element_text(size = 10),
1731410779542:plot.title = element_text(size = 11, face = "bold"),
1731410779543:plot.subtitle = element_text(size = 9),
1731410779543:plot.margin = margin(t = 10, r = 10, b = 10, l = 10)
1731410779543:) +
1731410779543:labs(
1731410779544:title = paste("PCA of benthic community composition -", year),
1731410779544:subtitle = "Species shown as points, stations as arrows",
1731410779544:x = paste0("PC1 (", var_explained[1], "%)"),
1731410779544:y = paste0("PC2 (", var_explained[2], "%)")
1731410779545:)
1731410779545:return(pca_plot)
1731410779545:}
1731410787727:# Create reversed PCA plots for each year
1731410787727:years <- sort(unique(species_matrix_all$year_temp))
1731410788082:pca_plots_reversed <- list()
1731410788599:for(year in years) {
1731410788599:year_data <- species_matrix_all %>%
1731410788599:filter(year_temp == year)
1731410788600:pca_plots_reversed[[as.character(year)]] <- create_year_pca_reversed(
1731410788600:year_data,
1731410788600:year,
1731410788600:dominant_species$species
1731410788600:)
1731410788601:ggsave(
1731410788601:paste0("output/pca_biplot_reversed_", year, ".png"),
1731410788601:pca_plots_reversed[[as.character(year)]],
1731410788601:width = 10, height = 8,
1731410788601:dpi = 300,
1731410788601:bg = "white"
1731410788602:)
1731410788602:}
1731410811968:# Combine all reversed plots
1731410811969:combined_plot_reversed <- wrap_plots(pca_plots_reversed, ncol = 2) +
1731410811969:plot_annotation(
1731410811969:title = "Temporal changes in community composition (1999, 2013-2017)",
1731410811969:subtitle = "Species shown as points, stations as arrows",
1731410811969:caption = "Based on species abundance data. Only species with >1% relative abundance shown."
1731410811969:)
1731410812624:ggsave("output/pca_biplots_reversed_all_years.png",
1731410812624:combined_plot_reversed,
1731410812624:width = 20, height = 15,
1731410812624:dpi = 300,
1731410812624:bg = "white")
1731411027176:create_year_pca <- function(year_data, year, important_species) {
1731411027177:# Perform PCA for this year
1731411027177:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731411027177:# Extract scores
1731411027177:site_scores <- data.frame(
1731411027177:scores(species_pca, display = "sites"),
1731411027178:Station = year_data$station_temp
1731411027178:)
1731411027178:species_loadings <- data.frame(
1731411027178:scores(species_pca, display = "species"),
1731411027179:Species = rownames(scores(species_pca, display = "species"))
1731411027179:) %>%
1731411027179:filter(Species %in% important_species) %>%
1731411027179:mutate(Species = format_species_names(Species))  # Format species names
1731411027179:# Calculate variance explained
1731411027179:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731411027180:# Set consistent axis limits across all plots
1731411027180:axis_limits <- max(abs(c(
1731411027180:site_scores$PC1, site_scores$PC2,
1731411027180:species_loadings$PC1, species_loadings$PC2
1731411027181:))) * 1.2  # Add 20% padding
1731411027181:# Create PCA biplot
1731411027181:pca_plot <- ggplot() +
1731411027182:# Add site scores
1731411027182:geom_point(data = site_scores,
1731411027182:aes(x = PC1, y = PC2),
1731411027182:size = 2,
1731411027182:shape = 19,
1731411027183:color = "black") +
1731411027183:# Add site labels
1731411027183:geom_text_repel(
1731411027183:data = site_scores,
1731411027184:aes(x = PC1, y = PC2, label = Station),
1731411027184:size = 3.5,
1731411027184:fontface = "bold",
1731411027184:box.padding = 0.5,
1731411027184:point.padding = 0.3
1731411027185:) +
1731411027185:# Add species arrows
1731411027185:geom_segment(data = species_loadings,
1731411027185:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731411027185:arrow = arrow(length = unit(0.2, "cm")),
1731411027186:color = "darkgrey") +
1731411027186:# Add species labels
1731411027186:geom_text_repel(data = species_loadings,
1731411027186:aes(x = PC1, y = PC2, label = Species),
1731411027186:size = 2.8,
1731411027187:fontface = "italic",
1731411027187:color = "grey30",
1731411027187:box.padding = 0.5,
1731411027187:point.padding = 0.3) +
1731411027187:# Set consistent axis limits
1731411027187:coord_fixed(xlim = c(-axis_limits, axis_limits),
1731411027188:ylim = c(-axis_limits, axis_limits)) +
1731411027188:theme_bw() +
1731411027188:theme(
1731411027188:panel.grid.minor = element_blank(),
1731411027189:panel.grid.major = element_line(color = "grey95"),
1731411027189:axis.text = element_text(color = "black", size = 8),
1731411027189:axis.title = element_text(size = 10),
1731411027189:plot.title = element_text(size = 11, face = "bold"),
1731411027189:plot.subtitle = element_text(size = 9),
1731411027190:plot.margin = margin(t = 10, r = 10, b = 10, l = 10)
1731411027190:) +
1731411027190:labs(
1731411027190:title = paste("PCA of benthic community composition -", year),
1731411027191:subtitle = "Stations shown as points, species as arrows",
1731411027191:x = paste0("PC1 (", var_explained[1], "%)"),
1731411027191:y = paste0("PC2 (", var_explained[2], "%)")
1731411027191:)
1731411027192:return(pca_plot)
1731411027192:}
1731411039486:# Create PCA plots for each year
1731411039486:years <- sort(unique(species_matrix_all$year_temp))
1731411040064:pca_plots <- list()
1731411040514:for(year in years) {
1731411040514:year_data <- species_matrix_all %>%
1731411040514:filter(year_temp == year)
1731411040514:pca_plots[[as.character(year)]] <- create_year_pca(
1731411040514:year_data,
1731411040514:year,
1731411040515:dominant_species$species
1731411040515:)
1731411040515:ggsave(
1731411040515:paste0("output/pca_biplot_", year, ".png"),
1731411040515:pca_plots[[as.character(year)]],
1731411040516:width = 10, height = 8,
1731411040516:dpi = 300,
1731411040516:bg = "white"
1731411040516:)
1731411040516:}
1731411212545:# PCA plot function
1731411212545:create_year_pca <- function(year_data, year, important_species) {
1731411212545:# Perform PCA for this year
1731411212545:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731411212546:# Extract scores
1731411212546:site_scores <- data.frame(
1731411212546:scores(species_pca, display = "sites"),
1731411212546:Station = year_data$station_temp
1731411212546:)
1731411212547:species_loadings <- data.frame(
1731411212547:scores(species_pca, display = "species"),
1731411212547:Species = rownames(scores(species_pca, display = "species"))
1731411212547:) %>%
1731411212547:filter(Species %in% important_species) %>%
1731411212547:mutate(Species = format_species_names(Species))  # Format species names
1731411212547:# Calculate variance explained
1731411212548:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731411212548:# Set consistent axis limits across all plots
1731411212548:axis_limits <- max(abs(c(
1731411212548:site_scores$PC1, site_scores$PC2,
1731411212548:species_loadings$PC1, species_loadings$PC2
1731411212549:))) * 1.2  # Add 20% padding
1731411212549:# Create PCA biplot
1731411212549:pca_plot <- ggplot() +
1731411212549:# Add site scores
1731411212549:geom_point(data = site_scores,
1731411212550:aes(x = PC1, y = PC2),
1731411212550:size = 2,
1731411212550:shape = 19,
1731411212550:color = "black") +
1731411212550:# Add site labels
1731411212551:geom_text_repel(
1731411212551:data = site_scores,
1731411212551:aes(x = PC1, y = PC2, label = Station),
1731411212551:size = 3.5,
1731411212551:fontface = "bold",
1731411212552:box.padding = 0.5,
1731411212552:point.padding = 0.3
1731411212552:) +
1731411212552:# Add species arrows
1731411212552:geom_segment(data = species_loadings,
1731411212553:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731411212553:arrow = arrow(length = unit(0.2, "cm")),
1731411212553:color = "darkgrey") +
1731411212553:# Add species labels
1731411212553:geom_text_repel(data = species_loadings,
1731411212554:aes(x = PC1, y = PC2, label = Species),
1731411212554:size = 2.8,
1731411212554:fontface = "italic",
1731411212554:color = "grey30",
1731411212554:box.padding = 0.5,
1731411212555:point.padding = 0.3) +
1731411212555:# Set consistent axis limits
1731411212555:coord_fixed(xlim = c(-axis_limits, axis_limits),
1731411212555:ylim = c(-axis_limits, axis_limits)) +
1731411212556:theme_bw() +
1731411212556:theme(
1731411212556:panel.grid.minor = element_blank(),
1731411212556:panel.grid.major = element_line(color = "grey95"),
1731411212556:axis.text = element_text(color = "black", size = 8),
1731411212557:axis.title = element_text(size = 10),
1731411212557:plot.title = element_text(size = 11, face = "bold"),
1731411212557:plot.subtitle = element_text(size = 9),
1731411212557:plot.margin = margin(t = 10, r = 10, b = 10, l = 10)
1731411212558:) +
1731411212558:labs(
1731411212558:title = paste("PCA of benthic community composition -", year),
1731411212558:subtitle = "Stations shown as points, species as arrows",
1731411212559:x = paste0("PC1 (", var_explained[1], "%)"),
1731411212559:y = paste0("PC2 (", var_explained[2], "%)")
1731411212559:)
1731411212559:return(pca_plot)
1731411212560:}
1731411213579:# Create PCA plots for each year
1731411213579:years <- sort(unique(species_matrix_all$year_temp))
1731411213818:pca_plots <- list()
1731411214089:for(year in years) {
1731411214090:year_data <- species_matrix_all %>%
1731411214090:filter(year_temp == year)
1731411214090:pca_plots[[as.character(year)]] <- create_year_pca(
1731411214090:year_data,
1731411214090:year,
1731411214090:dominant_species$species
1731411214091:)
1731411214091:ggsave(
1731411214091:paste0("output/pca_biplot_", year, ".png"),
1731411214091:pca_plots[[as.character(year)]],
1731411214091:width = 10, height = 8,
1731411214092:dpi = 300,
1731411214092:bg = "white"
1731411214092:)
1731411214092:}
1731411216792:# Combine all plots
1731411216792:combined_plot <- wrap_plots(pca_plots, ncol = 2) +
1731411216792:plot_annotation(
1731411216792:title = "Temporal changes in community composition (1999, 2013-2017)",
1731411216793:subtitle = "Stations shown as points, species as arrows",
1731411216793:caption = "Based on species abundance data. Only species with >1% relative abundance shown.",
1731411216793:theme = theme(
1731411216793:plot.title = element_text(size = 14, face = "bold"),
1731411216793:plot.subtitle = element_text(size = 12),
1731411216793:plot.caption = element_text(size = 10, hjust = 0)
1731411216793:)
1731411216793:)
1731411216798:ggsave("output/pca_biplots_all_years.png",
1731411216798:combined_plot,
1731411216799:width = 20, height = 15,
1731411216799:dpi = 300,
1731411216799:bg = "white")
1731411259280:# Prepare data for NMDS - exclude 1999 data
1731411259280:species_matrix <- df %>%
1731411259280:filter(year >= 2013) %>%  # Only include 2013-2017 data
1731411259280:select(station, year, species, adjusted_density) %>%
1731411259280:pivot_wider(
1731411259281:names_from = species,
1731411259281:values_from = adjusted_density,
1731411259281:values_fill = 0
1731411259281:) %>%
1731411259281:# Store station and year before removing them for NMDS
1731411259281:mutate(
1731411259281:station_temp = station,
1731411259281:year_temp = year
1731411259282:) %>%
1731411259282:select(-station, -year)
1731411261679:# Perform NMDS
1731411261680:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1731411264343:# Extract site scores and add metadata
1731411264343:site_scores <- as.data.frame(scores(nmds, display = "sites"))
1731411264763:site_scores$Station <- species_matrix$station_temp
1731411265146:site_scores$Year <- as.factor(species_matrix$year_temp)  # Convert Year to factor
1731411265919:# Extract species scores
1731411265919:species_scores <- as.data.frame(scores(nmds, display = "species"))
1731411266654:# Calculate species contributions (using relative abundance)
1731411266654:species_rel_abundance <- colSums(select(species_matrix, -station_temp, -year_temp)) /
1731411266655:sum(select(species_matrix, -station_temp, -year_temp))
1731411267774:important_species <- names(sort(species_rel_abundance[species_rel_abundance > 0.01], decreasing = TRUE))
1731411269127:# Filter species scores to only show important species
1731411269128:species_scores_filtered <- species_scores[rownames(species_scores) %in% important_species, ]
1731411273552:env_data <- readRDS("data/raw/sediment_env_data.rds") %>%
1731411273552:select(station, year,
1731411273552:organic_content, depth,
1731411273552:grain_20um, grain_63um, grain_125um,
1731411273552:grain_250um, grain_1000um) %>%
1731411273553:distinct()
1731411275143:sig_env_vectors <- scores(env_fit, "vectors") %>%
1731411275143:as.data.frame() %>%
1731411275143:mutate(variable = rownames(.)) %>%
1731411275143:filter(env_fit$vectors$pvals < 0.05)
1731411277269:# Create the plot
1731411277269:nmds_plot <- ggplot() +
1731411277270:# Base NMDS plot elements
1731411277270:geom_path(data = site_scores,
1731411277270:aes(x = NMDS1, y = NMDS2, color = Station, group = Station),
1731411277270:arrow = arrow(length = unit(0.2, "cm"), type = "closed")) +
1731411277270:geom_point(data = site_scores,
1731411277270:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731411277270:size = 3) +
1731411277271:# Add significant environmental vectors
1731411277271:geom_segment(data = sig_env_vectors,
1731411277271:aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731411277271:arrow = arrow(length = unit(0.2, "cm")),
1731411277271:color = "darkgrey") +
1731411277272:geom_text(data = sig_env_vectors,
1731411277272:aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731411277272:size = 3, color = "darkgrey") +
1731411277272:theme_bw() +
1731411277272:theme(panel.background = element_rect(fill = "white")) +
1731411277272:labs(title = "NMDS of Community Composition (2013-2017)",
1731411277272:caption = "")
1731411284527:# Save plot
1731411284527:ggsave("output/nmds_plot.png", nmds_plot, width = 10, height = 8, bg = "white")
1731411582225:ggplot() +
1731411582225:# Add points for sites
1731411582225:geom_point(data = site_scores,
1731411582226:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731411582226:size = 3) +
1731411582226:# Add ellipses around years
1731411582226:stat_ellipse(data = site_scores,
1731411582226:aes(x = NMDS1, y = NMDS2, group = Year),
1731411582227:type = "norm",
1731411582227:linetype = 2,
1731411582227:size = 0.5) +
1731411582227:# Add significant environmental vectors
1731411582227:geom_segment(data = sig_env_vectors,
1731411582228:aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731411582228:arrow = arrow(length = unit(0.2, "cm")),
1731411582228:color = "darkgrey") +
1731411582228:geom_text(data = sig_env_vectors,
1731411582228:aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731411582229:size = 3, color = "darkgrey") +
1731411582229:theme_bw() +
1731411582229:theme(panel.background = element_rect(fill = "white")) +
1731411582229:labs(title = "NMDS of Community Composition (2013-2017)",
1731411582229:caption = "") +
1731411582229:guides(color = guide_legend("Station"),
1731411582230:shape = guide_legend("Year"))
1731414575726:?stat_ellipse
1731414727938:nmds_plot <- ggplot() +
1731414727938:# Add points for sites
1731414727939:geom_point(data = site_scores,
1731414727939:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731414727939:size = 3) +
1731414727939:# Add smaller ellipses around years with solid lines
1731414727939:stat_ellipse(data = site_scores,
1731414727939:aes(x = NMDS1, y = NMDS2, group = Year),
1731414727939:type = "norm",
1731414727940:level = 0.5,  # Smaller radius (default is 0.95)
1731414727940:linetype = 1,  # Solid line
1731414727940:size = 0.5) +
1731414727940:# Add significant environmental vectors
1731414727940:geom_segment(data = sig_env_vectors,
1731414727940:aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731414727941:arrow = arrow(length = unit(0.2, "cm")),
1731414727941:color = "darkgrey") +
1731414727941:geom_text(data = sig_env_vectors,
1731414727941:aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731414727941:size = 3, color = "darkgrey") +
1731414727942:theme_bw() +
1731414727942:theme(panel.background = element_rect(fill = "white")) +
1731414727942:labs(title = "NMDS of Community Composition (2013-2017)",
1731414727942:caption = "") +
1731414727942:guides(color = guide_legend("Station"),
1731414727942:shape = guide_legend("Year"))
1731414742280:nmds_plot
1731414783683:nmds_plot <- ggplot() +
1731414783683:# Add points for sites
1731414783684:geom_point(data = site_scores,
1731414783684:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731414783684:size = 3) +
1731414783684:# Add smaller ellipses around years with solid lines
1731414783684:stat_ellipse(data = site_scores,
1731414783685:aes(x = NMDS1, y = NMDS2, group = Year),
1731414783685:type = "norm",
1731414783685:level = 0.6,  # Smaller radius (default is 0.95)
1731414783685:linetype = 1,  # Solid line
1731414783685:size = 0.5) +
1731414783685:# Add significant environmental vectors
1731414783686:geom_segment(data = sig_env_vectors,
1731414783686:aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731414783686:arrow = arrow(length = unit(0.2, "cm")),
1731414783686:color = "darkgrey") +
1731414783687:geom_text(data = sig_env_vectors,
1731414783687:aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731414783687:size = 3, color = "darkgrey") +
1731414783687:theme_bw() +
1731414783687:theme(panel.background = element_rect(fill = "white")) +
1731414783688:labs(title = "NMDS of Community Composition (2013-2017)",
1731414783688:caption = "") +
1731414783688:guides(color = guide_legend("Station"),
1731414783688:shape = guide_legend("Year"));nmds_plot
1731414801466:nmds_plot <- ggplot() +
1731414801467:# Add points for sites
1731414801467:geom_point(data = site_scores,
1731414801467:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731414801467:size = 3) +
1731414801467:# Add smaller ellipses around years with solid lines
1731414801467:stat_ellipse(data = site_scores,
1731414801468:aes(x = NMDS1, y = NMDS2, group = Year),
1731414801468:type = "norm",
1731414801468:level = 0.7,  # Smaller radius (default is 0.95)
1731414801468:linetype = 1,  # Solid line
1731414801468:size = 0.5) +
1731414801468:# Add significant environmental vectors
1731414801468:geom_segment(data = sig_env_vectors,
1731414801469:aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731414801469:arrow = arrow(length = unit(0.2, "cm")),
1731414801469:color = "darkgrey") +
1731414801469:geom_text(data = sig_env_vectors,
1731414801469:aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731414801470:size = 3, color = "darkgrey") +
1731414801470:theme_bw() +
1731414801470:theme(panel.background = element_rect(fill = "white")) +
1731414801470:labs(title = "NMDS of Community Composition (2013-2017)",
1731414801471:caption = "") +
1731414801471:guides(color = guide_legend("Station"),
1731414801471:shape = guide_legend("Year"));nmds_plot
1731415039825:nmds_plot <- ggplot() +
1731415039825:# Add points for sites
1731415039825:geom_point(data = site_scores,
1731415039825:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731415039825:size = 3) +
1731415039826:# Add smaller ellipses around years with solid lines
1731415039826:stat_ellipse(data = site_scores,
1731415039826:aes(x = NMDS1, y = NMDS2, group = Year),
1731415039826:type = "norm",
1731415039826:level = 0.7,
1731415039826:linetype = 1,
1731415039826:size = 0.5) +
1731415039827:# Add significant environmental vectors
1731415039827:geom_segment(data = sig_env_vectors,
1731415039827:aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731415039827:arrow = arrow(length = unit(0.2, "cm")),
1731415039827:color = "darkgrey") +
1731415039827:geom_text(data = sig_env_vectors,
1731415039828:aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731415039828:size = 3, color = "darkgrey") +
1731415039828:theme_bw() +
1731415039828:theme(
1731415039828:panel.background = element_rect(fill = "white"),
1731415039829:axis.text = element_text(size = 12, color = "black"),  # Larger axis text
1731415039829:axis.title = element_text(size = 14),                  # Larger axis titles
1731415039829:legend.text = element_text(size = 12),                 # Larger legend text
1731415039829:legend.title = element_text(size = 12, face = "bold"), # Larger legend titles
1731415039829:plot.title = element_text(size = 16, face = "bold")    # Larger plot title
1731415039830:) +
1731415039830:labs(title = "NMDS of Community Composition (2013-2017)",
1731415039830:caption = "") +
1731415039830:guides(color = guide_legend("Station"),
1731415039831:shape = guide_legend("Year"))
1731415039850:# Save with higher resolution and size
1731415039850:ggsave("output/nmds_plot.png",
1731415039850:nmds_plot,
1731415039850:width = 12,      # Increased width
1731415039850:height = 10,     # Increased height
1731415039850:dpi = 300,       # Higher resolution
1731415039851:bg = "white")
1731421857746:# Load cleaned data
1731421857746:#df_result <- result # just so this won't be accidentally changed
1731421857746:df <- df_result
1731421858619:# Prepare data for NMDS - exclude 1999 data
1731421858619:species_matrix <- df %>%
1731421858620:#filter(year >= 2013) %>%  # Only include 2013-2017 data
1731421858620:select(station, year, species, adjusted_density) %>%
1731421858620:pivot_wider(
1731421858620:names_from = species,
1731421858620:values_from = adjusted_density,
1731421858620:values_fill = 0
1731421858620:) %>%
1731421858620:# Store station and year before removing them for NMDS
1731421858621:mutate(
1731421858621:station_temp = station,
1731421858621:year_temp = year
1731421858621:) %>%
1731421858621:select(-station, -year)
1731421859502:# Perform NMDS
1731421859503:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1731421860908:# Extract site scores and add metadata
1731421860909:site_scores <- as.data.frame(scores(nmds, display = "sites"))
1731421861191:site_scores$Station <- species_matrix$station_temp
1731421861521:site_scores$Year <- as.factor(species_matrix$year_temp)  # Convert Year to factor
1731421862716:# Extract species scores
1731421862716:species_scores <- as.data.frame(scores(nmds, display = "species"))
1731421864025:# Calculate species contributions (using relative abundance)
1731421864025:species_rel_abundance <- colSums(select(species_matrix, -station_temp, -year_temp)) /
1731421864026:sum(select(species_matrix, -station_temp, -year_temp))
1731421865138:important_species <- names(sort(species_rel_abundance[species_rel_abundance > 0.01], decreasing = TRUE))
1731421866152:# Filter species scores to only show important species
1731421866152:species_scores_filtered <- species_scores[rownames(species_scores) %in% important_species, ]
1731421868418:env_data <- readRDS("data/raw/sediment_env_data.rds") %>%
1731421868418:select(station, year,
1731421868418:organic_content, depth,
1731421868418:grain_20um, grain_63um, grain_125um,
1731421868418:grain_250um, grain_1000um) %>%
1731421868419:distinct()
1731421868822:sig_env_vectors <- scores(env_fit, "vectors") %>%
1731421868822:as.data.frame() %>%
1731421868822:mutate(variable = rownames(.)) %>%
1731421868822:filter(env_fit$vectors$pvals < 0.05)
1731421869707:# Create the plot
1731421869708:nmds_plot <- ggplot() +
1731421869708:# Base NMDS plot elements
1731421869708:geom_path(data = site_scores,
1731421869708:aes(x = NMDS1, y = NMDS2, color = Station, group = Station),
1731421869708:arrow = arrow(length = unit(0.2, "cm"), type = "closed")) +
1731421869708:geom_point(data = site_scores,
1731421869708:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731421869709:size = 3) +
1731421869709:# Add significant environmental vectors
1731421869709:geom_segment(data = sig_env_vectors,
1731421869709:aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731421869709:arrow = arrow(length = unit(0.2, "cm")),
1731421869709:color = "darkgrey") +
1731421869710:geom_text(data = sig_env_vectors,
1731421869710:aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731421869710:size = 3, color = "darkgrey") +
1731421869710:theme_bw() +
1731421869710:theme(panel.background = element_rect(fill = "white")) +
1731421869711:labs(title = "NMDS of Community Composition (2013-2017)",
1731421869711:caption = "")
1731421897443:# Save plot
1731421897443:ggsave("output/nmds_plot_1999.png", nmds_plot, width = 10, height = 8, bg = "white")
1731421973963:nmds_plot <- ggplot() +
1731421973964:# Add points for sites
1731421973964:geom_point(data = site_scores,
1731421973964:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731421973964:size = 3) +
1731421973964:# Add smaller ellipses around years with solid lines
1731421973964:stat_ellipse(data = site_scores,
1731421973965:aes(x = NMDS1, y = NMDS2, group = Year),
1731421973965:type = "norm",
1731421973965:level = 0.7,
1731421973965:linetype = 1,
1731421973965:size = 0.5) +
1731421973965:# Add significant environmental vectors
1731421973966:geom_segment(data = sig_env_vectors,
1731421973966:aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731421973966:arrow = arrow(length = unit(0.2, "cm")),
1731421973966:color = "darkgrey") +
1731421973966:geom_text(data = sig_env_vectors,
1731421973966:aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731421973967:size = 3, color = "darkgrey") +
1731421973967:theme_bw() +
1731421973967:theme(
1731421973967:panel.background = element_rect(fill = "white"),
1731421973967:axis.text = element_text(size = 12, color = "black"),  # Larger axis text
1731421973968:axis.title = element_text(size = 14),                  # Larger axis titles
1731421973968:legend.text = element_text(size = 12),                 # Larger legend text
1731421973968:legend.title = element_text(size = 12, face = "bold"), # Larger legend titles
1731421973968:plot.title = element_text(size = 16, face = "bold")    # Larger plot title
1731421973969:) +
1731421973969:labs(title = "NMDS of Community Composition (2013-2017)",
1731421973969:caption = "") +
1731421973969:guides(color = guide_legend("Station"),
1731421973969:shape = guide_legend("Year"))
1731421973984:# Save with higher resolution and size
1731421973984:ggsave("output/nmds_plot_1999.png",
1731421973984:nmds_plot,
1731421973985:width = 12,      # Increased width
1731421973985:height = 10,     # Increased height
1731421973985:dpi = 300,       # Higher resolution
1731421973985:bg = "white")
1731422035572:nmds_plot <- ggplot() +
1731422035572:# Add points for sites
1731422035573:geom_point(data = site_scores,
1731422035573:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731422035573:size = 3) +
1731422035573:# Add smaller ellipses around years with solid lines
1731422035573:stat_ellipse(data = site_scores,
1731422035573:aes(x = NMDS1, y = NMDS2, group = Year),
1731422035574:type = "norm",
1731422035574:level = 0.7,
1731422035574:linetype = 1,
1731422035574:size = 0.5) +
1731422035575:# Add significant environmental vectors
1731422035575:#geom_segment(data = sig_env_vectors,
1731422035575:#            aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731422035575:#           arrow = arrow(length = unit(0.2, "cm")),
1731422035575:#          color = "darkgrey") +
1731422035575:geom_text(data = sig_env_vectors,
1731422035576:aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731422035576:size = 3, color = "darkgrey") +
1731422035576:theme_bw() +
1731422035576:theme(
1731422035576:panel.background = element_rect(fill = "white"),
1731422035577:axis.text = element_text(size = 12, color = "black"),  # Larger axis text
1731422035577:axis.title = element_text(size = 14),                  # Larger axis titles
1731422035577:legend.text = element_text(size = 12),                 # Larger legend text
1731422035577:legend.title = element_text(size = 12, face = "bold"), # Larger legend titles
1731422035577:plot.title = element_text(size = 16, face = "bold")    # Larger plot title
1731422035578:) +
1731422035578:labs(title = "NMDS of Community Composition (2013-2017)",
1731422035578:caption = "") +
1731422035578:guides(color = guide_legend("Station"),
1731422035578:shape = guide_legend("Year"))
1731422035591:# Save with higher resolution and size
1731422035591:ggsave("output/nmds_plot_1999.png",
1731422035592:nmds_plot,
1731422035592:width = 12,      # Increased width
1731422035592:height = 10,     # Increased height
1731422035592:dpi = 300,       # Higher resolution
1731422035592:bg = "white")
1731422051268:nmds_plot <- ggplot() +
1731422051268:# Add points for sites
1731422051269:geom_point(data = site_scores,
1731422051269:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731422051269:size = 3) +
1731422051269:# Add smaller ellipses around years with solid lines
1731422051269:stat_ellipse(data = site_scores,
1731422051270:aes(x = NMDS1, y = NMDS2, group = Year),
1731422051270:type = "norm",
1731422051270:level = 0.7,
1731422051270:linetype = 1,
1731422051270:size = 0.5) +
1731422051271:# Add significant environmental vectors
1731422051271:#geom_segment(data = sig_env_vectors,
1731422051271:#            aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731422051271:#           arrow = arrow(length = unit(0.2, "cm")),
1731422051271:#          color = "darkgrey") +
1731422051271:#geom_text(data = sig_env_vectors,
1731422051272:#         aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731422051272:#        size = 3, color = "darkgrey") +
1731422051272:theme_bw() +
1731422051272:theme(
1731422051272:panel.background = element_rect(fill = "white"),
1731422051272:axis.text = element_text(size = 12, color = "black"),  # Larger axis text
1731422051273:axis.title = element_text(size = 14),                  # Larger axis titles
1731422051273:legend.text = element_text(size = 12),                 # Larger legend text
1731422051273:legend.title = element_text(size = 12, face = "bold"), # Larger legend titles
1731422051273:plot.title = element_text(size = 16, face = "bold")    # Larger plot title
1731422051273:) +
1731422051274:labs(title = "NMDS of Community Composition (2013-2017)",
1731422051274:caption = "") +
1731422051274:guides(color = guide_legend("Station"),
1731422051274:shape = guide_legend("Year"))
1731422051285:# Save with higher resolution and size
1731422051285:ggsave("output/nmds_plot_1999.png",
1731422051285:nmds_plot,
1731422051285:width = 12,      # Increased width
1731422051285:height = 10,     # Increased height
1731422051285:dpi = 300,       # Higher resolution
1731422051285:bg = "white")
1731422349012:nmds_plot <- ggplot() +
1731422349012:# Add points for sites
1731422349012:geom_point(data = site_scores,
1731422349012:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731422349013:size = 3) +
1731422349013:# Add smaller ellipses around years with solid lines
1731422349013:#stat_ellipse(data = site_scores,
1731422349013:#            aes(x = NMDS1, y = NMDS2, group = Year),
1731422349013:#           type = "norm",
1731422349013:#          level = 0.7,
1731422349014:#         linetype = 1,
1731422349014:#        size = 0.5) +
1731422349014:# Add significant environmental vectors
1731422349014:#geom_segment(data = sig_env_vectors,
1731422349014:#            aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731422349015:#           arrow = arrow(length = unit(0.2, "cm")),
1731422349015:#          color = "darkgrey") +
1731422349015:#geom_text(data = sig_env_vectors,
1731422349015:#         aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731422349015:#        size = 3, color = "darkgrey") +
1731422349015:theme_bw() +
1731422349015:theme(
1731422349016:panel.background = element_rect(fill = "white"),
1731422349016:axis.text = element_text(size = 12, color = "black"),  # Larger axis text
1731422349016:axis.title = element_text(size = 14),                  # Larger axis titles
1731422349016:legend.text = element_text(size = 12),                 # Larger legend text
1731422349016:legend.title = element_text(size = 12, face = "bold"), # Larger legend titles
1731422349016:plot.title = element_text(size = 16, face = "bold")    # Larger plot title
1731422349017:) +
1731422349017:labs(title = "NMDS of Community Composition (2013-2017)",
1731422349017:caption = "") +
1731422349017:guides(color = guide_legend("Station"),
1731422349017:shape = guide_legend("Year"))
1731422349026:# Save with higher resolution and size
1731422349027:ggsave("output/nmds_plot_1999_an-hringja.png",
1731422349027:nmds_plot,
1731422349027:width = 12,      # Increased width
1731422349027:height = 10,     # Increased height
1731422349027:dpi = 300,       # Higher resolution
1731422349027:bg = "white")
1731422621347:nmds_plot <- ggplot() +
1731422621347:# Add points for sites
1731422621347:geom_point(data = site_scores,
1731422621347:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731422621348:size = 3) +
1731422621348:# Add smaller ellipses around years with solid lines
1731422621348:stat_ellipse(data = site_scores,
1731422621348:aes(x = NMDS1, y = NMDS2, group = Year),
1731422621348:type = "euclid",
1731422621348:level = 0.7,
1731422621349:linetype = 1,
1731422621349:size = 0.5) +
1731422621349:# Add significant environmental vectors
1731422621349:#geom_segment(data = sig_env_vectors,
1731422621349:#            aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731422621349:#           arrow = arrow(length = unit(0.2, "cm")),
1731422621350:#          color = "darkgrey") +
1731422621350:#geom_text(data = sig_env_vectors,
1731422621350:#         aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731422621350:#        size = 3, color = "darkgrey") +
1731422621350:theme_bw() +
1731422621351:theme(
1731422621351:panel.background = element_rect(fill = "white"),
1731422621351:axis.text = element_text(size = 12, color = "black"),  # Larger axis text
1731422621351:axis.title = element_text(size = 14),                  # Larger axis titles
1731422621351:legend.text = element_text(size = 12),                 # Larger legend text
1731422621352:legend.title = element_text(size = 12, face = "bold"), # Larger legend titles
1731422621352:plot.title = element_text(size = 16, face = "bold")    # Larger plot title
1731422621352:) +
1731422621352:labs(title = "NMDS of Community Composition (2013-2017)",
1731422621352:caption = "") +
1731422621352:guides(color = guide_legend("Station"),
1731422621353:shape = guide_legend("Year"))
1731422621363:# Save with higher resolution and size
1731422625963:nmds_plot
1731422889435:search_term <- "sipuncul"
1731422889435:jorundur %>%
1731422889435:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731422889435:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731422889435:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731422889436:print(n=1000) %>% distinct(Flokkun,Artal)
1731422903316:search_term <- "sipuncul"
1731422903316:df %>%
1731422903317:filter(stod %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731422903317:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731422903317:select(Family, Flokkun, gamalt, Kingdom, Phylum, Class, Genus, Species, N, Artal) %>%
1731422903317:print(n=1000) %>% distinct(Flokkun,Artal)
1731422921221:search_term <- "sipuncul"
1731422921221:df %>%
1731422921221:filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731422921221:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731422921222:select(Species, N, Artal) %>%
1731422921222:print(n=1000) %>% distinct(Flokkun,Artal)
1731422944747:search_term <- "sipuncul"
1731422944748:df %>%
1731422944748:filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731422944748:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731422944748:select(species,adjusted_density,year) %>%
1731422944748:print(n=1000)
1731422951113:df
1731422972123:df[df$species=="Praxillella"]
1731422973986:df[df$species=="Praxillella",]
1731422982515:df[df$species=="Sipuncula",]
1731423265389:search_term <- "capit"
1731423265389:df %>%
1731423265390:filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731423265390:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731423265390:select(species,adjusted_density,year) %>%
1731423265390:print(n=1000)
1731423407047:# Include 1999 data
1731423407047:species_matrix_with_1999 <- df %>%
1731423407047:filter(year >= 1999) %>%  # Include 1999 data
1731423407047:select(station, year, species, adjusted_density) %>%
1731423407047:pivot_wider(
1731423407048:names_from = species,
1731423407048:values_from = adjusted_density,
1731423407048:values_fill = 0
1731423407048:) %>%
1731423407048:mutate(
1731423407048:station_temp = station,
1731423407048:year_temp = year
1731423407048:) %>%
1731423407049:select(-station, -year)
1731423407061:# Perform NMDS with 1999
1731423407061:nmds_with_1999 <- metaMDS(select(species_matrix_with_1999, -station_temp, -year_temp), distance = "bray")
1731423407148:# Compare stress values
1731423407148:stress_original <- nmds$stress
1731423407148:stress_with_1999 <- nmds_with_1999$stress
1731423407148:print(paste("Stress without 1999:", round(stress_original, 3)))
1731423407149:print(paste("Stress with 1999:", round(stress_with_1999, 3)))
1731423407149:# Compare species composition
1731423407149:species_comparison <- species_matrix_with_1999 %>%
1731423407149:group_by(year_temp) %>%
1731423407149:summarise(across(everything(), sum)) %>%
1731423407150:pivot_longer(-year_temp, names_to = "species", values_to = "abundance") %>%
1731423407150:filter(species %in% important_species) %>%
1731423407150:arrange(year_temp, desc(abundance))
1731423429886:# Prepare data for NMDS - exclude 1999 data
1731423429886:species_matrix <- df %>%
1731423429886:filter(year >= 2013) %>%  # Only include 2013-2017 data
1731423429886:select(station, year, species, adjusted_density) %>%
1731423429887:pivot_wider(
1731423429887:names_from = species,
1731423429887:values_from = adjusted_density,
1731423429887:values_fill = 0
1731423429887:) %>%
1731423429887:# Store station and year before removing them for NMDS
1731423429887:mutate(
1731423429888:station_temp = station,
1731423429888:year_temp = year
1731423429888:) %>%
1731423429888:select(-station, -year)
1731423431084:# Perform NMDS
1731423431085:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1731423443150:stress_original <- nmds$stress
1731423443151:stress_with_1999 <- nmds_with_1999$stress
1731423450995:print(paste("Stress without 1999:", round(stress_original, 3)))
1731423450996:print(paste("Stress with 1999:", round(stress_with_1999, 3)))
1731423460986:species_comparison <- species_matrix_with_1999 %>%
1731423460986:group_by(year_temp) %>%
1731423460986:summarise(across(everything(), sum)) %>%
1731423460986:pivot_longer(-year_temp, names_to = "species", values_to = "abundance") %>%
1731423460986:filter(species %in% important_species) %>%
1731423460986:arrange(year_temp, desc(abundance))
1731423467280:rlang::last_trace()
1731423487592:species_comparison <- species_matrix_with_1999 %>%
1731423487592:group_by(year_temp) %>%
1731423487592:summarise(across(where(is.numeric), sum)) %>%  # Only sum numeric columns
1731423487593:pivot_longer(-year_temp, names_to = "species", values_to = "abundance") %>%
1731423487593:filter(species %in% important_species) %>%
1731423487593:arrange(year_temp, desc(abundance))
1731423487620:print("Species composition comparison:")
1731423487620:print(species_comparison)
1731423514013:print(species_comparison, n=1999)
1731423554350:print(paste("Stress without 1999:", round(stress_original, 3)))
1731423554350:print(paste("Stress with 1999:", round(stress_with_1999, 3)))
1731423716273:# Calculate relative abundance for each species by year
1731423716273:relative_abundance_by_year <- species_matrix_with_1999 %>%
1731423716274:group_by(year_temp) %>%
1731423716274:summarise(across(where(is.numeric), sum)) %>%
1731423716274:pivot_longer(-year_temp, names_to = "species", values_to = "abundance") %>%
1731423716274:group_by(year_temp) %>%
1731423716274:mutate(relative_abundance = abundance / sum(abundance)) %>%
1731423716274:arrange(year_temp, desc(relative_abundance))
1731423716307:# Print relative abundance for 1999 and compare with other years
1731423716307:print("Relative Abundance by Year:")
1731423716308:print(relative_abundance_by_year, n = 50)
1731423723549:# Calculate relative abundance for each species by year
1731423723549:relative_abundance_by_year <- species_matrix_with_1999 %>%
1731423723549:group_by(year_temp) %>%
1731423723549:summarise(across(where(is.numeric), sum)) %>%
1731423723549:pivot_longer(-year_temp, names_to = "species", values_to = "abundance") %>%
1731423723550:group_by(year_temp) %>%
1731423723550:mutate(relative_abundance = abundance / sum(abundance)) %>%
1731423723550:arrange(year_temp, desc(relative_abundance))
1731423723595:# Print relative abundance for 1999 and compare with other years
1731423723595:print("Relative Abundance by Year:")
1731423723595:print(relative_abundance_by_year, n = 5000)
1731423789009:# Compare ordination distances with Bray-Curtis dissimilarities
1731423789009:ordination_distances <- as.matrix(dist(scores(nmds_with_1999, display = "sites")))
1731423789010:bray_curtis_distances <- as.matrix(vegdist(select(species_matrix_with_1999, -station_temp, -year_temp), method = "bray"))
1731423789013:# Calculate correlation between ordination and dissimilarity matrices
1731423789013:correlation_with_1999 <- cor(ordination_distances, bray_curtis_distances, method = "spearman")
1731423789017:print(paste("Correlation between ordination and dissimilarity with 1999:", round(correlation_with_1999, 3)))
1731423789108:# Visualize NMDS with and without 1999
1731423789108:nmds_plot_with_1999 <- ggplot() +
1731423789108:geom_point(data = as.data.frame(scores(nmds_with_1999, display = "sites")),
1731423789109:aes(x = NMDS1, y = NMDS2, color = as.factor(species_matrix_with_1999$year_temp)),
1731423789109:size = 3) +
1731423789109:theme_bw() +
1731423789109:labs(title = "NMDS with 1999 Included")
1731423789114:nmds_plot_without_1999 <- ggplot() +
1731423789115:geom_point(data = as.data.frame(scores(nmds, display = "sites")),
1731423789115:aes(x = NMDS1, y = NMDS2, color = as.factor(species_matrix$year_temp)),
1731423789115:size = 3) +
1731423789115:theme_bw() +
1731423789115:labs(title = "NMDS without 1999")
1731423789120:# Print plots
1731423789120:print(nmds_plot_with_1999)
1731423789341:print(nmds_plot_without_1999)
1731423799213:nmds_plot_with_1999
1731423803731:nmds_plot_without_1999
1731424006243:library(vegan)
1731424006244:library(ggplot2)
1731424006245:library(plotly)
1731424016668:install.packages("plotly")
1731424033060:library(vegan)
1731424033061:library(ggplot2)
1731424033061:library(plotly)
1731424033279:# Assuming species_matrix_with_1999 is your data frame with species abundance data
1731424033279:# Run NMDS with 3 dimensions
1731424033279:nmds_3d <- metaMDS(species_matrix_with_1999, distance = "bray", k = 3, trymax = 100)
1731424239380:search_term <- "arenaria"
1731424239380:df %>%
1731424239381:filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731424239381:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731424239381:select(species,adjusted_density,year) %>%
1731424239381:print(n=1000)
1731424319836:# Assuming species_matrix_with_1999 is your data frame
1731424319836:# Select only numeric columns for NMDS
1731424319837:species_abundance_matrix <- species_matrix_with_1999 %>%
1731424319837:select(where(is.numeric))
1731424319840:# Run NMDS with 3 dimensions
1731424319840:nmds_3d <- metaMDS(species_abundance_matrix, distance = "bray", k = 3, trymax = 100)
1731424319973:# Print stress value for 3D NMDS
1731424319973:print(paste("Stress for 3D NMDS:", round(nmds_3d$stress, 3)))
1731424319974:# Extract scores for plotting
1731424319974:scores_3d <- scores(nmds_3d, display = "sites")
1731424319974:# Create a 3D plot using plotly
1731424319975:plot_3d <- plot_ly(x = ~scores_3d[,1], y = ~scores_3d[,2], z = ~scores_3d[,3],
1731424319975:color = ~as.factor(species_matrix_with_1999$year_temp),
1731424319975:colors = c("red", "blue", "green", "purple", "orange", "brown"),
1731424319975:type = "scatter3d", mode = "markers") %>%
1731424319975:layout(scene = list(xaxis = list(title = 'NMDS1'),
1731424319975:yaxis = list(title = 'NMDS2'),
1731424319976:zaxis = list(title = 'NMDS3')))
1731424319983:# Print the 3D plot
1731424319983:plot_3d
1731424368331:library(dplyr)
1731424368331:library(stringr)
1731424368332:# Assuming df is your data frame with columns: species, adjusted_density, year, station
1731424368332:# Find species present in 1999 but not in other years
1731424368332:species_1999_only <- df %>%
1731424368332:filter(year == 1999) %>%
1731424368332:distinct(species) %>%
1731424368332:anti_join(df %>% filter(year != 1999) %>% distinct(species), by = "species")
1731424368341:# Find species present in other years but not in 1999
1731424368341:species_other_years_only <- df %>%
1731424368341:filter(year != 1999) %>%
1731424368341:distinct(species) %>%
1731424368341:anti_join(df %>% filter(year == 1999) %>% distinct(species), by = "species")
1731424368346:# Print results
1731424368346:print("Species present only in 1999:")
1731424368346:print(species_1999_only, n = 1000)
1731424368362:print("Species present in other years but not in 1999:")
1731424368362:print(species_other_years_only, n = 1000)
1731424414475:search_term <- "tubif"
1731424414476:df %>%
1731424414476:filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731424414476:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731424414476:select(species,adjusted_density,year) %>%
1731424414476:print(n=1000)
1731424446348:search_term <- "fragilis"
1731424446348:df %>%
1731424446348:filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731424446348:filter(if_any(everything(), ~ str_detect(tolower(.), tolower(search_term)))) %>%
1731424446349:select(species,adjusted_density,year) %>%
1731424446349:print(n=1000)
1731424610283:library(dplyr)
1731424610284:# Assuming df is your data frame with columns: species, year
1731424610284:# Find unique species for each year
1731424610284:unique_species_per_year <- df %>%
1731424610284:group_by(year) %>%
1731424610285:distinct(species) %>%
1731424610285:group_by(species) %>%
1731424610285:filter(n() == 1) %>%
1731424610285:ungroup() %>%
1731424610285:group_by(year) %>%
1731424610285:summarise(unique_species_count = n(), unique_species = list(species))
1731424610297:# Print the results
1731424610297:unique_species_per_year %>%
1731424610297:mutate(species_list = map_chr(unique_species, ~ paste(.x, collapse = ", "))) %>%
1731424610298:select(year, unique_species_count, species_list) %>%
1731424610298:print(n = Inf)
1731424614236:rlang::last_trace()
1731424634144:library(dplyr)
1731424634145:library(purrr)  # Load the purrr package for map_chr
1731424634157:# Assuming df is your data frame with columns: species, year
1731424634157:# Find unique species for each year
1731424634157:unique_species_per_year <- df %>%
1731424634157:group_by(year) %>%
1731424634157:distinct(species) %>%
1731424634157:group_by(species) %>%
1731424634158:filter(n() == 1) %>%
1731424634158:ungroup() %>%
1731424634158:group_by(year) %>%
1731424634158:summarise(unique_species_count = n(), unique_species = list(species))
1731424634170:# Print the results
1731424634170:unique_species_per_year %>%
1731424634170:mutate(species_list = map_chr(unique_species, ~ paste(.x, collapse = ", "))) %>%
1731424634170:select(year, unique_species_count, species_list) %>%
1731424634170:print(n = Inf)
1731424652229:library(dplyr)
1731424652230:library(purrr)  # Load the purrr package for map_chr
1731424652230:# Assuming df is your data frame with columns: species, year
1731424652230:# Find unique species for each year
1731424652231:unique_species_per_year <- df %>%
1731424652231:group_by(year) %>%
1731424652231:distinct(species) %>%
1731424652231:group_by(species) %>%
1731424652231:filter(n() == 1) %>%
1731424652231:ungroup() %>%
1731424652232:group_by(year) %>%
1731424652232:summarise(unique_species_count = n(), unique_species = list(species))
1731424652244:# Print the results
1731424652244:unique_species_per_year %>%
1731424652244:mutate(species_list = map_chr(unique_species, ~ paste(.x, collapse = ", "))) %>%
1731424652244:select(year, unique_species_count, species_list) %>%
1731424652244:print(n = Inf)
1731424688829:library(dplyr)
1731424688829:library(purrr)
1731424688829:# Assuming df is your data frame with columns: species, year
1731424688830:# Find unique species for each year
1731424688830:unique_species_per_year <- df %>%
1731424688830:group_by(year) %>%
1731424688830:distinct(species) %>%
1731424688830:group_by(species) %>%
1731424688830:filter(n() == 1) %>%
1731424688830:ungroup() %>%
1731424688831:group_by(year) %>%
1731424688831:summarise(unique_species_count = n(), unique_species = list(species))
1731424688843:# Convert the list of species to a comma-separated string
1731424688843:unique_species_per_year <- unique_species_per_year %>%
1731424688843:mutate(species_list = map_chr(unique_species, ~ paste(.x, collapse = ", "))) %>%
1731424688843:select(year, unique_species_count, species_list)
1731424688845:# Write the results to a CSV file
1731424688846:write.csv(unique_species_per_year, "unique_species_per_year.csv", row.names = FALSE)
1731424688851:# Print a message to confirm the export
1731424688851:print("Unique species per year have been exported to 'unique_species_per_year.csv'.")
1731424753004:library(dplyr)
1731424753005:library(purrr)
1731424753005:library(tidyr)
1731424753005:# Assuming df is your data frame with columns: species, year
1731424753006:# Find unique species for each year
1731424753006:unique_species_per_year <- df %>%
1731424753006:group_by(year) %>%
1731424753006:distinct(species) %>%
1731424753006:group_by(species) %>%
1731424753006:filter(n() == 1) %>%
1731424753006:ungroup() %>%
1731424753007:group_by(year) %>%
1731424753007:summarise(unique_species_count = n(), unique_species = list(species))
1731424753019:# Convert the list of species to a comma-separated string
1731424753019:unique_species_per_year <- unique_species_per_year %>%
1731424753019:mutate(species_list = map_chr(unique_species, ~ paste(.x, collapse = ", "))) %>%
1731424753019:select(year, unique_species_count, species_list)
1731424753022:# Pivot the data to have years as columns
1731424753023:unique_species_wide <- unique_species_per_year %>%
1731424753023:pivot_wider(names_from = year, values_from = c(unique_species_count, species_list))
1731424753029:# Write the results to a CSV file
1731424753029:write.csv(unique_species_wide, "unique_species_per_year_wide.csv", row.names = FALSE)
1731424753034:# Print a message to confirm the export
1731424753035:print("Unique species per year have been exported to 'unique_species_per_year_wide.csv'.")
1731424843190:library(dplyr)
1731424843190:library(tidyr)
1731424843191:library(purrr)
1731424843191:# Assuming df is your data frame with columns: species, year
1731424843191:# Find unique species for each year
1731424843191:unique_species_per_year <- df %>%
1731424843192:group_by(year) %>%
1731424843192:distinct(species) %>%
1731424843192:group_by(species) %>%
1731424843192:filter(n() == 1) %>%
1731424843192:ungroup() %>%
1731424843192:group_by(year) %>%
1731424843192:summarise(unique_species = list(species))
1731424843205:# Reshape the data to have years as columns
1731424843205:reshaped_data <- unique_species_per_year %>%
1731424843205:unnest(unique_species) %>%
1731424843205:pivot_wider(names_from = year, values_from = unique_species, values_fill = list(unique_species = ""))
1731424846449:rlang::last_trace()
1731424864366:library(dplyr)
1731424864367:library(tidyr)
1731424864367:library(purrr)
1731424864367:# Assuming df is your data frame with columns: species, year
1731424864367:# Find unique species for each year
1731424864367:unique_species_per_year <- df %>%
1731424864368:group_by(year) %>%
1731424864368:distinct(species) %>%
1731424864368:group_by(species) %>%
1731424864368:filter(n() == 1) %>%
1731424864368:ungroup() %>%
1731424864368:group_by(year) %>%
1731424864368:summarise(unique_species = list(species))
1731424864380:# Reshape the data to have years as columns
1731424864380:reshaped_data <- unique_species_per_year %>%
1731424864380:unnest(unique_species) %>%
1731424864380:pivot_wider(names_from = year, values_from = unique_species, values_fill = "")
1731424870814:rlang::last_trace()
1731424889140:library(dplyr)
1731424889141:library(tidyr)
1731424889141:library(purrr)
1731424889141:# Assuming df is your data frame with columns: species, year
1731424889142:# Find unique species for each year
1731424889142:unique_species_per_year <- df %>%
1731424889142:group_by(year) %>%
1731424889142:distinct(species) %>%
1731424889142:group_by(species) %>%
1731424889142:filter(n() == 1) %>%
1731424889142:ungroup() %>%
1731424889143:group_by(year) %>%
1731424889143:summarise(unique_species = list(species))
1731424889154:# Reshape the data to have years as columns
1731424889154:reshaped_data <- unique_species_per_year %>%
1731424889154:unnest(unique_species) %>%
1731424889154:pivot_wider(names_from = year, values_from = unique_species, values_fill = list(unique_species = ""))
1731424940842:str(df)
1731424951696:# Load necessary libraries
1731424951696:library(dplyr)
1731424951696:library(tidyr)
1731424951697:library(purrr)
1731424951697:# Assuming df is your data frame with columns: species, year
1731424951698:# Step 1: Identify species unique to each year
1731424951698:unique_species_per_year <- df %>%
1731424951698:group_by(year) %>%                   # Group by each year
1731424951698:distinct(species) %>%                 # Get unique species per year
1731424951698:group_by(species) %>%                 # Group by each species
1731424951698:filter(n() == 1) %>%                  # Retain only species that appear in a single year
1731424951699:ungroup() %>%
1731424951699:group_by(year) %>%                    # Re-group by year for summarization
1731424951699:summarise(unique_species = list(species), .groups = 'drop')  # Create a list of unique species per year
1731424951709:# Step 2: Reshape data with years as columns
1731424951710:reshaped_data <- unique_species_per_year %>%
1731424951710:unnest(unique_species) %>%            # Unnest the species list to separate rows
1731424951710:pivot_wider(names_from = year, values_from = unique_species, values_fill = list(unique_species = ""))  # Convert to wide format
1731424974748:unique_species_per_year
1731424994283:# Convert species to lowercase to avoid case sensitivity issues
1731424994283:unique_species_per_year <- df %>%
1731424994284:mutate(species = tolower(species)) %>%
1731424994284:group_by(year) %>%                   # Group by each year
1731424994284:distinct(species) %>%                 # Get unique species per year
1731424994284:group_by(species) %>%                 # Group by each species
1731424994284:filter(n() == 1) %>%                  # Retain only species that appear in a single year
1731424994284:ungroup() %>%
1731424994284:group_by(year) %>%                    # Re-group by year for summarization
1731424994285:summarise(unique_species = list(species), .groups = 'drop')  # Create a list of unique species per year
1731424994297:# Continue with reshaping and saving as before
1731424994297:reshaped_data <- unique_species_per_year %>%
1731424994297:unnest(unique_species) %>%
1731424994297:pivot_wider(names_from = year, values_from = unique_species, values_fill = list(unique_species = ""))
1731425004191:unique_species_per_year
1731425028485:unique_species_per_year <- df %>%
1731425028486:group_by(year) %>%
1731425028486:distinct(species) %>%
1731425028486:group_by(species) %>%
1731425028486:filter(n() == 1) %>%
1731425028486:ungroup() %>%
1731425028486:group_by(year) %>%
1731425028486:summarise(unique_species_count = n(), unique_species = list(species))
1731425028499:# Print the results
1731425028499:unique_species_per_year %>%
1731425028499:mutate(species_list = map_chr(unique_species, ~ paste(.x, collapse = ", "))) %>%
1731425028500:select(year, unique_species_count, species_list) %>%
1731425028500:print(n = Inf)
1731425052005:unique_species_per_year <- df %>%
1731425052005:group_by(year) %>%
1731425052006:distinct(species) %>%
1731425052006:group_by(species) %>%
1731425052006:filter(n() == 1) %>%
1731425052006:ungroup() %>%
1731425052006:group_by(year) %>%
1731425052006:summarise(unique_species_count = n(), unique_species = list(species))
1731425052020:# Print the results
1731425052020:rass <- unique_species_per_year %>%
1731425052020:mutate(species_list = map_chr(unique_species, ~ paste(.x, collapse = ", "))) %>%
1731425052020:select(year, unique_species_count, species_list) %>%
1731425052020:print(n = Inf)
1731425054411:rass
1731425058514:t(rass)
1731425631758:KolgrTaxa <- read_csv(file("data/raw/KolgrTaxa.csv", encoding = "UTF-8"), na = "empty")
1731425634263:taxa_to_remove <- c(
1731425634264:"Foraminifera",
1731425634264:"Nematoda",
1731425634264:"Cirripedia",
1731425634264:"Porifera",
1731425634264:"Cnidaria",
1731425634264:"Bryozoa",
1731425634264:"Sipuncula",
1731425634265:"Platyhelminthes",
1731425634265:"Nemertea",
1731425634265:#"Oligochaeta",
1731425634265:"Ostracoda"
1731425634265:)
1731425638390:# Filter out the specified taxa using if_all()
1731425638391:KolgrTaxa <- KolgrTaxa %>%
1731425638391:filter(if_all(where(is.character), ~ !. %in% taxa_to_remove))
1731425639076:KolgrTaxa$gamalt <- iconv(KolgrTaxa$gamalt, from = "UTF-8", to = "UTF-8", sub = NA)
1731425641853:remove_list <- paste(c(
1731425641853:"nýsestir",
1731425641853:"ungviði",
1731425641854:"ungv",
1731425641854:"ungv.",
1731425641854:"juv",
1731425641854:"harpacticoida"
1731425641854:), collapse = '|')
1731425643157:remove_ind <- lapply(strsplit(remove_list , "\\|")[[1]] , \(x) grep(x , KolgrTaxa$gamalt , fixed = T)) |>
1731425643157:unlist() |>
1731425643158:unique()
1731425644206:ekkiungvidi <- KolgrTaxa[-remove_ind,]
1731425644569:jorundur <- ekkiungvidi %>%
1731425644569:filter(!Flokkun %in% c("harpacticoida", "Campanulariidae")) %>%
1731425644569:mutate(
1731425644569:Flokkun = case_when(
1731425644569:# General taxonomic standardization (no year-specific)
1731425644569:str_detect(tolower(Flokkun), "^sipuncul") ~ NA_character_,
1731425644570:tolower(Flokkun) == "ostracoda" ~ "Ostracoda",
1731425644570:tolower(Flokkun) == "terebellides stroemi" ~ "Terebellides stroemii",
1731425644570:tolower(Flokkun) == "bivalvia" ~ NA_character_,
1731425644570:tolower(Flokkun) == "pectinaria koreni" ~ "Lagis koreni",
1731425644570:tolower(Flokkun) == "sphaerosyllis" ~ "Sphaerosyllis erinaceus",
1731425644571:tolower(Flokkun) %in% c("maldane sarsi", "maldanidae", "praxillella praetermissa") ~ "Praxillella",
1731425644571:tolower(Flokkun) == "oligochaeta" ~ NA_character_,
1731425644571:tolower(Flokkun) == "Tubificidae" ~ NA_character_,
1731425644571:# 1999 specific matches
1731425644571:Artal == "1999" & tolower(Flokkun) %in% c("ampharetinae", "ampharete acutifrons") ~ "Ampharetidae",
1731425644572:Artal == "1999" & tolower(Flokkun) == "bivalvia" ~ NA_character_,
1731425644572:Artal == "1999" & tolower(Flokkun) == "leucon acutirostris" ~ "Cumacea",
1731425644572:Artal == "1999" & tolower(Flokkun) == "eudorella emarginata" ~ "Cumacea",
1731425644572:Artal == "1999" & tolower(Flokkun) == "musculus discors" ~ "Musculus",
1731425644573:Artal == "1999" & tolower(Flokkun) == "aricidea (acmira) cerrutii" ~ "Aricidea suecica",
1731425644573:Artal == "1999" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1731425644573:# 2013 specific matches
1731425644573:Artal == "2013" & tolower(Flokkun) %in% c("harmothoe", "polynoidae") ~ "Harmothoe extenuata",
1731425644574:Artal == "2013" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731425644574:# 2014 specific matches
1731425644574:Artal == "2014" & tolower(Flokkun) == "ampharete acutifrons" ~ "Ampharetidae",
1731425644574:Artal == "2014" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731425644575:Artal == "2014" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1731425644575:Artal == "2014" & tolower(Flokkun) == "caprellidae" ~ "Caprella septemtrionalis",
1731425644575:Artal == "2014" & tolower(Flokkun) == "praxillella" ~ "Praxillella praetermissa",
1731425644575:Artal == "2014" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1731425644576:Artal == "2014" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1731425644576:Artal == "2014" & tolower(Flokkun) == "mytilus edulis" ~ "Mytilidae",
1731425644576:Artal == "2014" & tolower(Flokkun) == "nephtyidae" ~ "Nephthys",
1731425644576:Artal == "2014" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1731425644577:Artal == "2014" & tolower(Flokkun) == "tubificidae" ~ "Tubificoides kozloffi",
1731425644577:Artal == "2014" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1731425644577:# 2015 specific matches
1731425644578:Artal == "2015" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731425644578:Artal == "2015" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1731425644578:Artal == "2015" & tolower(Flokkun) == "crenella" ~ "Crenella decussata",
1731425644579:Artal == "2015" & tolower(Flokkun) == "syllidae" ~ "Syllis cornuta",
1731425644579:Artal == "2015" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1731425644579:Artal == "2015" & tolower(Flokkun) == "mytilidae" ~ "Mytilus edulis",
1731425644579:Artal == "2015" & tolower(Flokkun) == "ampharetidae" ~ NA_character_,
1731425644580:Artal == "2015" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1731425644580:Artal == "2015" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1731425644580:Artal == "2015" & tolower(Flokkun) == "amphipoda" ~ "Protomedeia fasciata",
1731425644581:# 2016 specific matches
1731425644581:Artal == "2016" & tolower(Flokkun) == "leaena ebranchiata" ~ "Terebellides stroemii",
1731425644581:Artal == "2016" & tolower(Flokkun) == "pseudopolydora antennata" ~ "Polydora",
1731425644582:Artal == "2016" & tolower(Flokkun) == "cistenides hyperborea" ~ "Cistenides granulata",
1731425644582:Artal == "2016" & tolower(Flokkun) == "paraonidae" ~ "Aricidea suecica",
1731425644582:Artal == "2016" & tolower(Flokkun) == "dorvilleidae" ~ "Capitella capitata",
1731425644582:Artal == "2016" & tolower(Flokkun) == "orbiniidae" ~ "Scoloplos armiger",
1731425644583:Artal == "2016" & tolower(Flokkun) == "polychaeta" ~ NA_character_,
1731425644583:Artal == "2016" & tolower(Flokkun) == "polynoidae" ~ "Harmothoe imbricata",
1731425644583:Artal == "2016" & tolower(Flokkun) %in% c("spio filicornis", "spionidae") ~ "Spionidae",
1731425644584:Artal == "2017" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731425644584:Artal == "2016" & tolower(Flokkun) %in% c("syllis", "syllidae") ~ "Syllis cornuta",
1731425644584:Artal == "2016" & tolower(Flokkun) %in% c("terebellidae", "terebelliformia") ~ "Terebellides stroemii",
1731425644585:Artal == "2016" & tolower(Flokkun) == "amphipoda" ~ NA_character_,
1731425644585:Artal == "2016" & tolower(Flokkun) == "bivalvia" ~ NA_character_,
1731425644585:Artal == "2016" & tolower(Flokkun) == "cardium" ~ NA_character_,
1731425644586:Artal == "2016" & tolower(Flokkun) == "aricidea" ~ "Amphitrite cirrata",
1731425644586:Artal == "2016" & tolower(Flokkun) == "capitellidae" ~ "Capitella capitata",
1731425644586:Artal == "2016" & tolower(Flokkun) == "cirratulidae" ~ "Cirratulus cirratus",
1731425644587:Artal == "2016" & tolower(Flokkun) == "cossuridae" ~ "Cossura longocirrata",
1731425644587:Artal == "2016" & tolower(Flokkun) == "pectinariidae" ~ "Pectinaria koreni",
1731425644587:Artal == "2016" & tolower(Flokkun) == "phyllodocida" ~ "Phyllodoce maculata",
1731425644588:Artal == "2016" & tolower(Flokkun) == "lumbrineridae" ~ "Lumbrineris",
1731425644588:Artal == "2016" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1731425644588:Artal == "2016" & tolower(Flokkun) == "balanus balanus" ~ "Balanus",
1731425644589:Artal == "2016" & tolower(Flokkun) %in% c("priapulidae", "priapulidae") ~ "Priapulus caudatus",
1731425644589:# 2017 specific matches
1731425644590:Artal == "2017" & tolower(Flokkun) == "oligochaeta" ~ NA_character_,
1731425644590:Artal == "2017" & tolower(Flokkun) == "tubificidae" ~ NA_character_,
1731425644590:Artal == "2017" & tolower(Flokkun) == "mediomastus filiformis" ~ "Heteromastus filiformis",
1731425644591:Artal == "2017" & tolower(Flokkun) == "spionidae" ~ "Spio",
1731425644591:Artal == "2017" & tolower(Flokkun) == "terebellidae" ~ "Terebellides stroemii",
1731425644592:Artal == "2017" & tolower(Flokkun) == "caprellidae" ~ "Caprella septentrionalis",
1731425644592:Artal == "2017" & tolower(Flokkun) == "opisthobranchia" ~ "Retusa pertenuis",
1731425644592:Artal == "2017" & tolower(Flokkun) == "mya" ~ "Mya arenaria",
1731425644593:Artal == "2017" & tolower(Flokkun) == "maldanidae" ~ "Praxillella praetermissa",
1731425644593:Artal == "2017" & tolower(Flokkun) %in% c("ampharete", "ampharete acutifrons") ~ "Ampharetidae",
1731425644594:Artal == "2017" & tolower(Flokkun) == "pholoe" ~ "Pholoe minuta",
1731425644595:Artal == "2017" & tolower(Flokkun) == "harmothoe" ~ "Harmothoe extenuata",
1731425644596:# Default case
1731425644597:TRUE ~ Flokkun
1731425644597:)
1731425644598:) %>%
1731425644598:drop_na(Flokkun)
1731425645765:df <- jorundur  %>%
1731425645765:rename(
1731425645766:species = Flokkun,
1731425645766:sample_id = id,
1731425645766:year = Artal,
1731425645766:station = stod,
1731425645766:subdivision = skipting,
1731425645766:count = N,
1731425645767:density = Nu
1731425645767:)
1731425647118:result <- df %>%
1731425647119:filter(station %in% c("C4", "A7", "B5", "B8", "E4", "E3")) %>%
1731425647119:# First, apply the subdivision to the count
1731425647119:mutate(adjusted_count = count * subdivision) %>%
1731425647119:# Calculate the correct number of samples and total area for each station-year combination
1731425647119:group_by(station, year) %>%
1731425647119:mutate(
1731425647120:n_samples = n_distinct(sample_id),
1731425647120:grab_area = case_when(
1731425647120:year == 1999 ~ 0.0225,
1731425647120:TRUE ~ 0.04
1731425647120:),
1731425647121:total_area = grab_area * n_samples
1731425647121:) %>%
1731425647121:ungroup() %>%
1731425647121:# Now group by station, year, and species to get total counts
1731425647121:group_by(station, year, species) %>%
1731425647121:summarise(
1731425647122:original_total_count = sum(count),
1731425647122:adjusted_total_count = sum(adjusted_count),
1731425647122:n_samples = first(n_samples),  # Use the previously calculated n_samples
1731425647122:total_area = first(total_area),  # Use the previously calculated total_area
1731425647122:.groups = 'keep'
1731425647123:) %>%
1731425647123:# Calculate densities
1731425647123:mutate(
1731425647123:original_density = original_total_count / total_area,
1731425647123:adjusted_density = adjusted_total_count / total_area,
1731425647124:density_difference = adjusted_density - original_density,
1731425647124:density_ratio = adjusted_density / original_density
1731425647124:) %>%
1731425647124:# Ungroup
1731425647124:ungroup()
1731425697902:df_result <- result
1731425700717:# Load cleaned data
1731425700717:#df_result <- result # just so this won't be accidentally changed
1731425700717:df <- df_result
1731425708502:# Prepare data for NMDS - exclude 1999 data
1731425708503:species_matrix <- df %>%
1731425708503:"filter(year >= 2013) %>%  # Only include 2013-2017 data
1731425708503:select(station, year, species, adjusted_density) %>%
1731425708503:pivot_wider(
1731425708503:names_from = species,
1731425708504:values_from = adjusted_density,
1731425708504:values_fill = 0
1731425708504:) %>%
1731425708504:# Store station and year before removing them for NMDS
1731425708504:mutate(
1731425708504:station_temp = station,
1731425708504:year_temp = year
1731425708504:) %>%
1731425708505:select(-station, -year)
1731425708505:# Perform NMDS
1731425708505:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1731425747827:# Prepare data for NMDS - exclude 1999 data
1731425747828:species_matrix <- df %>%
1731425747828:#filter(year >= 2013) %>%  # Only include 2013-2017 data
1731425747828:select(station, year, species, adjusted_density) %>%
1731425747828:pivot_wider(
1731425747829:names_from = species,
1731425747829:values_from = adjusted_density,
1731425747829:values_fill = 0
1731425747829:) %>%
1731425747829:# Store station and year before removing them for NMDS
1731425747829:mutate(
1731425747830:station_temp = station,
1731425747830:year_temp = year
1731425747830:) %>%
1731425747830:select(-station, -year)
1731425750486:# Perform NMDS
1731425750486:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1731425751445:# Extract site scores and add metadata
1731425751446:site_scores <- as.data.frame(scores(nmds, display = "sites"))
1731425752839:site_scores$Station <- species_matrix$station_temp
1731425754696:site_scores$Year <- as.factor(species_matrix$year_temp)  # Convert Year to factor
1731425756004:# Extract species scores
1731425756004:species_scores <- as.data.frame(scores(nmds, display = "species"))
1731425757564:# Calculate species contributions (using relative abundance)
1731425757564:species_rel_abundance <- colSums(select(species_matrix, -station_temp, -year_temp)) /
1731425757564:sum(select(species_matrix, -station_temp, -year_temp))
1731425758086:important_species <- names(sort(species_rel_abundance[species_rel_abundance > 0.01], decreasing = TRUE))
1731425759135:# Filter species scores to only show important species
1731425759136:species_scores_filtered <- species_scores[rownames(species_scores) %in% important_species, ]
1731425760110:env_data <- readRDS("data/raw/sediment_env_data.rds") %>%
1731425760110:select(station, year,
1731425760110:organic_content, depth,
1731425760110:grain_20um, grain_63um, grain_125um,
1731425760111:grain_250um, grain_1000um) %>%
1731425760111:distinct()
1731425761197:sig_env_vectors <- scores(env_fit, "vectors") %>%
1731425761197:as.data.frame() %>%
1731425761197:mutate(variable = rownames(.)) %>%
1731425761197:filter(env_fit$vectors$pvals < 0.05)
1731425779914:# Create the plot
1731425779914:nmds_plot <- ggplot() +
1731425779915:# Base NMDS plot elements
1731425779915:geom_path(data = site_scores,
1731425779915:aes(x = NMDS1, y = NMDS2, color = Station, group = Station),
1731425779915:arrow = arrow(length = unit(0.2, "cm"), type = "closed")) +
1731425779915:geom_point(data = site_scores,
1731425779915:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731425779916:size = 3) +
1731425779916:# Add significant environmental vectors
1731425779916:# geom_segment(data = sig_env_vectors,
1731425779916:#             aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731425779916:#             arrow = arrow(length = unit(0.2, "cm")),
1731425779916:#             color = "darkgrey") +
1731425779917:# geom_text(data = sig_env_vectors,
1731425779917:#           aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731425779917:#           size = 3, color = "darkgrey") +
1731425779917:theme_bw() +
1731425779917:theme(panel.background = element_rect(fill = "white")) +
1731425779918:labs(title = "NMDS of Community Composition (2013-2017)",
1731425779918:caption = "")
1731425785839:# Save plot
1731425785839:ggsave("output/nmds_plot_1999.png", nmds_plot, width = 10, height = 8, bg = "white")
1731425859588:nmds_plot <- ggplot() +
1731425859588:# Add points for sites
1731425859588:geom_point(data = site_scores,
1731425859588:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731425859589:size = 3) +
1731425859589:# Add smaller ellipses around years with solid lines
1731425859589:stat_ellipse(data = site_scores,
1731425859589:aes(x = NMDS1, y = NMDS2, group = Year),
1731425859589:type = "norm",
1731425859589:level = 0.7,
1731425859589:linetype = 1,
1731425859590:size = 0.5) +
1731425859590:# Add significant environmental vectors
1731425859590:geom_segment(data = sig_env_vectors,
1731425859590:aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731425859590:arrow = arrow(length = unit(0.2, "cm")),
1731425859590:color = "darkgrey") +
1731425859591:geom_text(data = sig_env_vectors,
1731425859591:aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731425859591:size = 3, color = "darkgrey") +
1731425859591:theme_bw() +
1731425859591:theme(
1731425859591:panel.background = element_rect(fill = "white"),
1731425859592:axis.text = element_text(size = 12, color = "black"),  # Larger axis text
1731425859592:axis.title = element_text(size = 14),                  # Larger axis titles
1731425859592:legend.text = element_text(size = 12),                 # Larger legend text
1731425859592:legend.title = element_text(size = 12, face = "bold"), # Larger legend titles
1731425859592:plot.title = element_text(size = 16, face = "bold")    # Larger plot title
1731425859593:) +
1731425859593:labs(title = "NMDS of Community Composition (2013-2017)",
1731425859593:caption = "") +
1731425859593:guides(color = guide_legend("Station"),
1731425859594:shape = guide_legend("Year"))
1731425859607:# Save with higher resolution and size
1731425859607:ggsave("output/nmds_plot_1999.png",
1731425859608:nmds_plot,
1731425859608:width = 12,      # Increased width
1731425859608:height = 10,     # Increased height
1731425859608:dpi = 300,       # Higher resolution
1731425859608:bg = "white")
1731425885343:# Create the plot
1731425885344:nmds_plot <- ggplot() +
1731425885344:# Add points for sites
1731425885344:geom_point(data = site_scores,
1731425885344:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731425885344:size = 3) +
1731425885344:# Add smaller ellipses around years with solid lines
1731425885345:stat_ellipse(data = site_scores,
1731425885345:aes(x = NMDS1, y = NMDS2, group = Year),
1731425885345:type = "norm",
1731425885345:level = 0.7,
1731425885345:linetype = 1,
1731425885345:size = 0.5) +
1731425885346:# Add significant environmental vectors
1731425885346:# geom_segment(data = sig_env_vectors,
1731425885346:#              aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731425885346:#              arrow = arrow(length = unit(0.2, "cm")),
1731425885346:#              color = "darkgrey") +
1731425885346:# geom_text(data = sig_env_vectors,
1731425885347:#           aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731425885347:#           size = 3, color = "darkgrey") +
1731425885347:theme_bw() +
1731425885347:theme(
1731425885347:panel.background = element_rect(fill = "white"),
1731425885348:axis.text = element_text(size = 12, color = "black"),  # Larger axis text
1731425885348:axis.title = element_text(size = 14),                  # Larger axis titles
1731425885348:legend.text = element_text(size = 12),                 # Larger legend text
1731425885348:legend.title = element_text(size = 12, face = "bold"), # Larger legend titles
1731425885348:plot.title = element_text(size = 16, face = "bold")    # Larger plot title
1731425885349:) +
1731425885349:labs(title = "NMDS of Community Composition (2013-2017)",
1731425885349:caption = "") +
1731425885349:guides(color = guide_legend("Station"),
1731425885349:shape = guide_legend("Year"))
1731425886435:# Save with higher resolution and size
1731425886436:ggsave("output/nmds_plot_1999.png",
1731425886436:nmds_plot,
1731425886436:width = 12,      # Increased width
1731425886436:height = 10,     # Increased height
1731425886436:dpi = 300,       # Higher resolution
1731425886437:bg = "white")
1731426417333:henda <- read_csv(
1731426417333:"data/processed/hendaB.csv",
1731426417333:col_types = cols(
1731426417333:Year = col_integer(),
1731426417333:Flokkun = col_character(),  # Ensure Flokkun is read as character
1731426417334:A7 = col_integer(),
1731426417334:B5 = col_integer(),
1731426417334:B8 = col_integer(),
1731426417334:C4 = col_integer(),
1731426417334:E3 = col_integer(),
1731426417335:E4 = col_integer()
1731426417335:),
1731426417335:na = c("", "NA")
1731426417335:) %>%
1731426417335:mutate(across(where(is.numeric), ~ replace_na(., 0)))  %>% # Replace NA with 0 for numeric columns
1731426417336:select(Flokkun:last_col())
1731426427199:henda
1731426450765:df
1731426463316:df_result
1731426631147:df %>% select(station,year,species,adjusted_density)
1731426653420:df %>% select(station,year,species,round(adjusted_density))
1731426707885:henda
1731426743190:# Transform henda from wide to long format
1731426743190:henda_long <- henda %>%
1731426743190:pivot_longer(cols = starts_with("A"):starts_with("E"), # Select station columns
1731426743190:names_to = "station",                     # New column for station names
1731426743191:values_to = "adjusted_density") %>%       # New column for density values
1731426743191:rename(species = Flokkun,                              # Rename 'Flokkun' to 'species'
1731426743191:year = Year) %>%                                # Rename 'Year' to 'year'
1731426743191:select(station, year, species, adjusted_density)       # Select and order columns
1731426743200:# Display the transformed data
1731426743200:print(henda_long, n = 10)  ''
1731426745560:# Transform henda from wide to long format
1731426745560:henda_long <- henda %>%
1731426745560:pivot_longer(cols = starts_with("A"):starts_with("E"), # Select station columns
1731426745561:names_to = "station",                     # New column for station names
1731426745561:values_to = "adjusted_density") %>%       # New column for density values
1731426745561:rename(species = Flokkun,                              # Rename 'Flokkun' to 'species'
1731426745561:year = Year) %>%                                # Rename 'Year' to 'year'
1731426745561:select(station, year, species, adjusted_density)       # Select and order columns
1731426745570:# Display the transformed data
1731426745570:print(henda_long, n = 10)
1731426856486:# Prepare data for NMDS - exclude 1999 data
1731426856487:#species_matrix <- df %>% #Mín gögn
1731426856487:species_matrix <- henda_long %>% #Gögn Jörundar
1731426856487:#filter(year >= 2013) %>%  # Only include 2013-2017 data
1731426856487:select(station, year, species, adjusted_density) %>%
1731426856487:pivot_wider(
1731426856487:names_from = species,
1731426856488:values_from = adjusted_density,
1731426856488:values_fill = 0
1731426856488:) %>%
1731426856488:# Store station and year before removing them for NMDS
1731426856488:mutate(
1731426856489:station_temp = station,
1731426856489:year_temp = year
1731426856489:) %>%
1731426856489:select(-station, -year)
1731426858255:# Perform NMDS
1731426858255:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1731426859012:# Extract site scores and add metadata
1731426859012:site_scores <- as.data.frame(scores(nmds, display = "sites"))
1731426859354:site_scores$Station <- species_matrix$station_temp
1731426859714:site_scores$Year <- as.factor(species_matrix$year_temp)  # Convert Year to factor
1731426860358:# Extract species scores
1731426860358:species_scores <- as.data.frame(scores(nmds, display = "species"))
1731426861020:# Calculate species contributions (using relative abundance)
1731426861021:species_rel_abundance <- colSums(select(species_matrix, -station_temp, -year_temp)) /
1731426861021:sum(select(species_matrix, -station_temp, -year_temp))
1731426861710:important_species <- names(sort(species_rel_abundance[species_rel_abundance > 0.01], decreasing = TRUE))
1731426862144:# Filter species scores to only show important species
1731426862145:species_scores_filtered <- species_scores[rownames(species_scores) %in% important_species, ]
1731426863597:env_data <- readRDS("data/raw/sediment_env_data.rds") %>%
1731426863598:select(station, year,
1731426863598:organic_content, depth,
1731426863598:grain_20um, grain_63um, grain_125um,
1731426863598:grain_250um, grain_1000um) %>%
1731426863598:distinct()
1731426864437:sig_env_vectors <- scores(env_fit, "vectors") %>%
1731426864437:as.data.frame() %>%
1731426864438:mutate(variable = rownames(.)) %>%
1731426864438:filter(env_fit$vectors$pvals < 0.05)
1731426865724:# Create the plot
1731426865725:nmds_plot <- ggplot() +
1731426865725:# Add points for sites
1731426865725:geom_point(data = site_scores,
1731426865725:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731426865725:size = 3) +
1731426865725:# Add smaller ellipses around years with solid lines
1731426865725:stat_ellipse(data = site_scores,
1731426865726:aes(x = NMDS1, y = NMDS2, group = Year),
1731426865726:type = "norm",
1731426865726:level = 0.7,
1731426865726:linetype = 1,
1731426865726:size = 0.5) +
1731426865726:# Add significant environmental vectors
1731426865727:# geom_segment(data = sig_env_vectors,
1731426865727:#              aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731426865727:#              arrow = arrow(length = unit(0.2, "cm")),
1731426865727:#              color = "darkgrey") +
1731426865727:# geom_text(data = sig_env_vectors,
1731426865727:#           aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731426865728:#           size = 3, color = "darkgrey") +
1731426865728:theme_bw() +
1731426865728:theme(
1731426865728:panel.background = element_rect(fill = "white"),
1731426865728:axis.text = element_text(size = 12, color = "black"),  # Larger axis text
1731426865728:axis.title = element_text(size = 14),                  # Larger axis titles
1731426865729:legend.text = element_text(size = 12),                 # Larger legend text
1731426865729:legend.title = element_text(size = 12, face = "bold"), # Larger legend titles
1731426865729:plot.title = element_text(size = 16, face = "bold")    # Larger plot title
1731426865729:) +
1731426865729:labs(title = "NMDS of Community Composition (2013-2017)",
1731426865729:caption = "") +
1731426865730:guides(color = guide_legend("Station"),
1731426865730:shape = guide_legend("Year"))
1731426869264:# Save with higher resolution and size
1731426869264:ggsave("output/nmds_plot_1999.png",
1731426869264:nmds_plot,
1731426869265:width = 12,      # Increased width
1731426869265:height = 10,     # Increased height
1731426869265:dpi = 300,       # Higher resolution
1731426869265:bg = "white")
1731426916301:# Create the plot
1731426916301:nmds_plot <- ggplot() +
1731426916301:# Add points for sites
1731426916301:geom_point(data = site_scores,
1731426916301:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731426916302:size = 3) +
1731426916302:# Add smaller ellipses around years with solid lines
1731426916302:stat_ellipse(data = site_scores,
1731426916302:aes(x = NMDS1, y = NMDS2, group = Year),
1731426916302:type = "norm",
1731426916302:level = 0.7,
1731426916303:linetype = 1,
1731426916303:size = 0.5) +
1731426916303:# Add significant environmental vectors
1731426916303:# geom_segment(data = sig_env_vectors,
1731426916303:#              aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731426916303:#              arrow = arrow(length = unit(0.2, "cm")),
1731426916304:#              color = "darkgrey") +
1731426916304:# geom_text(data = sig_env_vectors,
1731426916304:#           aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731426916304:#           size = 3, color = "darkgrey") +
1731426916304:theme_bw() +
1731426916304:theme(
1731426916304:panel.background = element_rect(fill = "white"),
1731426916305:axis.text = element_text(size = 12, color = "black"),  # Larger axis text
1731426916305:axis.title = element_text(size = 14),                  # Larger axis titles
1731426916305:legend.text = element_text(size = 12),                 # Larger legend text
1731426916305:legend.title = element_text(size = 12, face = "bold"), # Larger legend titles
1731426916305:plot.title = element_text(size = 16, face = "bold")    # Larger plot title
1731426916306:) +
1731426916306:labs(title = "NMDS of Community Composition (1999 and 2013-2017)",
1731426916306:caption = "") +
1731426916306:guides(color = guide_legend("Station"),
1731426916306:shape = guide_legend("Year"))
1731426918094:# Save with higher resolution and size
1731426918094:ggsave("output/nmds_plot_1999.png",
1731426918094:nmds_plot,
1731426918095:width = 12,      # Increased width
1731426918095:height = 10,     # Increased height
1731426918095:dpi = 300,       # Higher resolution
1731426918095:bg = "white")
1731426930949:# Create the plot
1731426930949:nmds_plot <- ggplot() +
1731426930950:# Add points for sites
1731426930950:geom_point(data = site_scores,
1731426930950:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731426930950:size = 3) +
1731426930950:# Add smaller ellipses around years with solid lines
1731426930951:# stat_ellipse(data = site_scores,
1731426930951:#              aes(x = NMDS1, y = NMDS2, group = Year),
1731426930951:#              type = "norm",
1731426930951:#              level = 0.7,
1731426930951:#              linetype = 1,
1731426930951:#              size = 0.5) +
1731426930952:# Add significant environmental vectors
1731426930952:# geom_segment(data = sig_env_vectors,
1731426930952:#              aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731426930952:#              arrow = arrow(length = unit(0.2, "cm")),
1731426930952:#              color = "darkgrey") +
1731426930952:# geom_text(data = sig_env_vectors,
1731426930952:#           aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731426930953:#           size = 3, color = "darkgrey") +
1731426930953:theme_bw() +
1731426930953:theme(
1731426930953:panel.background = element_rect(fill = "white"),
1731426930953:axis.text = element_text(size = 12, color = "black"),  # Larger axis text
1731426930954:axis.title = element_text(size = 14),                  # Larger axis titles
1731426930954:legend.text = element_text(size = 12),                 # Larger legend text
1731426930954:legend.title = element_text(size = 12, face = "bold"), # Larger legend titles
1731426930954:plot.title = element_text(size = 16, face = "bold")    # Larger plot title
1731426930954:) +
1731426930955:labs(title = "NMDS of Community Composition (1999 and 2013-2017)",
1731426930955:caption = "") +
1731426930955:guides(color = guide_legend("Station"),
1731426930955:shape = guide_legend("Year"))
1731426954150:# Save with higher resolution and size
1731426954151:ggsave("output/nmds_plot_1999-Ekki_hringir.png",
1731426954151:nmds_plot,
1731426954151:width = 12,      # Increased width
1731426954151:height = 10,     # Increased height
1731426954151:dpi = 300,       # Higher resolution
1731426954152:bg = "white")
1731427318438:unique_species_per_year <- henda_long %>%
1731427318438:group_by(year) %>%
1731427318438:distinct(species) %>%
1731427318438:group_by(species) %>%
1731427318438:filter(n() == 1) %>%
1731427318439:ungroup() %>%
1731427318439:group_by(year) %>%
1731427318439:summarise(unique_species_count = n(), unique_species = list(species))
1731427318455:# Print the results
1731427318455:rass <- unique_species_per_year %>%
1731427318455:mutate(species_list = map_chr(unique_species, ~ paste(.x, collapse = ", "))) %>%
1731427318455:select(year, unique_species_count, species_list) %>%
1731427318455:print(n = Inf)
1731427325925:rass
1731427341557:t(rass)
1731488346345:henda <- read_csv(
1731488346346:"data/processed/hendaB.csv",
1731488346346:na = c("", "NA")
1731488346346:)
1731488367470:table(henda$Phylum)
1731488373175:table(henda$Class)
1731488461465:henda <- read_csv(
1731488461465:"data/processed/hendaB.csv",
1731488461465:col_types = cols(
1731488461465:Year = col_integer(),
1731488461466:Flokkun = col_character(),  # Ensure Flokkun is read as character
1731488461466:A7 = col_integer(),
1731488461466:B5 = col_integer(),
1731488461466:B8 = col_integer(),
1731488461466:C4 = col_integer(),
1731488461466:E3 = col_integer(),
1731488461466:E4 = col_integer()
1731488461466:),
1731488461467:na = c("", "NA")
1731488461467:) %>%
1731488461467:mutate(across(where(is.numeric), ~ replace_na(., 0)))  %>% # Replace NA with 0 for numeric columns
1731488461467:select(Flokkun:last_col())
1731488461507:# breyta á long format
1731488461507:library(dplyr)
1731488461507:library(tidyr)
1731488461508:# Transform henda from wide to long format
1731488461508:henda_long <- henda %>%
1731488461508:pivot_longer(cols = starts_with("A"):starts_with("E"), # Select station columns
1731488461508:names_to = "station",                     # New column for station names
1731488461508:values_to = "adjusted_density") %>%       # New column for density values
1731488461508:rename(species = Flokkun,                              # Rename 'Flokkun' to 'species'
1731488461508:year = Year) %>%                                # Rename 'Year' to 'year'
1731488461508:select(station, year, species, adjusted_density)
1731488480304:table(henda_long$station)
1731488521959:str(henda)
1731488772970:# Transform henda from wide to long format
1731488772970:henda_long <- henda %>%
1731488772971:pivot_longer(cols = c("A7","B5", "B8",  "C4",  "E3", "E4") , # Select station columns
1731488772971:names_to = "station",                     # New column for station names
1731488772971:values_to = "adjusted_density") %>%       # New column for density values
1731488772971:rename(species = Flokkun,                              # Rename 'Flokkun' to 'species'
1731488772971:year = Year) %>%                                # Rename 'Year' to 'year'
1731488772971:select(station, year, species, adjusted_density)       # Select and order columns
1731488815848:table(henda_long$station)
1731488828536:henda_long
1731488839920:# Prepare data for NMDS - exclude 1999 data
1731488839920:#species_matrix <- df %>% #Mín gögn
1731488839920:species_matrix <- henda_long %>% #Gögn Jörundar
1731488839920:#filter(year >= 2013) %>%  # Only include 2013-2017 data
1731488839920:select(station, year, species, adjusted_density) %>%
1731488839920:pivot_wider(
1731488839920:names_from = species,
1731488839921:values_from = adjusted_density,
1731488839921:values_fill = 0
1731488839921:) %>%
1731488839921:# Store station and year before removing them for NMDS
1731488839921:mutate(
1731488839921:station_temp = station,
1731488839921:year_temp = year
1731488839922:) %>%
1731488839922:select(-station, -year)
1731488841079:# Perform NMDS
1731488841079:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1731488849496:# Load required packages
1731488849496:library(vegan)
1731488849730:library(ggplot2)
1731488858416:install.packages("vegan")
1731488869426:# Perform NMDS
1731488869426:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1731488879582:library(vegan)
1731488884344:# Perform NMDS
1731488884344:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1731488885783:# Extract site scores and add metadata
1731488885783:site_scores <- as.data.frame(scores(nmds, display = "sites"))
1731488886123:site_scores$Station <- species_matrix$station_temp
1731488886443:site_scores$Year <- as.factor(species_matrix$year_temp)  # Convert Year to factor
1731488886850:# Extract species scores
1731488886850:species_scores <- as.data.frame(scores(nmds, display = "species"))
1731488887274:# Calculate species contributions (using relative abundance)
1731488887275:species_rel_abundance <- colSums(select(species_matrix, -station_temp, -year_temp)) /
1731488887275:sum(select(species_matrix, -station_temp, -year_temp))
1731488887907:important_species <- names(sort(species_rel_abundance[species_rel_abundance > 0.01], decreasing = TRUE))
1731488888442:# Filter species scores to only show important species
1731488888442:species_scores_filtered <- species_scores[rownames(species_scores) %in% important_species, ]
1731488889841:env_data <- readRDS("data/raw/sediment_env_data.rds") %>%
1731488889841:select(station, year,
1731488889841:organic_content, depth,
1731488889841:grain_20um, grain_63um, grain_125um,
1731488889842:grain_250um, grain_1000um) %>%
1731488889842:distinct()
1731488890785:sig_env_vectors <- scores(env_fit, "vectors") %>%
1731488890785:as.data.frame() %>%
1731488890785:mutate(variable = rownames(.)) %>%
1731488890785:filter(env_fit$vectors$pvals < 0.05)
1731488891877:# Create the plot
1731488891878:nmds_plot <- ggplot() +
1731488891878:# Add points for sites
1731488891878:geom_point(data = site_scores,
1731488891878:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731488891878:size = 3) +
1731488891878:# Add smaller ellipses around years with solid lines
1731488891878:# stat_ellipse(data = site_scores,
1731488891879:#              aes(x = NMDS1, y = NMDS2, group = Year),
1731488891879:#              type = "norm",
1731488891879:#              level = 0.7,
1731488891879:#              linetype = 1,
1731488891879:#              size = 0.5) +
1731488891879:# Add significant environmental vectors
1731488891879:# geom_segment(data = sig_env_vectors,
1731488891879:#              aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731488891880:#              arrow = arrow(length = unit(0.2, "cm")),
1731488891880:#              color = "darkgrey") +
1731488891880:# geom_text(data = sig_env_vectors,
1731488891880:#           aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731488891880:#           size = 3, color = "darkgrey") +
1731488891880:theme_bw() +
1731488891881:theme(
1731488891881:panel.background = element_rect(fill = "white"),
1731488891881:axis.text = element_text(size = 12, color = "black"),  # Larger axis text
1731488891881:axis.title = element_text(size = 14),                  # Larger axis titles
1731488891881:legend.text = element_text(size = 12),                 # Larger legend text
1731488891881:legend.title = element_text(size = 12, face = "bold"), # Larger legend titles
1731488891882:plot.title = element_text(size = 16, face = "bold")    # Larger plot title
1731488891882:) +
1731488891882:labs(title = "NMDS of Community Composition (1999 and 2013-2017)",
1731488891882:caption = "") +
1731488891882:guides(color = guide_legend("Station"),
1731488891883:shape = guide_legend("Year"))
1731488914785:# Save with higher resolution and size
1731488914785:ggsave("output/nmds_plot_1999.png",
1731488914786:nmds_plot,
1731488914786:width = 12,      # Increased width
1731488914786:height = 10,     # Increased height
1731488914786:dpi = 300,       # Higher resolution
1731488914786:bg = "white")
1731488992202:# Save with higher resolution and size
1731488992203:ggsave("output/nmds_plot_1999_an-hringja.png",
1731488992203:nmds_plot,
1731488992203:width = 12,      # Increased width
1731488992203:height = 10,     # Increased height
1731488992203:dpi = 300,       # Higher resolution
1731488992203:bg = "white")
1731489005296:# Create the plot
1731489005297:nmds_plot <- ggplot() +
1731489005297:# Add points for sites
1731489005297:geom_point(data = site_scores,
1731489005297:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731489005297:size = 3) +
1731489005297:# Add smaller ellipses around years with solid lines
1731489005297:stat_ellipse(data = site_scores,
1731489005297:aes(x = NMDS1, y = NMDS2, group = Year),
1731489005298:type = "norm",
1731489005298:level = 0.7,
1731489005298:linetype = 1,
1731489005298:size = 0.5) +
1731489005298:# Add significant environmental vectors
1731489005298:# geom_segment(data = sig_env_vectors,
1731489005299:#              aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731489005299:#              arrow = arrow(length = unit(0.2, "cm")),
1731489005299:#              color = "darkgrey") +
1731489005299:# geom_text(data = sig_env_vectors,
1731489005299:#           aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731489005299:#           size = 3, color = "darkgrey") +
1731489005299:theme_bw() +
1731489005300:theme(
1731489005300:panel.background = element_rect(fill = "white"),
1731489005300:axis.text = element_text(size = 12, color = "black"),  # Larger axis text
1731489005300:axis.title = element_text(size = 14),                  # Larger axis titles
1731489005301:legend.text = element_text(size = 12),                 # Larger legend text
1731489005301:legend.title = element_text(size = 12, face = "bold"), # Larger legend titles
1731489005301:plot.title = element_text(size = 16, face = "bold")    # Larger plot title
1731489005301:) +
1731489005302:labs(title = "NMDS of Community Composition (1999 and 2013-2017)",
1731489005302:caption = "") +
1731489005302:guides(color = guide_legend("Station"),
1731489005302:shape = guide_legend("Year"))
1731489006801:# Save with higher resolution and size
1731489006801:ggsave("output/nmds_plot_1999.png",
1731489006801:nmds_plot,
1731489006801:width = 12,      # Increased width
1731489006802:height = 10,     # Increased height
1731489006802:dpi = 300,       # Higher resolution
1731489006802:bg = "white")
1731489524337:# Load cleaned data
1731489524337:#df_result <- result # just so this won't be accidentally changed
1731489524337:df <- df_result
1731489528529:df
1731489537071:df$species
1731489545768:henda_long$species
1731489640288:henda_long
1731489737985:library(dplyr)
1731489737985:library(stringr)
1731489737986:# Filter for species containing "sp."
1731489737986:species_sp <- henda_long %>%
1731489737986:filter(str_detect(species, "sp\\.")) %>%
1731489737986:arrange(year, species) %>%
1731489737986:select(year, station, species, adjusted_density)
1731489738002:# Print all matching rows
1731489738002:print(species_sp, n = Inf)
1731489803314:library(dplyr)
1731489803314:library(stringr)
1731489803315:# Filter for species containing "sp."
1731489803315:species_sp <- henda_long %>%
1731489803315:filter(str_detect(species, "sp\\.|sp)) %>%
1731489803315:arrange(year, species) %>%
1731489803315:select(year, station, species, adjusted_density)
1731489803316:# Print all matching rows
1731489803316:print(species_sp, n = Inf)
1731489811664:library(dplyr)
1731489811665:library(stringr)
1731489811665:# Filter for species containing "sp."
1731489811665:species_sp <- henda_long %>%
1731489811665:filter(str_detect(species, "sp\\.|sp")) %>%
1731489811666:arrange(year, species) %>%
1731489811666:select(year, station, species, adjusted_density)
1731489811672:# Print all matching rows
1731489811673:print(species_sp, n = Inf)
1731489910808:comparison <- henda_long %>%
1731489910808:select(species) %>%
1731489910808:distinct() %>%
1731489910808:mutate(cleaned_name = str_replace(species, " sp\\.", "")) %>%
1731489910808:filter(species != cleaned_name)
1731489910815:print(comparison, n = Inf)
1731490038666:library(dplyr)
1731490038666:# Get the matching species only
1731490038667:henda_long_matched <- henda_long_cleaned %>%
1731490038667:semi_join(df, by = "species")
1731490048682:library(dplyr)
1731490048683:library(stringr)
1731490048683:# Remove " sp." from species names
1731490048683:henda_long_cleaned <- henda_long %>%
1731490048683:mutate(species = str_replace(species, " sp\\.", ""))
1731490048687:# Print a few rows to verify the changes
1731490048687:print(henda_long_cleaned, n = 20)
1731490054857:library(dplyr)
1731490054858:# Get the matching species only
1731490054858:henda_long_matched <- henda_long_cleaned %>%
1731490054858:semi_join(df, by = "species")
1731490054863:# Print the number of rows before and after matching
1731490054863:cat("Original rows in henda_long_cleaned:", nrow(henda_long_cleaned), "\n")
1731490054863:cat("Rows after matching with df:", nrow(henda_long_matched), "\n")
1731490054864:# To see which species were removed
1731490054864:removed_species <- henda_long_cleaned %>%
1731490054864:anti_join(df, by = "species") %>%
1731490054865:distinct(species) %>%
1731490054865:arrange(species)
1731490054871:cat("\nSpecies that were removed:\n")
1731490054872:print(removed_species, n = Inf)
1731490705395:library(dplyr)
1731490705396:# Get the matching species only
1731490705396:henda_long_matched <- henda_long_cleaned %>%
1731490705396:semi_join(df, by = "species")
1731490705398:# Print the number of rows before and after matching
1731490705398:cat("Original rows in henda_long_cleaned:", nrow(henda_long_cleaned), "\n")
1731490705399:cat("Rows after matching with df:", nrow(henda_long_matched), "\n")
1731490705399:# To see which species were removed and their counts
1731490705400:removed_species <- henda_long_cleaned %>%
1731490705400:anti_join(df, by = "species") %>%
1731490705400:group_by(species) %>%
1731490705400:summarise(
1731490705400:count = n(),
1731490705400:total_abundance = sum(adjusted_density),
1731490705401:years = n_distinct(year),
1731490705401:stations = n_distinct(station)
1731490705401:) %>%
1731490705401:arrange(desc(count))
1731490705412:cat("\nSpecies that were removed (with counts):\n")
1731490705412:print(removed_species, n = Inf)
1731490705439:# Summary statistics of removed data
1731490705439:cat("\nSummary of removed data:\n")
1731490705439:cat("Total number of removed species:", nrow(removed_species), "\n")
1731490705439:cat("Total number of removed observations:", sum(removed_species$count), "\n")
1731490705440:cat("Total abundance removed:", sum(removed_species$total_abundance), "\n")
1731490872019:# Original data frame: henda_long
1731490872019:# Cleaned version: henda_long_cleaned
1731490872019:henda_long_cleaned <- henda_long %>%
1731490872019:mutate(species = str_replace(species, " sp\\.", ""))
1731490872022:# Matched version: henda_long_matched
1731490872023:henda_long_matched <- henda_long_cleaned %>%
1731490872023:semi_join(df, by = "species")
1731490872025:# Summary of changes
1731490872025:cat("Data Cleaning Summary:\n")
1731490872026:cat("Original rows in henda_long:", nrow(henda_long), "\n")
1731490872026:cat("Rows after removing 'sp.':", nrow(henda_long_cleaned), "\n")
1731490872027:cat("Final rows after species matching:", nrow(henda_long_matched), "\n")
1731490872027:# Species removed during matching
1731490872027:removed_species <- henda_long_cleaned %>%
1731490872028:anti_join(df, by = "species") %>%
1731490872028:group_by(species) %>%
1731490872028:summarise(
1731490872028:count = n(),
1731490872028:total_abundance = sum(adjusted_density),
1731490872028:years = n_distinct(year),
1731490872029:stations = n_distinct(station)
1731490872029:) %>%
1731490872029:arrange(desc(count))
1731490872036:cat("\nRemoved Species Summary:\n")
1731490872036:cat("Number of species removed:", nrow(removed_species), "\n")
1731490872037:cat("Total observations removed:", sum(removed_species$count), "\n")
1731490872037:cat("Total abundance removed:", sum(removed_species$total_abundance), "\n")
1731490872038:print("\nDetailed list of removed species:")
1731490872038:print(removed_species, n = Inf)
1731490913490:# Prepare data for NMDS - exclude 1999 data
1731490913490:#species_matrix <- df %>% #Mín gögn
1731490913491:species_matrix <- removed_species %>% #Gögn Jörundar
1731490913491:#filter(year >= 2013) %>%  # Only include 2013-2017 data
1731490913491:select(station, year, species, adjusted_density) %>%
1731490913491:pivot_wider(
1731490913492:names_from = species,
1731490913492:values_from = adjusted_density,
1731490913492:values_fill = 0
1731490913492:) %>%
1731490913492:# Store station and year before removing them for NMDS
1731490913492:mutate(
1731490913493:station_temp = station,
1731490913493:year_temp = year
1731490913493:) %>%
1731490913493:select(-station, -year)
1731490914329:# Perform NMDS
1731490914330:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1731490914946:# Extract site scores and add metadata
1731490914947:site_scores <- as.data.frame(scores(nmds, display = "sites"))
1731490915133:site_scores$Station <- species_matrix$station_temp
1731490915326:site_scores$Year <- as.factor(species_matrix$year_temp)  # Convert Year to factor
1731490915659:# Extract species scores
1731490915659:species_scores <- as.data.frame(scores(nmds, display = "species"))
1731490916042:# Calculate species contributions (using relative abundance)
1731490916043:species_rel_abundance <- colSums(select(species_matrix, -station_temp, -year_temp)) /
1731490916043:sum(select(species_matrix, -station_temp, -year_temp))
1731490916468:important_species <- names(sort(species_rel_abundance[species_rel_abundance > 0.01], decreasing = TRUE))
1731490917312:# Filter species scores to only show important species
1731490917312:species_scores_filtered <- species_scores[rownames(species_scores) %in% important_species, ]
1731490918440:env_data <- readRDS("data/raw/sediment_env_data.rds") %>%
1731490918440:select(station, year,
1731490918440:organic_content, depth,
1731490918440:grain_20um, grain_63um, grain_125um,
1731490918441:grain_250um, grain_1000um) %>%
1731490918441:distinct()
1731490918867:sig_env_vectors <- scores(env_fit, "vectors") %>%
1731490918867:as.data.frame() %>%
1731490918867:mutate(variable = rownames(.)) %>%
1731490918867:filter(env_fit$vectors$pvals < 0.05)
1731490921023:# Create the plot
1731490921024:nmds_plot <- ggplot() +
1731490921024:# Add points for sites
1731490921024:geom_point(data = site_scores,
1731490921024:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731490921024:size = 3) +
1731490921024:# Add smaller ellipses around years with solid lines
1731490921025:stat_ellipse(data = site_scores,
1731490921025:aes(x = NMDS1, y = NMDS2, group = Year),
1731490921025:type = "norm",
1731490921025:level = 0.7,
1731490921025:linetype = 1,
1731490921026:size = 0.5) +
1731490921026:# Add significant environmental vectors
1731490921026:# geom_segment(data = sig_env_vectors,
1731490921026:#              aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731490921026:#              arrow = arrow(length = unit(0.2, "cm")),
1731490921026:#              color = "darkgrey") +
1731490921027:# geom_text(data = sig_env_vectors,
1731490921027:#           aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731490921027:#           size = 3, color = "darkgrey") +
1731490921027:theme_bw() +
1731490921027:theme(
1731490921027:panel.background = element_rect(fill = "white"),
1731490921028:axis.text = element_text(size = 12, color = "black"),  # Larger axis text
1731490921028:axis.title = element_text(size = 14),                  # Larger axis titles
1731490921028:legend.text = element_text(size = 12),                 # Larger legend text
1731490921028:legend.title = element_text(size = 12, face = "bold"), # Larger legend titles
1731490921028:plot.title = element_text(size = 16, face = "bold")    # Larger plot title
1731490921029:) +
1731490921029:labs(title = "NMDS of Community Composition (1999 and 2013-2017)",
1731490921029:caption = "") +
1731490921029:guides(color = guide_legend("Station"),
1731490921030:shape = guide_legend("Year"))
1731490929640:# Save with higher resolution and size
1731490929640:ggsave("output/nmds_plot_1999.png",
1731490929641:nmds_plot,
1731490929641:width = 12,      # Increased width
1731490929641:height = 10,     # Increased height
1731490929641:dpi = 300,       # Higher resolution
1731490929641:bg = "white")
1731491041505:rass <- unique_species_per_year %>%
1731491041505:mutate(species_list = map_chr(unique_species, ~ paste(.x, collapse = ", "))) %>%
1731491041506:select(year, unique_species_count, species_list) %>%
1731491041506:print(n = Inf)
1731491041538:rass
1731491041565:t(rass)
1731491070777:unique_species_per_year <- removed_species %>%
1731491070778:group_by(year) %>%
1731491070778:distinct(species) %>%
1731491070778:group_by(species) %>%
1731491070778:filter(n() == 1) %>%
1731491070778:ungroup() %>%
1731491070778:group_by(year) %>%
1731491070779:summarise(unique_species_count = n(), unique_species = list(species))
1731491089089:str(removed_species)
1731491372816:# Required packages
1731491372816:library(dplyr)
1731491372817:library(stringr)
1731491372817:# Step 1: Remove " sp." from species names
1731491372817:henda_long_cleaned <- henda_long %>%
1731491372818:mutate(species = str_replace(species, " sp\\.", ""))
1731491372821:# Step 2: Match with reference dataset and remove non-matching species
1731491372821:henda_long_matched <- henda_long_cleaned %>%
1731491372821:semi_join(df, by = "species")
1731491372824:# Step 3: Quick validation check
1731491372824:cat("Data Cleaning Summary:\n",
1731491372824:"Original rows:", nrow(henda_long), "\n",
1731491372824:"Final rows:", nrow(henda_long_matched), "\n",
1731491372825:"Rows removed:", nrow(henda_long) - nrow(henda_long_matched), "\n")
1731491372826:# Step 4: View removed species for validation
1731491372826:removed_species <- henda_long_cleaned %>%
1731491372826:anti_join(df, by = "species") %>%
1731491372826:group_by(species) %>%
1731491372826:summarise(
1731491372826:observations = n(),
1731491372826:total_abundance = sum(adjusted_density),
1731491372827:years = paste(sort(unique(year)), collapse = ", "),
1731491372827:stations = paste(sort(unique(station)), collapse = ", ")
1731491372827:) %>%
1731491372827:arrange(desc(observations))
1731491372835:# Print removed species summary
1731491372835:print(removed_species, n = Inf, width = Inf)
1731491487378:# Prepare data for NMDS - exclude 1999 data
1731491487378:#species_matrix <- df %>% #Mín gögn
1731491487378:species_matrix <- henda_long_matched %>% #Gögn Jörundar
1731491487378:#filter(year >= 2013) %>%  # Only include 2013-2017 data
1731491487379:select(station, year, species, adjusted_density) %>%
1731491487379:pivot_wider(
1731491487379:names_from = species,
1731491487379:values_from = adjusted_density,
1731491487379:values_fill = 0
1731491487379:) %>%
1731491487379:# Store station and year before removing them for NMDS
1731491487380:mutate(
1731491487380:station_temp = station,
1731491487380:year_temp = year
1731491487380:) %>%
1731491487380:select(-station, -year)
1731491487576:# Perform NMDS
1731491487577:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1731491487735:# Extract site scores and add metadata
1731491487735:site_scores <- as.data.frame(scores(nmds, display = "sites"))
1731491488235:site_scores$Station <- species_matrix$station_temp
1731491488587:site_scores$Year <- as.factor(species_matrix$year_temp)  # Convert Year to factor
1731491488914:# Extract species scores
1731491488914:species_scores <- as.data.frame(scores(nmds, display = "species"))
1731491489402:# Calculate species contributions (using relative abundance)
1731491489402:species_rel_abundance <- colSums(select(species_matrix, -station_temp, -year_temp)) /
1731491489402:sum(select(species_matrix, -station_temp, -year_temp))
1731491489780:important_species <- names(sort(species_rel_abundance[species_rel_abundance > 0.01], decreasing = TRUE))
1731491490162:# Filter species scores to only show important species
1731491490162:species_scores_filtered <- species_scores[rownames(species_scores) %in% important_species, ]
1731491490681:env_data <- readRDS("data/raw/sediment_env_data.rds") %>%
1731491490682:select(station, year,
1731491490682:organic_content, depth,
1731491490682:grain_20um, grain_63um, grain_125um,
1731491490682:grain_250um, grain_1000um) %>%
1731491490682:distinct()
1731491491265:sig_env_vectors <- scores(env_fit, "vectors") %>%
1731491491266:as.data.frame() %>%
1731491491266:mutate(variable = rownames(.)) %>%
1731491491266:filter(env_fit$vectors$pvals < 0.05)
1731491491603:# Create the plot
1731491491603:nmds_plot <- ggplot() +
1731491491603:# Add points for sites
1731491491603:geom_point(data = site_scores,
1731491491603:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731491491604:size = 3) +
1731491491604:# Add smaller ellipses around years with solid lines
1731491491604:stat_ellipse(data = site_scores,
1731491491604:aes(x = NMDS1, y = NMDS2, group = Year),
1731491491604:type = "norm",
1731491491604:level = 0.7,
1731491491605:linetype = 1,
1731491491605:size = 0.5) +
1731491491605:# Add significant environmental vectors
1731491491605:# geom_segment(data = sig_env_vectors,
1731491491605:#              aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731491491606:#              arrow = arrow(length = unit(0.2, "cm")),
1731491491606:#              color = "darkgrey") +
1731491491606:# geom_text(data = sig_env_vectors,
1731491491606:#           aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731491491606:#           size = 3, color = "darkgrey") +
1731491491606:theme_bw() +
1731491491607:theme(
1731491491607:panel.background = element_rect(fill = "white"),
1731491491607:axis.text = element_text(size = 12, color = "black"),  # Larger axis text
1731491491607:axis.title = element_text(size = 14),                  # Larger axis titles
1731491491607:legend.text = element_text(size = 12),                 # Larger legend text
1731491491607:legend.title = element_text(size = 12, face = "bold"), # Larger legend titles
1731491491608:plot.title = element_text(size = 16, face = "bold")    # Larger plot title
1731491491608:) +
1731491491608:labs(title = "NMDS of Community Composition (1999 and 2013-2017)",
1731491491608:caption = "") +
1731491491608:guides(color = guide_legend("Station"),
1731491491609:shape = guide_legend("Year"))
1731491492986:# Save with higher resolution and size
1731491492986:ggsave("output/nmds_plot_1999.png",
1731491492987:nmds_plot,
1731491492987:width = 12,      # Increased width
1731491492987:height = 10,     # Increased height
1731491492987:dpi = 300,       # Higher resolution
1731491492987:bg = "white")
1731491581089:unique_species_per_year <- henda_long_matched %>%
1731491581089:group_by(year) %>%
1731491581089:distinct(species) %>%
1731491581089:group_by(species) %>%
1731491581089:filter(n() == 1) %>%
1731491581089:ungroup() %>%
1731491581090:group_by(year) %>%
1731491581090:summarise(unique_species_count = n(), unique_species = list(species))
1731491581110:# Print the results
1731491581110:rass <- unique_species_per_year %>%
1731491581110:mutate(species_list = map_chr(unique_species, ~ paste(.x, collapse = ", "))) %>%
1731491581110:select(year, unique_species_count, species_list) %>%
1731491581110:print(n = Inf)
1731491581144:rass
1731491581179:t(rass)
1731493515945:# Create the plot
1731493515946:nmds_plot <- ggplot() +
1731493515946:# Add points for sites
1731493515946:geom_point(data = site_scores,
1731493515946:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1731493515946:size = 3) +
1731493515947:# Add smaller ellipses around years with solid lines
1731493515947:# stat_ellipse(data = site_scores,
1731493515947:#              aes(x = NMDS1, y = NMDS2, group = Year),
1731493515947:#              type = "norm",
1731493515947:#              level = 0.7,
1731493515947:#              linetype = 1,
1731493515948:#              size = 0.5) +
1731493515948:# Add significant environmental vectors
1731493515948:# geom_segment(data = sig_env_vectors,
1731493515948:#              aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1731493515948:#              arrow = arrow(length = unit(0.2, "cm")),
1731493515948:#              color = "darkgrey") +
1731493515948:# geom_text(data = sig_env_vectors,
1731493515949:#           aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1731493515949:#           size = 3, color = "darkgrey") +
1731493515949:theme_bw() +
1731493515949:theme(
1731493515949:panel.background = element_rect(fill = "white"),
1731493515949:axis.text = element_text(size = 12, color = "black"),  # Larger axis text
1731493515950:axis.title = element_text(size = 14),                  # Larger axis titles
1731493515950:legend.text = element_text(size = 12),                 # Larger legend text
1731493515950:legend.title = element_text(size = 12, face = "bold"), # Larger legend titles
1731493515950:plot.title = element_text(size = 16, face = "bold")    # Larger plot title
1731493515950:) +
1731493515951:labs(title = "NMDS of Community Composition (1999 and 2013-2017)",
1731493515951:caption = "") +
1731493515951:guides(color = guide_legend("Station"),
1731493515951:shape = guide_legend("Year"))
1731493535712:# Save with higher resolution and size
1731493535712:ggsave("output/nmds_plot_1999_an-hringja.png",
1731493535713:nmds_plot,
1731493535713:width = 12,      # Increased width
1731493535713:height = 10,     # Increased height
1731493535713:dpi = 300,       # Higher resolution
1731493535713:bg = "white")
1731599597636:# Example data for two stations
1731599597636:station1 <- data.frame(
1731599597636:species = c("Scoloplos armiger", "Eteone longa", "ostracoda", "harpacti", "nematoda", "krabba lirfa", "Capitella capitata", "Malacoceros fuliginosus", "amphipoda", "spionidae"),
1731599597636:count = c(190, 1, 1, 4, 2, 1, 1, 24, 2, 1)
1731599597637:)
1731599599945:station1
1731599808547:# Example data for two stations
1731599808547:station1 <- data.frame(
1731599808547:species = c("Scoloplos armiger", "Eteone longa", "ostracoda", "harpacticoida", "nematoda", "krabbalirfa", "Capitella capitata", "Malacoceros fuliginosus", "amphipoda", "spionidae"),
1731599808547:count = c(190, 1, 1, 4, 2, 1, 1, 24, 2, 1)
1731599808548:) %>% filter(species %in% c("ostracoda", "harpacticoida", "nematoda", "krabbalirfa","amphipoda"))
1731599813272:station1
1731599825226:# Example data for two stations
1731599825227:station1 <- data.frame(
1731599825227:species = c("Scoloplos armiger", "Eteone longa", "ostracoda", "harpacticoida", "nematoda", "krabbalirfa", "Capitella capitata", "Malacoceros fuliginosus", "amphipoda", "spionidae"),
1731599825227:count = c(190, 1, 1, 4, 2, 1, 1, 24, 2, 1)
1731599825227:) %>% filter(!species %in% c("ostracoda", "harpacticoida", "nematoda", "krabbalirfa","amphipoda"))
1731599828545:station1
1731599863266:station2 <- data.frame(
1731599863266:species = c("Scoloplos armiger", "Microphthalmus aberrans", "Malacoceros fuliginosus", "Eteone longa"),
1731599863266:count = c(42, 2, 18, 1)
1731599863266:)
1731600226435:# Add station labels
1731600226435:station1$station <- "st1"
1731600226726:station2$station <- "st2"
1731600227298:# Add total_area and adjusted count
1731600227299:station1$total_area <- total_area
1731600227534:station1$adjusted_count <- station1$count / total_area
1731600242388:total_area <- 0.0225 * 3
1731600244162:# Add total_area and adjusted count
1731600244162:station1$total_area <- total_area
1731600244413:station1$adjusted_count <- station1$count / total_area
1731600244854:station2$total_area <- total_area
1731600245246:station2$adjusted_count <- station2$count / total_area
1731600245651:# Combine both stations into a single long-format data frame
1731600245651:long_format_df <- rbind(station1, station2)
1731600246156:# Reorder columns for clarity
1731600246156:long_format_df <- long_format_df[, c("station", "species", "total_area", "count", "adjusted_count")]
1731600246957:# Display the long-format data frame
1731600246957:print(long_format_df)
1731600428499:# various Benthic Biotic Indices (BBI) for different years and stations. It then creates heatmaps to visualize these indices. This provides a good overview of the ecological status of the benthic communities over time and across different sampling sites.
1731600428499:library(BBI)
1731600430379:library(gplots)
1731600433402:# Calculate Benthic Biotic Indices (BBI) for each year and station
1731600433402:calculate_biotic_indices <- function(data) {
1731600433402:# Validate input data
1731600433402:required_cols <- c("year", "station", "species", "adjusted_density")  # Changed from count to adjusted_density
1731600433402:stopifnot(
1731600433403:"Missing required columns" = all(required_cols %in% colnames(data)),
1731600433403:"No data provided" = nrow(data) > 0,
1731600433403:"Negative density values found" = all(data$adjusted_density >= 0),
1731600433403:"Missing values found" = !any(is.na(data$adjusted_density))
1731600433403:)
1731600433404:# Define target stations
1731600433404:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1731600433404:# Initialize lists to store results
1731600433404:indices_list <- list()
1731600433405:# Calculate indices for each year
1731600433405:for (current_year in sort(unique(data$year))) {
1731600433405:# Prepare data for BBI calculation using density values
1731600433405:year_data <- data %>%
1731600433405:filter(year == current_year,
1731600433405:station %in% target_stations) %>%
1731600433406:group_by(station, species) %>%
1731600433406:summarise(density = sum(adjusted_density), .groups = 'drop') %>%  # Using adjusted_density
1731600433406:pivot_wider(names_from = station,
1731600433406:values_from = density,
1731600433406:values_fill = 0)
1731600433407:# Calculate BBI indices
1731600433407:bbi_results <- BBI(year_data)
1731600433407:# Store results
1731600433408:indices_list[[as.character(current_year)]] <- list(
1731600433408:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1731600433408:classification = bbi_results$BBIclass,
1731600433408:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1731600433408:)
1731600433409:}
1731600433409:return(indices_list)
1731600433409:}
1731600444993:result
1731600482869:calculate_biotic_indices(long_format_df)
1731600605595:library(dplyr)
1731600606155:library(tidyr)
1731600607206:# Custom function for calculating biotic indices, adjusted to your data
1731600607206:calculate_biotic_indices_krokurinn <- function(data) {
1731600607206:# Check for required columns in the provided data
1731600607207:required_cols <- c("station", "species", "adjusted_count")
1731600607207:stopifnot(
1731600607207:"Missing required columns" = all(required_cols %in% colnames(data)),
1731600607207:"No data provided" = nrow(data) > 0,
1731600607207:"Negative density values found" = all(data$adjusted_count >= 0),
1731600607208:"Missing values found" = !any(is.na(data$adjusted_count))
1731600607208:)
1731600607208:# Initialize list to store results
1731600607208:indices_list <- list()
1731600607208:# Prepare data by grouping by station and species
1731600607209:biotic_data <- data %>%
1731600607209:group_by(station, species) %>%
1731600607209:summarise(adjusted_density = sum(adjusted_count), .groups = 'drop') %>%
1731600607209:pivot_wider(names_from = station, values_from = adjusted_density, values_fill = 0)
1731600607209:# Placeholder for biotic index calculations (replace BBI with your actual formula)
1731600607210:# For example purposes, we’ll assume a simple calculation.
1731600607210:# Replace this with the actual BBI calculation logic
1731600607210:bbi_results <- list(
1731600607210:BBI = rowMeans(biotic_data[, -1]),  # Simple example: taking the mean adjusted density across stations
1731600607210:BBIclass = ifelse(rowMeans(biotic_data[, -1]) > 10, "High", "Low"),  # Example classification based on arbitrary threshold
1731600607211:nEQR = rowMeans(biotic_data[, -1]) / max(rowMeans(biotic_data[, -1]))  # Normalized example based on max value
1731600607211:)
1731600607211:# Store results
1731600607211:indices_list <- list(
1731600607212:indices = as.data.frame(cbind(biotic_data$species, BBI = bbi_results$BBI)),
1731600607212:classification = as.data.frame(cbind(biotic_data$species, BBIclass = bbi_results$BBIclass)),
1731600607212:normalized = as.data.frame(cbind(biotic_data$species, nEQR = bbi_results$nEQR))
1731600607212:)
1731600607213:return(indices_list)
1731600607213:}
1731600609347:# Example of running the function
1731600609348:biotic_indices <- calculate_biotic_indices_krokurinn(long_format_df)
1731600612858:# Display the result
1731600612859:print(biotic_indices)
1731600693946:normalized_eqr <- do.call(rbind, lapply(biotic_indices, function(x) x$normalized))
1731600709808:normalized_eqr
1731600868169:# Custom function for calculating biotic indices, adjusted to your data
1731600868170:calculate_biotic_indices_krokurinn <- function(data) {
1731600868170:# Check for required columns in the provided data
1731600868170:required_cols <- c("station", "species", "adjusted_count")
1731600868170:stopifnot(
1731600868170:"Missing required columns" = all(required_cols %in% colnames(data)),
1731600868170:"No data provided" = nrow(data) > 0,
1731600868170:"Negative density values found" = all(data$adjusted_count >= 0),
1731600868171:"Missing values found" = !any(is.na(data$adjusted_count))
1731600868171:)
1731600868171:# Initialize list to store results
1731600868171:indices_list <- list()
1731600868171:# Prepare data by grouping by station and species
1731600868172:biotic_data <- data %>%
1731600868172:group_by(station, species) %>%
1731600868172:summarise(adjusted_density = sum(adjusted_count), .groups = 'drop') %>%
1731600868172:pivot_wider(names_from = station, values_from = adjusted_density, values_fill = 0)
1731600868172:# Placeholder for biotic index calculations (replace BBI with your actual formula)
1731600868173:# For example purposes, we’ll assume a simple calculation.
1731600868173:# Replace this with the actual BBI calculation logic
1731600868173:bbi_results <- list(
1731600868173:BBI = rowMeans(biotic_data[, -1]),  # Simple example: taking the mean adjusted density across stations
1731600868173:BBIclass = ifelse(rowMeans(biotic_data[, -1]) > 10, "High", "Low"),  # Example classification based on arbitrary threshold
1731600868173:nEQR = rowMeans(biotic_data[, -1]) / max(rowMeans(biotic_data[, -1]))  # Normalized example based on max value
1731600868174:)
1731600868174:# Store results
1731600868174:indices_list <- list(
1731600868174:indices = as.data.frame(cbind(biotic_data$species, BBI = bbi_results$BBI)),
1731600868175:classification = as.data.frame(cbind(biotic_data$species, BBIclass = bbi_results$BBIclass)),
1731600868175:normalized = as.data.frame(cbind(biotic_data$species, nEQR = bbi_results$nEQR))
1731600868175:)
1731600868175:return(indices_list)
1731600868176:}
1731600869986:# Example of running the function
1731600869986:biotic_indices <- calculate_biotic_indices_krokurinn(long_format_df)
1731600871049:# Display the result
1731600871050:print(biotic_indices)
1731600876723:# Display the result
1731600876723:print(biotic_indices)
1731600896737:indices_list
1731600901178:biotic_data
1731600916194:biotic_data <- long_format_df %>%
1731600916194:group_by(station, species) %>%
1731600916194:summarise(adjusted_density = sum(adjusted_count), .groups = 'drop') %>%
1731600916194:pivot_wider(names_from = station, values_from = adjusted_density, values_fill = 0)
1731600918713:biotic_data
1731600957667:long_format_df
1731600975796:bbi_results <- list(
1731600975796:BBI = rowMeans(biotic_data[, -1]),  # Simple example: taking the mean adjusted density across stations
1731600975796:BBIclass = ifelse(rowMeans(biotic_data[, -1]) > 10, "High", "Low"),  # Example classification based on arbitrary threshold
1731600975796:nEQR = rowMeans(biotic_data[, -1]) / max(rowMeans(biotic_data[, -1]))  # Normalized example based on max value
1731600975796:)
1731600980676:bbi_results
1731601019833:indices_list <- list(
1731601019834:indices = as.data.frame(cbind(biotic_data$species, BBI = bbi_results$BBI)),
1731601019834:classification = as.data.frame(cbind(biotic_data$species, BBIclass = bbi_results$BBIclass)),
1731601019834:normalized = as.data.frame(cbind(biotic_data$species, nEQR = bbi_results$nEQR))
1731601019834:)
1731601022655:indices_list
1731662285270:# These are example classifications - please verify with official AMBI species list
1731662285270:species_eg <- data.frame(
1731662285271:species = c(
1731662285271:"Scoloplos armiger",        # EG III
1731662285271:"Eteone longa",             # EG III
1731662285271:"Capitella capitata",       # EG V
1731662285271:"Malacoceros fuliginosus",  # EG IV
1731662285272:"Microphthalmus aberrans",  # EG II
1731662285272:"Spionidae"                 # EG III (general classification)
1731662285272:),
1731662285272:EG = c(3, 3, 5, 4, 2, 3)
1731662285272:)
1731662285275:# Join ecological groups to your data
1731662285275:station_assessment <- long_format_df %>%
1731662285275:left_join(species_eg, by = "species") %>%
1731662285276:group_by(station) %>%
1731662285276:summarise(
1731662285276:total_abundance = sum(adjusted_count),
1731662285276:# Calculate proportions for each ecological group
1731662285276:EG_I = sum(adjusted_count[EG == 1], na.rm = TRUE) / total_abundance,
1731662285276:EG_II = sum(adjusted_count[EG == 2], na.rm = TRUE) / total_abundance,
1731662285277:EG_III = sum(adjusted_count[EG == 3], na.rm = TRUE) / total_abundance,
1731662285277:EG_IV = sum(adjusted_count[EG == 4], na.rm = TRUE) / total_abundance,
1731662285277:EG_V = sum(adjusted_count[EG == 5], na.rm = TRUE) / total_abundance,
1731662285277:# Calculate AMBI
1731662285278:AMBI = (0*EG_I + 1.5*EG_II + 3*EG_III + 4.5*EG_IV + 6*EG_V),
1731662285278:# Calculate species richness (S)
1731662285278:S = n_distinct(species),
1731662285278:# Calculate Shannon diversity (H')
1731662285278:H = -sum((adjusted_count/total_abundance) * log(adjusted_count/total_abundance), na.rm = TRUE)
1731662285279:) %>%
1731662285279:mutate(
1731662285279:# Calculate NQI1 (Norwegian Quality Index)
1731662285279:NQI1 = (0.5 * (1 - AMBI/7) + 0.5 * (S/(S + 5))),
1731662285279:# Ecological status based on AMBI
1731662285280:Status = case_when(
1731662285280:AMBI <= 1.2 ~ "High",
1731662285280:AMBI <= 3.3 ~ "Good",
1731662285280:AMBI <= 4.3 ~ "Moderate",
1731662285280:AMBI <= 5.5 ~ "Poor",
1731662285281:TRUE ~ "Bad"
1731662285281:)
1731662285281:)
1731662285345:# Print results
1731662285345:print(station_assessment, width = Inf)
1731662334082:library(BBI)
1731662334082:library(dplyr)
1731662334083:# Prepare data for BBI package
1731662334083:# Convert to wide format with species as rows and stations as columns
1731662334083:bbi_data <- long_format_df %>%
1731662334083:select(station, species, adjusted_count) %>%
1731662334083:pivot_wider(
1731662334083:names_from = station,
1731662334083:values_from = adjusted_count,
1731662334084:values_fill = 0
1731662334084:) %>%
1731662334084:as.data.frame()
1731662334103:# Set row names as species names
1731662334104:rownames(bbi_data) <- bbi_data$species
1731662334104:bbi_data <- bbi_data[,-1] # Remove species column
1731662334104:# Calculate Norwegian Quality Index (nNQI1)
1731662334104:nqi1_results <- nNQI1(bbi_data)
1731662382929:# Install the BBI package if not already installed
1731662382929:# install.packages("BBI")  # Uncomment this line if BBI is not installed
1731662382929:library(dplyr)
1731662382930:library(tidyr)
1731662382930:library(BBI)  # Load the BBI package
1731662382930:# Custom function for calculating biotic indices using the BBI package
1731662382930:calculate_biotic_indices_krokurinn <- function(data) {
1731662382930:# Check for required columns in the provided data
1731662382931:required_cols <- c("station", "species", "adjusted_count")
1731662382931:stopifnot(
1731662382931:"Missing required columns" = all(required_cols %in% colnames(data)),
1731662382931:"No data provided" = nrow(data) > 0,
1731662382931:"Negative density values found" = all(data$adjusted_count >= 0),
1731662382931:"Missing values found" = !any(is.na(data$adjusted_count))
1731662382932:)
1731662382932:# Prepare data by grouping by station and species
1731662382932:biotic_data <- data %>%
1731662382932:group_by(station, species) %>%
1731662382933:summarise(adjusted_density = sum(adjusted_count), .groups = 'drop') %>%
1731662382933:pivot_wider(names_from = station, values_from = adjusted_density, values_fill = 0)
1731662382933:# Calculate BBI indices using the BBI package
1731662382934:bbi_results <- BBI::calculate_BBI(biotic_data, species_col = "species", abundance_cols = names(biotic_data)[-1])
1731662382934:# Store results
1731662382934:indices_list <- list(
1731662382934:indices = bbi_results$BBI,
1731662382935:classification = bbi_results$BBIclass,
1731662382935:normalized = bbi_results$nEQR
1731662382935:)
1731662382935:return(indices_list)
1731662382936:}
1731662382936:# Example of running the function
1731662382936:biotic_indices <- calculate_biotic_indices_krokurinn(long_format_df)
1731662440040:?BBI::BBI()
1731662489929:?BBI::nEQR()
1731662526895:# Load necessary libraries
1731662526895:library(dplyr)
1731662526896:library(tidyr)
1731662526896:library(BBI)  # Ensure the BBI package is installed
1731662526896:# Prepare your data: species as rows, stations as columns
1731662526896:biotic_data <- long_format_df %>%
1731662526897:select(station, species, adjusted_count) %>%
1731662526897:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731662526904:# Run BBI to calculate indices
1731662526904:bbi_results <- BBI(biotic_data)
1731662526972:# Print BBI values and matched taxa
1731662526972:print("BBI Values:")
1731662526973:print(bbi_results$BBI)
1731662526974:print("Matched Taxa:")
1731662526974:print(bbi_results$taxa)
1731662526975:# Calculate nEQR using the BBI results
1731662526975:eqr_results <- nEQR(bbi_results$BBI)
1731662526976:# Print nEQR values and classes
1731662526976:print("nEQR Values:")
1731662526976:print(eqr_results$nEQR)
1731662526977:print("nEQR Classes:")
1731662526978:print(eqr_results$nEQR_class)
1731662626360:library(ggplot2)
1731662626360:# Create a data frame for plotting
1731662626360:nEQR_df <- data.frame(
1731662626361:Station = rownames(eqr_results$nEQR),
1731662626361:nEQR = eqr_results$nEQR$nEQR
1731662626361:)
1731662656726:# Load necessary libraries
1731662656726:library(dplyr)
1731662656726:library(tidyr)
1731662656727:library(BBI)  # Ensure the BBI package is installed
1731662656727:# Prepare your data: species as rows, stations as columns
1731662656727:biotic_data <- long_format_df %>%
1731662656727:select(station, species, adjusted_count) %>%
1731662656728:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731662656735:# Run BBI to calculate indices
1731662656735:bbi_results <- BBI(biotic_data)
1731662656792:# Print BBI values and matched taxa
1731662656792:print("BBI Values:")
1731662656792:print(bbi_results$BBI)
1731662656792:print("Matched Taxa:")
1731662656792:print(bbi_results$taxa)
1731662656793:# Calculate nEQR using the BBI results
1731662656793:eqr_results <- nEQR(bbi_results$BBI)
1731662656793:# Print nEQR values and classes
1731662656793:print("nEQR Values:")
1731662656794:print(eqr_results$nEQR)
1731662656794:print("nEQR Classes:")
1731662656794:print(eqr_results$nEQR_class)
1731662693986:bbi_results
1731664677142:long_format_df
1731664753875:rass <- long_format_df
1731664760873:names(rass)
1731664871338:colnames(rass) <- c("stod", "tegund", "heildar_flatarmal", "fjoldi", "fjoldi_a_fermetra")
1731664950666:write.csv(rass, "gogn.csv", row.names = FALSE)
1731664954536:rass
1731664974325:biotic_data
1731664988963:bbi_results
1731667858346:bbi_results$library(dplyr)
1731667863811:library(dplyr)
1731667863812:library(tidyr)
1731667863813:library(BBI)
1731667863814:# Sameina gögnin frá öllum stöðvunum
1731667863814:combined_data <- long_format_df %>%
1731667863814:group_by(species) %>%
1731667863815:summarise(
1731667863815:total_count = sum(count),
1731667863815:total_adjusted_count = sum(adjusted_count)
1731667863815:)
1731667863883:# Breyta gögnunum í rétt snið fyrir BBI
1731667863883:biotic_data_combined <- combined_data %>%
1731667863883:pivot_wider(names_from = species, values_from = total_adjusted_count, values_fill = 0)
1731667863971:# Reikna út BBI stuðlana
1731667863971:bbi_results_combined <- BBI(biotic_data_combined)
1731667864258:# Prenta BBI gildi og samsvarandi taxa
1731667864258:print("BBI Gildi fyrir sameinaðar stöðvar:")
1731667864260:print(bbi_results_combined$BBI)
1731667864262:print("Samsvarandi Taxa:")
1731667864262:print(bbi_results_combined$taxa)
1731667864263:# Reikna út nEQR með BBI niðurstöðunum
1731667864263:eqr_results_combined <- nEQR(bbi_results_combined$BBI)
1731667882909:biotic_data_combined
1731667926462:library(dplyr)
1731667926463:library(tidyr)
1731667926464:library(BBI)
1731667926465:# Combine data from all stations
1731667926465:combined_data <- long_format_df %>%
1731667926465:group_by(species) %>%
1731667926465:summarise(total_adjusted_count = sum(adjusted_count))
1731667926483:# Prepare data in the correct format for BBI
1731667926484:biotic_data_combined <- combined_data %>%
1731667926484:pivot_wider(names_from = species, values_from = total_adjusted_count, values_fill = 0) %>%
1731667926484:t() %>%
1731667926484:as.data.frame()
1731667926515:# Ensure the first column is species names
1731667926515:colnames(biotic_data_combined) <- biotic_data_combined[1, ]
1731667926515:biotic_data_combined <- biotic_data_combined[-1, ]
1731667926516:# Run BBI to calculate indices
1731667926516:bbi_results_combined <- BBI(biotic_data_combined)
1731667956578:biotic_data <- long_format_df %>%
1731667956578:select(species, adjusted_count) %>%
1731667956578:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731667995973:long_format_df
1731668078667:krokurinn_data <- long_format_df %>%
1731668078667:mutate(station = "Krokurinn") %>%
1731668078667:group_by(station, species) %>%
1731668078667:summarise(
1731668078667:total_area = sum(total_area),
1731668078667:total_count = sum(count),
1731668078668:total_adjusted_count = sum(adjusted_count),
1731668078668:.groups = 'drop'
1731668078668:)
1731668078678:# Print the aggregated data
1731668078679:print(krokurinn_data)
1731668120323:biotic_data <- krokurinn_data %>%
1731668120323:select(station, species, adjusted_count) %>%
1731668120323:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731668157595:eqr_results
1731668219253:## Fyrir báðar stöðvar saman
1731668219253:krokurinn_data <- long_format_df %>%
1731668219253:mutate(station = "Krokurinn") %>%
1731668219253:group_by(station, species) %>%
1731668219253:summarise(
1731668219254:total_area = sum(total_area),
1731668219254:count = sum(count),
1731668219254:adjusted_count = sum(adjusted_count),
1731668219254:.groups = 'drop'
1731668219254:)
1731668243155:krokurinn_data <- long_format_df %>%
1731668243156:mutate(station = "Krokurinn") %>%
1731668243156:group_by(station, species) %>%
1731668243156:summarise(
1731668243156:total_area = sum(total_area),
1731668243156:count = sum(count),
1731668243157:adjusted_count = sum(adjusted_count),
1731668243157:.groups = 'drop'
1731668243157:)
1731668243164:# Prepare your data: species as rows, stations as columns
1731668243164:biotic_data <- krokurinn_data %>%
1731668243165:select(station, species, adjusted_count) %>%
1731668243165:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731668243174:# Run BBI to calculate indices
1731668243175:bbi_results <- BBI(biotic_data)
1731668247665:bbi_results
1731668279636:biotic_data
1731668291626:# Run BBI to calculate indices
1731668291626:bbi_results <- BBI(biotic_data)
1731668309139:## Fyrir báðar stöðvar saman
1731668309140:krokurinn_data <- long_format_df %>%
1731668309140:mutate(station = "Krokurinn") %>%
1731668309140:group_by(station, species) %>%
1731668309140:summarise(
1731668309140:total_area = sum(total_area),
1731668309140:count = sum(count),
1731668309140:adjusted_count = sum(adjusted_count),
1731668309141:.groups = 'drop'
1731668309141:)
1731668309149:# Prepare your data: species as rows, stations as columns
1731668309149:biotic_data <- krokurinn_data %>%
1731668309149:select(station, species, adjusted_count) %>%
1731668309150:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731668309158:# Run BBI to calculate indices
1731668309158:bbi_results <- BBI(biotic_data)
1731668351683:library(dplyr)
1731668351683:library(tidyr)
1731668351684:library(BBI)
1731668351684:# Aggregate data for "Krokurinn"
1731668351684:krokurinn_data <- long_format_df %>%
1731668351685:mutate(station = "Krokurinn") %>%
1731668351685:group_by(station, species) %>%
1731668351685:summarise(
1731668351685:total_area = sum(total_area),
1731668351686:count = sum(count),
1731668351686:adjusted_count = sum(adjusted_count),
1731668351686:.groups = 'drop'
1731668351686:)
1731668351695:# Prepare data: species as rows, station as a column
1731668351696:biotic_data <- krokurinn_data %>%
1731668351696:select(species, adjusted_count) %>%
1731668351696:pivot_wider(names_from = species, values_from = adjusted_count, values_fill = 0) %>%
1731668351696:t() %>%
1731668351696:as.data.frame()
1731668351709:# Ensure the first column is species names
1731668351709:colnames(biotic_data) <- biotic_data[1, ]
1731668351710:biotic_data <- biotic_data[-1, ]
1731668351710:# Check the structure of biotic_data
1731668351710:print("Structure of biotic_data:")
1731668351711:print(str(biotic_data))
1731668351712:# Run BBI to calculate indices
1731668351712:bbi_results <- BBI(biotic_data)
1731668389460:library(dplyr)
1731668389460:library(tidyr)
1731668389460:library(BBI)
1731668389461:# Aggregate data for "Krokurinn"
1731668389461:krokurinn_data <- long_format_df %>%
1731668389461:mutate(station = "Krokurinn") %>%
1731668389461:group_by(station, species) %>%
1731668389461:summarise(
1731668389461:total_area = sum(total_area),
1731668389462:count = sum(count),
1731668389462:adjusted_count = sum(adjusted_count),
1731668389462:.groups = 'drop'
1731668389462:)
1731668389469:# Prepare data: species as rows, station as a column
1731668389469:biotic_data <- krokurinn_data %>%
1731668389470:select(species, adjusted_count) %>%
1731668389470:pivot_wider(names_from = species, values_from = adjusted_count, values_fill = 0)
1731668389476:# Transpose the data to have species as rows
1731668389477:biotic_data <- as.data.frame(t(biotic_data))
1731668389477:colnames(biotic_data) <- "Krokurinn"
1731668389477:biotic_data <- biotic_data[-1, , drop = FALSE]  # Ensure it remains a data frame
1731668389477:# Check the structure of biotic_data
1731668389477:print("Structure of biotic_data:")
1731668389478:print(str(biotic_data))
1731668389479:# Run BBI to calculate indices
1731668389480:bbi_results <- BBI(biotic_data)
1731668524588:# Original data for "Krokurinn"
1731668524588:krokurinn_data <- long_format_df %>%
1731668524589:mutate(station = "Krokurinn") %>%
1731668524589:group_by(station, species) %>%
1731668524589:summarise(
1731668524589:total_area = sum(total_area),
1731668524589:count = sum(count),
1731668524590:adjusted_count = sum(adjusted_count),
1731668524590:.groups = 'drop'
1731668524590:)
1731668524597:# Duplicate the data frame and change the station name
1731668524597:krokurinn2_data <- krokurinn_data %>%
1731668524597:mutate(station = "Krokurinn2")
1731668524598:# Combine both data frames
1731668524599:combined_data <- bind_rows(krokurinn_data, krokurinn2_data)
1731668524601:# Print the combined data frame
1731668524601:print(combined_data)
1731668539526:# Prepare your data: species as rows, stations as columns
1731668539526:biotic_data <- combined_data %>%
1731668539526:select(station, species, adjusted_count) %>%
1731668539526:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731668540707:# Run BBI to calculate indices
1731668540708:bbi_results <- BBI(biotic_data)
1731668545100:bbi_results
1731683903530:# Load necessary libraries
1731683903530:library(dplyr)
1731683904086:library(tidyr)
1731683904524:library(vegan)
1731683904940:library(kableExtra)
1731683906870:library(BBI)
1731683913983:species_data <- henda_long_matched %>% # see 03_nmds_analysis.R
1731683913983:group_by(station, year, species) %>%
1731683913983:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1731683913983:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1731683915323:# Separate environmental and species data
1731683915323:env_data <- data.frame(
1731683915323:Station = factor(species_data$station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1731683915324:Year = factor(species_data$year)
1731683915324:)
1731683916465:# Create species matrix (only numeric columns)
1731683916466:species_matrix <- species_data %>%
1731683916466:select(-station, -year) %>%
1731683916466:as.matrix()
1731683917827:# Perform SIMPER analysis for year-to-year comparisons
1731683917828:years <- sort(unique(as.character(env_data$Year)))
1731683918502:sequential_simper <- list()
1731683920155:for(i in 1:(length(years)-1)) {
1731683920155:# Select data for consecutive years
1731683920155:year_pair <- years[i:(i+1)]
1731683920155:year_data <- species_matrix[env_data$Year %in% year_pair, ]
1731683920155:year_groups <- env_data$Year[env_data$Year %in% year_pair]
1731683920156:# Perform SIMPER analysis for this pair of years
1731683920156:comparison_name <- paste(year_pair[1], year_pair[2], sep="_")
1731683920156:sequential_simper[[comparison_name]] <- simper(year_data, group = year_groups, permutations = 999)
1731683920156:}
1731683921763:# Baseline comparison (if 1999 data exists)
1731683921763:if ("1999" %in% years) {
1731683921763:baseline_data <- species_matrix[env_data$Year %in% c("1999", years), ]
1731683921763:baseline_groups <- env_data$Year[env_data$Year %in% c("1999", years)]
1731683921763:simper_baseline <- simper(baseline_data, group = baseline_groups, permutations = 999)
1731683921764:}
1731683923754:# Calculate Benthic Biotic Indices (BBI) for each year and station
1731683923755:calculate_biotic_indices <- function(data) {
1731683923755:required_cols <- c("year", "station", "species", "adjusted_density")
1731683923755:stopifnot(
1731683923755:"Missing required columns" = all(required_cols %in% colnames(data)),
1731683923755:"No data provided" = nrow(data) > 0,
1731683923755:"Negative density values found" = all(data$adjusted_density >= 0),
1731683923755:"Missing values found" = !any(is.na(data$adjusted_density))
1731683923756:)
1731683923756:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1731683923756:indices_list <- list()
1731683923756:species_ambi_mapping <- data.frame(species = character(), AMBI = numeric())
1731683923757:for (current_year in sort(unique(data$year))) {
1731683923757:year_data <- data %>%
1731683923757:filter(year == current_year, station %in% target_stations) %>%
1731683923757:group_by(station, species) %>%
1731683923757:summarise(density = sum(adjusted_density), .groups = 'drop') %>%
1731683923757:pivot_wider(names_from = station, values_from = density, values_fill = 0)
1731683923758:bbi_results <- BBI(year_data)
1731683923758:# Extract and accumulate species-AMBI mappings
1731683923758:current_species_groups <- data.frame(
1731683923758:species = bbi_results$taxa[, 1],
1731683923759:AMBI = bbi_results$table$AMBI
1731683923759:)
1731683923759:# Combine with existing mappings, keeping the first non-NA AMBI value for each species
1731683923759:species_ambi_mapping <- bind_rows(species_ambi_mapping, current_species_groups) %>%
1731683923759:group_by(species) %>%
1731683923760:summarise(AMBI = first(na.omit(AMBI))) %>%
1731683923760:ungroup()
1731683923760:indices_list[[as.character(current_year)]] <- list(
1731683923760:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1731683923761:classification = bbi_results$BBIclass,
1731683923761:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1731683923761:)
1731683923761:}
1731683923762:# Add the species-AMBI mapping to the return list
1731683923762:indices_list$species_groups <- species_ambi_mapping
1731683923762:return(indices_list)
1731683923762:}
1731683925405:# Use the result dataframe that already has the correct density calculations
1731683925405:biotic_indices <- calculate_biotic_indices(df_result)
1731683928140:# Extract species groups from the accumulated mappings
1731683928140:species_groups <- biotic_indices$species_groups
1731683929604:# Function to summarize one comparison and add ecological group
1731683929604:summarize_one_comparison <- function(comparison_data, df_result, year1, year2, species_groups) {
1731683929604:# Construct the dynamic key
1731683929604:comparison_key <- paste(year1, year2, sep = "_")
1731683929605:# Access cusum and other components dynamically
1731683929605:species_names <- names(comparison_data[[comparison_key]]$cusum)
1731683929605:cumulative_contributions <- unname(comparison_data[[comparison_key]]$cusum)
1731683929605:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1731683929606:abundance_changes <- sapply(species_names, function(species) {
1731683929606:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1731683929606:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1731683929606:change <- abundance_year2 - abundance_year1
1731683929606:return(change)
1731683929606:})
1731683929607:ecological_groups <- sapply(species_names, function(species) {
1731683929607:match_index <- match(species, species_groups$species)
1731683929607:if (!is.na(match_index)) {
1731683929607:return(species_groups$AMBI[match_index])
1731683929607:} else {
1731683929607:return(NA)
1731683929608:}
1731683929608:})
1731683929608:df <- data.frame(
1731683929608:Species = species_names,
1731683929609:Cumulative_Percent = cumulative_contributions * 100,
1731683929609:Individual_Percent = individual_contributions * 100,
1731683929609:Abundance_Change = abundance_changes,
1731683929609:Ecological_Group = ecological_groups
1731683929609:)
1731683929610:return(df)
1731683929610:}
1731683932564:# Process sequential comparisons
1731683932564:print("Sequential Year Comparisons:")
1731683933413:for(i in seq_along(sequential_simper)) {
1731683933413:comparison_name <- names(sequential_simper)[i]
1731683933413:years <- unlist(strsplit(comparison_name, "_"))
1731683933413:year1 <- years[1]
1731683933413:year2 <- years[2]
1731683933414:cat(sprintf("\nComparison: %s\n", comparison_name))
1731683933414:# Process this comparison
1731683933414:summary_data <- summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups) %>%
1731683933414:filter(Cumulative_Percent <= 70) %>%
1731683933415:mutate_if(is.numeric, ~ round(.x, 2))  # Round all numeric columns to 2 decimal places
1731683933415:rownames(summary_data) <- NULL
1731683933415:# Apply line breaks to column names
1731683933415:colnames(summary_data) <- gsub("_", "<br>", colnames(summary_data))
1731683933415:if(nrow(summary_data) > 0) {
1731683933416:# Export the summary data to a CSV file with a descriptive filename
1731683933416:#file_name <- sprintf("species_contributions_sequential_%s_%s.csv", year1, year2)
1731683933416:#write.csv(summary_data, file = file_name, row.names = FALSE)
1731683933416:# Print the table in console for reference
1731683933416:print(
1731683933417:kableExtra::kbl(
1731683933417:summary_data,
1731683933417:caption = sprintf("Species contributions for %s", comparison_name),
1731683933417:digits = 2,
1731683933417:format = "html",
1731683933418:escape = F
1731683933418:) %>%
1731683933418:kableExtra::kable_styling(
1731683933418:full_width = FALSE,
1731683933418:bootstrap_options = c("striped", "hover", "condensed", "responsive")
1731683933419:) %>%
1731683933419:kableExtra::row_spec(0, bold = TRUE, color = "black", background = "#f0f0f0") %>%  # Header styling
1731683933419:kableExtra::column_spec(1, bold = TRUE, width = "5em") %>%  # First column bold
1731683933419:kableExtra::add_header_above(c(" " = 1, "Species Contributions" = ncol(summary_data) - 1))  # Custom header
1731683933419:)
1731683933420:cat(sprintf("Exported summary data for %s to %s\n", comparison_name, file_name))
1731683933420:} else {
1731683933420:cat("No species met the contribution threshold for this comparison.\n")
1731683933420:}
1731683933421:}
1731683997573:# Generate all possible pairs of years for arbitrary comparison
1731683997573:arbitrary_year_pairs <- combn(c("1999","2017"), 2, simplify = FALSE)
1731683999142:# Initialize a new list to store results for arbitrary year pairs
1731683999142:sequential_simper_arbitrary <- list()
1731684000060:# New loop for arbitrary year pairs
1731684000060:for (pair in arbitrary_year_pairs) {
1731684000060:# Extract the two years from the current pair
1731684000060:year1 <- pair[1]
1731684000060:year2 <- pair[2]
1731684000060:# Select data for these two specific years
1731684000061:year_data <- species_matrix[env_data$Year %in% c(year1, year2), ]
1731684000061:year_groups <- env_data$Year[env_data$Year %in% c(year1, year2)]
1731684000061:# Generate a unique name for this comparison
1731684000061:comparison_name <- paste(year1, year2, sep = "_")
1731684000061:# Perform SIMPER analysis for this arbitrary pair of years
1731684000062:sequential_simper_arbitrary[[comparison_name]] <- simper(year_data, group = year_groups, permutations = 999)
1731684000062:}
1731684001613:print("Arbitrary Year Comparisons:")
1731684002780:for(i in seq_along(sequential_simper_arbitrary)) {
1731684002780:# Retrieve the comparison name for the arbitrary pair
1731684002780:comparison_name <- names(sequential_simper_arbitrary)[i]
1731684002780:years <- unlist(strsplit(comparison_name, "_"))
1731684002781:year1 <- years[1]
1731684002781:year2 <- years[2]
1731684002781:cat(sprintf("\nComparison: %s\n", comparison_name))
1731684002781:# Process this arbitrary comparison
1731684002781:summary_data <- summarize_one_comparison(sequential_simper_arbitrary[[i]], df_result, year1, year2, species_groups) %>%
1731684002782:filter(Cumulative_Percent <= 70)
1731684002782:rownames(summary_data) <- NULL
1731684002782:summary_data <- summary_data %>% mutate_if(is.numeric, ~ round(.x, 2))
1731684002782:# Apply line breaks to column names
1731684002782:colnames(summary_data) <- gsub("_", "<br>", colnames(summary_data))
1731684002782:if(nrow(summary_data) > 0) {
1731684002783:# Export the summary table to a CSV file
1731684002783:#file_name <- sprintf("species_contributions_%s.csv", comparison_name)
1731684002783:#write.csv(summary_data, file = file_name, row.names = FALSE)
1731684002783:print(
1731684002783:kableExtra::kbl(
1731684002784:summary_data,
1731684002784:caption = sprintf("Species contributions for %s", comparison_name),
1731684002784:digits = 2,
1731684002784:format = "html",
1731684002784:escape = F
1731684002784:) %>%
1731684002785:kableExtra::kable_styling(
1731684002785:full_width = FALSE,
1731684002785:bootstrap_options = c("striped", "hover", "condensed", "responsive")
1731684002785:) %>%
1731684002785:kableExtra::row_spec(0, bold = TRUE, color = "black", background = "#f0f0f0") %>%  # Header styling
1731684002786:kableExtra::column_spec(1, bold = TRUE, width = "5em") %>%  # First column bold
1731684002786:kableExtra::add_header_above(c(" " = 1, "Species Contributions" = ncol(summary_data) - 1))  # Custom header
1731684002786:)
1731684002786:} else {
1731684002786:cat("No species met the contribution threshold for this comparison.\n")
1731684002787:}
1731684002787:}
1731684023820:# Create a function to prepare data for visualization
1731684023821:prepare_simper_viz_data <- function(sequential_simper, df_result, species_groups) {
1731684023821:viz_data <- data.frame()
1731684023821:for(i in seq_along(sequential_simper)) {
1731684023821:comparison_name <- names(sequential_simper)[i]
1731684023821:years <- unlist(strsplit(comparison_name, "_"))
1731684023821:year1 <- years[1]
1731684023822:year2 <- years[2]
1731684023822:# Get summary data for this comparison
1731684023822:summary_data <- summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups) %>%
1731684023822:filter(Cumulative_Percent <= 70)
1731684023823:# Calculate mean abundance for each species in each year
1731684023823:year_data <- bind_rows(
1731684023823:df_result %>%
1731684023823:filter(year == year1, species %in% summary_data$Species) %>%
1731684023823:group_by(species) %>%
1731684023823:summarise(abundance = mean(adjusted_density), year = year1),
1731684023824:df_result %>%
1731684023824:filter(year == year2, species %in% summary_data$Species) %>%
1731684023824:group_by(species) %>%
1731684023824:summarise(abundance = mean(adjusted_density), year = year2)
1731684023824:)
1731684023825:# Add contribution information
1731684023825:year_data <- year_data %>%
1731684023825:left_join(summary_data %>%
1731684023825:select(Species, Individual_Percent, Ecological_Group),
1731684023825:by = c("species" = "Species"))
1731684023826:viz_data <- bind_rows(viz_data, year_data)
1731684023826:}
1731684023826:return(viz_data)
1731684023826:}
1731684025756:# Prepare visualization data
1731684025757:viz_data <- prepare_simper_viz_data(sequential_simper, df_result, species_groups)
1731684028205:# Create main SIMPER visualization
1731684028205:simper_plot <- ggplot(viz_data %>%
1731684028205:filter(Individual_Percent >= 5), # Focus on major contributors
1731684028206:aes(x = year, y = abundance, fill = factor(Ecological_Group))) +
1731684028206:geom_bar(stat = "identity", position = "dodge") +
1731684028206:facet_wrap(~species, scales = "free_y") +
1731684028206:scale_fill_brewer(palette = "Set2", name = "AMBI Group") +
1731684028206:theme_bw() +
1731684028206:labs(
1731684028207:x = "Year",
1731684028207:y = expression(paste("Abundance (individuals/m"^2, ")")),
1731684028207:title = "Temporal changes in key species abundance (2013-2017)",
1731684028207:subtitle = "Species contributing >5% to between-year dissimilarity"
1731684028207:) +
1731684028207:theme(
1731684028208:axis.text.x = element_text(angle = 45, hjust = 1),
1731684028208:panel.grid.minor = element_blank(),
1731684028208:strip.text = element_text(face = "italic"),
1731684028208:legend.position = "bottom"
1731684028208:)
1731684030812:# Create summary table
1731684030812:summary_table <- viz_data %>%
1731684030812:group_by(species) %>%
1731684030812:summarise(
1731684030812:AMBI_Group = first(Ecological_Group),
1731684030812:contribution = first(Individual_Percent),
1731684030812:`2013` = mean(abundance[year == "2013"], na.rm = TRUE),
1731684030813:`2014` = mean(abundance[year == "2014"], na.rm = TRUE),
1731684030813:`2015` = mean(abundance[year == "2015"], na.rm = TRUE),
1731684030813:`2016` = mean(abundance[year == "2016"], na.rm = TRUE),
1731684030813:`2017` = mean(abundance[year == "2017"], na.rm = TRUE),
1731684030813:.groups = 'drop'
1731684030813:) %>%
1731684030813:# Remove rows where all abundance values are NA or 0
1731684030814:filter(rowSums(!is.na(across(starts_with("20")))) > 0) %>%
1731684030814:# Replace NAs with 0
1731684030814:mutate(across(starts_with("20"), ~replace_na(., 0))) %>%
1731684030814:# Round numeric values
1731684030814:mutate(
1731684030814:across(starts_with("20"), ~round(., 0)),
1731684030815:contribution = round(contribution, 1)
1731684030815:) %>%
1731684030815:# Sort by contribution
1731684030815:arrange(desc(contribution))
1731684032724:# Now create the formatted table
1731684032724:kableExtra::kbl(
1731684032725:summary_table,
1731684032725:caption = "Species contributions to community dissimilarity (2013-2017)",
1731684032725:format = "html",
1731684032725:col.names = c("Species", "AMBI Group", "% Contribution", "2013", "2014", "2015", "2016", "2017"),
1731684032725:align = c("l", "c", "r", "r", "r", "r", "r", "r")
1731684032725:) %>%
1731684032725:kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
1731684032725:full_width = FALSE) %>%
1731684032726:row_spec(0, bold = TRUE) %>%
1731684032726:column_spec(1, italic = TRUE) %>%
1731684032726:add_header_above(c(" " = 3, "Abundance (ind./m²)" = 5))
1731684044572:# Export plot and table
1731684044573:ggsave("output/simper_temporal_changes.png", simper_plot,
1731684044573:width = 12, height = 8, dpi = 300)
1731684671028:simper_plot
1731684705741:# Create main SIMPER visualization
1731684705741:simper_plot <- ggplot(viz_data %>%
1731684705741:filter(Individual_Percent >= 5), # Focus on major contributors
1731684705741:aes(x = year, y = abundance, fill = factor(Ecological_Group))) +
1731684705741:geom_bar(stat = "identity", position = "dodge") +
1731684705741:facet_wrap(~species, scales = "free_y") +
1731684705742:scale_fill_brewer(palette = "Set2", name = "AMBI Group") +
1731684705742:theme_bw() +
1731684705742:labs(
1731684705742:x = "Year",
1731684705742:y = expression(paste("Abundance (individuals/m"^2, ")")),
1731684705742:title = "Temporal changes in key species abundance (1999 and 2013-2017)",
1731684705742:subtitle = "Species contributing >5% to between-year dissimilarity"
1731684705743:) +
1731684705743:theme(
1731684705743:axis.text.x = element_text(angle = 45, hjust = 1),
1731684705743:panel.grid.minor = element_blank(),
1731684705743:strip.text = element_text(face = "italic"),
1731684705743:legend.position = "bottom"
1731684705744:)
1731684715731:simper_plot
1731684734396:# Now create the formatted table
1731684734396:kableExtra::kbl(
1731684734396:summary_table,
1731684734396:caption = "Species contributions to community dissimilarity (2013-2017)",
1731684734397:format = "html",
1731684734397:col.names = c("Species", "AMBI Group", "% Contribution", "2013", "2014", "2015", "2016", "2017"),
1731684734397:align = c("l", "c", "r", "r", "r", "r", "r", "r")
1731684734397:) %>%
1731684734397:kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
1731684734397:full_width = FALSE) %>%
1731684734397:row_spec(0, bold = TRUE) %>%
1731684734397:column_spec(1, italic = TRUE) %>%
1731684734398:add_header_above(c(" " = 3, "Abundance (ind./m²)" = 5))
1731684820980:# Nota gögnin frá Jörundi
1731684820980:species_matrix_all <- henda_long_matched %>%
1731684820980:select(station, year, species, adjusted_density) %>%
1731684820981:pivot_wider(
1731684820981:names_from = species,
1731684820981:values_from = adjusted_density,
1731684820981:values_fill = 0
1731684820981:) %>%
1731684820981:mutate(
1731684820982:station_temp = station,
1731684820982:year_temp = year
1731684820982:) %>%
1731684820982:select(-station, -year)
1731684823014:# Rest of the code remains the same, starting from:
1731684823014:# Find dominant species (>1% relative abundance)
1731684823014:dominant_species <- species_matrix_all %>%
1731684823014:select(where(is.numeric)) %>%
1731684823014:select(-year_temp) %>%
1731684823014:summarise(across(everything(), sum)) %>%
1731684823015:pivot_longer(everything(),
1731684823015:names_to = "species",
1731684823015:values_to = "total_abundance") %>%
1731684823015:arrange(desc(total_abundance)) %>%
1731684823015:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1731684823015:filter(relative_abundance > 0.01)
1731684825812:format_species_names <- function(species_names) {
1731684825812:formatted_names <- sapply(species_names, function(name) {
1731684825812:# If there's a space, it's already formatted (species name or family), leave it as is
1731684825812:if (grepl(" ", name)) {
1731684825812:return(name)
1731684825813:}
1731684825813:# If it's a single word, add "sp."
1731684825813:paste0(name, " sp.")
1731684825813:})
1731684825813:return(formatted_names)
1731684825813:}
1731684828309:# PCA plot function
1731684828309:create_year_pca <- function(year_data, year, important_species) {
1731684828309:# Perform PCA for this year
1731684828309:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731684828309:# Extract scores
1731684828310:site_scores <- data.frame(
1731684828310:scores(species_pca, display = "sites"),
1731684828310:Station = year_data$station_temp
1731684828310:)
1731684828310:species_loadings <- data.frame(
1731684828310:scores(species_pca, display = "species"),
1731684828311:Species = rownames(scores(species_pca, display = "species"))
1731684828311:) %>%
1731684828311:filter(Species %in% important_species) %>%
1731684828311:mutate(Species = format_species_names(Species))  # Format species names
1731684828312:# Calculate variance explained
1731684828312:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731684828312:# Set consistent axis limits across all plots
1731684828312:axis_limits <- max(abs(c(
1731684828313:site_scores$PC1, site_scores$PC2,
1731684828313:species_loadings$PC1, species_loadings$PC2
1731684828313:))) * 1.2  # Add 20% padding
1731684828313:# Create PCA biplot
1731684828313:pca_plot <- ggplot() +
1731684828314:# Add site scores
1731684828314:geom_point(data = site_scores,
1731684828314:aes(x = PC1, y = PC2),
1731684828314:size = 2,
1731684828314:shape = 19,
1731684828315:color = "black") +
1731684828315:# Add site labels
1731684828315:geom_text_repel(
1731684828315:data = site_scores,
1731684828315:aes(x = PC1, y = PC2, label = Station),
1731684828316:size = 3.5,
1731684828316:fontface = "bold",
1731684828316:box.padding = 0.5,
1731684828316:point.padding = 0.3
1731684828316:) +
1731684828317:# Add species arrows
1731684828317:geom_segment(data = species_loadings,
1731684828317:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731684828317:arrow = arrow(length = unit(0.2, "cm")),
1731684828318:color = "darkgrey") +
1731684828318:# Add species labels
1731684828318:geom_text_repel(data = species_loadings,
1731684828318:aes(x = PC1, y = PC2, label = Species),
1731684828318:size = 2.8,
1731684828319:fontface = "italic",
1731684828319:color = "grey30",
1731684828319:box.padding = 0.5,
1731684828319:point.padding = 0.3) +
1731684828319:# Set consistent axis limits
1731684828320:coord_fixed(xlim = c(-axis_limits, axis_limits),
1731684828320:ylim = c(-axis_limits, axis_limits)) +
1731684828320:theme_bw() +
1731684828320:theme(
1731684828321:panel.grid.minor = element_blank(),
1731684828321:panel.grid.major = element_line(color = "grey95"),
1731684828321:axis.text = element_text(color = "black", size = 8),
1731684828322:axis.title = element_text(size = 10),
1731684828322:plot.title = element_text(size = 11, face = "bold"),
1731684828322:plot.subtitle = element_text(size = 9),
1731684828322:plot.margin = margin(t = 10, r = 10, b = 10, l = 10)
1731684828323:) +
1731684828323:labs(
1731684828323:title = paste("PCA of benthic community composition -", year),
1731684828323:subtitle = "Stations shown as points, species as arrows",
1731684828324:x = paste0("PC1 (", var_explained[1], "%)"),
1731684828324:y = paste0("PC2 (", var_explained[2], "%)")
1731684828324:)
1731684828325:return(pca_plot)
1731684828325:}
1731684830974:# Create PCA plots for each year
1731684830975:years <- sort(unique(species_matrix_all$year_temp))
1731684832374:pca_plots <- list()
1731684834301:for(year in years) {
1731684834301:year_data <- species_matrix_all %>%
1731684834301:filter(year_temp == year)
1731684834301:pca_plots[[as.character(year)]] <- create_year_pca(
1731684834301:year_data,
1731684834302:year,
1731684834302:dominant_species$species
1731684834302:)
1731684834302:ggsave(
1731684834302:paste0("output/pca_biplot_", year, ".png"),
1731684834302:pca_plots[[as.character(year)]],
1731684834303:width = 10, height = 8,
1731684834303:dpi = 300,
1731684834303:bg = "white"
1731684834303:)
1731684834303:}
1731684842732:library(ggrepel)
1731684842838:library(patchwork)
1731685350173:# PCA plot function
1731685350173:create_year_pca <- function(year_data, year, important_species) {
1731685350174:# Perform PCA for this year
1731685350174:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731685350174:# Extract scores
1731685350174:site_scores <- data.frame(
1731685350174:scores(species_pca, display = "sites"),
1731685350174:Station = year_data$station_temp
1731685350175:)
1731685350175:species_loadings <- data.frame(
1731685350175:scores(species_pca, display = "species"),
1731685350175:Species = rownames(scores(species_pca, display = "species"))
1731685350175:) %>%
1731685350176:filter(Species %in% important_species) %>%
1731685350176:mutate(Species = format_species_names(Species))  # Format species names
1731685350176:# Calculate variance explained
1731685350176:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731685350177:# Set consistent axis limits across all plots
1731685350177:axis_limits <- max(abs(c(
1731685350177:site_scores$PC1, site_scores$PC2,
1731685350177:species_loadings$PC1, species_loadings$PC2
1731685350177:))) * 1.2  # Add 20% padding
1731685350178:# Create PCA biplot
1731685350178:pca_plot <- ggplot() +
1731685350178:# Add site scores
1731685350178:geom_point(data = site_scores,
1731685350178:aes(x = PC1, y = PC2),
1731685350179:size = 2,
1731685350179:shape = 19,
1731685350179:color = "black") +
1731685350179:# Add site labels
1731685350180:geom_text_repel(
1731685350180:data = site_scores,
1731685350180:aes(x = PC1, y = PC2, label = Station),
1731685350180:size = 3.5,
1731685350180:fontface = "bold",
1731685350180:box.padding = 0.5,
1731685350181:point.padding = 0.3
1731685350181:) +
1731685350181:# Add species arrows
1731685350181:geom_segment(data = species_loadings,
1731685350181:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731685350182:arrow = arrow(length = unit(0.2, "cm")),
1731685350182:color = "darkgrey") +
1731685350182:# Add species labels
1731685350182:geom_text_repel(data = species_loadings,
1731685350182:aes(x = PC1, y = PC2, label = Species),
1731685350183:size = 2.8,
1731685350183:fontface = "italic",
1731685350183:color = "grey30",
1731685350183:box.padding = 0.5,
1731685350184:point.padding = 0.3) +
1731685350184:# Set consistent axis limits
1731685350184:coord_fixed(xlim = c(-axis_limits, axis_limits),
1731685350184:ylim = c(-axis_limits, axis_limits)) +
1731685350184:theme_bw() +
1731685350185:theme(
1731685350185:panel.grid.minor = element_blank(),
1731685350185:panel.grid.major = element_line(color = "grey95"),
1731685350185:axis.text = element_text(color = "black", size = 8),
1731685350186:axis.title = element_text(size = 10),
1731685350186:plot.title = element_text(size = 11, face = "bold"),
1731685350186:plot.subtitle = element_text(size = 9),
1731685350186:plot.margin = margin(t = 10, r = 10, b = 10, l = 10)
1731685350186:) +
1731685350187:labs(
1731685350187:title = paste("PCA of benthic community composition -", year),
1731685350187:subtitle = "Stations shown as points, species as arrows",
1731685350188:x = paste0("PC1 (", var_explained[1], "%)"),
1731685350188:y = paste0("PC2 (", var_explained[2], "%)")
1731685350188:)
1731685350189:return(pca_plot)
1731685350190:}
1731685351062:# Create PCA plots for each year
1731685351062:years <- sort(unique(species_matrix_all$year_temp))
1731685352591:pca_plots <- list()
1731685354067:for(year in years) {
1731685354068:year_data <- species_matrix_all %>%
1731685354068:filter(year_temp == year)
1731685354068:pca_plots[[as.character(year)]] <- create_year_pca(
1731685354068:year_data,
1731685354068:year,
1731685354069:dominant_species$species
1731685354069:)
1731685354069:ggsave(
1731685354069:paste0("output/pca_biplot_", year, ".png"),
1731685354069:pca_plots[[as.character(year)]],
1731685354069:width = 10, height = 8,
1731685354070:dpi = 300,
1731685354070:bg = "white"
1731685354070:)
1731685354070:}
1731685360397:# Combine all plots
1731685360397:combined_plot <- wrap_plots(pca_plots, ncol = 2) +
1731685360397:plot_annotation(
1731685360398:title = "Temporal changes in community composition (1999, 2013-2017)",
1731685360398:subtitle = "Stations shown as points, species as arrows",
1731685360398:caption = "Based on species abundance data. Only species with >1% relative abundance shown.",
1731685360398:theme = theme(
1731685360398:plot.title = element_text(size = 14, face = "bold"),
1731685360398:plot.subtitle = element_text(size = 12),
1731685360399:plot.caption = element_text(size = 10, hjust = 0)
1731685360399:)
1731685360399:)
1731685362600:ggsave("output/pca_biplots_all_years.png",
1731685362600:combined_plot,
1731685362600:width = 20, height = 15,
1731685362600:dpi = 300,
1731685362600:bg = "white")
1731685366750:# Function to create reversed PCA biplot
1731685366750:create_year_pca_reversed <- function(year_data, year, important_species) {
1731685366750:# Perform PCA
1731685366750:species_pca <- rda(select(year_data, -station_temp, -year_temp))
1731685366750:# Extract scores - note the reversed roles
1731685366750:species_scores <- data.frame(
1731685366750:scores(species_pca, display = "species"),
1731685366751:Species = rownames(scores(species_pca, display = "species"))
1731685366751:) %>%
1731685366751:mutate(Species = format_species_names(Species))  # Format species names
1731685366751:station_loadings <- data.frame(
1731685366751:scores(species_pca, display = "sites"),
1731685366752:Station = year_data$station_temp
1731685366752:)
1731685366752:# Calculate variance explained
1731685366752:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1731685366753:# Set consistent axis limits across all plots
1731685366753:axis_limits <- max(abs(c(
1731685366753:species_scores$PC1, species_scores$PC2,
1731685366753:station_loadings$PC1, station_loadings$PC2
1731685366753:))) * 1.2  # Add 20% padding
1731685366754:# Create reversed PCA biplot
1731685366754:pca_plot <- ggplot() +
1731685366754:# Add species points
1731685366754:geom_point(data = species_scores,
1731685366754:aes(x = PC1, y = PC2),
1731685366754:size = 2,
1731685366755:shape = 19,
1731685366755:color = "black") +
1731685366755:# Add station arrows
1731685366755:geom_segment(data = station_loadings,
1731685366756:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731685366756:arrow = arrow(length = unit(0.2, "cm")),
1731685366756:color = "darkgrey") +
1731685366756:# Add station labels
1731685366756:geom_text_repel(data = station_loadings,
1731685366757:aes(x = PC1, y = PC2, label = Station),
1731685366757:size = 3.5,
1731685366757:fontface = "bold",
1731685366757:box.padding = 0.5,
1731685366757:point.padding = 0.3) +
1731685366758:# Add species labels
1731685366758:geom_text_repel(data = species_scores,
1731685366758:aes(x = PC1, y = PC2, label = Species),
1731685366758:size = 2.8,
1731685366758:fontface = "italic",
1731685366759:color = "grey30",
1731685366759:box.padding = 0.5,
1731685366759:point.padding = 0.3) +
1731685366759:# Set consistent axis limits
1731685366760:coord_fixed(xlim = c(-axis_limits, axis_limits),
1731685366760:ylim = c(-axis_limits, axis_limits)) +
1731685366760:theme_bw() +
1731685366760:theme(
1731685366760:panel.grid.minor = element_blank(),
1731685366761:panel.grid.major = element_line(color = "grey95"),
1731685366761:axis.text = element_text(color = "black", size = 8),
1731685366761:axis.title = element_text(size = 10),
1731685366762:plot.title = element_text(size = 11, face = "bold"),
1731685366762:plot.subtitle = element_text(size = 9),
1731685366762:plot.margin = margin(t = 10, r = 10, b = 10, l = 10)
1731685366762:) +
1731685366763:labs(
1731685366763:title = paste("PCA of benthic community composition -", year),
1731685366763:subtitle = "Species shown as points, stations as arrows",
1731685366763:x = paste0("PC1 (", var_explained[1], "%)"),
1731685366764:y = paste0("PC2 (", var_explained[2], "%)")
1731685366764:)
1731685366764:return(pca_plot)
1731685366764:}
1731685367427:# Create reversed PCA plots for each year
1731685367427:years <- sort(unique(species_matrix_all$year_temp))
1731685367989:pca_plots_reversed <- list()
1731685368517:for(year in years) {
1731685368517:year_data <- species_matrix_all %>%
1731685368518:filter(year_temp == year)
1731685368518:pca_plots_reversed[[as.character(year)]] <- create_year_pca_reversed(
1731685368518:year_data,
1731685368518:year,
1731685368518:dominant_species$species
1731685368518:)
1731685368518:ggsave(
1731685368518:paste0("output/pca_biplot_reversed_", year, ".png"),
1731685368518:pca_plots_reversed[[as.character(year)]],
1731685368518:width = 10, height = 8,
1731685368518:dpi = 300,
1731685368519:bg = "white"
1731685368519:)
1731685368519:}
1731685371995:# Combine all reversed plots
1731685371995:combined_plot_reversed <- wrap_plots(pca_plots_reversed, ncol = 2) +
1731685371995:plot_annotation(
1731685371995:title = "Temporal changes in community composition (1999, 2013-2017)",
1731685371995:subtitle = "Species shown as points, stations as arrows",
1731685371995:caption = "Based on species abundance data. Only species with >1% relative abundance shown."
1731685371995:)
1731685372187:ggsave("output/pca_biplots_reversed_all_years.png",
1731685372187:combined_plot_reversed,
1731685372187:width = 20, height = 15,
1731685372187:dpi = 300,
1731685372188:bg = "white")
1731685876534:species_data <- henda_long_matched %>% # see 03_nmds_analysis.R
1731685876534:group_by(station, year, species) %>%
1731685876534:summarise(N = sum(adjusted_density), .groups = "drop") %>%
1731685876534:pivot_wider(names_from = species, values_from = N, values_fill = 0)
1731685877948:# Separate environmental and species data
1731685877948:env_data <- data.frame(
1731685877949:Station = factor(species_data$station, levels = c("C4", "E3", "E4", "B5", "B8", "A7")),
1731685877949:Year = factor(species_data$year)
1731685877949:)
1731685878916:# Create species matrix (only numeric columns)
1731685878916:species_matrix <- species_data %>%
1731685878916:select(-station, -year) %>%
1731685878916:as.matrix()
1731685879693:# Perform SIMPER analysis for year-to-year comparisons
1731685879693:years <- sort(unique(as.character(env_data$Year)))
1731685880096:sequential_simper <- list()
1731685880511:for(i in 1:(length(years)-1)) {
1731685880511:# Select data for consecutive years
1731685880511:year_pair <- years[i:(i+1)]
1731685880512:year_data <- species_matrix[env_data$Year %in% year_pair, ]
1731685880512:year_groups <- env_data$Year[env_data$Year %in% year_pair]
1731685880512:# Perform SIMPER analysis for this pair of years
1731685880512:comparison_name <- paste(year_pair[1], year_pair[2], sep="_")
1731685880512:sequential_simper[[comparison_name]] <- simper(year_data, group = year_groups, permutations = 999)
1731685880512:}
1731685881343:# Baseline comparison (if 1999 data exists)
1731685881343:if ("1999" %in% years) {
1731685881343:baseline_data <- species_matrix[env_data$Year %in% c("1999", years), ]
1731685881343:baseline_groups <- env_data$Year[env_data$Year %in% c("1999", years)]
1731685881344:simper_baseline <- simper(baseline_data, group = baseline_groups, permutations = 999)
1731685881344:}
1731685883038:# Calculate Benthic Biotic Indices (BBI) for each year and station
1731685883038:calculate_biotic_indices <- function(data) {
1731685883038:required_cols <- c("year", "station", "species", "adjusted_density")
1731685883038:stopifnot(
1731685883038:"Missing required columns" = all(required_cols %in% colnames(data)),
1731685883039:"No data provided" = nrow(data) > 0,
1731685883039:"Negative density values found" = all(data$adjusted_density >= 0),
1731685883039:"Missing values found" = !any(is.na(data$adjusted_density))
1731685883039:)
1731685883039:target_stations <- c("C4", "A7", "B5", "B8", "E4", "E3")
1731685883040:indices_list <- list()
1731685883040:species_ambi_mapping <- data.frame(species = character(), AMBI = numeric())
1731685883040:for (current_year in sort(unique(data$year))) {
1731685883040:year_data <- data %>%
1731685883040:filter(year == current_year, station %in% target_stations) %>%
1731685883041:group_by(station, species) %>%
1731685883041:summarise(density = sum(adjusted_density), .groups = 'drop') %>%
1731685883041:pivot_wider(names_from = station, values_from = density, values_fill = 0)
1731685883041:bbi_results <- BBI(year_data)
1731685883042:# Extract and accumulate species-AMBI mappings
1731685883042:current_species_groups <- data.frame(
1731685883042:species = bbi_results$taxa[, 1],
1731685883042:AMBI = bbi_results$table$AMBI
1731685883042:)
1731685883043:# Combine with existing mappings, keeping the first non-NA AMBI value for each species
1731685883043:species_ambi_mapping <- bind_rows(species_ambi_mapping, current_species_groups) %>%
1731685883043:group_by(species) %>%
1731685883043:summarise(AMBI = first(na.omit(AMBI))) %>%
1731685883043:ungroup()
1731685883044:indices_list[[as.character(current_year)]] <- list(
1731685883044:indices = as.data.frame(cbind(bbi_results$BBI, year = current_year)),
1731685883044:classification = bbi_results$BBIclass,
1731685883044:normalized = as.data.frame(nEQR(bbi_results$BBI)[1])
1731685883044:)
1731685883044:}
1731685883045:# Add the species-AMBI mapping to the return list
1731685883045:indices_list$species_groups <- species_ambi_mapping
1731685883045:return(indices_list)
1731685883045:}
1731685884870:# Use the result dataframe that already has the correct density calculations
1731685884870:biotic_indices <- calculate_biotic_indices(df_result)
1731685887829:# Extract species groups from the accumulated mappings
1731685887829:species_groups <- biotic_indices$species_groups
1731685890310:# Function to summarize one comparison and add ecological group
1731685890310:summarize_one_comparison <- function(comparison_data, df_result, year1, year2, species_groups) {
1731685890310:# Construct the dynamic key
1731685890310:comparison_key <- paste(year1, year2, sep = "_")
1731685890310:# Access cusum and other components dynamically
1731685890311:species_names <- names(comparison_data[[comparison_key]]$cusum)
1731685890311:cumulative_contributions <- unname(comparison_data[[comparison_key]]$cusum)
1731685890311:individual_contributions <- c(cumulative_contributions[1], diff(cumulative_contributions))
1731685890311:abundance_changes <- sapply(species_names, function(species) {
1731685890312:abundance_year1 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year1])
1731685890312:abundance_year2 <- sum(df_result$adjusted_density[df_result$species == species & df_result$year == year2])
1731685890312:change <- abundance_year2 - abundance_year1
1731685890312:return(change)
1731685890312:})
1731685890313:ecological_groups <- sapply(species_names, function(species) {
1731685890313:match_index <- match(species, species_groups$species)
1731685890313:if (!is.na(match_index)) {
1731685890313:return(species_groups$AMBI[match_index])
1731685890313:} else {
1731685890313:return(NA)
1731685890314:}
1731685890314:})
1731685890314:df <- data.frame(
1731685890314:Species = species_names,
1731685890314:Cumulative_Percent = cumulative_contributions * 100,
1731685890315:Individual_Percent = individual_contributions * 100,
1731685890315:Abundance_Change = abundance_changes,
1731685890315:Ecological_Group = ecological_groups
1731685890315:)
1731685890315:return(df)
1731685890316:}
1731685893253:# Process sequential comparisons
1731685893253:print("Sequential Year Comparisons:")
1731685894205:for(i in seq_along(sequential_simper)) {
1731685894206:comparison_name <- names(sequential_simper)[i]
1731685894206:years <- unlist(strsplit(comparison_name, "_"))
1731685894206:year1 <- years[1]
1731685894206:year2 <- years[2]
1731685894206:cat(sprintf("\nComparison: %s\n", comparison_name))
1731685894207:# Process this comparison
1731685894207:summary_data <- summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups) %>%
1731685894207:filter(Cumulative_Percent <= 70) %>%
1731685894207:mutate(
1731685894207:Species = format_species_names(Species)
1731685894207:) %>%
1731685894208:mutate_if(is.numeric, ~ round(.x, 2))  # Round all numeric columns to 2 decimal places
1731685894208:rownames(summary_data) <- NULL
1731685894208:# Apply line breaks to column names
1731685894208:colnames(summary_data) <- gsub("_", "<br>", colnames(summary_data))
1731685894208:if(nrow(summary_data) > 0) {
1731685894209:# Export the summary data to a CSV file with a descriptive filename
1731685894209:#file_name <- sprintf("species_contributions_sequential_%s_%s.csv", year1, year2)
1731685894209:#write.csv(summary_data, file = file_name, row.names = FALSE)
1731685894209:# Print the table in console for reference
1731685894209:print(
1731685894210:kableExtra::kbl(
1731685894210:summary_data,
1731685894210:caption = sprintf("Species contributions for %s", comparison_name),
1731685894210:digits = 2,
1731685894210:format = "html",
1731685894210:escape = F
1731685894211:) %>%
1731685894211:kableExtra::kable_styling(
1731685894211:full_width = FALSE,
1731685894211:bootstrap_options = c("striped", "hover", "condensed", "responsive")
1731685894212:) %>%
1731685894212:kableExtra::row_spec(0, bold = TRUE, color = "black", background = "#f0f0f0") %>%  # Header styling
1731685894212:kableExtra::column_spec(1, bold = TRUE, width = "5em") %>%  # First column bold
1731685894212:kableExtra::add_header_above(c(" " = 1, "Species Contributions" = ncol(summary_data) - 1))  # Custom header
1731685894212:)
1731685894213:cat(sprintf("Exported summary data for %s to %s\n", comparison_name, file_name))
1731685894213:} else {
1731685894213:cat("No species met the contribution threshold for this comparison.\n")
1731685894213:}
1731685894214:}
1731685968805:# Generate all possible pairs of years for arbitrary comparison
1731685968806:arbitrary_year_pairs <- combn(c("1999","2017"), 2, simplify = FALSE)
1731685969423:# Initialize a new list to store results for arbitrary year pairs
1731685969423:sequential_simper_arbitrary <- list()
1731685969926:# New loop for arbitrary year pairs
1731685969926:for (pair in arbitrary_year_pairs) {
1731685969927:# Extract the two years from the current pair
1731685969927:year1 <- pair[1]
1731685969927:year2 <- pair[2]
1731685969927:# Select data for these two specific years
1731685969927:year_data <- species_matrix[env_data$Year %in% c(year1, year2), ]
1731685969927:year_groups <- env_data$Year[env_data$Year %in% c(year1, year2)]
1731685969928:# Generate a unique name for this comparison
1731685969928:comparison_name <- paste(year1, year2, sep = "_")
1731685969928:# Perform SIMPER analysis for this arbitrary pair of years
1731685969928:sequential_simper_arbitrary[[comparison_name]] <- simper(year_data, group = year_groups, permutations = 999)
1731685969928:}
1731685970238:print("Arbitrary Year Comparisons:")
1731685971150:for(i in seq_along(sequential_simper_arbitrary)) {
1731685971150:# Retrieve the comparison name for the arbitrary pair
1731685971151:comparison_name <- names(sequential_simper_arbitrary)[i]
1731685971151:years <- unlist(strsplit(comparison_name, "_"))
1731685971151:year1 <- years[1]
1731685971151:year2 <- years[2]
1731685971151:cat(sprintf("\nComparison: %s\n", comparison_name))
1731685971152:# Process this arbitrary comparison
1731685971152:summary_data <- summarize_one_comparison(sequential_simper_arbitrary[[i]], df_result, year1, year2, species_groups) %>%
1731685971152:filter(Cumulative_Percent <= 70) %>%
1731685971152:mutate(
1731685971152:Species = format_species_names(Species)
1731685971152:) %>%
1731685971153:mutate_if(is.numeric, ~ round(.x, 2))
1731685971153:rownames(summary_data) <- NULL
1731685971153:summary_data <- summary_data %>% mutate_if(is.numeric, ~ round(.x, 2))
1731685971153:# Apply line breaks to column names
1731685971153:colnames(summary_data) <- gsub("_", "<br>", colnames(summary_data))
1731685971154:if(nrow(summary_data) > 0) {
1731685971154:# Export the summary table to a CSV file
1731685971154:#file_name <- sprintf("species_contributions_%s.csv", comparison_name)
1731685971154:#write.csv(summary_data, file = file_name, row.names = FALSE)
1731685971154:print(
1731685971155:kableExtra::kbl(
1731685971155:summary_data,
1731685971155:caption = sprintf("Species contributions for %s", comparison_name),
1731685971155:digits = 2,
1731685971155:format = "html",
1731685971156:escape = F
1731685971156:) %>%
1731685971156:kableExtra::kable_styling(
1731685971156:full_width = FALSE,
1731685971156:bootstrap_options = c("striped", "hover", "condensed", "responsive")
1731685971156:) %>%
1731685971157:kableExtra::row_spec(0, bold = TRUE, color = "black", background = "#f0f0f0") %>%  # Header styling
1731685971157:kableExtra::column_spec(1, bold = TRUE, width = "5em") %>%  # First column bold
1731685971157:kableExtra::add_header_above(c(" " = 1, "Species Contributions" = ncol(summary_data) - 1))  # Custom header
1731685971157:)
1731685971158:} else {
1731685971158:cat("No species met the contribution threshold for this comparison.\n")
1731685971158:}
1731685971158:}
1731686015332:# Create a function to prepare data for visualization
1731686015332:prepare_simper_viz_data <- function(sequential_simper, df_result, species_groups) {
1731686015332:viz_data <- data.frame()
1731686015332:for(i in seq_along(sequential_simper)) {
1731686015332:comparison_name <- names(sequential_simper)[i]
1731686015333:years <- unlist(strsplit(comparison_name, "_"))
1731686015333:year1 <- years[1]
1731686015333:year2 <- years[2]
1731686015333:# Get summary data for this comparison
1731686015333:summary_data <- summarize_one_comparison(sequential_simper[[i]], df_result, year1, year2, species_groups) %>%
1731686015333:filter(Cumulative_Percent <= 70)
1731686015334:# Calculate mean abundance for each species in each year
1731686015334:year_data <- bind_rows(
1731686015334:df_result %>%
1731686015334:filter(year == year1, species %in% summary_data$Species) %>%
1731686015334:group_by(species) %>%
1731686015334:summarise(abundance = mean(adjusted_density), year = year1),
1731686015335:df_result %>%
1731686015335:filter(year == year2, species %in% summary_data$Species) %>%
1731686015335:group_by(species) %>%
1731686015335:summarise(abundance = mean(adjusted_density), year = year2)
1731686015335:)
1731686015336:# Add contribution information
1731686015336:year_data <- year_data %>%
1731686015336:left_join(summary_data %>%
1731686015336:select(Species, Individual_Percent, Ecological_Group),
1731686015336:by = c("species" = "Species"))
1731686015337:viz_data <- bind_rows(viz_data, year_data)
1731686015337:}
1731686015337:return(viz_data)
1731686015337:}
1731686016443:# Prepare visualization data
1731686016443:viz_data <- prepare_simper_viz_data(sequential_simper, df_result, species_groups)
1731686018013:# Create main SIMPER visualization
1731686018013:simper_plot <- ggplot(viz_data %>%
1731686018013:filter(Individual_Percent >= 5), # Focus on major contributors
1731686018013:aes(x = year, y = abundance, fill = factor(Ecological_Group))) +
1731686018013:geom_bar(stat = "identity", position = "dodge") +
1731686018013:facet_wrap(~species, scales = "free_y") +
1731686018013:scale_fill_brewer(palette = "Set2", name = "AMBI Group") +
1731686018014:theme_bw() +
1731686018014:labs(
1731686018014:x = "Year",
1731686018014:y = expression(paste("Abundance (individuals/m"^2, ")")),
1731686018014:title = "Temporal changes in key species abundance (1999 and 2013-2017)",
1731686018014:subtitle = "Species contributing >5% to between-year dissimilarity"
1731686018014:) +
1731686018014:theme(
1731686018014:axis.text.x = element_text(angle = 45, hjust = 1),
1731686018014:panel.grid.minor = element_blank(),
1731686018014:strip.text = element_text(face = "italic"),
1731686018014:legend.position = "bottom"
1731686018014:)
1731686021155:# Create summary table
1731686021155:summary_table <- viz_data %>%
1731686021155:group_by(species) %>%
1731686021155:summarise(
1731686021155:AMBI_Group = first(Ecological_Group),
1731686021155:contribution = first(Individual_Percent),
1731686021156:`2013` = mean(abundance[year == "2013"], na.rm = TRUE),
1731686021156:`2014` = mean(abundance[year == "2014"], na.rm = TRUE),
1731686021156:`2015` = mean(abundance[year == "2015"], na.rm = TRUE),
1731686021156:`2016` = mean(abundance[year == "2016"], na.rm = TRUE),
1731686021156:`2017` = mean(abundance[year == "2017"], na.rm = TRUE),
1731686021156:.groups = 'drop'
1731686021156:) %>%
1731686021157:mutate(
1731686021157:species = format_species_names(species)
1731686021157:) %>%
1731686021157:filter(rowSums(!is.na(across(starts_with("20")))) > 0) %>%
1731686021157:mutate(across(starts_with("20"), ~replace_na(., 0))) %>%
1731686021158:mutate(
1731686021158:across(starts_with("20"), ~round(., 0)),
1731686021158:contribution = round(contribution, 1)
1731686021158:) %>%
1731686021158:arrange(desc(contribution))
1731686021986:# Now create the formatted table
1731686021986:kableExtra::kbl(
1731686021986:summary_table,
1731686021987:caption = "Species contributions to community dissimilarity (2013-2017)",
1731686021987:format = "html",
1731686021987:col.names = c("Species", "AMBI Group", "% Contribution", "2013", "2014", "2015", "2016", "2017"),
1731686021987:align = c("l", "c", "r", "r", "r", "r", "r", "r")
1731686021987:) %>%
1731686021987:kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
1731686021987:full_width = FALSE) %>%
1731686021987:row_spec(0, bold = TRUE) %>%
1731686021988:column_spec(1, italic = TRUE) %>%
1731686021988:add_header_above(c(" " = 3, "Abundance (ind./m²)" = 5))
1731686023508:# Export plot and table
1731686023508:ggsave("output/simper_temporal_changes.png", simper_plot,
1731686023509:width = 12, height = 8, dpi = 300)
1731920916858:bbi_results
1731921095223:library(dplyr)
1731921095224:library(tidyr)
1731921095224:library(BBI)  # Ensure the BBI package is installed
1731921108115:install.packages('BBI')
1731921119415:library(dplyr)
1731921119416:library(tidyr)
1731921119416:library(BBI)  # Ensure the BBI package is installed
1731921120245:# Example data for two stations
1731921120245:station1 <- data.frame(
1731921120245:species = c("Scoloplos armiger", "Eteone longa", "ostracoda", "harpacticoida", "nematoda", "krabbalirfa", "Capitella capitata", "Malacoceros fuliginosus", "amphipoda", "Spionidae sp."),
1731921120245:count = c(190, 1, 1, 4, 2, 1, 1, 24, 2, 1)
1731921120245:) %>% filter(!species %in% c("ostracoda", "harpacticoida", "nematoda", "krabbalirfa","amphipoda"))
1731921120257:station2 <- data.frame(
1731921120257:species = c("Scoloplos armiger", "Microphthalmus aberrans", "Malacoceros fuliginosus", "Eteone longa"),
1731921120257:count = c(42, 2, 18, 1)
1731921120257:)
1731921120258:total_area <- 0.0225 * 3
1731921120258:# Add station labels
1731921120258:station1$station <- "st1"
1731921120258:station2$station <- "st2"
1731921120259:# Add total_area and adjusted count
1731921120259:station1$total_area <- total_area
1731921120259:station1$adjusted_count <- station1$count / total_area
1731921120259:station2$total_area <- total_area
1731921120260:station2$adjusted_count <- station2$count / total_area
1731921120260:# Combine both stations into a single long-format data frame
1731921120260:long_format_df <- rbind(station1, station2)
1731921120261:# Reorder columns for clarity
1731921120262:long_format_df <- long_format_df[, c("station", "species", "total_area", "count", "adjusted_count")]
1731921120262:# Display the long-format data frame
1731921120262:print(long_format_df)
1731921120266:# Prepare your data: species as rows, stations as columns
1731921120266:biotic_data <- long_format_df %>%
1731921120266:select(station, species, adjusted_count) %>%
1731921120266:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731921120286:# Run BBI to calculate indices
1731921120286:bbi_results <- BBI(biotic_data)
1731921120355:# Print BBI values and matched taxa
1731921120355:print("BBI Values:")
1731921120355:print(bbi_results$BBI)
1731921120355:print("Matched Taxa:")
1731921120356:print(bbi_results$taxa)
1731921120356:# Calculate nEQR using the BBI results
1731921120356:eqr_results <- nEQR(bbi_results$BBI)
1731921120357:# Print nEQR values and classes
1731921120357:print("nEQR Values:")
1731921120357:print(eqr_results$nEQR)
1731921120357:print("nEQR Classes:")
1731921120357:print(eqr_results$nEQR_class)
1731921197139:bbi_results
1731921702109:## Fyrir báðar stöðvar saman
1731921702110:krokurinn_data <- long_format_df %>%
1731921702110:mutate(station = "Krokurinn") %>%
1731921702110:group_by(station, species) %>%
1731921702110:summarise(
1731921702111:total_area = sum(total_area),
1731921702111:count = sum(count),
1731921702111:adjusted_count = sum(adjusted_count),
1731921702111:.groups = 'drop'
1731921702111:)
1731921705483:krokurinn_data
1731921763227:0.0225 * 6
1731921784531:1/0.0225
1731922382374:# Original data for "Krokurinn"
1731922382374:krokurinn_data <- long_format_df %>%
1731922382375:mutate(station = "Krokurinn") %>%
1731922382375:group_by(station, species) %>%
1731922382375:summarise(
1731922382375:total_area = 0.0225 * 6,
1731922382375:count = sum(count),
1731922382376:adjusted_count = sum(adjusted_count),
1731922382376:.groups = 'drop'
1731922382376:)
1731922384723:# Duplicate the data frame and change the station name
1731922384723:krokurinn2_data <- krokurinn_data %>%
1731922384723:mutate(station = "Krokurinn2")
1731922386050:# Combine both data frames
1731922386050:combined_data <- bind_rows(krokurinn_data, krokurinn2_data)
1731922386619:# Print the combined data frame
1731922386619:print(combined_data)
1731922391259:# Prepare your data: species as rows, stations as columns
1731922391259:biotic_data <- combined_data %>%
1731922391259:select(station, species, adjusted_count) %>%
1731922391259:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731922392043:# Run BBI to calculate indices
1731922392044:bbi_results <- BBI(biotic_data)
1731922395107:bbi_results
1731922529005:# Example data for two stations
1731922529005:station1 <- data.frame(
1731922529005:species = c("Scoloplos armiger", "Eteone longa", "ostracoda", "harpacticoida", "nematoda", "krabbalirfa", "Capitella capitata", "Malacoceros fuliginosus", "amphipoda", "Spionidae sp."),
1731922529006:count = c(190, 1, 1, 4, 2, 1, 1, 24, 2, 1)
1731922529006:) %>% filter(!species %in% c("ostracoda", "harpacticoida", "nematoda", "krabbalirfa"))
1731922530388:station2 <- data.frame(
1731922530388:species = c("Scoloplos armiger", "Microphthalmus aberrans", "Malacoceros fuliginosus", "Eteone longa"),
1731922530388:count = c(42, 2, 18, 1)
1731922530388:)
1731922531587:total_area <- 0.0225 * 3
1731922532647:# Add station labels
1731922532647:station1$station <- "st1"
1731922532926:station2$station <- "st2"
1731922533228:# Add total_area and adjusted count
1731922533228:station1$total_area <- total_area
1731922533828:station1$adjusted_count <- station1$count / total_area
1731922534142:station2$total_area <- total_area
1731922534436:station2$adjusted_count <- station2$count / total_area
1731922534868:# Combine both stations into a single long-format data frame
1731922534869:long_format_df <- rbind(station1, station2)
1731922535349:# Reorder columns for clarity
1731922535349:long_format_df <- long_format_df[, c("station", "species", "total_area", "count", "adjusted_count")]
1731922535948:# Display the long-format data frame
1731922535948:print(long_format_df)
1731922536803:# Prepare your data: species as rows, stations as columns
1731922536804:biotic_data <- long_format_df %>%
1731922536804:select(station, species, adjusted_count) %>%
1731922536804:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731922537850:# Run BBI to calculate indices
1731922537851:bbi_results <- BBI(biotic_data)
1731922540228:bbi_results
1731923050584:# Load necessary libraries
1731923050584:library(dplyr)
1731923050584:library(tidyr)
1731923050585:library(BBI)  # Ensure the BBI package is installed
1731923050585:# Example data for two stations
1731923050585:station1 <- data.frame(
1731923050586:species = c("Scoloplos armiger", "Eteone longa", "ostracoda", "harpacticoida", "nematoda", "krabbalirfa", "Capitella capitata", "Malacoceros fuliginosus", "amphipoda", "Spionidae sp."),
1731923050586:count = c(190, 1, 1, 4, 2, 1, 1, 24, 2, 1)
1731923050586:) %>% filter(!species %in% c("ostracoda", "harpacticoida", "nematoda", "krabbalirfa"))
1731923050589:station2 <- data.frame(
1731923050589:species = c("Scoloplos armiger", "Microphthalmus aberrans", "Malacoceros fuliginosus", "Eteone longa"),
1731923050589:count = c(42, 2, 18, 1)
1731923050589:)
1731923050590:total_area <- 0.0225 * 3
1731923050590:# Add station labels
1731923050590:station1$station <- "st1"
1731923050591:station2$station <- "st2"
1731923050591:# Add total_area and adjusted count
1731923050591:station1$total_area <- total_area
1731923050591:station1$adjusted_count <- station1$count / total_area
1731923050592:station2$total_area <- total_area
1731923050592:station2$adjusted_count <- station2$count / total_area
1731923050592:# Combine both stations into a single long-format data frame
1731923050592:long_format_df <- rbind(station1, station2)
1731923050593:# Reorder columns for clarity
1731923050593:long_format_df <- long_format_df[, c("station", "species", "total_area", "count", "adjusted_count")]
1731923050593:# Display the long-format data frame
1731923050593:print(long_format_df)
1731923050597:# Prepare your data: species as rows, stations as columns
1731923050597:biotic_data <- long_format_df %>%
1731923050597:select(station, species, adjusted_count) %>%
1731923050597:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731923050607:# Run BBI to calculate indices
1731923050607:bbi_results <- BBI(biotic_data)
1731923050677:# Print BBI values and matched taxa
1731923050677:print("BBI Values:")
1731923050678:print(bbi_results$BBI)
1731923050678:print("Matched Taxa:")
1731923050678:print(bbi_results$taxa)
1731923050679:# Calculate nEQR using the BBI results
1731923050679:eqr_results <- nEQR(bbi_results$BBI)
1731923050680:# Print nEQR values and classes
1731923050680:print("nEQR Values:")
1731923050680:print(eqr_results$nEQR)
1731923050680:print("nEQR Classes:")
1731923050680:print(eqr_results$nEQR_class)
1731923050681:## Fyrir báðar stöðvar saman
1731923050681:krokurinn_data <- long_format_df %>%
1731923050681:mutate(station = "Krokurinn") %>%
1731923050681:group_by(station, species) %>%
1731923050681:summarise(
1731923050681:total_area = sum(total_area),
1731923050681:count = sum(count),
1731923050681:adjusted_count = sum(adjusted_count),
1731923050681:.groups = 'drop'
1731923050681:)
1731923050687:library(dplyr)
1731923050688:# Original data for "Krokurinn"
1731923050688:krokurinn_data <- long_format_df %>%
1731923050688:mutate(station = "Krokurinn") %>%
1731923050688:group_by(station, species) %>%
1731923050688:summarise(
1731923050688:total_area = 0.0225 * 6,
1731923050688:count = sum(count),
1731923050688:adjusted_count = sum(adjusted_count),
1731923050689:.groups = 'drop'
1731923050689:)
1731923050694:# Duplicate the data frame and change the station name
1731923050694:krokurinn2_data <- krokurinn_data %>%
1731923050694:mutate(station = "Krokurinn2")
1731923050695:# Combine both data frames
1731923050695:combined_data <- bind_rows(krokurinn_data, krokurinn2_data)
1731923050696:# Print the combined data frame
1731923050696:print(combined_data)
1731923050730:# Prepare your data: species as rows, stations as columns
1731923050730:biotic_data <- combined_data %>%
1731923050731:select(station, species, adjusted_count) %>%
1731923050731:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731923050739:# Run BBI to calculate indices
1731923050739:bbi_results <- BBI(biotic_data)
1731923190846:filtered_data <- bbi_results %>%
1731923190846:select(station, NQI1, NQI1_Class)
1731923197345:rlang::last_trace()
1731923232808:filtered_data <- as.data.frame(bbi_results) %>%
1731923232809:select(station, NQI1, NQI1_Class)
1731923249949:str(bbi_results)
1731923275323:NQI1 <- as.data.frame(bbi_results$BBI)["NQI1"]
1731923275323:NQI1_Class <- as.data.frame(bbi_results$BBIclass)["NQI1"]
1731923275323:# Búa til töflu með stöðvarheitum, NQI1 og NQI1 Class
1731923275324:filtered_data <- data.frame(
1731923275324:station = rownames(as.data.frame(bbi_results$BBI)),
1731923275324:NQI1 = NQI1$NQI1,
1731923275324:NQI1_Class = NQI1_Class$NQI1
1731923275324:)
1731923275325:# Prenta töfluna
1731923275325:print(filtered_data)
1731923296742:# Example data for two stations
1731923296742:station1 <- data.frame(
1731923296742:species = c("Scoloplos armiger", "Eteone longa", "ostracoda", "harpacticoida", "nematoda", "krabbalirfa", "Capitella capitata", "Malacoceros fuliginosus", "amphipoda", "Spionidae sp."),
1731923296743:count = c(190, 1, 1, 4, 2, 1, 1, 24, 2, 1)
1731923296743:) %>% filter(!species %in% c("ostracoda", "harpacticoida", "nematoda", "krabbalirfa"))
1731923296747:station2 <- data.frame(
1731923296748:species = c("Scoloplos armiger", "Microphthalmus aberrans", "Malacoceros fuliginosus", "Eteone longa"),
1731923296748:count = c(42, 2, 18, 1)
1731923296748:)
1731923296749:total_area <- 0.0225 * 3
1731923296749:# Add station labels
1731923296749:station1$station <- "st1"
1731923296749:station2$station <- "st2"
1731923296750:# Add total_area and adjusted count
1731923296750:station1$total_area <- total_area
1731923296750:station1$adjusted_count <- station1$count / total_area
1731923296750:station2$total_area <- total_area
1731923296750:station2$adjusted_count <- station2$count / total_area
1731923296751:# Combine both stations into a single long-format data frame
1731923296751:long_format_df <- rbind(station1, station2)
1731923296751:# Reorder columns for clarity
1731923296752:long_format_df <- long_format_df[, c("station", "species", "total_area", "count", "adjusted_count")]
1731923296752:# Display the long-format data frame
1731923296752:print(long_format_df)
1731923296756:# Prepare your data: species as rows, stations as columns
1731923296756:biotic_data <- long_format_df %>%
1731923296757:select(station, species, adjusted_count) %>%
1731923296757:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731923296765:# Run BBI to calculate indices
1731923296765:bbi_results <- BBI(biotic_data)
1731923296830:# Print BBI values and matched taxa
1731923296830:print("BBI Values:")
1731923296831:print(bbi_results$BBI)
1731923296831:print("Matched Taxa:")
1731923296831:print(bbi_results$taxa)
1731923296832:# Calculate nEQR using the BBI results
1731923296832:eqr_results <- nEQR(bbi_results$BBI)
1731923296832:# Print nEQR values and classes
1731923296832:print("nEQR Values:")
1731923296832:print(eqr_results$nEQR)
1731923296833:print("nEQR Classes:")
1731923296833:print(eqr_results$nEQR_class)
1731923296833:NQI1 <- as.data.frame(bbi_results$BBI)["NQI1"]
1731923296833:NQI1_Class <- as.data.frame(bbi_results$BBIclass)["NQI1"]
1731923296834:# Búa til töflu með stöðvarheitum, NQI1 og NQI1 Class
1731923296834:filtered_data <- data.frame(
1731923296834:station = rownames(as.data.frame(bbi_results$BBI)),
1731923296834:NQI1 = NQI1$NQI1,
1731923296834:NQI1_Class = NQI1_Class$NQI1
1731923296834:)
1731923296835:# Prenta töfluna
1731923296835:print(filtered_data)
1731923312725:## Fyrir báðar stöðvar saman
1731923312725:krokurinn_data <- long_format_df %>%
1731923312725:mutate(station = "Krokurinn") %>%
1731923312726:group_by(station, species) %>%
1731923312726:summarise(
1731923312726:total_area = sum(total_area),
1731923312726:count = sum(count),
1731923312726:adjusted_count = sum(adjusted_count),
1731923312726:.groups = 'drop'
1731923312727:)
1731923312733:library(dplyr)
1731923312733:# Original data for "Krokurinn"
1731923312734:krokurinn_data <- long_format_df %>%
1731923312734:mutate(station = "Krokurinn") %>%
1731923312734:group_by(station, species) %>%
1731923312734:summarise(
1731923312734:total_area = 0.0225 * 6,
1731923312734:count = sum(count),
1731923312734:adjusted_count = sum(adjusted_count),
1731923312735:.groups = 'drop'
1731923312735:)
1731923312739:# Duplicate the data frame and change the station name
1731923312739:krokurinn2_data <- krokurinn_data %>%
1731923312739:mutate(station = "Krokurinn2")
1731923312741:# Combine both data frames
1731923312741:combined_data <- bind_rows(krokurinn_data, krokurinn2_data)
1731923312741:# Print the combined data frame
1731923312742:print(combined_data)
1731923312770:# Prepare your data: species as rows, stations as columns
1731923312771:biotic_data <- combined_data %>%
1731923312771:select(station, species, adjusted_count) %>%
1731923312771:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731923312778:# Run BBI to calculate indices
1731923312778:bbi_results <- BBI(biotic_data)
1731923312868:NQI1 <- as.data.frame(bbi_results$BBI)["NQI1"]
1731923312868:NQI1_Class <- as.data.frame(bbi_results$BBIclass)["NQI1"]
1731923312868:# Búa til töflu með stöðvarheitum, NQI1 og NQI1 Class
1731923312868:filtered_data <- data.frame(
1731923312868:station = rownames(as.data.frame(bbi_results$BBI)),
1731923312868:NQI1 = NQI1$NQI1,
1731923312869:NQI1_Class = NQI1_Class$NQI1
1731923312869:)
1731923312869:# Prenta töfluna
1731923312869:print(filtered_data)
1731923437230:# Búa til HTML töflu með flextable
1731923437231:library(flextable)
1731923446573:install.packages(‘flextable’)
1731923451501:install.packages('flextable')
1731923466525:# Búa til HTML töflu með flextable
1731923466525:library(flextable)
1731923466887:# Gögnin
1731923466887:data <- data.frame(
1731923466887:station = c("st1", "st2", "Krokurinn"),
1731923466888:NQI1 = c(0.4033375, 0.3607073, 0.4097562),
1731923466888:NQI1_Class = c("Bad", "Bad", "Bad")
1731923466888:)
1731923466888:# Búa til flextable
1731923466888:ft <- flextable(data) %>%
1731923466889:set_header_labels(
1731923466889:station = "Stöð",
1731923466889:NQI1 = "NQI1",
1731923466889:NQI1_Class = "NQI1 Class"
1731923466889:) %>%
1731923466889:autofit() %>%
1731923466890:theme_vanilla()
1731923467020:# Vista sem HTML
1731923467020:save_as_html(ft, path = "table.html")
1731923642757:AMBI <- as.data.frame(bbi_results$BBI)["AMBI"]
1731923655084:AMBI$AMBI
1731923677758:# Búa til töflu með stöðvarheitum, NQI1 og NQI1 Class
1731923677758:filtered_data <- data.frame(
1731923677758:station = rownames(as.data.frame(bbi_results$BBI)),
1731923677759:AMBI = AMBI$AMBI
1731923677759:NQI1 = NQI1$NQI1,
1731923684284:# Búa til töflu með stöðvarheitum, NQI1 og NQI1 Class
1731923684284:filtered_data <- data.frame(
1731923684285:station = rownames(as.data.frame(bbi_results$BBI)),
1731923684285:AMBI = AMBI$AMBI,
1731923684285:NQI1 = NQI1$NQI1,
1731923684285:NQI1_Class = NQI1_Class$NQI1
1731923684285:)
1731923684973:# Prenta töfluna
1731923684974:print(filtered_data)
1731923709323:# Búa til töflu með stöðvarheitum, NQI1 og NQI1 Class
1731923709323:filtered_data <- data.frame(
1731923709323:station = rownames(as.data.frame(bbi_results$BBI)),
1731923709324:AMBI = AMBI$AMBI,
1731923709324:NQI1 = NQI1$NQI1,
1731923709324:NQI1_Class = NQI1_Class$NQI1
1731923709324:)
1731923722924:# Example data for two stations
1731923722925:station1 <- data.frame(
1731923722925:species = c("Scoloplos armiger", "Eteone longa", "ostracoda", "harpacticoida", "nematoda", "krabbalirfa", "Capitella capitata", "Malacoceros fuliginosus", "amphipoda", "Spionidae sp."),
1731923722925:count = c(190, 1, 1, 4, 2, 1, 1, 24, 2, 1)
1731923722925:) %>% filter(!species %in% c("ostracoda", "harpacticoida", "nematoda", "krabbalirfa"))
1731923722927:station2 <- data.frame(
1731923722928:species = c("Scoloplos armiger", "Microphthalmus aberrans", "Malacoceros fuliginosus", "Eteone longa"),
1731923722928:count = c(42, 2, 18, 1)
1731923722928:)
1731923722929:total_area <- 0.0225 * 3
1731923722929:# Add station labels
1731923722929:station1$station <- "st1"
1731923722929:station2$station <- "st2"
1731923722929:# Add total_area and adjusted count
1731923722930:station1$total_area <- total_area
1731923722930:station1$adjusted_count <- station1$count / total_area
1731923722930:station2$total_area <- total_area
1731923722930:station2$adjusted_count <- station2$count / total_area
1731923722930:# Combine both stations into a single long-format data frame
1731923722930:long_format_df <- rbind(station1, station2)
1731923722931:# Reorder columns for clarity
1731923722931:long_format_df <- long_format_df[, c("station", "species", "total_area", "count", "adjusted_count")]
1731923722932:# Display the long-format data frame
1731923722932:print(long_format_df)
1731923722935:# Prepare your data: species as rows, stations as columns
1731923722935:biotic_data <- long_format_df %>%
1731923722935:select(station, species, adjusted_count) %>%
1731923722935:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731923722942:# Run BBI to calculate indices
1731923722942:bbi_results <- BBI(biotic_data)
1731923723006:# Print BBI values and matched taxa
1731923723006:print("BBI Values:")
1731923723006:print(bbi_results$BBI)
1731923723007:print("Matched Taxa:")
1731923723007:print(bbi_results$taxa)
1731923723007:# Calculate nEQR using the BBI results
1731923723007:eqr_results <- nEQR(bbi_results$BBI)
1731923723008:# Print nEQR values and classes
1731923723008:print("nEQR Values:")
1731923723008:print(eqr_results$nEQR)
1731923723009:print("nEQR Classes:")
1731923723009:print(eqr_results$nEQR_class)
1731923723009:NQI1 <- as.data.frame(bbi_results$BBI)["NQI1"]
1731923723009:NQI1_Class <- as.data.frame(bbi_results$BBIclass)["NQI1"]
1731923723009:# Búa til töflu með stöðvarheitum, NQI1 og NQI1 Class
1731923723009:filtered_data <- data.frame(
1731923723009:station = rownames(as.data.frame(bbi_results$BBI)),
1731923723010:AMBI = AMBI$AMBI,
1731923723010:NQI1 = NQI1$NQI1,
1731923723010:NQI1_Class = NQI1_Class$NQI1
1731923723010:)
1731923723010:# Prenta töfluna
1731923723010:print(filtered_data)
1731923731869:# Example data for two stations
1731923731869:station1 <- data.frame(
1731923731870:species = c("Scoloplos armiger", "Eteone longa", "ostracoda", "harpacticoida", "nematoda", "krabbalirfa", "Capitella capitata", "Malacoceros fuliginosus", "amphipoda", "Spionidae sp."),
1731923731870:count = c(190, 1, 1, 4, 2, 1, 1, 24, 2, 1)
1731923731870:) %>% filter(!species %in% c("ostracoda", "harpacticoida", "nematoda", "krabbalirfa"))
1731923731872:station2 <- data.frame(
1731923731872:species = c("Scoloplos armiger", "Microphthalmus aberrans", "Malacoceros fuliginosus", "Eteone longa"),
1731923731872:count = c(42, 2, 18, 1)
1731923731872:)
1731923731872:total_area <- 0.0225 * 3
1731923731872:# Add station labels
1731923731873:station1$station <- "st1"
1731923731873:station2$station <- "st2"
1731923731873:# Add total_area and adjusted count
1731923731873:station1$total_area <- total_area
1731923731873:station1$adjusted_count <- station1$count / total_area
1731923731873:station2$total_area <- total_area
1731923731873:station2$adjusted_count <- station2$count / total_area
1731923731873:# Combine both stations into a single long-format data frame
1731923731873:long_format_df <- rbind(station1, station2)
1731923731874:# Reorder columns for clarity
1731923731874:long_format_df <- long_format_df[, c("station", "species", "total_area", "count", "adjusted_count")]
1731923731874:# Display the long-format data frame
1731923731874:print(long_format_df)
1731923731876:# Prepare your data: species as rows, stations as columns
1731923731876:biotic_data <- long_format_df %>%
1731923731876:select(station, species, adjusted_count) %>%
1731923731876:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731923731884:# Run BBI to calculate indices
1731923731884:bbi_results <- BBI(biotic_data)
1731923731969:# Print BBI values and matched taxa
1731923731969:print("BBI Values:")
1731923731969:print(bbi_results$BBI)
1731923731969:print("Matched Taxa:")
1731923731969:print(bbi_results$taxa)
1731923731970:# Calculate nEQR using the BBI results
1731923731970:eqr_results <- nEQR(bbi_results$BBI)
1731923731971:# Print nEQR values and classes
1731923731971:print("nEQR Values:")
1731923731971:print(eqr_results$nEQR)
1731923731971:print("nEQR Classes:")
1731923731972:print(eqr_results$nEQR_class)
1731923731972:NQI1 <- as.data.frame(bbi_results$BBI)["NQI1"]
1731923731972:NQI1_Class <- as.data.frame(bbi_results$BBIclass)["NQI1"]
1731923731972:# Búa til töflu með stöðvarheitum, NQI1 og NQI1 Class
1731923731972:filtered_data <- data.frame(
1731923731972:station = rownames(as.data.frame(bbi_results$BBI)),
1731923731973:AMBI = AMBI$AMBI,
1731923731973:NQI1 = NQI1$NQI1,
1731923731973:NQI1_Class = NQI1_Class$NQI1
1731923731973:)
1731923731973:# Prenta töfluna
1731923731973:print(filtered_data)
1731923731974:## Fyrir báðar stöðvar saman
1731923731974:krokurinn_data <- long_format_df %>%
1731923731974:mutate(station = "Krokurinn") %>%
1731923731974:group_by(station, species) %>%
1731923731974:summarise(
1731923731975:total_area = sum(total_area),
1731923731975:count = sum(count),
1731923731975:adjusted_count = sum(adjusted_count),
1731923731975:.groups = 'drop'
1731923731975:)
1731923731979:library(dplyr)
1731923731980:# Original data for "Krokurinn"
1731923731980:krokurinn_data <- long_format_df %>%
1731923731980:mutate(station = "Krokurinn") %>%
1731923731980:group_by(station, species) %>%
1731923731980:summarise(
1731923731980:total_area = 0.0225 * 6,
1731923731980:count = sum(count),
1731923731980:adjusted_count = sum(adjusted_count),
1731923731980:.groups = 'drop'
1731923731980:)
1731923731985:# Duplicate the data frame and change the station name
1731923731985:krokurinn2_data <- krokurinn_data %>%
1731923731985:mutate(station = "Krokurinn2")
1731923731986:# Combine both data frames
1731923731986:combined_data <- bind_rows(krokurinn_data, krokurinn2_data)
1731923731986:# Print the combined data frame
1731923731986:print(combined_data)
1731923732013:# Prepare your data: species as rows, stations as columns
1731923732013:biotic_data <- combined_data %>%
1731923732013:select(station, species, adjusted_count) %>%
1731923732013:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731923732020:# Run BBI to calculate indices
1731923732020:bbi_results <- BBI(biotic_data)
1731923732087:AMBI <- as.data.frame(bbi_results$BBI)["AMBI"]
1731923732088:NQI1 <- as.data.frame(bbi_results$BBI)["NQI1"]
1731923732088:NQI1_Class <- as.data.frame(bbi_results$BBIclass)["NQI1"]
1731923732088:# Búa til töflu með stöðvarheitum, NQI1 og NQI1 Class
1731923732088:filtered_data <- data.frame(
1731923732089:station = rownames(as.data.frame(bbi_results$BBI)),
1731923732089:AMBI = AMBI$AMBI,
1731923732089:NQI1 = NQI1$NQI1,
1731923732089:NQI1_Class = NQI1_Class$NQI1
1731923732089:)
1731923732090:# Prenta töfluna
1731923732090:print(filtered_data)
1731923817925:# Example data for two stations
1731923817925:station1 <- data.frame(
1731923817925:species = c("Scoloplos armiger", "Eteone longa", "ostracoda", "harpacticoida", "nematoda", "krabbalirfa", "Capitella capitata", "Malacoceros fuliginosus", "amphipoda", "Spionidae sp."),
1731923817926:count = c(190, 1, 1, 4, 2, 1, 1, 24, 2, 1)
1731923817926:) %>% filter(!species %in% c("ostracoda", "harpacticoida", "nematoda", "krabbalirfa"))
1731923817928:station2 <- data.frame(
1731923817929:species = c("Scoloplos armiger", "Microphthalmus aberrans", "Malacoceros fuliginosus", "Eteone longa"),
1731923817929:count = c(42, 2, 18, 1)
1731923817929:)
1731923817930:total_area <- 0.0225 * 3
1731923817930:# Add station labels
1731923817930:station1$station <- "st1"
1731923817930:station2$station <- "st2"
1731923817930:# Add total_area and adjusted count
1731923817931:station1$total_area <- total_area
1731923817931:station1$adjusted_count <- station1$count / total_area
1731923817931:station2$total_area <- total_area
1731923817931:station2$adjusted_count <- station2$count / total_area
1731923817932:# Combine both stations into a single long-format data frame
1731923817932:long_format_df <- rbind(station1, station2)
1731923817932:# Reorder columns for clarity
1731923817932:long_format_df <- long_format_df[, c("station", "species", "total_area", "count", "adjusted_count")]
1731923817933:# Display the long-format data frame
1731923817933:print(long_format_df)
1731923817936:# Prepare your data: species as rows, stations as columns
1731923817937:biotic_data <- long_format_df %>%
1731923817937:select(station, species, adjusted_count) %>%
1731923817937:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731923817944:# Run BBI to calculate indices
1731923817944:bbi_results <- BBI(biotic_data)
1731923818026:# Calculate nEQR using the BBI results
1731923818027:eqr_results <- nEQR(bbi_results$BBI)
1731923818027:AMBI <- as.data.frame(bbi_results$BBI)["AMBI"]
1731923818027:NQI1 <- as.data.frame(bbi_results$BBI)["NQI1"]
1731923818027:NQI1_Class <- as.data.frame(bbi_results$BBIclass)["NQI1"]
1731923818028:# Búa til töflu með stöðvarheitum, NQI1 og NQI1 Class
1731923818028:filtered_data <- data.frame(
1731923818028:station = rownames(as.data.frame(bbi_results$BBI)),
1731923818028:AMBI = AMBI$AMBI,
1731923818028:NQI1 = NQI1$NQI1,
1731923818028:NQI1_Class = NQI1_Class$NQI1
1731923818028:)
1731923818029:# Prenta töfluna
1731923818029:print(filtered_data)
1731923818030:## Fyrir báðar stöðvar saman
1731923818030:krokurinn_data <- long_format_df %>%
1731923818030:mutate(station = "Krokurinn") %>%
1731923818030:group_by(station, species) %>%
1731923818030:summarise(
1731923818030:total_area = sum(total_area),
1731923818030:count = sum(count),
1731923818030:adjusted_count = sum(adjusted_count),
1731923818030:.groups = 'drop'
1731923818030:)
1731923818035:library(dplyr)
1731923818035:# Original data for "Krokurinn"
1731923818035:krokurinn_data <- long_format_df %>%
1731923818035:mutate(station = "Krokurinn") %>%
1731923818035:group_by(station, species) %>%
1731923818035:summarise(
1731923818035:total_area = 0.0225 * 6,
1731923818035:count = sum(count),
1731923818035:adjusted_count = sum(adjusted_count),
1731923818035:.groups = 'drop'
1731923818035:)
1731923818040:# Duplicate the data frame and change the station name
1731923818040:krokurinn2_data <- krokurinn_data %>%
1731923818040:mutate(station = "Krokurinn2")
1731923818041:# Combine both data frames
1731923818041:combined_data <- bind_rows(krokurinn_data, krokurinn2_data)
1731923818041:# Print the combined data frame
1731923818041:print(combined_data)
1731923818066:# Prepare your data: species as rows, stations as columns
1731923818066:biotic_data <- combined_data %>%
1731923818067:select(station, species, adjusted_count) %>%
1731923818067:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731923818073:# Run BBI to calculate indices
1731923818073:bbi_results <- BBI(biotic_data)
1731923818141:AMBI <- as.data.frame(bbi_results$BBI)["AMBI"]
1731923818141:NQI1 <- as.data.frame(bbi_results$BBI)["NQI1"]
1731923818141:NQI1_Class <- as.data.frame(bbi_results$BBIclass)["NQI1"]
1731923818141:# Búa til töflu með stöðvarheitum, NQI1 og NQI1 Class
1731923818141:filtered_data <- data.frame(
1731923818142:station = rownames(as.data.frame(bbi_results$BBI)),
1731923818142:AMBI = AMBI$AMBI,
1731923818142:NQI1 = NQI1$NQI1,
1731923818142:NQI1_Class = NQI1_Class$NQI1
1731923818142:)
1731923818143:# Prenta töfluna
1731923818143:print(filtered_data)
1731923846021:# Example data for two stations
1731923846021:station1 <- data.frame(
1731923846022:species = c("Scoloplos armiger", "Eteone longa", "ostracoda", "harpacticoida", "nematoda", "krabbalirfa", "Capitella capitata", "Malacoceros fuliginosus", "amphipoda", "Spionidae sp."),
1731923846022:count = c(190, 1, 1, 4, 2, 1, 1, 24, 2, 1)
1731923846022:) %>% filter(!species %in% c("ostracoda", "harpacticoida", "nematoda", "krabbalirfa"))
1731923846024:station2 <- data.frame(
1731923846024:species = c("Scoloplos armiger", "Microphthalmus aberrans", "Malacoceros fuliginosus", "Eteone longa"),
1731923846024:count = c(42, 2, 18, 1)
1731923846025:)
1731923846025:total_area <- 0.0225 * 3
1731923846025:# Add station labels
1731923846026:station1$station <- "st1"
1731923846026:station2$station <- "st2"
1731923846026:# Add total_area and adjusted count
1731923846026:station1$total_area <- total_area
1731923846026:station1$adjusted_count <- station1$count / total_area
1731923846027:station2$total_area <- total_area
1731923846027:station2$adjusted_count <- station2$count / total_area
1731923846027:# Combine both stations into a single long-format data frame
1731923846027:long_format_df <- rbind(station1, station2)
1731923846028:# Reorder columns for clarity
1731923846028:long_format_df <- long_format_df[, c("station", "species", "total_area", "count", "adjusted_count")]
1731923846028:# Prepare your data: species as rows, stations as columns
1731923846028:biotic_data <- long_format_df %>%
1731923846028:select(station, species, adjusted_count) %>%
1731923846029:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731923846035:# Run BBI to calculate indices
1731923846035:bbi_results <- BBI(biotic_data)
1731923846099:# Calculate nEQR using the BBI results
1731923846099:eqr_results <- nEQR(bbi_results$BBI)
1731923846099:AMBI <- as.data.frame(bbi_results$BBI)["AMBI"]
1731923846100:NQI1 <- as.data.frame(bbi_results$BBI)["NQI1"]
1731923846100:NQI1_Class <- as.data.frame(bbi_results$BBIclass)["NQI1"]
1731923846100:# Búa til töflu með stöðvarheitum, NQI1 og NQI1 Class
1731923846100:filtered_data <- data.frame(
1731923846100:station = rownames(as.data.frame(bbi_results$BBI)),
1731923846100:AMBI = AMBI$AMBI,
1731923846100:NQI1 = NQI1$NQI1,
1731923846100:NQI1_Class = NQI1_Class$NQI1
1731923846100:)
1731923846101:## Fyrir báðar stöðvar saman
1731923846101:krokurinn_data <- long_format_df %>%
1731923846101:mutate(station = "Krokurinn") %>%
1731923846101:group_by(station, species) %>%
1731923846101:summarise(
1731923846101:total_area = sum(total_area),
1731923846101:count = sum(count),
1731923846101:adjusted_count = sum(adjusted_count),
1731923846101:.groups = 'drop'
1731923846101:)
1731923846106:library(dplyr)
1731923846106:# Original data for "Krokurinn"
1731923846106:krokurinn_data <- long_format_df %>%
1731923846106:mutate(station = "Krokurinn") %>%
1731923846106:group_by(station, species) %>%
1731923846106:summarise(
1731923846106:total_area = 0.0225 * 6,
1731923846106:count = sum(count),
1731923846106:adjusted_count = sum(adjusted_count),
1731923846106:.groups = 'drop'
1731923846106:)
1731923846111:# Duplicate the data frame and change the station name
1731923846111:krokurinn2_data <- krokurinn_data %>%
1731923846111:mutate(station = "Krokurinn2")
1731923846112:# Combine both data frames
1731923846112:combined_data <- bind_rows(krokurinn_data, krokurinn2_data)
1731923846112:# Prepare your data: species as rows, stations as columns
1731923846112:biotic_data <- combined_data %>%
1731923846112:select(station, species, adjusted_count) %>%
1731923846112:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731923846119:# Run BBI to calculate indices
1731923846119:bbi_results <- BBI(biotic_data)
1731923846184:AMBI <- as.data.frame(bbi_results$BBI)["AMBI"]
1731923846184:NQI1 <- as.data.frame(bbi_results$BBI)["NQI1"]
1731923846184:NQI1_Class <- as.data.frame(bbi_results$BBIclass)["NQI1"]
1731923846184:# Búa til töflu með stöðvarheitum, NQI1 og NQI1 Class
1731923846185:filtered_data <- data.frame(
1731923846185:station = rownames(as.data.frame(bbi_results$BBI)),
1731923846185:AMBI = AMBI$AMBI,
1731923846185:NQI1 = NQI1$NQI1,
1731923846185:NQI1_Class = NQI1_Class$NQI1
1731923846185:)
1731923846186:# Prenta töfluna
1731923846186:print(filtered_data)
1731923868116:# Example data for two stations
1731923868116:station1 <- data.frame(
1731923868116:species = c("Scoloplos armiger", "Eteone longa", "ostracoda", "harpacticoida", "nematoda", "krabbalirfa", "Capitella capitata", "Malacoceros fuliginosus", "amphipoda", "Spionidae sp."),
1731923868116:count = c(190, 1, 1, 4, 2, 1, 1, 24, 2, 1)
1731923868116:) %>% filter(!species %in% c("ostracoda", "harpacticoida", "nematoda", "krabbalirfa"))
1731923868118:station2 <- data.frame(
1731923868118:species = c("Scoloplos armiger", "Microphthalmus aberrans", "Malacoceros fuliginosus", "Eteone longa"),
1731923868118:count = c(42, 2, 18, 1)
1731923868118:)
1731923868119:total_area <- 0.0225 * 3
1731923868119:# Add station labels
1731923868119:station1$station <- "st1"
1731923868120:station2$station <- "st2"
1731923868120:# Add total_area and adjusted count
1731923868120:station1$total_area <- total_area
1731923868120:station1$adjusted_count <- station1$count / total_area
1731923868120:station2$total_area <- total_area
1731923868121:station2$adjusted_count <- station2$count / total_area
1731923868121:# Combine both stations into a single long-format data frame
1731923868121:long_format_df <- rbind(station1, station2)
1731923868121:# Reorder columns for clarity
1731923868121:long_format_df <- long_format_df[, c("station", "species", "total_area", "count", "adjusted_count")]
1731923868122:# Prepare your data: species as rows, stations as columns
1731923868122:biotic_data <- long_format_df %>%
1731923868122:select(station, species, adjusted_count) %>%
1731923868122:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731923868138:# Run BBI to calculate indices
1731923868138:bbi_results <- BBI(biotic_data)
1731923868202:# Calculate nEQR using the BBI results
1731923868202:eqr_results <- nEQR(bbi_results$BBI)
1731923868202:AMBI <- as.data.frame(bbi_results$BBI)["AMBI"]
1731923868202:NQI1 <- as.data.frame(bbi_results$BBI)["NQI1"]
1731923868202:NQI1_Class <- as.data.frame(bbi_results$BBIclass)["NQI1"]
1731923868203:# Búa til töflu með stöðvarheitum, NQI1 og NQI1 Class
1731923868203:filtered_data <- data.frame(
1731923868203:station = rownames(as.data.frame(bbi_results$BBI)),
1731923868203:AMBI = AMBI$AMBI,
1731923868203:NQI1 = NQI1$NQI1,
1731923868203:NQI1_Class = NQI1_Class$NQI1
1731923868203:)
1731923868204:print(filtered_data)
1731923868204:## Fyrir báðar stöðvar saman
1731923868205:krokurinn_data <- long_format_df %>%
1731923868205:mutate(station = "Krokurinn") %>%
1731923868205:group_by(station, species) %>%
1731923868205:summarise(
1731923868205:total_area = sum(total_area),
1731923868205:count = sum(count),
1731923868205:adjusted_count = sum(adjusted_count),
1731923868205:.groups = 'drop'
1731923868205:)
1731923868209:library(dplyr)
1731923868210:# Original data for "Krokurinn"
1731923868210:krokurinn_data <- long_format_df %>%
1731923868210:mutate(station = "Krokurinn") %>%
1731923868210:group_by(station, species) %>%
1731923868210:summarise(
1731923868210:total_area = 0.0225 * 6,
1731923868210:count = sum(count),
1731923868210:adjusted_count = sum(adjusted_count),
1731923868210:.groups = 'drop'
1731923868210:)
1731923868214:# Duplicate the data frame and change the station name
1731923868214:krokurinn2_data <- krokurinn_data %>%
1731923868214:mutate(station = "Krokurinn2")
1731923868215:# Combine both data frames
1731923868215:combined_data <- bind_rows(krokurinn_data, krokurinn2_data)
1731923868216:# Prepare your data: species as rows, stations as columns
1731923868216:biotic_data <- combined_data %>%
1731923868216:select(station, species, adjusted_count) %>%
1731923868216:pivot_wider(names_from = station, values_from = adjusted_count, values_fill = 0)
1731923868222:# Run BBI to calculate indices
1731923868223:bbi_results <- BBI(biotic_data)
1731923868294:AMBI <- as.data.frame(bbi_results$BBI)["AMBI"]
1731923868295:NQI1 <- as.data.frame(bbi_results$BBI)["NQI1"]
1731923868295:NQI1_Class <- as.data.frame(bbi_results$BBIclass)["NQI1"]
1731923868295:# Búa til töflu með stöðvarheitum, NQI1 og NQI1 Class
1731923868295:filtered_data <- data.frame(
1731923868295:station = rownames(as.data.frame(bbi_results$BBI)),
1731923868295:AMBI = AMBI$AMBI,
1731923868296:NQI1 = NQI1$NQI1,
1731923868296:NQI1_Class = NQI1_Class$NQI1
1731923868296:)
1731923868296:# Prenta töfluna
1731923868297:print(filtered_data)
1731946330064:library(readxl)
1731946330772:library(ggplot2)
1731946331300:library(factoextra)
1731946338897:install.packages(factoextra)
1731946342146:install.packages('factoextra')
1731946439110:library(factoextra)
1731946443195:# 1. Load Data
1731946443195:data <- read_excel("C:\Users\valty\Downloads\Copy of Fjoldi_a_fermetra_3-js okt 2024 hreinsað eintak nota í analysur endubætt 1.xlsx", sheet = "1999")
1731946472197:# 1. Load Data
1731946472197:data <- read_excel("C:/Users/valty/Downloads/Copy of Fjoldi_a_fermetra_3-js okt 2024 hreinsað eintak nota í analysur endubætt 1.xlsx", sheet = "1999")
1731946502873:# 1. Load Data
1731946502873:data <- read_excel("C:/Users/valty/Downloads/gogn.xlsx", sheet = "1999")
1731946551195:# 1. Load Data
1731946551195:data <- read_excel("data/processed/gogn.xlsx", sheet = "1999")
1731946563579:?read_excel
1731946590851:# 2. Prepare Data
1731946590851:rownames(data) <- data$Flokkun  # Set species/taxa as rownames
1731946598833:data_matrix <- as.matrix(data[, -1])  # Select only station columns
1731946603106:data_matrix
1731946622652:data <- as.data.frame(data)
1731946641564:data <- data[,-1:2]
1731946649211:data <- data[,-c(1:2)]
1731946655978:str(data)
1731946672980:# 1. Load Data
1731946672981:data <- read_excel("data/processed/gogn.xlsx", sheet = "1999")
1731946673602:data <- as.data.frame(data)
1731946673740:data <- data[,-c(1:3)]
1731946675588:# 2. Prepare Data
1731946675588:rownames(data) <- data$Flokkun  # Set species/taxa as rownames
1731946682811:str(data)
1731946691393:dimnames(data)
1731946698470:data_matrix <- as.matrix(data[, -1])  # Select only station columns
1731946701323:data_matrix
1731946706565:# 3. Run PCA with Covariance Scaling
1731946706565:pca <- prcomp(data_matrix, center = TRUE, scale. = FALSE)  # Use covariance (no scaling)
1731946708507:# 4. Visualize the Results
1731946708507:# Plot biplot
1731946708507:fviz_pca_biplot(pca,
1731946708507:repel = TRUE,                   # Avoid overlapping labels
1731946708508:label = "var",                  # Label variables (stations)
1731946708508:habillage = rownames(data),     # Taxa names as labels
1731946708508:addEllipses = FALSE,            # No group ellipses
1731946708508:title = "Multidimensional Preference Analysis") +
1731946708508:labs(x = paste0("Component 1 (", round(100 * summary(pca)$importance[2, 1], 2), "%)"),
1731946708508:y = paste0("Component 2 (", round(100 * summary(pca)$importance[2, 2], 2), "%)"))
1731946732881:pca
1731946785913:str(data.matrix)
1731946794307:str(data_matrix)
1731946825947:dim(data_matrix)
1731946840180:data_matrix <- as.matrix(data_matrix)  # Ensure it's a numeric matrix
1731946842147:dim(data_matrix)
1731946843929:str(data_matrix)
1731946880866:variance <- (pca$sdev^2 / sum(pca$sdev^2)) * 100
1731946880867:variance  # View variance explained by each component
1731946926854:fviz_pca_biplot(
1731946926855:pca,
1731946926855:repel = TRUE,                   # Avoid overlapping labels
1731946926855:label = "both",                 # Show both variables (stations) and observations (species)
1731946926855:col.var = "blue",               # Color for variable vectors
1731946926855:col.ind = "red",                # Color for individuals (species)
1731946926855:title = "Multidimensional Preference Analysis"
1731946926856:) +
1731946926856:labs(
1731946926856:x = paste0("Component 1 (", round(variance[1], 2), "%)"),
1731946926856:y = paste0("Component 2 (", round(variance[2], 2), "%)")
1731946926856:)
1731947197908:pca <- prcomp(data_matrix, center = TRUE, scale. = FALSE)
1731947203850:variance <- (pca$sdev^2 / sum(pca$sdev^2)) * 100
1731947203850:variance
1731947312915:# Scale station loadings
1731947312915:stations_coords <- as.data.frame(pca$rotation[, 1:2])  # Loadings for PC1 and PC2
1731947312916:stations_coords <- stations_coords * max(abs(pca$x[, 1]))  # Scale for better visualization
1731947318509:library(ggplot2)
1731947318510:# Extract PCA coordinates for species (scores) and stations (loadings)
1731947318510:species_coords <- as.data.frame(pca$x[, 1:2])  # PC1 and PC2 scores
1731947318510:species_coords$species <- rownames(data_matrix)
1731947318511:stations_coords$station <- rownames(pca$rotation)
1731947318511:# Scale station loadings for visualization
1731947318511:stations_coords <- stations_coords * max(abs(species_coords$PC1))
1731947343457:# Extract PCA coordinates for species (scores) and stations (loadings)
1731947343457:species_coords <- as.data.frame(pca$x[, 1:2])  # PC1 and PC2 scores
1731947343458:species_coords$species <- rownames(data_matrix)  # Add species names as a column
1731947343458:stations_coords <- as.data.frame(pca$rotation[, 1:2])  # PC1 and PC2 loadings
1731947343459:stations_coords$station <- rownames(pca$rotation)  # Add station names as a column
1731947343459:# Rescale station loadings for visualization
1731947343459:stations_coords[, 1:2] <- stations_coords[, 1:2] * max(abs(species_coords$PC1))  # Scale loadings
1731947345076:library(ggplot2)
1731947345076:# Extract PCA coordinates for species (scores) and stations (loadings)
1731947345076:species_coords <- as.data.frame(pca$x[, 1:2])  # PC1 and PC2 scores
1731947345077:species_coords$species <- rownames(data_matrix)
1731947345077:stations_coords$station <- rownames(pca$rotation)
1731947345077:# Scale station loadings for visualization
1731947345078:stations_coords <- stations_coords * max(abs(species_coords$PC1))
1731947353957:library(ggplot2)
1731947353958:# Plot
1731947353958:ggplot() +
1731947353959:geom_point(data = species_coords, aes(x = PC1, y = PC2), color = "red") +
1731947353959:geom_text(data = species_coords, aes(x = PC1, y = PC2, label = species), hjust = -0.2, size = 3) +
1731947353959:geom_segment(data = stations_coords, aes(x = 0, y = 0, xend = PC1, yend = PC2),
1731947353959:arrow = arrow(length = unit(0.2, "cm")), color = "blue") +
1731947353959:geom_text(data = stations_coords, aes(x = PC1, y = PC2, label = station), hjust = -0.2, size = 4) +
1731947353960:labs(
1731947353960:x = paste0("Component 1 (", round(variance[1], 2), "%)"),
1731947353960:y = paste0("Component 2 (", round(variance[2], 2), "%)"),
1731947353960:title = "Multidimensional Preference Analysis (R)"
1731947353960:)
1731947774685:variance_explained <- summary(pca)$importance[2, 1:2] * 100
1731947775269:print(variance_explained)
1731947788332:?prcomp
1731947859292:# 3. Run PCA with Covariance Scaling
1731947859292:pca <- prcomp(data_matrix, center = TRUE, scale. = T)  # Use covariance (no scaling)
1731947860559:variance_explained <- summary(pca)$importance[2, 1:2] * 100
1731947861011:print(variance_explained)
1731947880644:# 4. Visualize the Results
1731947880644:# Plot biplot
1731947880644:fviz_pca_biplot(pca,
1731947880644:repel = TRUE,                   # Avoid overlapping labels
1731947880644:label = "var",                  # Label variables (stations)
1731947880644:habillage = rownames(data),     # Taxa names as labels
1731947880644:addEllipses = FALSE,            # No group ellipses
1731947880645:title = "Multidimensional Preference Analysis") +
1731947880645:labs(x = paste0("Component 1 (", round(100 * summary(pca)$importance[2, 1], 2), "%)"),
1731947880645:y = paste0("Component 2 (", round(100 * summary(pca)$importance[2, 2], 2), "%)"))
1731947903177:summary(pca)$importance[2, 1:2]
1731947907290:summary(pca)$importance
1731947933668:summary(pca()
1731947943780:summary(pca)
1731947952747:pca
1732004736974:pca
1732004813906:fviz_pca_biplot(
1732004813907:pca,
1732004813907:repel = TRUE,                         # Avoid overlapping labels
1732004813907:label = "var",                        # Label variables (stations)
1732004813907:col.var = "red",                      # Color station arrows
1732004813907:col.ind = "blue",                     # Color species points
1732004813907:addEllipses = FALSE                   # No group ellipses
1732004813907:) +
1732004813908:labs(
1732004813908:x = paste0("PC1 (", round(100 * summary(pca)$importance[2, 1], 2), "%)"),
1732004813908:y = paste0("PC2 (", round(100 * summary(pca)$importance[2, 2], 2), "%)")
1732004813908:) +
1732004813908:ggtitle("Multidimensional Preference Analysis")
1732005127834:data_matrix
1732005146471:head(data_matrix)
1732005388580:library(vegan)
1732005388580:library(ggplot2)
1732005388581:library(ggrepel)
1732005388597:library(dplyr)
1732005388597:library(tidyr)
1732005388597:library(factoextra)
1732005388597:# Function to format species names (from your existing code)
1732005388598:format_species_names <- function(species_names) {
1732005388598:formatted_names <- sapply(species_names, function(name) {
1732005388598:if (grepl(" ", name)) return(name)
1732005388598:paste0(name, " sp.")
1732005388598:})
1732005388598:return(formatted_names)
1732005388599:}
1732005388599:# Get data for one year to compare methods
1732005388599:year_data <- henda_long_matched %>%
1732005388599:filter(year == 1999) %>%  # Using 1999 as example
1732005388599:select(station, species, adjusted_density) %>%
1732005388599:pivot_wider(
1732005388600:names_from = species,
1732005388600:values_from = adjusted_density,
1732005388600:values_fill = 0
1732005388600:)
1732005388621:# Method 1: prcomp (base R)
1732005388621:# Prepare data matrix
1732005388621:matrix_for_prcomp <- as.matrix(year_data[,-1])  # Remove station column
1732005388622:rownames(matrix_for_prcomp) <- year_data$station
1732005388622:# Run PCA using prcomp
1732005388622:pca_prcomp <- prcomp(matrix_for_prcomp, center = TRUE, scale. = TRUE)
1732005388625:# Method 2: rda (vegan)
1732005388625:# Run PCA using rda
1732005388625:pca_rda <- rda(matrix_for_prcomp, scale = TRUE)
1732005388629:# Create comparison plots
1732005388629:# 1. Basic factoextra plot for prcomp
1732005388629:prcomp_plot <- fviz_pca_biplot(pca_prcomp,
1732005388629:label = "all",
1732005388629:repel = TRUE,
1732005388629:title = "PCA using prcomp") +
1732005388629:theme_bw()
1732005388676:# 2. Custom ggplot for rda (similar to your existing code)
1732005388676:# Extract scores
1732005388676:site_scores <- data.frame(
1732005388677:scores(pca_rda, display = "sites"),
1732005388677:Station = rownames(scores(pca_rda, display = "sites"))
1732005388677:)
1732005388678:species_scores <- data.frame(
1732005388678:scores(pca_rda, display = "species"),
1732005388678:Species = rownames(scores(pca_rda, display = "species"))
1732005388678:) %>%
1732005388678:mutate(Species = format_species_names(Species))
1732005388681:# Calculate variance explained
1732005388681:var_explained_rda <- round(summary(pca_rda)$cont$importance[2,1:2] * 100, 1)
1732005388681:# Create RDA plot
1732005388681:rda_plot <- ggplot() +
1732005388681:geom_point(data = site_scores,
1732005388682:aes(x = PC1, y = PC2),
1732005388682:size = 2) +
1732005388682:geom_text_repel(data = site_scores,
1732005388682:aes(x = PC1, y = PC2, label = Station),
1732005388682:size = 3.5) +
1732005388682:geom_segment(data = species_scores,
1732005388682:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732005388682:arrow = arrow(length = unit(0.2, "cm")),
1732005388682:color = "red",
1732005388682:alpha = 0.5) +
1732005388682:geom_text_repel(data = species_scores,
1732005388682:aes(x = PC1, y = PC2, label = Species),
1732005388682:size = 2.8,
1732005388683:color = "darkred") +
1732005388683:theme_bw() +
1732005388683:labs(title = "PCA using rda (vegan)",
1732005388683:x = paste0("PC1 (", var_explained_rda[1], "%)"),
1732005388683:y = paste0("PC2 (", var_explained_rda[2], "%)"))
1732005388694:# Compare variance explained
1732005388694:variance_comparison <- data.frame(
1732005388695:Method = c("prcomp", "rda"),
1732005388695:PC1 = c(summary(pca_prcomp)$importance[2,1] * 100,
1732005388695:var_explained_rda[1]),
1732005388695:PC2 = c(summary(pca_prcomp)$importance[2,2] * 100,
1732005388695:var_explained_rda[2])
1732005388695:)
1732005388696:# Print comparison results
1732005388696:print("Variance explained comparison:")
1732005388697:print(variance_comparison)
1732005388698:# Compare site scores correlation
1732005388698:site_scores_prcomp <- pca_prcomp$x[,1:2]
1732005388698:site_scores_rda <- scores(pca_rda, display = "sites")[,1:2]
1732005388699:cor_pc1 <- cor(site_scores_prcomp[,1], site_scores_rda[,1])
1732005388700:cor_pc2 <- cor(site_scores_prcomp[,2], site_scores_rda[,2])
1732005388701:print("Correlation between site scores:")
1732005388701:print(paste("PC1 correlation:", round(cor_pc1, 3)))
1732005388702:print(paste("PC2 correlation:", round(cor_pc2, 3)))
1732005388702:# Save plots
1732005388702:ggsave("output/pca_comparison_prcomp.png", prcomp_plot, width = 10, height = 8)
1732005390024:ggsave("output/pca_comparison_rda.png", rda_plot, width = 10, height = 8)
1732005390585:# Optional: Create side-by-side plot
1732005390585:library(patchwork)
1732005390611:combined_plot <- prcomp_plot + rda_plot +
1732005390611:plot_annotation(title = "Comparison of PCA methods",
1732005390611:theme = theme(plot.title = element_text(size = 16)))
1732005390614:ggsave("output/pca_methods_comparison.png",
1732005390614:combined_plot,
1732005390614:width = 20, height = 8)
1732005845866:species_matrix_all <- data %>%
1732005845866:pivot_wider(names_from = species, values_from = adjusted_density) %>%
1732005845867:mutate(station_temp = station)
1732005855134:str(data)
1732005896202:pca_data1 <- data.frame(t(data[,-1]))  # Transpose and remove Flokkun column
1732005896203:colnames(pca_data1) <- data$Flokkun    # Add species names as column names
1732005896203:# Run PCA
1732005896203:species_pca <- rda(pca_data1)
1732005906632:species_pca
1732005975474:summary(species_pca)
1732006207058:summary(pca)
1732006262769:# Method 1 (vegan's rda)
1732006262769:species_pca_summary <- summary(species_pca)
1732006262770:vegan_variance <- species_pca_summary$cont$importance[2,] * 100  # Proportion explained
1732006262770:vegan_scores <- scores(species_pca)
1732006262771:# Method 2 (stats' prcomp)
1732006262771:prcomp_summary <- summary(pca)
1732006262771:prcomp_variance <- prcomp_summary$importance[2,] * 100  # Proportion explained
1732006262771:# Compare variance explained by first 2 PCs
1732006262771:comparison <- data.frame(
1732006262772:PC = 1:2,
1732006262772:vegan = vegan_variance[1:2],
1732006262772:prcomp = prcomp_variance[1:2]
1732006262772:)
1732006262773:print(comparison)
1732006445802:# Load libraries
1732006445802:library(vegan)
1732006445803:library(stats)
1732006445803:# Using your data structure:
1732006445803:# data - data.frame with Flokkun (species) and station columns (A7, B5, etc.)
1732006445804:# Method 1 (vegan's rda)
1732006445804:pca_data1 <- data.frame(t(data[,-1]))  # Transpose and remove Flokkun column
1732006445805:colnames(pca_data1) <- data$Flokkun    # Add species names as column names
1732006445805:species_pca <- rda(decostand(pca_data1, method = "standardize"))  # Standardized
1732006445808:# Method 2 (stats' prcomp)
1732006445808:pca_data2 <- data[,-1]  # Remove Flokkun column
1732006445809:rownames(pca_data2) <- data$Flokkun    # Add species names as row names
1732006445809:pca <- prcomp(pca_data2, center = TRUE, scale. = TRUE)  # Standardized
1732006445811:# Compare variance explained
1732006445811:species_pca_summary <- summary(species_pca)
1732006445812:vegan_variance <- species_pca_summary$cont$importance[2,] * 100
1732006445812:prcomp_summary <- summary(pca)
1732006445813:prcomp_variance <- prcomp_summary$importance[2,] * 100
1732006445813:comparison <- data.frame(
1732006445813:PC = 1:2,
1732006445813:vegan = vegan_variance[1:2],
1732006445813:prcomp = prcomp_variance[1:2]
1732006445813:)
1732006445814:print(comparison)
1732006487392:# Load libraries
1732006487392:library(vegan)
1732006487392:library(stats)
1732006487393:# Method 1 (vegan's rda)
1732006487393:pca_data1 <- data.frame(t(data[,-1]))  # Transpose and remove Flokkun column
1732006487394:colnames(pca_data1) <- data$Flokkun    # Add species names as column names
1732006487394:# Use scale() instead of decostand() to match prcomp exactly
1732006487394:pca_data1_scaled <- scale(pca_data1)  # This matches prcomp's standardization
1732006487395:species_pca <- rda(pca_data1_scaled)
1732006487396:# Method 2 (stats' prcomp)
1732006487396:pca_data2 <- data[,-1]  # Remove Flokkun column
1732006487396:rownames(pca_data2) <- data$Flokkun    # Add species names as row names
1732006487396:pca <- prcomp(pca_data2, center = TRUE, scale. = TRUE)
1732006487397:# Compare variance explained
1732006487397:species_pca_summary <- summary(species_pca)
1732006487398:vegan_variance <- species_pca_summary$cont$importance[2,] * 100
1732006487398:prcomp_summary <- summary(pca)
1732006487398:prcomp_variance <- prcomp_summary$importance[2,] * 100
1732006487398:comparison <- data.frame(
1732006487398:PC = 1:2,
1732006487398:vegan = vegan_variance[1:2],
1732006487399:prcomp = prcomp_variance[1:2]
1732006487399:)
1732006487399:print(comparison)
1732006518715:# Load libraries
1732006518715:library(vegan)
1732006518715:library(stats)
1732006518716:# Start with same orientation for both methods
1732006518716:# Species in columns, stations in rows (like prcomp expects)
1732006518716:pca_matrix <- t(as.matrix(data[,-1]))  # Transpose original data
1732006518716:rownames(pca_matrix) <- colnames(data)[-1]  # Station names
1732006518717:colnames(pca_matrix) <- data$Flokkun   # Species names
1732006518717:# Method 1 (vegan's rda)
1732006518717:species_pca <- rda(scale(pca_matrix))
1732006518718:# Method 2 (stats' prcomp)
1732006518718:pca <- prcomp(pca_matrix, center = TRUE, scale. = TRUE)
1732006518719:# Compare variance explained
1732006518719:species_pca_summary <- summary(species_pca)
1732006518720:vegan_variance <- species_pca_summary$cont$importance[2,] * 100
1732006518721:prcomp_summary <- summary(pca)
1732006518721:prcomp_variance <- prcomp_summary$importance[2,] * 100
1732006518721:comparison <- data.frame(
1732006518721:PC = 1:2,
1732006518721:vegan = vegan_variance[1:2],
1732006518722:prcomp = prcomp_variance[1:2]
1732006518722:)
1732006518722:print(comparison)
1732006577778:# Load libraries
1732006577778:library(vegan)
1732006577779:library(stats)
1732006577779:# Method 1 (vegan's rda)
1732006577779:# Use original orientation: species in rows, stations in columns
1732006577780:pca_data <- as.matrix(data[,-1])  # Remove Flokkun column
1732006577780:rownames(pca_data) <- data$Flokkun    # Species names
1732006577780:# Scale the data and run rda
1732006577780:species_pca <- rda(scale(t(pca_data)))  # Transpose inside rda to match prcomp
1732006577782:# Method 2 (stats' prcomp) - keep original
1732006577782:pca_data2 <- data[,-1]  # Remove Flokkun column
1732006577782:rownames(pca_data2) <- data$Flokkun    # Add species names as row names
1732006577782:pca <- prcomp(pca_data2, center = TRUE, scale. = TRUE)
1732006577783:# Compare variance explained
1732006577783:species_pca_summary <- summary(species_pca)
1732006577784:vegan_variance <- species_pca_summary$cont$importance[2,] * 100
1732006577784:prcomp_summary <- summary(pca)
1732006577785:prcomp_variance <- prcomp_summary$importance[2,] * 100
1732006577785:comparison <- data.frame(
1732006577785:PC = 1:2,
1732006577785:vegan = vegan_variance[1:2],
1732006577785:prcomp = prcomp_variance[1:2]
1732006577786:)
1732006577786:print(comparison)
1732006608907:# Load libraries
1732006608907:library(vegan)
1732006608908:library(stats)
1732006608908:# Prepare data - keep species in rows, stations in columns
1732006608908:pca_data <- as.matrix(data[,-1])  # Remove Flokkun column
1732006608908:rownames(pca_data) <- data$Flokkun    # Species names
1732006608909:# Method 1 (vegan's rda)
1732006608909:# Scale first, then transpose for rda
1732006608909:scaled_data <- scale(pca_data)  # Scale original orientation
1732006608909:species_pca <- rda(t(scaled_data))  # Transpose for rda
1732006608910:# Method 2 (stats' prcomp) - unchanged
1732006608910:pca <- prcomp(pca_data, center = TRUE, scale. = TRUE)
1732006608911:# Compare variance explained
1732006608911:species_pca_summary <- summary(species_pca)
1732006608912:vegan_variance <- species_pca_summary$cont$importance[2,] * 100
1732006608912:prcomp_summary <- summary(pca)
1732006608912:prcomp_variance <- prcomp_summary$importance[2,] * 100
1732006608912:comparison <- data.frame(
1732006608913:PC = 1:2,
1732006608913:vegan = vegan_variance[1:2],
1732006608913:prcomp = prcomp_variance[1:2]
1732006608913:)
1732006608914:print(comparison)
1732006744226:# Load libraries
1732006744227:library(vegan)
1732006744227:library(stats)
1732006744228:# Method 2 (prcomp) - Keep this as our reference
1732006744228:pca_data2 <- data[,-1]  # Remove Flokkun column
1732006744228:rownames(pca_data2) <- data$Flokkun    # Add species names as row names
1732006744229:pca <- prcomp(pca_data2, center = TRUE, scale. = TRUE)
1732006744230:# Method 1 (vegan) - Adjust to match prcomp
1732006744230:pca_data1 <- data[,-1]  # Same data structure as prcomp
1732006744231:rownames(pca_data1) <- data$Flokkun
1732006744231:species_pca <- rda(scale(pca_data1))  # Scale and no transpose
1732006744232:# Compare variance explained
1732006744232:species_pca_summary <- summary(species_pca)
1732006744232:vegan_variance <- species_pca_summary$cont$importance[2,] * 100
1732006744233:prcomp_summary <- summary(pca)
1732006744233:prcomp_variance <- prcomp_summary$importance[2,] * 100
1732006744233:comparison <- data.frame(
1732006744233:PC = 1:2,
1732006744234:vegan = vegan_variance[1:2],
1732006744234:prcomp = prcomp_variance[1:2]
1732006744234:)
1732006744234:print(comparison)
1732006848540:library(ggrepel)
1732006848540:library(vegan)
1732006848541:# Prepare data
1732006848541:pca_data <- data[,-1]  # Remove Flokkun column
1732006848542:rownames(pca_data) <- data$Flokkun    # Species names as row names
1732006848542:# Run PCA
1732006848542:species_pca <- rda(scale(pca_data))  # Scaled to match prcomp results
1732006848544:# Extract scores
1732006848544:site_scores <- data.frame(
1732006848544:scores(species_pca, display = "sites"),
1732006848545:Species = rownames(scores(species_pca, display = "sites"))
1732006848545:) %>%
1732006848546:mutate(Species = format_species_names(Species))
1732006848554:species_loadings <- data.frame(
1732006848554:scores(species_pca, display = "species"),
1732006848555:Station = colnames(pca_data)
1732006848555:)
1732006848555:# Calculate variance explained
1732006848556:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1732006848556:# Create PCA biplot
1732006848557:pca_plot <- ggplot() +
1732006848557:# Add species points
1732006848557:geom_point(data = site_scores,
1732006848557:aes(x = PC1, y = PC2),
1732006848557:size = 2,
1732006848557:shape = 19,
1732006848558:color = "black") +
1732006848558:# Add station arrows
1732006848558:geom_segment(data = species_loadings,
1732006848558:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732006848558:arrow = arrow(length = unit(0.2, "cm")),
1732006848558:color = "darkgrey") +
1732006848558:# Add station labels
1732006848559:geom_text_repel(data = species_loadings,
1732006848559:aes(x = PC1, y = PC2, label = Station),
1732006848559:size = 3.5,
1732006848559:fontface = "bold",
1732006848559:box.padding = 0.5,
1732006848559:point.padding = 0.3) +
1732006848560:# Add species labels
1732006848560:geom_text_repel(data = site_scores,
1732006848560:aes(x = PC1, y = PC2, label = Species),
1732006848560:size = 2.8,
1732006848560:fontface = "italic",
1732006848560:color = "grey30",
1732006848561:box.padding = 0.5,
1732006848561:point.padding = 0.3) +
1732006848561:coord_fixed() +
1732006848561:theme_bw() +
1732006848561:labs(
1732006848562:title = "PCA of benthic community composition - 1999",
1732006848562:subtitle = "Species shown as points, stations as arrows",
1732006848562:x = paste0("PC1 (", var_explained[1], "%)"),
1732006848562:y = paste0("PC2 (", var_explained[2], "%)")
1732006848562:)
1732006853423:pca_plot
1732007167080:# Function to process and create PCA for one year
1732007167081:create_year_pca <- function(year) {
1732007167081:# Read and prepare data
1732007167081:data <- read_excel("data/processed/gogn.xlsx", sheet = as.character(year))
1732007167081:data <- as.data.frame(data)
1732007167081:data <- data[,-c(1:3)]  # Remove first 3 columns
1732007167082:# Run PCA
1732007167082:species_pca <- rda(scale(data))
1732007167082:# Extract scores
1732007167082:site_scores <- data.frame(
1732007167082:scores(species_pca, display = "sites"),
1732007167082:Species = rownames(scores(species_pca, display = "sites"))
1732007167083:) %>%
1732007167083:mutate(Species = format_species_names(Species))
1732007167083:species_loadings <- data.frame(
1732007167083:scores(species_pca, display = "species"),
1732007167083:Station = colnames(data)
1732007167084:)
1732007167084:# Calculate variance explained
1732007167084:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1732007167085:# Create PCA plot
1732007167085:pca_plot <- ggplot() +
1732007167085:geom_point(data = site_scores,
1732007167085:aes(x = PC1, y = PC2),
1732007167085:size = 2,
1732007167086:shape = 19,
1732007167086:color = "black") +
1732007167086:geom_segment(data = species_loadings,
1732007167086:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732007167086:arrow = arrow(length = unit(0.2, "cm")),
1732007167086:color = "darkgrey") +
1732007167087:geom_text_repel(data = species_loadings,
1732007167087:aes(x = PC1, y = PC2, label = Station),
1732007167087:size = 3.5,
1732007167087:fontface = "bold",
1732007167088:box.padding = 0.5,
1732007167088:point.padding = 0.3) +
1732007167088:geom_text_repel(data = site_scores,
1732007167088:aes(x = PC1, y = PC2, label = Species),
1732007167089:size = 2.8,
1732007167089:fontface = "italic",
1732007167089:color = "grey30",
1732007167089:box.padding = 0.5,
1732007167090:point.padding = 0.3) +
1732007167090:coord_fixed() +
1732007167090:theme_bw() +
1732007167090:theme(
1732007167091:panel.grid.minor = element_blank(),
1732007167091:panel.grid.major = element_line(color = "grey95"),
1732007167091:axis.text = element_text(color = "black", size = 8),
1732007167091:axis.title = element_text(size = 10),
1732007167092:plot.title = element_text(size = 11, face = "bold"),
1732007167092:plot.subtitle = element_text(size = 9)
1732007167093:) +
1732007167093:labs(
1732007167093:title = paste("PCA of benthic community composition -", year),
1732007167093:subtitle = "Species shown as points, stations as arrows",
1732007167094:x = paste0("PC1 (", var_explained[1], "%)"),
1732007167094:y = paste0("PC2 (", var_explained[2], "%)")
1732007167094:)
1732007167095:return(pca_plot)
1732007167095:}
1732007170116:# Create PCA plots for all years
1732007170116:years <- c(1999, 2013:2017)
1732007171191:pca_plots <- list()
1732007172663:for(year in years) {
1732007172663:pca_plots[[as.character(year)]] <- create_year_pca(year)
1732007172663:# Save individual plots
1732007172664:ggsave(
1732007172664:paste0("output/pca_biplot_", year, ".png"),
1732007172664:pca_plots[[as.character(year)]],
1732007172664:width = 10, height = 8,
1732007172664:dpi = 300,
1732007172665:bg = "white"
1732007172665:)
1732007172665:}
1732007296106:data <- read_excel("data/processed/gogn.xlsx", sheet = "1999")
1732007296688:data <- as.data.frame(data)
1732007296689:data <- data[,-c(1:3)]
1732007296689:str(data)
1732007388022:data <- read_excel("data/processed/gogn.xlsx", sheet = "1999")
1732007388701:data <- as.data.frame(data)
1732007391272:data
1732007414777:year
1732007419685:# Read and prepare data
1732007419685:data <- read_excel("data/processed/gogn.xlsx", sheet = as.character(year))
1732007425114:data <- as.data.frame(data)
1732007430793:data
1732007475875:# Function to process and create PCA for one year
1732007475876:create_year_pca <- function(year) {
1732007475876:# Read and prepare data
1732007475876:data <- read_excel("data/processed/gogn.xlsx", sheet = as.character(year))
1732007475876:data <- as.data.frame(data)
1732007475876:data <- data[,-c(1:3)]  # Remove first 3 columns
1732007475876:rownames(data) <- data$Flokkun  # Set species/taxa as rownames
1732007475877:data_matrix <- as.matrix(data[, -1])  # Select only station columns
1732007475877:# Run PCA
1732007475877:species_pca <- rda(scale(data))
1732007475877:# Extract scores
1732007475877:site_scores <- data.frame(
1732007475878:scores(species_pca, display = "sites"),
1732007475878:Species = rownames(scores(species_pca, display = "sites"))
1732007475878:) %>%
1732007475878:mutate(Species = format_species_names(Species))
1732007475878:species_loadings <- data.frame(
1732007475878:scores(species_pca, display = "species"),
1732007475879:Station = colnames(data)
1732007475879:)
1732007475879:# Calculate variance explained
1732007475879:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1732007475880:# Create PCA plot
1732007475880:pca_plot <- ggplot() +
1732007475880:geom_point(data = site_scores,
1732007475880:aes(x = PC1, y = PC2),
1732007475880:size = 2,
1732007475881:shape = 19,
1732007475881:color = "black") +
1732007475881:geom_segment(data = species_loadings,
1732007475881:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732007475881:arrow = arrow(length = unit(0.2, "cm")),
1732007475881:color = "darkgrey") +
1732007475882:geom_text_repel(data = species_loadings,
1732007475882:aes(x = PC1, y = PC2, label = Station),
1732007475882:size = 3.5,
1732007475882:fontface = "bold",
1732007475882:box.padding = 0.5,
1732007475883:point.padding = 0.3) +
1732007475883:geom_text_repel(data = site_scores,
1732007475883:aes(x = PC1, y = PC2, label = Species),
1732007475883:size = 2.8,
1732007475883:fontface = "italic",
1732007475884:color = "grey30",
1732007475884:box.padding = 0.5,
1732007475884:point.padding = 0.3) +
1732007475884:coord_fixed() +
1732007475885:theme_bw() +
1732007475885:theme(
1732007475885:panel.grid.minor = element_blank(),
1732007475885:panel.grid.major = element_line(color = "grey95"),
1732007475886:axis.text = element_text(color = "black", size = 8),
1732007475886:axis.title = element_text(size = 10),
1732007475886:plot.title = element_text(size = 11, face = "bold"),
1732007475886:plot.subtitle = element_text(size = 9)
1732007475887:) +
1732007475887:labs(
1732007475887:title = paste("PCA of benthic community composition -", year),
1732007475887:subtitle = "Species shown as points, stations as arrows",
1732007475887:x = paste0("PC1 (", var_explained[1], "%)"),
1732007475888:y = paste0("PC2 (", var_explained[2], "%)")
1732007475888:)
1732007475888:return(pca_plot)
1732007475889:}
1732007477972:# Create PCA plots for all years
1732007477973:years <- c(1999, 2013:2017)
1732007478548:pca_plots <- list()
1732007479883:for(year in years) {
1732007479883:pca_plots[[as.character(year)]] <- create_year_pca(year)
1732007479884:# Save individual plots
1732007479884:ggsave(
1732007479884:paste0("output/pca_biplot_", year, ".png"),
1732007479884:pca_plots[[as.character(year)]],
1732007479884:width = 10, height = 8,
1732007479884:dpi = 300,
1732007479884:bg = "white"
1732007479885:)
1732007479885:}
1732007497474:species_pca
1732007503579:data_matrix
1732007509952:site_scores
1732007565276:# Create PCA plot
1732007565276:pca_plot <- ggplot() +
1732007565276:geom_point(data = site_scores,
1732007565276:aes(x = PC1, y = PC2),
1732007565276:size = 2,
1732007565277:shape = 19,
1732007565277:color = "black") +
1732007565277:geom_segment(data = species_loadings,
1732007565277:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732007565277:arrow = arrow(length = unit(0.2, "cm")),
1732007565277:color = "darkgrey") +
1732007565278:geom_text_repel(data = species_loadings,
1732007565278:aes(x = PC1, y = PC2, label = Station),
1732007565278:size = 3.5,
1732007565278:fontface = "bold",
1732007565279:box.padding = 0.5,
1732007565279:point.padding = 0.3) +
1732007565279:geom_text_repel(data = site_scores,
1732007565279:aes(x = PC1, y = PC2, label = Species),
1732007565279:size = 2.8,
1732007565279:fontface = "italic",
1732007565280:color = "grey30",
1732007565280:box.padding = 0.5,
1732007565280:point.padding = 0.3) +
1732007565280:coord_fixed() +
1732007565280:theme_bw() +
1732007565280:theme(
1732007565281:panel.grid.minor = element_blank(),
1732007565281:panel.grid.major = element_line(color = "grey95"),
1732007565281:axis.text = element_text(color = "black", size = 8),
1732007565281:axis.title = element_text(size = 10),
1732007565281:plot.title = element_text(size = 11, face = "bold"),
1732007565281:plot.subtitle = element_text(size = 9)
1732007565282:) +
1732007565282:labs(
1732007565282:title = paste("PCA of benthic community composition -", year),
1732007565282:subtitle = "Species shown as points, stations as arrows",
1732007565282:x = paste0("PC1 (", var_explained[1], "%)"),
1732007565283:y = paste0("PC2 (", var_explained[2], "%)")
1732007565283:)
1732007569323:return(pca_plot)
1732007593329:data_matrix
1732007606623:head(data_matrix)
1732007626099:species_pca
1732007642241:site_scores
1732007648384:head(site_scores)
1732007661937:var_explained
1732007675827:pca_plot
1732007683106:# Create PCA plot
1732007683106:pca_plot <- ggplot() +
1732007683106:geom_point(data = site_scores,
1732007683106:aes(x = PC1, y = PC2),
1732007683106:size = 2,
1732007683107:shape = 19,
1732007683107:color = "black") +
1732007683107:geom_segment(data = species_loadings,
1732007683107:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732007683107:arrow = arrow(length = unit(0.2, "cm")),
1732007683107:color = "darkgrey") +
1732007683107:geom_text_repel(data = species_loadings,
1732007683108:aes(x = PC1, y = PC2, label = Station),
1732007683108:size = 3.5,
1732007683108:fontface = "bold",
1732007683108:box.padding = 0.5,
1732007683108:point.padding = 0.3) +
1732007683108:geom_text_repel(data = site_scores,
1732007683108:aes(x = PC1, y = PC2, label = Species),
1732007683109:size = 2.8,
1732007683109:fontface = "italic",
1732007683109:color = "grey30",
1732007683109:box.padding = 0.5,
1732007683109:point.padding = 0.3) +
1732007683109:coord_fixed() +
1732007683110:theme_bw() +
1732007683110:theme(
1732007683110:panel.grid.minor = element_blank(),
1732007683110:panel.grid.major = element_line(color = "grey95"),
1732007683110:axis.text = element_text(color = "black", size = 8),
1732007683110:axis.title = element_text(size = 10),
1732007683111:plot.title = element_text(size = 11, face = "bold"),
1732007683111:plot.subtitle = element_text(size = 9)
1732007683111:) +
1732007683111:labs(
1732007683111:title = paste("PCA of benthic community composition -", year),
1732007683111:subtitle = "Species shown as points, stations as arrows",
1732007683112:x = paste0("PC1 (", var_explained[1], "%)"),
1732007683112:y = paste0("PC2 (", var_explained[2], "%)")
1732007683112:)
1732007685242:return(pca_plot)
1732007853412:# Function to process and create PCA for one year
1732007853412:create_year_pca <- function(year) {
1732007853412:# Read and prepare data
1732007853413:data <- read_excel("data/processed/gogn.xlsx", sheet = as.character(year))
1732007853413:data <- as.data.frame(data)
1732007853413:data <- data[,-c(1:3)]  # Remove first 3 columns
1732007853413:rownames(data) <- data$Flokkun  # Set species/taxa as rownames
1732007853413:data <- data[, -1]  # Remove Flokkun column
1732007853413:# Run PCA
1732007853414:species_pca <- rda(scale(data))
1732007853414:# Extract scores
1732007853414:site_scores <- data.frame(
1732007853414:scores(species_pca, display = "sites"),
1732007853415:Species = rownames(scores(species_pca, display = "sites"))
1732007853415:) %>%
1732007853415:mutate(Species = format_species_names(Species))
1732007853415:species_loadings <- data.frame(
1732007853416:scores(species_pca, display = "species"),
1732007853416:Station = colnames(data)
1732007853416:)
1732007853416:# Calculate variance explained
1732007853416:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1732007853417:# Create PCA plot
1732007853417:pca_plot <- ggplot() +
1732007853417:geom_point(data = site_scores,
1732007853417:aes(x = PC1, y = PC2),
1732007853417:size = 2,
1732007853418:shape = 19,
1732007853418:color = "black") +
1732007853418:geom_segment(data = species_loadings,
1732007853418:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732007853419:arrow = arrow(length = unit(0.2, "cm")),
1732007853419:color = "darkgrey") +
1732007853419:geom_text_repel(data = species_loadings,
1732007853419:aes(x = PC1, y = PC2, label = Station),
1732007853419:size = 3.5,
1732007853420:fontface = "bold",
1732007853420:box.padding = 0.5,
1732007853420:point.padding = 0.3) +
1732007853420:geom_text_repel(data = site_scores,
1732007853420:aes(x = PC1, y = PC2, label = Species),
1732007853421:size = 2.8,
1732007853421:fontface = "italic",
1732007853421:color = "grey30",
1732007853421:box.padding = 0.5,
1732007853421:point.padding = 0.3) +
1732007853422:coord_fixed() +
1732007853422:theme_bw() +
1732007853423:theme(
1732007853424:panel.grid.minor = element_blank(),
1732007853425:panel.grid.major = element_line(color = "grey95"),
1732007853425:axis.text = element_text(color = "black", size = 8),
1732007853426:axis.title = element_text(size = 10),
1732007853426:plot.title = element_text(size = 11, face = "bold"),
1732007853427:plot.subtitle = element_text(size = 9)
1732007853427:) +
1732007853428:labs(
1732007853428:title = paste("PCA of benthic community composition -", year),
1732007853428:subtitle = "Species shown as points, stations as arrows",
1732007853429:x = paste0("PC1 (", var_explained[1], "%)"),
1732007853429:y = paste0("PC2 (", var_explained[2], "%)")
1732007853429:)
1732007853430:return(pca_plot)
1732007853430:}
1732007855243:# Create PCA plots for all years
1732007855243:years <- c(1999, 2013:2017)
1732007855797:pca_plots <- list()
1732007857042:for(year in years) {
1732007857042:pca_plots[[as.character(year)]] <- create_year_pca(year)
1732007857043:# Save individual plots
1732007857043:ggsave(
1732007857043:paste0("output/pca_biplot_", year, ".png"),
1732007857043:pca_plots[[as.character(year)]],
1732007857043:width = 10, height = 8,
1732007857043:dpi = 300,
1732007857044:bg = "white"
1732007857044:)
1732007857044:}
1732008180887:year
1732008192280:data
1732008203507:data <- read_excel("data/processed/gogn.xlsx", sheet = as.character(year))
1732008204135:data <- as.data.frame(data)
1732008204136:data <- data[,-c(1:3)]  # Remove first 3 columns
1732008204136:rownames(data) <- data$Flokkun  # Set species/taxa as rownames
1732008204136:data <- data[, -1]  # Remove Flokkun column
1732008211024:data
1732008231314:# Run PCA
1732008231315:species_pca <- rda(scale(data))
1732008299524:# Function to process and create PCA for one year
1732008299524:create_year_pca <- function(year) {
1732008299524:# Read and prepare data
1732008299524:data <- read_excel("data/processed/gogn.xlsx", sheet = as.character(year))
1732008299524:data <- as.data.frame(data)
1732008299525:data <- data[,-c(1:3)]  # Remove first 3 columns
1732008299525:rownames(data) <- data$Flokkun  # Set species/taxa as rownames
1732008299525:data <- data[, -1]  # Remove Flokkun column
1732008299525:data[is.na(data)] <- 0
1732008299526:# Run PCA
1732008299526:species_pca <- rda(scale(data))
1732008299526:# Extract scores
1732008299526:site_scores <- data.frame(
1732008299526:scores(species_pca, display = "sites"),
1732008299527:Species = rownames(scores(species_pca, display = "sites"))
1732008299527:) %>%
1732008299527:mutate(Species = format_species_names(Species))
1732008299527:species_loadings <- data.frame(
1732008299527:scores(species_pca, display = "species"),
1732008299528:Station = colnames(data)
1732008299528:)
1732008299528:# Calculate variance explained
1732008299528:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1732008299529:# Create PCA plot
1732008299529:pca_plot <- ggplot() +
1732008299529:geom_point(data = site_scores,
1732008299529:aes(x = PC1, y = PC2),
1732008299529:size = 2,
1732008299530:shape = 19,
1732008299530:color = "black") +
1732008299530:geom_segment(data = species_loadings,
1732008299530:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732008299530:arrow = arrow(length = unit(0.2, "cm")),
1732008299531:color = "darkgrey") +
1732008299531:geom_text_repel(data = species_loadings,
1732008299531:aes(x = PC1, y = PC2, label = Station),
1732008299531:size = 3.5,
1732008299531:fontface = "bold",
1732008299531:box.padding = 0.5,
1732008299532:point.padding = 0.3) +
1732008299532:geom_text_repel(data = site_scores,
1732008299532:aes(x = PC1, y = PC2, label = Species),
1732008299532:size = 2.8,
1732008299533:fontface = "italic",
1732008299533:color = "grey30",
1732008299533:box.padding = 0.5,
1732008299533:point.padding = 0.3) +
1732008299534:coord_fixed() +
1732008299534:theme_bw() +
1732008299534:theme(
1732008299534:panel.grid.minor = element_blank(),
1732008299559:panel.grid.major = element_line(color = "grey95"),
1732008299560:axis.text = element_text(color = "black", size = 8),
1732008299560:axis.title = element_text(size = 10),
1732008299560:plot.title = element_text(size = 11, face = "bold"),
1732008299560:plot.subtitle = element_text(size = 9)
1732008299561:) +
1732008299561:labs(
1732008299561:title = paste("PCA of benthic community composition -", year),
1732008299561:subtitle = "Species shown as points, stations as arrows",
1732008299561:x = paste0("PC1 (", var_explained[1], "%)"),
1732008299562:y = paste0("PC2 (", var_explained[2], "%)")
1732008299562:)
1732008299562:return(pca_plot)
1732008299563:}
1732008300490:# Create PCA plots for all years
1732008300490:years <- c(1999, 2013:2017)
1732008301651:pca_plots <- list()
1732008302950:for(year in years) {
1732008302950:pca_plots[[as.character(year)]] <- create_year_pca(year)
1732008302950:# Save individual plots
1732008302950:ggsave(
1732008302950:paste0("output/pca_biplot_", year, ".png"),
1732008302950:pca_plots[[as.character(year)]],
1732008302951:width = 10, height = 8,
1732008302951:dpi = 300,
1732008302951:bg = "white"
1732008302951:)
1732008302951:}
1732008518649:data
1732008542971:data <- read_excel("data/processed/gogn.xlsx", sheet = as.character(year))
1732008543681:data <- as.data.frame(data)
1732008543682:data <- data[,-c(1:3)]  # Remove first 3 columns
1732008543683:rownames(data) <- data$Flokkun  # Set species/taxa as rownames
1732008543683:data <- data[, -1]  # Remove Flokkun column
1732008543684:data[is.na(data)] <- 0
1732008547034:data
1732008631981:# Read and prepare data
1732008631982:data <- read_excel("data/processed/gogn.xlsx", sheet = as.character(year))
1732008640429:data$Flokkun
1732008792132:# Function to process and create PCA for one year
1732008792133:create_year_pca <- function(year) {
1732008792133:# Read and prepare data
1732008792133:data <- read_excel("data/processed/gogn.xlsx",
1732008792133:sheet = as.character(year),
1732008792133:trim_ws = FALSE)  # Don't trim whitespace
1732008792134:data <- as.data.frame(data)
1732008792134:data <- data[,-c(1:3)]  # Remove first 3 columns
1732008792134:rownames(data) <- data$Flokkun  # Set species/taxa as rownames
1732008792134:data <- data[, -1]  # Remove Flokkun column
1732008792134:data[is.na(data)] <- 0
1732008792135:# Run PCA
1732008792135:species_pca <- rda(scale(data))
1732008792135:# Extract scores
1732008792135:site_scores <- data.frame(
1732008792136:scores(species_pca, display = "sites"),
1732008792136:Species = rownames(scores(species_pca, display = "sites"))
1732008792136:) %>%
1732008792136:mutate(Species = format_species_names(Species))
1732008792136:species_loadings <- data.frame(
1732008792137:scores(species_pca, display = "species"),
1732008792137:Station = colnames(data)
1732008792137:)
1732008792137:# Calculate variance explained
1732008792138:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1732008792138:# Create PCA plot
1732008792138:pca_plot <- ggplot() +
1732008792138:geom_point(data = site_scores,
1732008792139:aes(x = PC1, y = PC2),
1732008792139:size = 2,
1732008792139:shape = 19,
1732008792139:color = "black") +
1732008792139:geom_segment(data = species_loadings,
1732008792140:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732008792140:arrow = arrow(length = unit(0.2, "cm")),
1732008792140:color = "darkgrey") +
1732008792140:geom_text_repel(data = species_loadings,
1732008792141:aes(x = PC1, y = PC2, label = Station),
1732008792141:size = 3.5,
1732008792141:fontface = "bold",
1732008792141:box.padding = 0.5,
1732008792141:point.padding = 0.3) +
1732008792142:geom_text_repel(data = site_scores,
1732008792142:aes(x = PC1, y = PC2, label = Species),
1732008792142:size = 2.8,
1732008792142:fontface = "italic",
1732008792143:color = "grey30",
1732008792143:box.padding = 0.5,
1732008792143:point.padding = 0.3) +
1732008792143:coord_fixed() +
1732008792144:theme_bw() +
1732008792144:theme(
1732008792144:panel.grid.minor = element_blank(),
1732008792145:panel.grid.major = element_line(color = "grey95"),
1732008792145:axis.text = element_text(color = "black", size = 8),
1732008792145:axis.title = element_text(size = 10),
1732008792145:plot.title = element_text(size = 11, face = "bold"),
1732008792146:plot.subtitle = element_text(size = 9)
1732008792146:) +
1732008792147:labs(
1732008792147:title = paste("PCA of benthic community composition -", year),
1732008792147:subtitle = "Species shown as points, stations as arrows",
1732008792147:x = paste0("PC1 (", var_explained[1], "%)"),
1732008792148:y = paste0("PC2 (", var_explained[2], "%)")
1732008792148:)
1732008792149:return(pca_plot)
1732008792149:}
1732008793115:# Create PCA plots for all years
1732008793116:years <- c(1999, 2013:2017)
1732008795606:pca_plots <- list()
1732008796218:for(year in years) {
1732008796219:pca_plots[[as.character(year)]] <- create_year_pca(year)
1732008796219:# Save individual plots
1732008796219:ggsave(
1732008796219:paste0("output/pca_biplot_", year, ".png"),
1732008796219:pca_plots[[as.character(year)]],
1732008796219:width = 10, height = 8,
1732008796220:dpi = 300,
1732008796220:bg = "white"
1732008796220:)
1732008796220:}
1732008821877:# Read and prepare data
1732008821877:data <- read_excel("data/processed/gogn.xlsx",
1732008821877:sheet = as.character(year),
1732008821877:trim_ws = FALSE)  # Don't trim whitespace
1732008826129:data <- as.data.frame(data)
1732008833571:data$Flokkun
1732008961594:# Nota gögnin frá Jörundi
1732008961594:species_matrix_all <- henda_long_matched %>%
1732008961594:select(station, year, species, adjusted_density) %>%
1732008961594:pivot_wider(
1732008961594:names_from = species,
1732008961594:values_from = adjusted_density,
1732008961595:values_fill = 0
1732008961595:) %>%
1732008961595:mutate(
1732008961595:station_temp = station,
1732008961595:year_temp = year
1732008961595:) %>%
1732008961596:select(-station, -year)
1732008961613:# Rest of the code remains the same, starting from:
1732008961613:# Find dominant species (>1% relative abundance)
1732008961614:dominant_species <- species_matrix_all %>%
1732008961614:select(where(is.numeric)) %>%
1732008961614:select(-year_temp) %>%
1732008961614:summarise(across(everything(), sum)) %>%
1732008961614:pivot_longer(everything(),
1732008961614:names_to = "species",
1732008961614:values_to = "total_abundance") %>%
1732008961614:arrange(desc(total_abundance)) %>%
1732008961615:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1732008961615:filter(relative_abundance > 0.01)
1732008961647:format_species_names <- function(species_names) {
1732008961647:formatted_names <- sapply(species_names, function(name) {
1732008961647:# If there's a space, it's already formatted (species name or family), leave it as is
1732008961647:if (grepl(" ", name)) {
1732008961647:return(name)
1732008961647:}
1732008961647:# If it's a single word, add "sp."
1732008961648:paste0(name, " sp.")
1732008961648:})
1732008961648:return(formatted_names)
1732008961648:}
1732008961648:# PCA plot function
1732008961648:create_year_pca <- function(year_data, year, important_species) {
1732008961648:# Perform PCA for this year
1732008961648:species_pca <- rda(scale(select(year_data, -station_temp, -year_temp)))
1732008961649:# Extract scores
1732008961649:site_scores <- data.frame(
1732008961649:scores(species_pca, display = "sites"),
1732008961649:Station = year_data$station_temp
1732008961649:)
1732008961649:species_loadings <- data.frame(
1732008961649:scores(species_pca, display = "species"),
1732008961649:Species = rownames(scores(species_pca, display = "species"))
1732008961649:) %>%
1732008961649:filter(Species %in% important_species) %>%
1732008961649:mutate(Species = format_species_names(Species))  # Format species names
1732008961650:# Calculate variance explained
1732008961650:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1732008961650:# Set consistent axis limits across all plots
1732008961650:axis_limits <- max(abs(c(
1732008961650:site_scores$PC1, site_scores$PC2,
1732008961650:species_loadings$PC1, species_loadings$PC2
1732008961650:))) * 1.2  # Add 20% padding
1732008961650:# Create PCA biplot
1732008961650:pca_plot <- ggplot() +
1732008961650:# Add site scores
1732008961651:geom_point(data = site_scores,
1732008961651:aes(x = PC1, y = PC2),
1732008961651:size = 2,
1732008961651:shape = 19,
1732008961651:color = "black") +
1732008961651:# Add site labels
1732008961651:geom_text_repel(
1732008961651:data = site_scores,
1732008961651:aes(x = PC1, y = PC2, label = Station),
1732008961652:size = 3.5,
1732008961652:fontface = "bold",
1732008961652:box.padding = 0.5,
1732008961652:point.padding = 0.3
1732008961652:) +
1732008961652:# Add species arrows
1732008961652:geom_segment(data = species_loadings,
1732008961652:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732008961652:arrow = arrow(length = unit(0.2, "cm")),
1732008961653:color = "darkgrey") +
1732008961653:# Add species labels
1732008961653:geom_text_repel(data = species_loadings,
1732008961653:aes(x = PC1, y = PC2, label = Species),
1732008961653:size = 2.8,
1732008961653:fontface = "italic",
1732008961653:color = "grey30",
1732008961654:box.padding = 0.5,
1732008961654:point.padding = 0.3) +
1732008961654:# Set consistent axis limits
1732008961654:coord_fixed(xlim = c(-axis_limits, axis_limits),
1732008961654:ylim = c(-axis_limits, axis_limits)) +
1732008961654:theme_bw() +
1732008961654:theme(
1732008961654:panel.grid.minor = element_blank(),
1732008961655:panel.grid.major = element_line(color = "grey95"),
1732008961655:axis.text = element_text(color = "black", size = 8),
1732008961655:axis.title = element_text(size = 10),
1732008961655:plot.title = element_text(size = 11, face = "bold"),
1732008961655:plot.subtitle = element_text(size = 9),
1732008961655:plot.margin = margin(t = 10, r = 10, b = 10, l = 10)
1732008961656:) +
1732008961656:labs(
1732008961656:title = paste("PCA of benthic community composition -", year),
1732008961656:subtitle = "Stations shown as points, species as arrows",
1732008961656:x = paste0("PC1 (", var_explained[1], "%)"),
1732008961656:y = paste0("PC2 (", var_explained[2], "%)")
1732008961657:)
1732008961657:return(pca_plot)
1732008961657:}
1732008961658:# Create PCA plots for each year
1732008961658:years <- sort(unique(species_matrix_all$year_temp))
1732008961658:pca_plots <- list()
1732008961658:for(year in years) {
1732008961658:year_data <- species_matrix_all %>%
1732008961658:filter(year_temp == year)
1732008961658:pca_plots[[as.character(year)]] <- create_year_pca(
1732008961658:year_data,
1732008961658:year,
1732008961658:dominant_species$species
1732008961658:)
1732008961659:ggsave(
1732008961659:paste0("output/pca_biplot_", year, ".png"),
1732008961659:pca_plots[[as.character(year)]],
1732008961659:width = 10, height = 8,
1732008961659:dpi = 300,
1732008961659:bg = "white"
1732008961659:)
1732008961659:}
1732008979563:species_matrix_all
1732009002532:select(year_data, -station_temp, -year_temp)
1732009014732:scale(select(year_data, -station_temp, -year_temp))
1732009020604:species_pca
1732009027899:site_scores
1732009034596:# Perform PCA for this year
1732009034597:species_pca <- rda(scale(select(year_data, -station_temp, -year_temp)))
1732011215053:henda_long_matched
1732011245948:henda <- read_csv(
1732011245949:"data/processed/hendaB.csv",
1732011245949:col_types = cols(
1732011245949:Year = col_integer(),
1732011245949:Flokkun = col_character(),  # Ensure Flokkun is read as character
1732011245949:A7 = col_integer(),
1732011245949:B5 = col_integer(),
1732011245949:B8 = col_integer(),
1732011245949:C4 = col_integer(),
1732011245950:E3 = col_integer(),
1732011245950:E4 = col_integer()
1732011245950:),
1732011245950:na = c("", "NA")
1732011245950:)
1732011251916:henda
1732011268854:henda <- read_csv(
1732011268855:"data/processed/hendaB.csv",
1732011268855:col_types = cols(
1732011268855:Year = col_integer(),
1732011268855:Flokkun = col_character(),  # Ensure Flokkun is read as character
1732011268855:A7 = col_integer(),
1732011268855:B5 = col_integer(),
1732011268855:B8 = col_integer(),
1732011268856:C4 = col_integer(),
1732011268856:E3 = col_integer(),
1732011268856:E4 = col_integer()
1732011268856:),
1732011268856:na = c("", "NA")
1732011268856:) %>%
1732011268856:mutate(across(where(is.numeric), ~ replace_na(., 0)))  %>% # Replace NA with 0 for numeric columns
1732011268857:select(Flokkun:last_col())
1732011272462:henda
1732011349259:unique(henda$Year)
1732011425478:# Function to process and create PCA for one year
1732011425478:create_year_pca <- function(year, data = henda) {
1732011425478:# Filter data for specific year and prepare
1732011425479:year_data <- data %>%
1732011425479:filter(Year == year) %>%
1732011425479:select(-Year)  # Remove Year column
1732011425479:# Prepare data for PCA
1732011425479:rownames(year_data) <- year_data$Flokkun  # Set species names as rownames
1732011425479:year_data <- year_data %>% select(-Flokkun)  # Remove Flokkun column
1732011425480:# Handle NAs
1732011425480:year_data[is.na(year_data)] <- 0
1732011425480:# Run PCA
1732011425481:species_pca <- rda(scale(year_data))
1732011425481:# Extract scores
1732011425481:site_scores <- data.frame(
1732011425481:scores(species_pca, display = "sites"),
1732011425481:Species = rownames(scores(species_pca, display = "sites"))
1732011425481:) %>%
1732011425481:mutate(Species = format_species_names(Species))
1732011425482:species_loadings <- data.frame(
1732011425482:scores(species_pca, display = "species"),
1732011425482:Station = colnames(year_data)
1732011425482:)
1732011425483:# Calculate variance explained
1732011425483:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1732011425483:# Create PCA plot
1732011425483:pca_plot <- ggplot() +
1732011425483:geom_point(data = site_scores,
1732011425484:aes(x = PC1, y = PC2),
1732011425484:size = 2,
1732011425484:shape = 19,
1732011425484:color = "black") +
1732011425484:geom_segment(data = species_loadings,
1732011425485:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732011425485:arrow = arrow(length = unit(0.2, "cm")),
1732011425485:color = "darkgrey") +
1732011425485:geom_text_repel(data = species_loadings,
1732011425485:aes(x = PC1, y = PC2, label = Station),
1732011425486:size = 3.5,
1732011425486:fontface = "bold",
1732011425486:box.padding = 0.5,
1732011425486:point.padding = 0.3) +
1732011425486:geom_text_repel(data = site_scores,
1732011425487:aes(x = PC1, y = PC2, label = Species),
1732011425487:size = 2.8,
1732011425487:fontface = "italic",
1732011425487:color = "grey30",
1732011425487:box.padding = 0.5,
1732011425488:point.padding = 0.3) +
1732011425488:coord_fixed() +
1732011425488:theme_bw() +
1732011425488:theme(
1732011425489:panel.grid.minor = element_blank(),
1732011425489:panel.grid.major = element_line(color = "grey95"),
1732011425489:axis.text = element_text(color = "black", size = 8),
1732011425489:axis.title = element_text(size = 10),
1732011425490:plot.title = element_text(size = 11, face = "bold"),
1732011425490:plot.subtitle = element_text(size = 9)
1732011425490:) +
1732011425491:labs(
1732011425491:title = paste("PCA of benthic community composition -", year),
1732011425491:subtitle = "Species shown as points, stations as arrows",
1732011425491:x = paste0("PC1 (", var_explained[1], "%)"),
1732011425492:y = paste0("PC2 (", var_explained[2], "%)")
1732011425492:)
1732011425493:return(pca_plot)
1732011425494:}
1732011427445:# Create PCA plots for all years
1732011427446:years <- c(1999, 2013:2017)
1732011428005:pca_plots <- list()
1732011429405:for(year in years) {
1732011429405:pca_plots[[as.character(year)]] <- create_year_pca(year)
1732011429405:# Save individual plots
1732011429406:ggsave(
1732011429406:paste0("output/pca_biplot_", year, ".png"),
1732011429406:pca_plots[[as.character(year)]],
1732011429406:width = 10, height = 8,
1732011429406:dpi = 300,
1732011429406:bg = "white"
1732011429406:)
1732011429407:}
1732011494700:site_scores
1732011515915:year_data
1732011524998:year
1732011546355:species_pca
1732011561093:site_scores
1732011609187:species_pca
1732011761717:species_pca
1732011767459:year_data
1732011774290:species_pca
1732011800933:species_pca
1732011807819:species_pca$regularization
1732011812644:species_pca$colsum
1732011822603:species_pca$tot.chi
1732011826740:species_pca$Ybar
1732011904174:species_pca <- rda(scale(year_data))
1732011912676:# Handle NAs
1732011912676:year_data[is.na(year_data)] <- 0
1732011913349:# Run PCA
1732011913350:species_pca <- rda(scale(year_data))
1732011921003:year_data <- data %>%
1732011921003:filter(Year == year) %>%
1732011921003:select(-Year)  # Remove Year column
1732011926071:year_data
1732011940141:# Filter data for specific year and prepare
1732011940141:year_data <- data %>%
1732011940141:filter(Year == year) %>%
1732011940141:select(-Year)  # Remove Year column
1732011959045:# Filter data for specific year and prepare
1732011959045:year_data <- henda %>%
1732011959046:filter(Year == year) %>%
1732011959046:select(-Year)  # Remove Year column
1732011962972:# Prepare data for PCA
1732011962973:rownames(year_data) <- year_data$Flokkun  # Set species names as rownames
1732012025221:# Filter data for specific year and prepare
1732012025222:year_data <- henda %>%
1732012025222:filter(Year == year) %>%
1732012025222:select(-Year)%>%
1732012025222:as.data.frame()  # Convert tibble to data frame
1732012029015:# Prepare data for PCA
1732012029015:rownames(year_data) <- year_data$Flokkun  # Set species names as rownames
1732012031477:year_data <- year_data %>% select(-Flokkun)  # Remove Flokkun column
1732012032341:# Handle NAs
1732012032341:year_data[is.na(year_data)] <- 0
1732012041373:# Run PCA
1732012041373:species_pca <- rda(scale(year_data))
1732012041375:# Extract scores and fix species names
1732012041375:site_scores <- data.frame(
1732012041375:scores(species_pca, display = "sites"),
1732012041375:Species = rownames(scores(species_pca, display = "sites"))
1732012041376:) %>%
1732012041376:mutate(
1732012041376:# Fix species names by adding spaces back
1732012041376:Species = gsub("(?<!^)(?=[A-Z])", " ", Species, perl = TRUE)  # Add space before capital letters
1732012041376:)
1732012045668:site_scores
1732012137989:# Run PCA
1732012137989:species_pca <- rda(scale(year_data))
1732012137990:# Extract scores and fix species names
1732012137990:site_scores <- data.frame(
1732012137990:scores(species_pca, display = "sites"),
1732012137991:Species = rownames(scores(species_pca, display = "sites"))
1732012137991:) %>%
1732012137991:mutate(
1732012137991:# Fix species names by adding spaces back
1732012137991:Species = gsub("(?<!^)(?=[A-Z])", " ", Species, perl = TRUE)  # Add space before capital letters
1732012137991:)%>%
1732012137991:mutate(Species = format_species_names(Species))
1732012139958:site_scores
1732012184061:species_loadings <- data.frame(
1732012184061:scores(species_pca, display = "species"),
1732012184061:Station = colnames(year_data)
1732012184061:)
1732012189941:# Calculate variance explained
1732012189941:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1732012190833:# Create PCA plot
1732012190833:pca_plot <- ggplot() +
1732012190833:geom_point(data = site_scores,
1732012190833:aes(x = PC1, y = PC2),
1732012190834:size = 2,
1732012190834:shape = 19,
1732012190834:color = "black") +
1732012190834:geom_segment(data = species_loadings,
1732012190834:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732012190834:arrow = arrow(length = unit(0.2, "cm")),
1732012190834:color = "darkgrey") +
1732012190834:geom_text_repel(data = species_loadings,
1732012190835:aes(x = PC1, y = PC2, label = Station),
1732012190835:size = 3.5,
1732012190835:fontface = "bold",
1732012190835:box.padding = 0.5,
1732012190835:point.padding = 0.3) +
1732012190835:geom_text_repel(data = site_scores,
1732012190836:aes(x = PC1, y = PC2, label = Species),
1732012190836:size = 2.8,
1732012190836:fontface = "italic",
1732012190836:color = "grey30",
1732012190836:box.padding = 0.5,
1732012190836:point.padding = 0.3) +
1732012190837:coord_fixed() +
1732012190837:theme_bw() +
1732012190837:theme(
1732012190837:panel.grid.minor = element_blank(),
1732012190837:panel.grid.major = element_line(color = "grey95"),
1732012190837:axis.text = element_text(color = "black", size = 8),
1732012190838:axis.title = element_text(size = 10),
1732012190838:plot.title = element_text(size = 11, face = "bold"),
1732012190838:plot.subtitle = element_text(size = 9)
1732012190838:) +
1732012190838:labs(
1732012190838:title = paste("PCA of benthic community composition -", year),
1732012190839:subtitle = "Species shown as points, stations as arrows",
1732012190839:x = paste0("PC1 (", var_explained[1], "%)"),
1732012190839:y = paste0("PC2 (", var_explained[2], "%)")
1732012190839:)
1732012192677:return(pca_plot)
1732012199980:pca_plot
1732012235847:# Function to process and create PCA for one year
1732012235847:create_year_pca <- function(year, data = henda) {
1732012235847:# Filter data for specific year and prepare
1732012235848:year_data <- data %>%
1732012235848:filter(Year == year) %>%
1732012235848:select(-Year) %>%
1732012235848:as.data.frame()  # Convert tibble to data frame
1732012235848:# Prepare data for PCA
1732012235848:rownames(year_data) <- year_data$Flokkun  # Set species names as rownames
1732012235848:year_data <- year_data %>% select(-Flokkun)  # Remove Flokkun column
1732012235849:# Handle NAs
1732012235849:year_data[is.na(year_data)] <- 0
1732012235849:# Run PCA
1732012235849:species_pca <- rda(scale(year_data))
1732012235849:# Extract scores and fix species names
1732012235850:site_scores <- data.frame(
1732012235850:scores(species_pca, display = "sites"),
1732012235850:Species = rownames(scores(species_pca, display = "sites"))
1732012235850:) %>%
1732012235850:mutate(
1732012235850:# Fix species names by adding spaces back
1732012235850:Species = gsub("(?<!^)(?=[A-Z])", " ", Species, perl = TRUE)  # Add space before capital letters
1732012235851:)%>%
1732012235851:mutate(Species = format_species_names(Species))
1732012235851:species_loadings <- data.frame(
1732012235851:scores(species_pca, display = "species"),
1732012235851:Station = colnames(year_data)
1732012235851:)
1732012235852:# Calculate variance explained
1732012235852:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1732012235852:# Create PCA plot
1732012235853:pca_plot <- ggplot() +
1732012235853:geom_point(data = site_scores,
1732012235853:aes(x = PC1, y = PC2),
1732012235853:size = 2,
1732012235853:shape = 19,
1732012235853:color = "black") +
1732012235854:geom_segment(data = species_loadings,
1732012235854:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732012235854:arrow = arrow(length = unit(0.2, "cm")),
1732012235854:color = "darkgrey") +
1732012235855:geom_text_repel(data = species_loadings,
1732012235855:aes(x = PC1, y = PC2, label = Station),
1732012235855:size = 3.5,
1732012235855:fontface = "bold",
1732012235855:box.padding = 0.5,
1732012235856:point.padding = 0.3) +
1732012235856:geom_text_repel(data = site_scores,
1732012235856:aes(x = PC1, y = PC2, label = Species),
1732012235856:size = 2.8,
1732012235856:fontface = "italic",
1732012235857:color = "grey30",
1732012235857:box.padding = 0.5,
1732012235857:point.padding = 0.3) +
1732012235857:coord_fixed() +
1732012235857:theme_bw() +
1732012235858:theme(
1732012235859:panel.grid.minor = element_blank(),
1732012235859:panel.grid.major = element_line(color = "grey95"),
1732012235859:axis.text = element_text(color = "black", size = 8),
1732012235859:axis.title = element_text(size = 10),
1732012235860:plot.title = element_text(size = 11, face = "bold"),
1732012235860:plot.subtitle = element_text(size = 9)
1732012235860:) +
1732012235861:labs(
1732012235862:title = paste("PCA of benthic community composition -", year),
1732012235862:subtitle = "Species shown as points, stations as arrows",
1732012235862:x = paste0("PC1 (", var_explained[1], "%)"),
1732012235863:y = paste0("PC2 (", var_explained[2], "%)")
1732012235863:)
1732012235864:return(pca_plot)
1732012235864:}
1732012237335:# Create PCA plots for all years
1732012237335:years <- c(1999, 2013:2017)
1732012237590:pca_plots <- list()
1732012238237:for(year in years) {
1732012238237:pca_plots[[as.character(year)]] <- create_year_pca(year)
1732012238237:# Save individual plots
1732012238237:ggsave(
1732012238237:paste0("output/pca_biplot_", year, ".png"),
1732012238238:pca_plots[[as.character(year)]],
1732012238238:width = 10, height = 8,
1732012238238:dpi = 300,
1732012238238:bg = "white"
1732012238238:)
1732012238238:}
1732012241974:# Combine all plots
1732012241975:combined_plot <- wrap_plots(pca_plots, ncol = 2) +
1732012241975:plot_annotation(
1732012241975:title = "Temporal changes in community composition (1999, 2013-2017)",
1732012241975:subtitle = "Species shown as points, stations as arrows",
1732012241975:caption = "Based on species abundance data",
1732012241975:theme = theme(
1732012241975:plot.title = element_text(size = 14, face = "bold"),
1732012241975:plot.subtitle = element_text(size = 12),
1732012241975:plot.caption = element_text(size = 10, hjust = 0)
1732012241976:)
1732012241976:)
1732012241981:# Save combined plot
1732012241981:ggsave("output/pca_biplots_all_years.png",
1732012241981:combined_plot,
1732012241982:width = 20, height = 15,
1732012241982:dpi = 300,
1732012241982:bg = "white")
1732012870183:library(ggrepel)
1732012870183:library(vegan)
1732012870184:library(patchwork)
1732012870184:library(knitr)
1732012870184:library(kableExtra)
1732012870239:# Function to process and create PCA for one year
1732012870239:create_year_pca <- function(year, data = henda) {
1732012870239:# Filter data for specific year and prepare
1732012870239:year_data <- data %>%
1732012870239:filter(Year == year) %>%
1732012870239:select(-Year) %>%
1732012870240:as.data.frame()  # Convert tibble to data frame
1732012870240:# Prepare data for PCA
1732012870240:rownames(year_data) <- year_data$Flokkun  # Set species names as rownames
1732012870240:year_data <- year_data %>% select(-Flokkun)  # Remove Flokkun column
1732012870241:# Handle NAs
1732012870241:year_data[is.na(year_data)] <- 0
1732012870241:# Run PCA
1732012870241:species_pca <- rda(scale(year_data))
1732012870241:# Extract and format results for publication
1732012870241:pca_summary <- summary(species_pca)
1732012870242:# Create results list
1732012870242:results <- list(
1732012870242:# Basic PCA information
1732012870242:year = year,
1732012870242:n_species = nrow(year_data),
1732012870243:n_stations = ncol(year_data),
1732012870243:# Eigenvalues and variance explained
1732012870243:eigenvalues = pca_summary$cont$eigenvals,
1732012870243:variance_explained = pca_summary$cont$importance[2,] * 100,
1732012870243:cumulative_variance = pca_summary$cont$importance[3,] * 100,
1732012870244:# Species scores (contributions)
1732012870244:species_scores = data.frame(
1732012870244:Species = rownames(scores(species_pca, display = "sites")),
1732012870244:PC1 = scores(species_pca, display = "sites")[,1],
1732012870245:PC2 = scores(species_pca, display = "sites")[,2]
1732012870245:) %>%
1732012870245:arrange(desc(abs(PC1))) %>%  # Sort by absolute PC1 contribution
1732012870245:mutate(across(where(is.numeric), round, 3)),
1732012870246:# Station scores
1732012870246:station_scores = data.frame(
1732012870246:Station = colnames(year_data),
1732012870246:PC1 = scores(species_pca, display = "species")[,1],
1732012870246:PC2 = scores(species_pca, display = "species")[,2]
1732012870247:) %>%
1732012870247:mutate(across(where(is.numeric), round, 3)),
1732012870247:# Plot object
1732012870248:plot = create_plot(species_pca, year, year_data)  # Original plot creation
1732012870248:)
1732012870248:return(results)
1732012870248:}
1732012870249:# Create PCA results for all years
1732012870249:years <- c(1999, 2013:2017)
1732012870249:pca_results <- list()
1732012870250:# Open file connection for results
1732012870250:sink("output/PCA_results_summary.txt")
1732012870278:cat("PCA Results Summary for Benthic Community Composition\n")
1732012870279:cat("==================================================\n\n")
1732012870279:for(year in years) {
1732012870280:results <- create_year_pca(year)
1732012870280:pca_results[[as.character(year)]] <- results
1732012870280:# Print comprehensive results for each year
1732012870280:cat(sprintf("\nYear %d Analysis\n", year))
1732012870280:cat("----------------\n")
1732012870280:# Basic information
1732012870280:cat(sprintf("Number of species: %d\n", results$n_species))
1732012870280:cat(sprintf("Number of stations: %d\n", results$n_stations))
1732012870280:# Variance explained
1732012870281:cat("\nVariance Explained:\n")
1732012870281:var_table <- data.frame(
1732012870281:PC = paste0("PC", 1:length(results$variance_explained)),
1732012870281:"Variance (%)" = round(results$variance_explained, 1),
1732012870281:"Cumulative (%)" = round(results$cumulative_variance, 1)
1732012870281:)
1732012870281:print(kable(var_table, format = "simple"))
1732012870281:# Top contributing species
1732012870281:cat("\nTop 10 Species Contributions (PC1):\n")
1732012870281:print(kable(head(results$species_scores, 10), format = "simple"))
1732012870282:# Station scores
1732012870282:cat("\nStation Scores:\n")
1732012870282:print(kable(results$station_scores, format = "simple"))
1732012870282:cat("\n\n")
1732012870282:}
1732012935763:library(ggrepel)
1732012935764:library(vegan)
1732012935764:library(readxl)
1732012935764:library(patchwork)
1732012935765:# Function to process and create PCA for one year
1732012935765:create_year_pca <- function(year, data = henda) {
1732012935765:# Filter data for specific year and prepare
1732012935765:year_data <- data %>%
1732012935765:filter(Year == year) %>%
1732012935765:select(-Year) %>%
1732012935766:as.data.frame()  # Convert tibble to data frame
1732012935766:# Prepare data for PCA
1732012935766:rownames(year_data) <- year_data$Flokkun  # Set species names as rownames
1732012935766:year_data <- year_data %>% select(-Flokkun)  # Remove Flokkun column
1732012935766:# Handle NAs
1732012935767:year_data[is.na(year_data)] <- 0
1732012935767:# Run PCA
1732012935767:species_pca <- rda(scale(year_data))
1732012935767:# Extract scores and fix species names
1732012935767:site_scores <- data.frame(
1732012935768:scores(species_pca, display = "sites"),
1732012935768:Species = rownames(scores(species_pca, display = "sites"))
1732012935768:) %>%
1732012935768:mutate(
1732012935768:# Fix species names by adding spaces back
1732012935768:Species = gsub("(?<!^)(?=[A-Z])", " ", Species, perl = TRUE)  # Add space before capital letters
1732012935769:)%>%
1732012935769:mutate(Species = format_species_names(Species))
1732012935769:species_loadings <- data.frame(
1732012935769:scores(species_pca, display = "species"),
1732012935769:Station = colnames(year_data)
1732012935770:)
1732012935770:# Calculate variance explained
1732012935770:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1732012935770:# Create PCA plot
1732012935771:pca_plot <- ggplot() +
1732012935771:geom_point(data = site_scores,
1732012935771:aes(x = PC1, y = PC2),
1732012935771:size = 2,
1732012935772:shape = 19,
1732012935772:color = "black") +
1732012935772:geom_segment(data = species_loadings,
1732012935772:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732012935772:arrow = arrow(length = unit(0.2, "cm")),
1732012935773:color = "darkgrey") +
1732012935773:geom_text_repel(data = species_loadings,
1732012935773:aes(x = PC1, y = PC2, label = Station),
1732012935773:size = 3.5,
1732012935773:fontface = "bold",
1732012935774:box.padding = 0.5,
1732012935774:point.padding = 0.3) +
1732012935774:geom_text_repel(data = site_scores,
1732012935774:aes(x = PC1, y = PC2, label = Species),
1732012935774:size = 2.8,
1732012935775:fontface = "italic",
1732012935775:color = "grey30",
1732012935775:box.padding = 0.5,
1732012935775:point.padding = 0.3) +
1732012935775:coord_fixed() +
1732012935776:theme_bw() +
1732012935776:theme(
1732012935776:panel.grid.minor = element_blank(),
1732012935776:panel.grid.major = element_line(color = "grey95"),
1732012935777:axis.text = element_text(color = "black", size = 8),
1732012935777:axis.title = element_text(size = 10),
1732012935777:plot.title = element_text(size = 11, face = "bold"),
1732012935777:plot.subtitle = element_text(size = 9)
1732012935778:) +
1732012935778:labs(
1732012935778:title = paste("PCA of benthic community composition -", year),
1732012935778:subtitle = "Species shown as points, stations as arrows",
1732012935779:x = paste0("PC1 (", var_explained[1], "%)"),
1732012935779:y = paste0("PC2 (", var_explained[2], "%)")
1732012935779:)
1732012935780:return(pca_plot)
1732012935780:}
1732012935780:# Create PCA plots for all years
1732012935781:years <- c(1999, 2013:2017)
1732012935781:pca_plots <- list()
1732012935781:for(year in years) {
1732012935781:pca_plots[[as.character(year)]] <- create_year_pca(year)
1732012935781:# Save individual plots
1732012935781:ggsave(
1732012935782:paste0("output/pca_biplot_", year, ".png"),
1732012935782:pca_plots[[as.character(year)]],
1732012935782:width = 10, height = 8,
1732012935782:dpi = 300,
1732012935782:bg = "white"
1732012935782:)
1732012935783:}
1732012939570:# Combine all plots
1732012939570:combined_plot <- wrap_plots(pca_plots, ncol = 2) +
1732012939570:plot_annotation(
1732012939571:title = "Temporal changes in community composition (1999, 2013-2017)",
1732012939571:subtitle = "Species shown as points, stations as arrows",
1732012939571:caption = "Based on species abundance data",
1732012939571:theme = theme(
1732012939571:plot.title = element_text(size = 14, face = "bold"),
1732012939571:plot.subtitle = element_text(size = 12),
1732012939571:plot.caption = element_text(size = 10, hjust = 0)
1732012939572:)
1732012939572:)
1732012939577:# Save combined plot
1732012939577:ggsave("output/pca_biplots_all_years.png",
1732012939577:combined_plot,
1732012939577:width = 20, height = 15,
1732012939578:dpi = 300,
1732012939578:bg = "white")
1732012984766:# Create a function to extract key PCA results
1732012984766:extract_pca_results <- function(year, species_pca) {
1732012984766:# Get variance explained
1732012984766:var_explained <- round(summary(species_pca)$cont$importance[2,] * 100, 1)
1732012984766:# Get species scores and sort by absolute contribution to PC1 and PC2
1732012984766:species_scores <- scores(species_pca, display = "sites")
1732012984767:top_contributors <- data.frame(
1732012984767:Species = rownames(species_scores),
1732012984767:PC1_loading = species_scores[,1],
1732012984767:PC2_loading = species_scores[,2]
1732012984767:) %>%
1732012984767:mutate(
1732012984768:PC1_abs = abs(PC1_loading),
1732012984768:PC2_abs = abs(PC2_loading)
1732012984768:) %>%
1732012984768:arrange(desc(PC1_abs + PC2_abs)) %>%
1732012984768:slice_head(n = 10)  # Top 10 contributing species
1732012984768:# Get station scores
1732012984769:station_scores <- data.frame(
1732012984769:scores(species_pca, display = "species"),
1732012984769:Station = colnames(year_data)
1732012984769:)
1732012984770:# Return list of results
1732012984770:return(list(
1732012984770:year = year,
1732012984770:variance = var_explained,
1732012984770:top_species = top_contributors,
1732012984771:stations = station_scores
1732012984771:))
1732012984771:}
1732012987159:# Store results for all years
1732012987160:pca_results <- list()
1732012987959:for(year in years) {
1732012987960:# Run PCA again to get results
1732012987960:year_data <- henda %>%
1732012987960:filter(Year == year) %>%
1732012987960:select(-Year) %>%
1732012987960:as.data.frame()
1732012987960:rownames(year_data) <- year_data$Flokkun
1732012987961:year_data <- year_data %>% select(-Flokkun)
1732012987961:species_pca <- rda(scale(year_data))
1732012987961:pca_results[[as.character(year)]] <- extract_pca_results(year, species_pca)
1732012987961:}
1732012989054:# Create summary tables for the manuscript
1732012989054:# 1. Variance explained table
1732012989054:variance_table <- data.frame(
1732012989054:Year = years,
1732012989054:PC1 = sapply(pca_results, function(x) x$variance[1]),
1732012989055:PC2 = sapply(pca_results, function(x) x$variance[2]),
1732012989055:Total = sapply(pca_results, function(x) sum(x$variance[1:2]))
1732012989055:)
1732012990311:# Print variance table in publication format
1732012990311:cat("\nTable 1. Percentage of variance explained by the first two principal components\n")
1732012991254:print(knitr::kable(variance_table,
1732012991255:digits = 1,
1732012991255:caption = "Percentage of variance explained by PCA axes"))
1732012992813:# 2. Top contributing species for each year
1732012992814:cat("\nTable 2. Top contributing species to community composition by year\n")
1732012993208:for(year in years) {
1732012993208:cat(sprintf("\nYear %d:\n", year))
1732012993208:print(knitr::kable(pca_results[[as.character(year)]]$top_species[1:5,],
1732012993208:digits = 3,
1732012993208:caption = sprintf("Top 5 contributing species in %d", year)))
1732012993209:}
1732012994158:# 3. Station patterns summary
1732012994158:cat("\nStation patterns across years:\n")
1732012994408:for(year in years) {
1732012994409:cat(sprintf("\nYear %d:\n", year))
1732012994409:stations <- pca_results[[as.character(year)]]$stations
1732012994409:print(knitr::kable(stations,
1732012994409:digits = 3,
1732012994409:caption = sprintf("Station coordinates in %d", year)))
1732012994409:}
1732012995533:# Save results to file for manuscript
1732012995533:sink("output/pca_results_summary.txt")
1732012997750:cat("PCA Results Summary for Marine Biology Manuscript\n")
1732012998463:cat("================================================\n\n")
1732012998826:cat("1. Variance Explained\n")
1732012999257:cat("-------------------\n")
1732012999697:print(knitr::kable(variance_table, digits = 1))
1732013000064:cat("\n\n2. Species Contributions\n")
1732013000360:cat("----------------------\n")
1732013000647:for(year in years) {
1732013000647:cat(sprintf("\nYear %d:\n", year))
1732013000648:print(knitr::kable(pca_results[[as.character(year)]]$top_species[1:5,], digits = 3))
1732013000648:}
1732013001152:cat("\n\n3. Station Patterns\n")
1732013001567:cat("-----------------\n")
1732013001913:for(year in years) {
1732013001913:cat(sprintf("\nYear %d:\n", year))
1732013001913:print(knitr::kable(pca_results[[as.character(year)]]$stations, digits = 3))
1732013001913:}
1732013002360:sink()
1732028097723:# Find dominant species (>1% relative abundance)
1732028097724:dominant_species <- henda %>%
1732028097724:select(-Year, -Flokkun) %>%  # Remove Year and Flokkun columns
1732028097724:summarise(across(everything(), sum)) %>%  # Sum abundances for each species
1732028097724:pivot_longer(everything(),
1732028097724:names_to = "Species",
1732028097724:values_to = "total_abundance") %>%
1732028097725:arrange(desc(total_abundance)) %>%
1732028097725:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1732028097725:filter(relative_abundance > 0.01)  # Keep species with >1% relative abundance
1732028098368:# Function to process and create PCA for one year
1732028098368:create_year_pca <- function(year, data = henda) {
1732028098369:# Filter data for specific year and prepare
1732028098369:year_data <- data %>%
1732028098369:filter(Year == year) %>%
1732028098369:select(-Year) %>%
1732028098369:as.data.frame()  # Convert tibble to data frame
1732028098370:# Prepare data for PCA
1732028098370:rownames(year_data) <- year_data$Flokkun  # Set species names as rownames
1732028098370:year_data <- year_data %>% select(-Flokkun)  # Remove Flokkun column
1732028098370:# Handle NAs
1732028098370:year_data[is.na(year_data)] <- 0
1732028098371:# Run PCA
1732028098371:species_pca <- rda(scale(year_data))
1732028098371:# Extract scores
1732028098371:site_scores <- data.frame(
1732028098371:scores(species_pca, display = "sites"),
1732028098372:Species = rownames(scores(species_pca, display = "sites"))
1732028098372:) %>%
1732028098372:# Only keep dominant species for labeling
1732028098372:mutate(show_label = Species %in% dominant_species$Species)
1732028098373:species_loadings <- data.frame(
1732028098373:scores(species_pca, display = "species"),
1732028098373:Station = colnames(year_data)
1732028098373:)
1732028098373:# Calculate variance explained
1732028098373:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1732028098374:# Create PCA plot
1732028098374:pca_plot <- ggplot() +
1732028098374:geom_point(data = site_scores,
1732028098374:aes(x = PC1, y = PC2),
1732028098374:size = 2,
1732028098375:shape = 19,
1732028098375:color = "black") +
1732028098375:geom_segment(data = species_loadings,
1732028098375:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732028098376:arrow = arrow(length = unit(0.2, "cm")),
1732028098376:color = "darkgrey") +
1732028098376:geom_text_repel(data = species_loadings,
1732028098376:aes(x = PC1, y = PC2, label = Station),
1732028098376:size = 3.5,
1732028098377:fontface = "bold",
1732028098377:box.padding = 0.5,
1732028098377:point.padding = 0.3) +
1732028098377:# Only label dominant species
1732028098377:geom_text_repel(data = filter(site_scores, show_label),
1732028098378:aes(x = PC1, y = PC2, label = Species),
1732028098378:size = 2.8,
1732028098378:fontface = "italic",
1732028098378:color = "grey30",
1732028098379:box.padding = 0.5,
1732028098379:point.padding = 0.3) +
1732028098379:coord_fixed() +
1732028098379:theme_bw() +
1732028098379:theme(
1732028098380:panel.grid.minor = element_blank(),
1732028098380:panel.grid.major = element_line(color = "grey95"),
1732028098380:axis.text = element_text(color = "black", size = 8),
1732028098380:axis.title = element_text(size = 10),
1732028098381:plot.title = element_text(size = 11, face = "bold"),
1732028098381:plot.subtitle = element_text(size = 9)
1732028098381:) +
1732028098381:labs(
1732028098382:title = paste("PCA of benthic community composition -", year),
1732028098382:subtitle = "Species shown as points, stations as arrows",
1732028098382:x = paste0("PC1 (", var_explained[1], "%)"),
1732028098382:y = paste0("PC2 (", var_explained[2], "%)")
1732028098383:)
1732028098383:return(pca_plot)
1732028098384:}
1732028100563:# Create PCA plots for all years
1732028100564:years <- c(1999, 2013:2017)
1732028101073:pca_plots <- list()
1732028101744:for(year in years) {
1732028101744:pca_plots[[as.character(year)]] <- create_year_pca(year)
1732028101744:# Save individual plots
1732028101745:ggsave(
1732028101745:paste0("output/pca_biplot_", year, ".png"),
1732028101745:pca_plots[[as.character(year)]],
1732028101745:width = 10, height = 8,
1732028101745:dpi = 300,
1732028101746:bg = "white"
1732028101746:)
1732028101746:}
1732028104332:# Combine all plots
1732028104332:combined_plot <- wrap_plots(pca_plots, ncol = 2) +
1732028104333:plot_annotation(
1732028104333:title = "Temporal changes in community composition (1999, 2013-2017)",
1732028104333:subtitle = "Species shown as points, stations as arrows",
1732028104333:caption = "Based on species abundance data",
1732028104333:theme = theme(
1732028104333:plot.title = element_text(size = 14, face = "bold"),
1732028104333:plot.subtitle = element_text(size = 12),
1732028104334:plot.caption = element_text(size = 10, hjust = 0)
1732028104334:)
1732028104334:)
1732028110305:# Save combined plot
1732028110305:ggsave("output/pca_biplots_all_years.png",
1732028110306:combined_plot,
1732028110306:width = 20, height = 15,
1732028110306:dpi = 300,
1732028110306:bg = "white")
1732028231742:# Create a function to extract key PCA results
1732028231743:extract_pca_results <- function(year, species_pca) {
1732028231743:# Get variance explained
1732028231743:var_explained <- round(summary(species_pca)$cont$importance[2,] * 100, 1)
1732028231743:# Get species scores and sort by absolute contribution to PC1 and PC2
1732028231744:species_scores <- scores(species_pca, display = "sites")
1732028231744:top_contributors <- data.frame(
1732028231744:Species = rownames(species_scores),
1732028231744:PC1_loading = species_scores[,1],
1732028231744:PC2_loading = species_scores[,2]
1732028231744:) %>%
1732028231745:mutate(
1732028231745:PC1_abs = abs(PC1_loading),
1732028231745:PC2_abs = abs(PC2_loading)
1732028231745:) %>%
1732028231745:arrange(desc(PC1_abs + PC2_abs)) %>%
1732028231745:slice_head(n = 10)  # Top 10 contributing species
1732028231746:# Get station scores
1732028231746:station_scores <- data.frame(
1732028231746:scores(species_pca, display = "species"),
1732028231746:Station = colnames(year_data)
1732028231746:)
1732028231747:# Return list of results
1732028231747:return(list(
1732028231747:year = year,
1732028231747:variance = var_explained,
1732028231748:top_species = top_contributors,
1732028231748:stations = station_scores
1732028231748:))
1732028231748:}
1732028233048:# Store results for all years
1732028233048:pca_results <- list()
1732028233512:for(year in years) {
1732028233513:# Run PCA again to get results
1732028233513:year_data <- henda %>%
1732028233513:filter(Year == year) %>%
1732028233513:select(-Year) %>%
1732028233513:as.data.frame()
1732028233513:rownames(year_data) <- year_data$Flokkun
1732028233514:year_data <- year_data %>% select(-Flokkun)
1732028233514:species_pca <- rda(scale(year_data))
1732028233514:pca_results[[as.character(year)]] <- extract_pca_results(year, species_pca)
1732028233514:}
1732028234154:# Create summary tables for the manuscript
1732028234154:# 1. Variance explained table
1732028234154:variance_table <- data.frame(
1732028234154:Year = years,
1732028234154:PC1 = sapply(pca_results, function(x) x$variance[1]),
1732028234155:PC2 = sapply(pca_results, function(x) x$variance[2]),
1732028234155:Total = sapply(pca_results, function(x) sum(x$variance[1:2]))
1732028234155:)
1732028234657:# Print variance table in publication format
1732028234657:cat("\nTable 1. Percentage of variance explained by the first two principal components\n")
1732028235146:print(knitr::kable(variance_table,
1732028235146:digits = 1,
1732028235146:caption = "Percentage of variance explained by PCA axes"))
1732028235609:# 2. Top contributing species for each year
1732028235609:cat("\nTable 2. Top contributing species to community composition by year\n")
1732028236001:for(year in years) {
1732028236001:cat(sprintf("\nYear %d:\n", year))
1732028236002:print(knitr::kable(pca_results[[as.character(year)]]$top_species[1:5,],
1732028236002:digits = 3,
1732028236002:caption = sprintf("Top 5 contributing species in %d", year)))
1732028236002:}
1732028236377:# 3. Station patterns summary
1732028236378:cat("\nStation patterns across years:\n")
1732028236697:for(year in years) {
1732028236697:cat(sprintf("\nYear %d:\n", year))
1732028236698:stations <- pca_results[[as.character(year)]]$stations
1732028236698:print(knitr::kable(stations,
1732028236698:digits = 3,
1732028236698:caption = sprintf("Station coordinates in %d", year)))
1732028236698:}
1732028237099:# Save results to file for manuscript
1732028237099:sink("output/pca_results_summary.txt")
1732028237619:cat("PCA Results Summary for Marine Biology Manuscript\n")
1732028238210:cat("================================================\n\n")
1732028238514:cat("1. Variance Explained\n")
1732028238865:cat("-------------------\n")
1732028239104:print(knitr::kable(variance_table, digits = 1))
1732028239258:cat("\n\n2. Species Contributions\n")
1732028239401:cat("----------------------\n")
1732028239556:for(year in years) {
1732028239556:cat(sprintf("\nYear %d:\n", year))
1732028239556:print(knitr::kable(pca_results[[as.character(year)]]$top_species[1:5,], digits = 3))
1732028239556:}
1732028239667:cat("\n\n3. Station Patterns\n")
1732028239825:cat("-----------------\n")
1732028239971:for(year in years) {
1732028239972:cat(sprintf("\nYear %d:\n", year))
1732028239972:print(knitr::kable(pca_results[[as.character(year)]]$stations, digits = 3))
1732028239972:}
1732028240193:sink()
1732028582442:# Create a function to extract key PCA results
1732028582442:extract_pca_results <- function(year, species_pca) {
1732028582442:# Get variance explained
1732028582442:var_explained <- round(summary(species_pca)$cont$importance[2,] * 100, 1)
1732028582443:# Get species scores and sort by absolute contribution to PC1 and PC2
1732028582443:species_scores <- scores(species_pca, display = "sites")
1732028582443:top_contributors <- data.frame(
1732028582443:Species = rownames(species_scores),
1732028582443:PC1_loading = species_scores[,1],
1732028582444:PC2_loading = species_scores[,2]
1732028582444:) %>%
1732028582444:mutate(
1732028582444:PC1_abs = abs(PC1_loading),
1732028582444:PC2_abs = abs(PC2_loading)
1732028582444:) %>%
1732028582444:arrange(desc(PC1_abs + PC2_abs)) %>%
1732028582445:slice_head(n = 10)  # Top 10 contributing species
1732028582445:# Get station scores
1732028582445:station_scores <- data.frame(
1732028582445:scores(species_pca, display = "species"),
1732028582446:Station = colnames(year_data)
1732028582446:)
1732028582446:# Return list of results
1732028582446:return(list(
1732028582446:year = year,
1732028582447:variance = var_explained,
1732028582447:top_species = top_contributors,
1732028582447:stations = station_scores
1732028582447:))
1732028582447:}
1732028582448:# Store results for all years
1732028582448:pca_results <- list()
1732028582448:for(year in years) {
1732028582448:# Run PCA again to get results
1732028582448:year_data <- henda %>%
1732028582449:filter(Year == year) %>%
1732028582449:select(-Year) %>%
1732028582449:as.data.frame()
1732028582450:rownames(year_data) <- year_data$Flokkun
1732028582450:year_data <- year_data %>% select(-Flokkun)
1732028582450:species_pca <- rda(scale(year_data))
1732028582450:pca_results[[as.character(year)]] <- extract_pca_results(year, species_pca)
1732028582450:}
1732028582540:# Create summary tables for the manuscript
1732028582540:# 1. Variance explained table
1732028582540:variance_table <- data.frame(
1732028582540:Year = years,
1732028582540:PC1 = sapply(pca_results, function(x) x$variance[1]),
1732028582540:PC2 = sapply(pca_results, function(x) x$variance[2]),
1732028582540:Total = sapply(pca_results, function(x) sum(x$variance[1:2]))
1732028582540:)
1732028582546:# Print variance table in publication format
1732028582546:cat("\nTable 1. Percentage of variance explained by the first two principal components\n")
1732028582547:print(knitr::kable(variance_table,
1732028582547:digits = 1,
1732028582547:caption = "Percentage of variance explained by PCA axes"))
1732028582556:# 2. Top contributing species for each year
1732028582556:cat("\nTable 2. Top contributing species to community composition by year\n")
1732028582556:for(year in years) {
1732028582556:cat(sprintf("\nYear %d:\n", year))
1732028582556:print(knitr::kable(pca_results[[as.character(year)]]$top_species[1:5,],
1732028582557:digits = 3,
1732028582557:caption = sprintf("Top 5 contributing species in %d", year)))
1732028582557:}
1732028582613:# 3. Station patterns summary
1732028582613:cat("\nStation patterns across years:\n")
1732028582613:for(year in years) {
1732028582613:cat(sprintf("\nYear %d:\n", year))
1732028582613:stations <- pca_results[[as.character(year)]]$stations
1732028582613:print(knitr::kable(stations,
1732028582613:digits = 3,
1732028582613:caption = sprintf("Station coordinates in %d", year)))
1732028582614:}
1732028582691:# Save results to file for manuscript
1732028582691:sink("output/pca_results_summary.txt")
1732028582700:cat("PCA Results Summary for Marine Biology Manuscript\n")
1732028582700:cat("================================================\n\n")
1732028582701:cat("1. Variance Explained\n")
1732028582701:cat("-------------------\n")
1732028582701:print(knitr::kable(variance_table, digits = 1))
1732028582708:cat("\n\n2. Species Contributions\n")
1732028582709:cat("----------------------\n")
1732028582709:for(year in years) {
1732028582709:cat(sprintf("\nYear %d:\n", year))
1732028582709:print(knitr::kable(pca_results[[as.character(year)]]$top_species[1:5,], digits = 3))
1732028582709:}
1732028582759:cat("\n\n3. Station Patterns\n")
1732028582759:cat("-----------------\n")
1732028582760:for(year in years) {
1732028582760:cat(sprintf("\nYear %d:\n", year))
1732028582760:print(knitr::kable(pca_results[[as.character(year)]]$stations, digits = 3))
1732028582760:}
1732028582803:sink()
1732028634576:# Create a function to extract key PCA results
1732028634576:extract_pca_results <- function(year, species_pca) {
1732028634576:# Get variance explained
1732028634577:var_explained <- round(summary(species_pca)$cont$importance[2,] * 100, 1)
1732028634577:# Get species scores and sort by absolute contribution to PC1 and PC2
1732028634577:species_scores <- scores(species_pca, display = "sites")
1732028634577:top_contributors <- data.frame(
1732028634577:Species = rownames(species_scores),
1732028634578:PC1_loading = species_scores[,1],
1732028634578:PC2_loading = species_scores[,2]
1732028634578:) %>%
1732028634578:mutate(
1732028634578:PC1_abs = abs(PC1_loading),
1732028634578:PC2_abs = abs(PC2_loading),
1732028634579:is_dominant = Species %in% dominant_species$Species,
1732028634579:relative_abundance = sapply(Species, function(sp) {
1732028634579:dominant_species$relative_abundance[dominant_species$Species == sp][1]
1732028634579:})
1732028634579:) %>%
1732028634580:arrange(desc(PC1_abs + PC2_abs))
1732028634580:# Get station scores
1732028634580:station_scores <- data.frame(
1732028634581:scores(species_pca, display = "species"),
1732028634581:Station = colnames(year_data)
1732028634581:)
1732028634581:return(list(
1732028634581:year = year,
1732028634582:variance = var_explained,
1732028634582:top_species = top_contributors,
1732028634582:stations = station_scores
1732028634582:))
1732028634582:}
1732028634583:# Store results for all years
1732028634583:pca_results <- list()
1732028634583:for(year in years) {
1732028634583:# Run PCA again to get results
1732028634584:year_data <- henda %>%
1732028634584:filter(Year == year) %>%
1732028634584:select(-Year) %>%
1732028634584:as.data.frame()
1732028634584:rownames(year_data) <- year_data$Flokkun
1732028634585:year_data <- year_data %>% select(-Flokkun)
1732028634585:species_pca <- rda(scale(year_data))
1732028634585:pca_results[[as.character(year)]] <- extract_pca_results(year, species_pca)
1732028634585:}
1732028634694:# Create summary tables for the manuscript
1732028634694:# 1. Variance explained table
1732028634694:variance_table <- data.frame(
1732028634694:Year = years,
1732028634694:PC1 = sapply(pca_results, function(x) x$variance[1]),
1732028634694:PC2 = sapply(pca_results, function(x) x$variance[2]),
1732028634694:Total = sapply(pca_results, function(x) sum(x$variance[1:2]))
1732028634694:)
1732028634701:# Print variance table in publication format
1732028634701:cat("\nTable 1. Percentage of variance explained by the first two principal components\n")
1732028634702:print(knitr::kable(variance_table,
1732028634702:digits = 1,
1732028634702:caption = "Percentage of variance explained by PCA axes"))
1732028634711:# 2. Top contributing species for each year
1732028634711:cat("\nTable 2. Top contributing species to community composition by year\n")
1732028634711:for(year in years) {
1732028634711:cat(sprintf("\nYear %d:\n", year))
1732028634711:print(knitr::kable(pca_results[[as.character(year)]]$top_species[1:5,],
1732028634711:digits = 3,
1732028634711:caption = sprintf("Top 5 contributing species in %d", year)))
1732028634711:}
1732028634765:# 3. Station patterns summary
1732028634766:cat("\nStation patterns across years:\n")
1732028634766:for(year in years) {
1732028634766:cat(sprintf("\nYear %d:\n", year))
1732028634766:stations <- pca_results[[as.character(year)]]$stations
1732028634766:print(knitr::kable(stations,
1732028634766:digits = 3,
1732028634766:caption = sprintf("Station coordinates in %d", year)))
1732028634766:}
1732028634813:# Save results to file for manuscript
1732028634813:sink("output/pca_results_summary.txt")
1732028634822:cat("PCA Results Summary for Marine Biology Manuscript\n")
1732028634823:cat("================================================\n\n")
1732028634823:cat("1. Variance Explained\n")
1732028634823:cat("-------------------\n")
1732028634824:print(knitr::kable(variance_table, digits = 1))
1732028634831:cat("\n\n2. Species Contributions\n")
1732028634832:cat("----------------------\n")
1732028634832:for(year in years) {
1732028634832:cat(sprintf("\nYear %d:\n", year))
1732028634832:# Print dominant species results
1732028634832:cat("\nDominant Species (>1% relative abundance):\n")
1732028634832:dominant_results <- pca_results[[as.character(year)]]$top_species %>%
1732028634832:filter(is_dominant) %>%
1732028634832:select(Species, PC1_loading, PC2_loading, relative_abundance) %>%
1732028634833:slice_head(n = 10)
1732028634833:print(knitr::kable(dominant_results, digits = 3))
1732028634833:# Print top contributors regardless of abundance
1732028634833:cat("\nTop Contributing Species (including rare species):\n")
1732028634833:all_results <- pca_results[[as.character(year)]]$top_species %>%
1732028634833:select(Species, PC1_loading, PC2_loading) %>%
1732028634833:slice_head(n = 10)
1732028634833:print(knitr::kable(all_results, digits = 3))
1732028634833:}
1732028634959:cat("\n\n3. Station Patterns\n")
1732028634960:cat("-----------------\n")
1732028634960:for(year in years) {
1732028634960:cat(sprintf("\nYear %d:\n", year))
1732028634960:print(knitr::kable(pca_results[[as.character(year)]]$stations, digits = 3))
1732028634961:}
1732028634999:# Add summary of dominant species
1732028634999:cat("\n\n4. Overall Community Dominance Patterns\n")
1732028634999:cat("-----------------------------------\n")
1732028635000:print(knitr::kable(
1732028635000:dominant_species %>%
1732028635000:arrange(desc(relative_abundance)) %>%
1732028635000:mutate(
1732028635000:relative_abundance = round(relative_abundance * 100, 2),
1732028635000:cumulative_abundance = cumsum(relative_abundance)
1732028635000:) %>%
1732028635000:select(Species, relative_abundance, cumulative_abundance),
1732028635000:col.names = c("Species", "Relative Abundance (%)", "Cumulative Abundance (%)"),
1732028635000:digits = 2
1732028635000:))
1732028635011:sink()
1732028797874:# Create a function to extract key PCA results
1732028797875:extract_pca_results <- function(year, species_pca) {
1732028797875:# Get variance explained
1732028797875:var_explained <- round(summary(species_pca)$cont$importance[2,] * 100, 1)
1732028797875:# Get species scores and sort by absolute contribution to PC1 and PC2
1732028797875:species_scores <- scores(species_pca, display = "sites")
1732028797876:top_contributors <- data.frame(
1732028797876:Species = rownames(species_scores),
1732028797876:PC1_loading = species_scores[,1],
1732028797876:PC2_loading = species_scores[,2]
1732028797876:) %>%
1732028797876:mutate(
1732028797877:PC1_abs = abs(PC1_loading),
1732028797877:PC2_abs = abs(PC2_loading),
1732028797877:is_dominant = Species %in% dominant_species$Species,
1732028797877:relative_abundance = sapply(Species, function(sp) {
1732028797877:dominant_species$relative_abundance[dominant_species$Species == sp][1]
1732028797877:})
1732028797878:) %>%
1732028797878:arrange(desc(PC1_abs + PC2_abs))
1732028797878:# Get station scores
1732028797878:station_scores <- data.frame(
1732028797879:scores(species_pca, display = "species"),
1732028797879:Station = colnames(year_data)
1732028797879:)
1732028797879:return(list(
1732028797880:year = year,
1732028797880:variance = var_explained,
1732028797880:top_species = top_contributors,
1732028797880:stations = station_scores
1732028797880:))
1732028797881:}
1732028797881:# Store results for all years
1732028797881:pca_results <- list()
1732028797882:for(year in years) {
1732028797882:# Run PCA again to get results
1732028797882:year_data <- henda %>%
1732028797882:filter(Year == year) %>%
1732028797882:select(-Year) %>%
1732028797882:as.data.frame()
1732028797883:rownames(year_data) <- year_data$Flokkun
1732028797883:year_data <- year_data %>% select(-Flokkun)
1732028797883:species_pca <- rda(scale(year_data))
1732028797883:pca_results[[as.character(year)]] <- extract_pca_results(year, species_pca)
1732028797883:}
1732028797962:# Create summary tables for the manuscript
1732028797962:# 1. Variance explained table
1732028797962:variance_table <- data.frame(
1732028797962:Year = years,
1732028797962:PC1 = sapply(pca_results, function(x) x$variance[1]),
1732028797962:PC2 = sapply(pca_results, function(x) x$variance[2]),
1732028797962:Total = sapply(pca_results, function(x) sum(x$variance[1:2]))
1732028797962:)
1732028797967:# Print variance table in publication format
1732028797967:cat("\nTable 1. Percentage of variance explained by the first two principal components\n")
1732028797969:print(knitr::kable(variance_table,
1732028797969:digits = 1,
1732028797969:caption = "Percentage of variance explained by PCA axes"))
1732028797978:# 2. Top contributing species for each year
1732028797978:cat("\nTable 2. Top contributing species to community composition by year\n")
1732028798003:for(year in years) {
1732028798003:cat(sprintf("\nYear %d:\n", year))
1732028798003:print(knitr::kable(pca_results[[as.character(year)]]$top_species[1:5,],
1732028798003:digits = 3,
1732028798003:caption = sprintf("Top 5 contributing species in %d", year)))
1732028798003:}
1732028798100:# 3. Station patterns summary
1732028798100:cat("\nStation patterns across years:\n")
1732028798101:for(year in years) {
1732028798101:cat(sprintf("\nYear %d:\n", year))
1732028798101:stations <- pca_results[[as.character(year)]]$stations
1732028798101:print(knitr::kable(stations,
1732028798101:digits = 3,
1732028798101:caption = sprintf("Station coordinates in %d", year)))
1732028798101:}
1732028798135:# Save results to file for manuscript
1732028798135:sink("output/pca_results_summary.txt")
1732028798145:cat("PCA Results Summary for Marine Biology Manuscript\n")
1732028798145:cat("================================================\n\n")
1732028798146:cat("1. Variance Explained\n")
1732028798146:cat("-------------------\n")
1732028798147:print(knitr::kable(variance_table, digits = 1))
1732028798153:cat("\n\n2. Species Contributions\n")
1732028798153:cat("----------------------\n")
1732028798154:for(year in years) {
1732028798154:cat(sprintf("\nYear %d:\n", year))
1732028798154:# Get year's results
1732028798154:year_results <- pca_results[[as.character(year)]]$top_species
1732028798154:# Print dominant species results (>1% relative abundance)
1732028798155:cat("\nDominant Species (>1% relative abundance):\n")
1732028798155:dominant_results <- year_results %>%
1732028798155:filter(!is.na(relative_abundance)) %>%  # Only species in dominant_species list
1732028798155:select(Species, PC1_loading, PC2_loading, relative_abundance) %>%
1732028798155:arrange(desc(abs(PC1_loading) + abs(PC2_loading))) %>%
1732028798155:slice_head(n = 10)
1732028798156:print(knitr::kable(dominant_results, digits = 3))
1732028798156:# Print all species contributions
1732028798156:cat("\nTop Contributing Species (including rare species):\n")
1732028798156:all_results <- year_results %>%
1732028798156:select(Species, PC1_loading, PC2_loading) %>%
1732028798157:arrange(desc(abs(PC1_loading) + abs(PC2_loading))) %>%
1732028798157:slice_head(n = 10)
1732028798157:print(knitr::kable(all_results, digits = 3))
1732028798157:}
1732028798312:cat("\n\n3. Station Patterns\n")
1732028798313:cat("-----------------\n")
1732028798313:for(year in years) {
1732028798313:cat(sprintf("\nYear %d:\n", year))
1732028798313:print(knitr::kable(pca_results[[as.character(year)]]$stations, digits = 3))
1732028798313:}
1732028798350:# Add summary of overall dominant species
1732028798350:cat("\n\n4. Overall Community Dominance Patterns\n")
1732028798350:cat("-----------------------------------\n")
1732028798350:print(knitr::kable(
1732028798350:dominant_species %>%
1732028798350:arrange(desc(relative_abundance)) %>%
1732028798351:mutate(
1732028798351:relative_abundance = relative_abundance * 100,
1732028798351:cumulative_abundance = cumsum(relative_abundance)
1732028798351:),
1732028798351:col.names = c("Species", "Total Abundance", "Relative Abundance (%)", "Cumulative Abundance (%)"),
1732028798351:digits = 2
1732028798351:))
1732028798361:sink()
1732028825693:# Create a function to extract key PCA results
1732028825693:extract_pca_results <- function(year, species_pca) {
1732028825693:# Get variance explained
1732028825693:var_explained <- round(summary(species_pca)$cont$importance[2,] * 100, 1)
1732028825693:# Get species scores and sort by absolute contribution to PC1 and PC2
1732028825693:species_scores <- scores(species_pca, display = "sites")
1732028825694:top_contributors <- data.frame(
1732028825694:Species = rownames(species_scores),
1732028825694:PC1_loading = species_scores[,1],
1732028825694:PC2_loading = species_scores[,2]
1732028825694:) %>%
1732028825694:mutate(
1732028825695:PC1_abs = abs(PC1_loading),
1732028825695:PC2_abs = abs(PC2_loading),
1732028825695:is_dominant = Species %in% dominant_species$Species,
1732028825695:relative_abundance = sapply(Species, function(sp) {
1732028825695:dominant_species$relative_abundance[dominant_species$Species == sp][1]
1732028825695:})
1732028825696:) %>%
1732028825696:arrange(desc(PC1_abs + PC2_abs))
1732028825696:# Get station scores
1732028825696:station_scores <- data.frame(
1732028825696:scores(species_pca, display = "species"),
1732028825697:Station = colnames(year_data)
1732028825697:)
1732028825697:return(list(
1732028825697:year = year,
1732028825698:variance = var_explained,
1732028825698:top_species = top_contributors,
1732028825698:stations = station_scores
1732028825698:))
1732028825698:}
1732028825699:# Store results for all years
1732028825699:pca_results <- list()
1732028825699:for(year in years) {
1732028825699:# Run PCA again to get results
1732028825699:year_data <- henda %>%
1732028825699:filter(Year == year) %>%
1732028825700:select(-Year) %>%
1732028825700:as.data.frame()
1732028825700:rownames(year_data) <- year_data$Flokkun
1732028825700:year_data <- year_data %>% select(-Flokkun)
1732028825700:species_pca <- rda(scale(year_data))
1732028825700:pca_results[[as.character(year)]] <- extract_pca_results(year, species_pca)
1732028825700:}
1732028825772:# Create summary tables for the manuscript
1732028825772:# 1. Variance explained table
1732028825772:variance_table <- data.frame(
1732028825773:Year = years,
1732028825773:PC1 = sapply(pca_results, function(x) x$variance[1]),
1732028825773:PC2 = sapply(pca_results, function(x) x$variance[2]),
1732028825773:Total = sapply(pca_results, function(x) sum(x$variance[1:2]))
1732028825773:)
1732028825778:# Print variance table in publication format
1732028825778:cat("\nTable 1. Percentage of variance explained by the first two principal components\n")
1732028825779:print(knitr::kable(variance_table,
1732028825779:digits = 1,
1732028825779:caption = "Percentage of variance explained by PCA axes"))
1732028825787:# 2. Top contributing species for each year
1732028825787:cat("\nTable 2. Top contributing species to community composition by year\n")
1732028825788:for(year in years) {
1732028825788:cat(sprintf("\nYear %d:\n", year))
1732028825788:print(knitr::kable(pca_results[[as.character(year)]]$top_species[1:5,],
1732028825788:digits = 3,
1732028825788:caption = sprintf("Top 5 contributing species in %d", year)))
1732028825788:}
1732028825835:# 3. Station patterns summary
1732028825835:cat("\nStation patterns across years:\n")
1732028825835:for(year in years) {
1732028825835:cat(sprintf("\nYear %d:\n", year))
1732028825835:stations <- pca_results[[as.character(year)]]$stations
1732028825835:print(knitr::kable(stations,
1732028825835:digits = 3,
1732028825835:caption = sprintf("Station coordinates in %d", year)))
1732028825835:}
1732028825874:# Save results to file for manuscript
1732028825874:sink("output/pca_results_summary.txt")
1732028825882:cat("PCA Results Summary for Marine Biology Manuscript\n")
1732028825883:cat("================================================\n\n")
1732028825883:cat("1. Variance Explained\n")
1732028825884:cat("-------------------\n")
1732028825884:print(knitr::kable(variance_table, digits = 1))
1732028825892:cat("\n\n2. Species Contributions\n")
1732028825892:cat("----------------------\n")
1732028825893:for(year in years) {
1732028825893:cat(sprintf("\nYear %d:\n", year))
1732028825893:# Get year's results
1732028825893:year_results <- pca_results[[as.character(year)]]$top_species
1732028825893:# Print dominant species results (>1% relative abundance)
1732028825893:cat("\nDominant Species (>1% relative abundance):\n")
1732028825893:dominant_results <- year_results %>%
1732028825893:filter(!is.na(relative_abundance)) %>%  # Only species in dominant_species list
1732028825894:select(Species, PC1_loading, PC2_loading, relative_abundance) %>%
1732028825894:arrange(desc(abs(PC1_loading) + abs(PC2_loading))) %>%
1732028825894:slice_head(n = 10)
1732028825894:print(knitr::kable(dominant_results, digits = 3))
1732028825894:# Print all species contributions
1732028825894:cat("\nTop Contributing Species (including rare species):\n")
1732028825894:all_results <- year_results %>%
1732028825894:select(Species, PC1_loading, PC2_loading) %>%
1732028825894:arrange(desc(abs(PC1_loading) + abs(PC2_loading))) %>%
1732028825895:slice_head(n = 10)
1732028825895:print(knitr::kable(all_results, digits = 3))
1732028825895:}
1732028826076:cat("\n\n3. Station Patterns\n")
1732028826077:cat("-----------------\n")
1732028826077:for(year in years) {
1732028826077:cat(sprintf("\nYear %d:\n", year))
1732028826077:print(knitr::kable(pca_results[[as.character(year)]]$stations, digits = 3))
1732028826077:}
1732028826114:# Add summary of overall dominant species
1732028826114:cat("\n\n4. Overall Community Dominance Patterns\n")
1732028826114:cat("-----------------------------------\n")
1732028826115:print(knitr::kable(
1732028826115:dominant_species %>%
1732028826115:arrange(desc(relative_abundance)) %>%
1732028826115:mutate(
1732028826115:relative_abundance = relative_abundance * 100,
1732028826115:cumulative_abundance = cumsum(relative_abundance)
1732028826115:),
1732028826115:col.names = c("Species", "Total Abundance", "Relative Abundance (%)", "Cumulative Abundance (%)"),
1732028826115:digits = 2
1732028826115:))
1732028826125:sink()
1732028891921:# First, let's make sure dominant_species is correctly identified
1732028891921:dominant_species <- henda %>%
1732028891921:select(-Year, -Flokkun) %>%
1732028891921:summarise(across(everything(), sum)) %>%
1732028891922:pivot_longer(everything(),
1732028891922:names_to = "Species",
1732028891922:values_to = "total_abundance") %>%
1732028891922:arrange(desc(total_abundance)) %>%
1732028891922:mutate(
1732028891922:relative_abundance = total_abundance/sum(total_abundance)
1732028891923:) %>%
1732028891923:filter(relative_abundance > 0.01)  # Keep species with >1% relative abundance
1732028891934:# Let's verify the dominant species list
1732028891934:print("Dominant species identified:")
1732028891936:print(dominant_species)
1732028891958:# Modified extract_pca_results function
1732028891958:extract_pca_results <- function(year, species_pca) {
1732028891958:var_explained <- round(summary(species_pca)$cont$importance[2,] * 100, 1)
1732028891958:species_scores <- scores(species_pca, display = "sites")
1732028891958:top_contributors <- data.frame(
1732028891958:Species = rownames(species_scores),
1732028891958:PC1_loading = species_scores[,1],
1732028891959:PC2_loading = species_scores[,2]
1732028891959:) %>%
1732028891959:mutate(
1732028891959:PC1_abs = abs(PC1_loading),
1732028891959:PC2_abs = abs(PC2_loading)
1732028891959:) %>%
1732028891959:# Make sure Species names match exactly
1732028891959:left_join(
1732028891959:dominant_species %>%
1732028891959:select(Species, total_abundance, relative_abundance),
1732028891959:by = "Species"
1732028891960:)
1732028891960:station_scores <- data.frame(
1732028891960:scores(species_pca, display = "species"),
1732028891960:Station = colnames(year_data)
1732028891960:)
1732028891960:return(list(
1732028891960:year = year,
1732028891960:variance = var_explained,
1732028891960:top_species = top_contributors,
1732028891961:stations = station_scores
1732028891961:))
1732028891961:}
1732028891961:# In the results output section:
1732028891961:sink("output/pca_results_summary.txt")
1732028891970:cat("PCA Results Summary for Marine Biology Manuscript\n")
1732028891971:cat("================================================\n\n")
1732028891972:# First, print the list of dominant species for verification
1732028891972:cat("Dominant Species (>1% relative abundance across all years):\n")
1732028891972:print(knitr::kable(
1732028891972:dominant_species %>%
1732028891972:arrange(desc(relative_abundance)) %>%
1732028891972:mutate(
1732028891972:relative_abundance = relative_abundance * 100
1732028891972:),
1732028891972:digits = 2
1732028891972:))
1732028891981:cat("\n\n1. Variance Explained\n")
1732028891982:cat("-------------------\n")
1732028891982:print(knitr::kable(variance_table, digits = 1))
1732028891988:cat("\n\n2. Species Contributions by Year\n")
1732028891988:cat("------------------------------\n")
1732028891989:for(year in years) {
1732028891989:cat(sprintf("\nYear %d:\n", year))
1732028891989:year_results <- pca_results[[as.character(year)]]$top_species
1732028891989:# Debug print
1732028891989:cat("\nNumber of dominant species found:", sum(!is.na(year_results$relative_abundance)), "\n")
1732028891989:# Print dominant species results
1732028891989:cat("\nDominant Species (>1% relative abundance):\n")
1732028891989:dominant_results <- year_results %>%
1732028891989:filter(!is.na(relative_abundance)) %>%
1732028891989:arrange(desc(PC1_abs + PC2_abs)) %>%
1732028891989:select(Species, PC1_loading, PC2_loading, relative_abundance) %>%
1732028891989:slice_head(n = 10)
1732028891990:print(knitr::kable(dominant_results, digits = 3))
1732028891990:# Print all species contributions
1732028891990:cat("\nAll Species Contributions (sorted by absolute contribution):\n")
1732028891990:all_results <- year_results %>%
1732028891990:arrange(desc(PC1_abs + PC2_abs)) %>%
1732028891990:select(Species, PC1_loading, PC2_loading) %>%
1732028891990:slice_head(n = 10)
1732028891990:print(knitr::kable(all_results, digits = 3))
1732028891990:}
1732028892161:# Rest of the output remains the same...
1732028892161:sink()
1732028913367:print("Dominant species identified:")
1732028913370:print(dominant_species)
1732028916967:print("Dominant species identified:")
1732028916968:print(dominant_species)
1732028925680:dominant_species
1732028938628:View(dominant_species)
1732028944478:View(dominant_species)
1732028945499:View(dominant_species)
1732028945975:View(dominant_species)
1732028956024:print("Dominant species identified:")
1732028956025:print(dominant_species)
1732028971805:dominant_species
1732028973910:5+5
1732028978585:as_data_frame
1732029034012:5+5
1732029830689:dominant_species
1732030134553:# Find dominant species (>1% relative abundance)
1732030134554:dominant_species <- henda %>%
1732030134554:select(-Year) %>%  # Keep Flokkun (species names)
1732030134554:group_by(Flokkun) %>%  # Group by species
1732030134554:summarise(total_abundance = sum(across(where(is.numeric)))) %>%  # Sum across all stations
1732030134554:ungroup() %>%
1732030134554:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1732030134554:filter(relative_abundance > 0.01) %>%  # Keep species with >1% relative abundance
1732030134555:rename(Species = Flokkun) %>%  # Rename to match with other data
1732030134555:arrange(desc(relative_abundance))
1732030135154:# Print to verify
1732030135154:print("Dominant species identified:")
1732030135565:print(dominant_species)
1732030148374:henda
1732030201367:# Find dominant species (>1% relative abundance)
1732030201367:dominant_species <- henda %>%
1732030201367:pivot_longer(cols = c(A7, B5, B8, C4, E3, E4),
1732030201368:names_to = "Station",
1732030201368:values_to = "abundance") %>%
1732030201368:group_by(Flokkun) %>%
1732030201368:summarise(total_abundance = sum(abundance)) %>%
1732030201368:ungroup() %>%
1732030201368:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1732030201368:filter(relative_abundance > 0.01) %>%  # Keep species with >1% relative abundance
1732030201368:rename(Species = Flokkun) %>%
1732030201369:arrange(desc(relative_abundance))
1732030201912:# Print to verify
1732030201912:print("Dominant species identified:")
1732030202218:print(dominant_species)
1732030211816:henda %>%
1732030211816:pivot_longer(cols = c(A7, B5, B8, C4, E3, E4),
1732030211816:names_to = "Station",
1732030211816:values_to = "abundance")
1732030232944:library(tidyverse)
1732030238954:library(ggrepel)
1732030238962:library(vegan)
1732030239794:library(readxl)
1732030239807:library(patchwork)
1732030253752:# Find dominant species (>1% relative abundance)
1732030253753:dominant_species <- henda %>%
1732030253753:pivot_longer(cols = c(A7, B5, B8, C4, E3, E4),
1732030253753:names_to = "Station",
1732030253753:values_to = "abundance") %>%
1732030253753:group_by(Flokkun) %>%
1732030253753:summarise(total_abundance = sum(abundance)) %>%
1732030253753:ungroup() %>%
1732030253753:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1732030253754:filter(relative_abundance > 0.01) %>%  # Keep species with >1% relative abundance
1732030253754:rename(Species = Flokkun) %>%
1732030253754:arrange(desc(relative_abundance))
1732030254800:# Print to verify
1732030254801:print("Dominant species identified:")
1732030255473:print(dominant_species)
1732030343415:# Create a function to extract key PCA results
1732030343415:extract_pca_results <- function(year, species_pca) {
1732030343415:# Get variance explained
1732030343415:var_explained <- round(summary(species_pca)$cont$importance[2,] * 100, 1)
1732030343415:# Get species scores and sort by absolute contribution to PC1 and PC2
1732030343416:species_scores <- scores(species_pca, display = "sites")
1732030343416:top_contributors <- data.frame(
1732030343416:Species = rownames(species_scores),
1732030343416:PC1_loading = species_scores[,1],
1732030343416:PC2_loading = species_scores[,2]
1732030343416:) %>%
1732030343416:mutate(
1732030343417:PC1_abs = abs(PC1_loading),
1732030343417:PC2_abs = abs(PC2_loading),
1732030343417:is_dominant = Species %in% dominant_species$Species,
1732030343417:relative_abundance = sapply(Species, function(sp) {
1732030343417:dominant_species$relative_abundance[dominant_species$Species == sp][1]
1732030343417:})
1732030343417:) %>%
1732030343418:arrange(desc(PC1_abs + PC2_abs))
1732030343418:# Get station scores
1732030343418:station_scores <- data.frame(
1732030343418:scores(species_pca, display = "species"),
1732030343418:Station = colnames(year_data)
1732030343418:)
1732030343419:return(list(
1732030343419:year = year,
1732030343419:variance = var_explained,
1732030343419:top_species = top_contributors,
1732030343419:stations = station_scores
1732030343420:))
1732030343420:}
1732030343420:# Store results for all years
1732030343420:pca_results <- list()
1732030343420:for(year in years) {
1732030343421:# Run PCA again to get results
1732030343421:year_data <- henda %>%
1732030343421:filter(Year == year) %>%
1732030343421:select(-Year) %>%
1732030343421:as.data.frame()
1732030343421:rownames(year_data) <- year_data$Flokkun
1732030343421:year_data <- year_data %>% select(-Flokkun)
1732030343422:species_pca <- rda(scale(year_data))
1732030343422:pca_results[[as.character(year)]] <- extract_pca_results(year, species_pca)
1732030343422:}
1732030343502:# Create summary tables for the manuscript
1732030343502:# 1. Variance explained table
1732030343502:variance_table <- data.frame(
1732030343502:Year = years,
1732030343502:PC1 = sapply(pca_results, function(x) x$variance[1]),
1732030343502:PC2 = sapply(pca_results, function(x) x$variance[2]),
1732030343502:Total = sapply(pca_results, function(x) sum(x$variance[1:2]))
1732030343503:)
1732030343507:# Print variance table in publication format
1732030343507:cat("\nTable 1. Percentage of variance explained by the first two principal components\n")
1732030343507:print(knitr::kable(variance_table,
1732030343507:digits = 1,
1732030343507:caption = "Percentage of variance explained by PCA axes"))
1732030343528:# 2. Top contributing species for each year
1732030343528:cat("\nTable 2. Top contributing species to community composition by year\n")
1732030343529:for(year in years) {
1732030343529:cat(sprintf("\nYear %d:\n", year))
1732030343529:print(knitr::kable(pca_results[[as.character(year)]]$top_species[1:5,],
1732030343529:digits = 3,
1732030343529:caption = sprintf("Top 5 contributing species in %d", year)))
1732030343529:}
1732030343553:# 3. Station patterns summary
1732030343553:cat("\nStation patterns across years:\n")
1732030343553:for(year in years) {
1732030343553:cat(sprintf("\nYear %d:\n", year))
1732030343553:stations <- pca_results[[as.character(year)]]$stations
1732030343553:print(knitr::kable(stations,
1732030343554:digits = 3,
1732030343554:caption = sprintf("Station coordinates in %d", year)))
1732030343554:}
1732030343571:# Save results to file for manuscript
1732030343571:sink("output/pca_results_summary.txt")
1732030343576:cat("PCA Results Summary for Marine Biology Manuscript\n")
1732030343576:cat("================================================\n\n")
1732030343577:cat("1. Variance Explained\n")
1732030343577:cat("-------------------\n")
1732030343577:print(knitr::kable(variance_table, digits = 1))
1732030343584:cat("\n\n2. Species Contributions\n")
1732030343584:cat("----------------------\n")
1732030343585:for(year in years) {
1732030343585:cat(sprintf("\nYear %d:\n", year))
1732030343585:# Get year's results
1732030343585:year_results <- pca_results[[as.character(year)]]$top_species
1732030343585:# Print dominant species results (>1% relative abundance)
1732030343585:cat("\nDominant Species (>1% relative abundance):\n")
1732030343585:dominant_results <- year_results %>%
1732030343585:filter(!is.na(relative_abundance)) %>%  # Only species in dominant_species list
1732030343585:select(Species, PC1_loading, PC2_loading, relative_abundance) %>%
1732030343585:arrange(desc(abs(PC1_loading) + abs(PC2_loading))) %>%
1732030343585:slice_head(n = 10)
1732030343586:print(knitr::kable(dominant_results, digits = 3))
1732030343586:# Print all species contributions
1732030343586:cat("\nTop Contributing Species (including rare species):\n")
1732030343586:all_results <- year_results %>%
1732030343586:select(Species, PC1_loading, PC2_loading) %>%
1732030343586:arrange(desc(abs(PC1_loading) + abs(PC2_loading))) %>%
1732030343586:slice_head(n = 10)
1732030343586:print(knitr::kable(all_results, digits = 3))
1732030343586:}
1732030343762:cat("\n\n3. Station Patterns\n")
1732030343763:cat("-----------------\n")
1732030343763:for(year in years) {
1732030343763:cat(sprintf("\nYear %d:\n", year))
1732030343763:print(knitr::kable(pca_results[[as.character(year)]]$stations, digits = 3))
1732030343763:}
1732030343803:# Add summary of overall dominant species
1732030343804:cat("\n\n4. Overall Community Dominance Patterns\n")
1732030343804:cat("-----------------------------------\n")
1732030343804:print(knitr::kable(
1732030343804:dominant_species %>%
1732030343804:arrange(desc(relative_abundance)) %>%
1732030343804:mutate(
1732030343804:relative_abundance = relative_abundance * 100,
1732030343804:cumulative_abundance = cumsum(relative_abundance)
1732030343805:),
1732030343805:col.names = c("Species", "Total Abundance", "Relative Abundance (%)", "Cumulative Abundance (%)"),
1732030343805:digits = 2
1732030343805:))
1732030343818:sink()
1732030536658:# Modified extract_pca_results function to calculate dominant species for each year
1732030536658:extract_pca_results <- function(year, species_pca) {
1732030536659:# Calculate dominant species for this specific year
1732030536659:year_dominant_species <- henda %>%
1732030536659:filter(Year == year) %>%
1732030536659:pivot_longer(cols = c(A7, B5, B8, C4, E3, E4),
1732030536659:names_to = "Station",
1732030536659:values_to = "abundance") %>%
1732030536659:group_by(Flokkun) %>%
1732030536660:summarise(total_abundance = sum(abundance)) %>%
1732030536660:ungroup() %>%
1732030536660:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1732030536660:filter(relative_abundance > 0.01) %>%  # Keep species with >1% relative abundance
1732030536660:rename(Species = Flokkun) %>%
1732030536660:arrange(desc(relative_abundance))
1732030536661:# Get variance explained
1732030536661:var_explained <- round(summary(species_pca)$cont$importance[2,] * 100, 1)
1732030536661:# Get species scores and sort by absolute contribution to PC1 and PC2
1732030536661:species_scores <- scores(species_pca, display = "sites")
1732030536662:top_contributors <- data.frame(
1732030536662:Species = rownames(species_scores),
1732030536662:PC1_loading = species_scores[,1],
1732030536662:PC2_loading = species_scores[,2]
1732030536662:) %>%
1732030536662:mutate(
1732030536662:PC1_abs = abs(PC1_loading),
1732030536663:PC2_abs = abs(PC2_loading)
1732030536663:) %>%
1732030536663:# Join with year-specific dominant species information
1732030536663:left_join(
1732030536663:year_dominant_species %>%
1732030536664:select(Species, relative_abundance),
1732030536664:by = "Species"
1732030536664:)
1732030536665:station_scores <- data.frame(
1732030536665:scores(species_pca, display = "species"),
1732030536665:Station = colnames(year_data)
1732030536665:)
1732030536665:return(list(
1732030536666:year = year,
1732030536666:variance = var_explained,
1732030536666:top_species = top_contributors,
1732030536666:dominant_species = year_dominant_species,  # Include the year's dominant species list
1732030536666:stations = station_scores
1732030536667:))
1732030536667:}
1732030536667:# Store results for all years
1732030536668:pca_results <- list()
1732030536668:for(year in years) {
1732030536668:# Run PCA again to get results
1732030536668:year_data <- henda %>%
1732030536668:filter(Year == year) %>%
1732030536668:select(-Year) %>%
1732030536668:as.data.frame()
1732030536669:rownames(year_data) <- year_data$Flokkun
1732030536669:year_data <- year_data %>% select(-Flokkun)
1732030536669:species_pca <- rda(scale(year_data))
1732030536669:pca_results[[as.character(year)]] <- extract_pca_results(year, species_pca)
1732030536669:}
1732030536839:# Create summary tables for the manuscript
1732030536839:# 1. Variance explained table
1732030536839:variance_table <- data.frame(
1732030536839:Year = years,
1732030536839:PC1 = sapply(pca_results, function(x) x$variance[1]),
1732030536839:PC2 = sapply(pca_results, function(x) x$variance[2]),
1732030536839:Total = sapply(pca_results, function(x) sum(x$variance[1:2]))
1732030536839:)
1732030536844:# Print variance table in publication format
1732030536844:cat("\nTable 1. Percentage of variance explained by the first two principal components\n")
1732030536845:print(knitr::kable(variance_table,
1732030536845:digits = 1,
1732030536845:caption = "Percentage of variance explained by PCA axes"))
1732030536848:# 2. Top contributing species for each year
1732030536848:cat("\nTable 2. Top contributing species to community composition by year\n")
1732030536848:for(year in years) {
1732030536848:cat(sprintf("\nYear %d:\n", year))
1732030536848:print(knitr::kable(pca_results[[as.character(year)]]$top_species[1:5,],
1732030536848:digits = 3,
1732030536848:caption = sprintf("Top 5 contributing species in %d", year)))
1732030536848:}
1732030536869:# 3. Station patterns summary
1732030536869:cat("\nStation patterns across years:\n")
1732030536869:for(year in years) {
1732030536869:cat(sprintf("\nYear %d:\n", year))
1732030536869:stations <- pca_results[[as.character(year)]]$stations
1732030536869:print(knitr::kable(stations,
1732030536870:digits = 3,
1732030536870:caption = sprintf("Station coordinates in %d", year)))
1732030536870:}
1732030536887:# Save results to file for manuscript
1732030536887:sink("output/pca_results_summary.txt")
1732030536891:cat("PCA Results Summary for Marine Biology Manuscript\n")
1732030536892:cat("================================================\n\n")
1732030536892:cat("1. Variance Explained\n")
1732030536893:cat("-------------------\n")
1732030536893:print(knitr::kable(variance_table, digits = 1))
1732030536900:cat("\n\n2. Species Contributions by Year\n")
1732030536900:cat("------------------------------\n")
1732030536901:for(year in years) {
1732030536901:cat(sprintf("\nYear %d:\n", year))
1732030536901:# Print year-specific dominant species first
1732030536901:cat("\nDominant Species for this year (>1% relative abundance):\n")
1732030536901:print(knitr::kable(
1732030536901:pca_results[[as.character(year)]]$dominant_species %>%
1732030536901:mutate(relative_abundance = relative_abundance * 100),
1732030536901:col.names = c("Species", "Total Abundance", "Relative Abundance (%)"),
1732030536901:digits = 2
1732030536901:))
1732030536901:# Print PCA results for dominant species
1732030536901:cat("\nPCA loadings for dominant species:\n")
1732030536902:dominant_results <- pca_results[[as.character(year)]]$top_species %>%
1732030536902:filter(!is.na(relative_abundance)) %>%
1732030536902:arrange(desc(PC1_abs + PC2_abs)) %>%
1732030536902:select(Species, PC1_loading, PC2_loading, relative_abundance) %>%
1732030536902:mutate(relative_abundance = relative_abundance * 100)
1732030536902:print(knitr::kable(dominant_results, digits = 3))
1732030536902:# Print all species contributions
1732030536902:cat("\nTop Contributing Species (including rare species):\n")
1732030536902:all_results <- pca_results[[as.character(year)]]$top_species %>%
1732030536902:arrange(desc(PC1_abs + PC2_abs)) %>%
1732030536902:select(Species, PC1_loading, PC2_loading) %>%
1732030536903:slice_head(n = 10)
1732030536903:print(knitr::kable(all_results, digits = 3))
1732030536903:}
1732030537161:cat("\n\n3. Station Patterns\n")
1732030537161:cat("-----------------\n")
1732030537162:for(year in years) {
1732030537162:cat(sprintf("\nYear %d:\n", year))
1732030537162:print(knitr::kable(pca_results[[as.character(year)]]$stations, digits = 3))
1732030537162:}
1732030537203:# Add summary of overall dominant species
1732030537203:cat("\n\n4. Overall Community Dominance Patterns\n")
1732030537204:cat("-----------------------------------\n")
1732030537204:print(knitr::kable(
1732030537204:dominant_species %>%
1732030537204:arrange(desc(relative_abundance)) %>%
1732030537204:mutate(
1732030537204:relative_abundance = relative_abundance * 100,
1732030537204:cumulative_abundance = cumsum(relative_abundance)
1732030537204:),
1732030537204:col.names = c("Species", "Total Abundance", "Relative Abundance (%)", "Cumulative Abundance (%)"),
1732030537204:digits = 2
1732030537204:))
1732030537221:sink()
1732030784865:library(ggrepel)
1732030784865:library(vegan)
1732030784865:library(readxl)
1732030784865:library(patchwork)
1732030784866:# Find dominant species (>1% relative abundance)
1732030784866:dominant_species <- henda %>%
1732030784866:pivot_longer(cols = c(A7, B5, B8, C4, E3, E4),
1732030784866:names_to = "Station",
1732030784866:values_to = "abundance") %>%
1732030784866:group_by(Flokkun) %>%
1732030784867:summarise(total_abundance = sum(abundance)) %>%
1732030784867:ungroup() %>%
1732030784867:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1732030784867:filter(relative_abundance > 0.01) %>%  # Keep species with >1% relative abundance
1732030784867:rename(Species = Flokkun) %>%
1732030784867:arrange(desc(relative_abundance))
1732030784881:# Print to verify
1732030784881:print("Dominant species identified:")
1732030784882:print(dominant_species)
1732030784906:# Function to process and create PCA for one year
1732030784906:create_year_pca <- function(year, data = henda) {
1732030784906:# Calculate dominant species for this specific year
1732030784906:year_dominant_species <- data %>%
1732030784906:filter(Year == year) %>%
1732030784906:pivot_longer(cols = c(A7, B5, B8, C4, E3, E4),
1732030784906:names_to = "Station",
1732030784906:values_to = "abundance") %>%
1732030784906:group_by(Flokkun) %>%
1732030784906:summarise(total_abundance = sum(abundance)) %>%
1732030784906:ungroup() %>%
1732030784906:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1732030784907:filter(relative_abundance > 0.01) %>%  # Keep species with >1% relative abundance
1732030784907:rename(Species = Flokkun)
1732030784907:# Filter data for specific year and prepare
1732030784907:year_data <- data %>%
1732030784907:filter(Year == year) %>%
1732030784907:select(-Year) %>%
1732030784907:as.data.frame()
1732030784907:# Prepare data for PCA
1732030784907:rownames(year_data) <- year_data$Flokkun
1732030784907:year_data <- year_data %>% select(-Flokkun)
1732030784908:# Handle NAs
1732030784908:year_data[is.na(year_data)] <- 0
1732030784908:# Run PCA
1732030784908:species_pca <- rda(scale(year_data))
1732030784908:# Extract scores
1732030784908:site_scores <- data.frame(
1732030784908:scores(species_pca, display = "sites"),
1732030784908:Species = rownames(scores(species_pca, display = "sites"))
1732030784909:) %>%
1732030784909:# Add indicator for dominant species
1732030784909:mutate(is_dominant = Species %in% year_dominant_species$Species)
1732030784909:species_loadings <- data.frame(
1732030784909:scores(species_pca, display = "species"),
1732030784909:Station = colnames(year_data)
1732030784909:)
1732030784909:# Calculate variance explained
1732030784910:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1732030784910:# Create PCA plot
1732030784910:pca_plot <- ggplot() +
1732030784910:# Add points for all species
1732030784910:geom_point(data = site_scores,
1732030784910:aes(x = PC1, y = PC2),
1732030784910:size = 2,
1732030784910:shape = 19,
1732030784911:color = "black") +
1732030784911:# Add arrows for stations
1732030784911:geom_segment(data = species_loadings,
1732030784911:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732030784911:arrow = arrow(length = unit(0.2, "cm")),
1732030784911:color = "darkgrey") +
1732030784911:# Add station labels
1732030784912:geom_text_repel(data = species_loadings,
1732030784912:aes(x = PC1, y = PC2, label = Station),
1732030784912:size = 3.5,
1732030784912:fontface = "bold",
1732030784912:box.padding = 0.5,
1732030784912:point.padding = 0.3) +
1732030784912:# Add labels only for dominant species
1732030784913:geom_text_repel(data = filter(site_scores, is_dominant),
1732030784913:aes(x = PC1, y = PC2, label = Species),
1732030784913:size = 2.8,
1732030784913:fontface = "italic",
1732030784913:color = "grey30",
1732030784913:box.padding = 0.5,
1732030784913:point.padding = 0.3) +
1732030784914:coord_fixed() +
1732030784914:theme_bw() +
1732030784914:theme(
1732030784914:panel.grid.minor = element_blank(),
1732030784914:panel.grid.major = element_line(color = "grey95"),
1732030784914:axis.text = element_text(color = "black", size = 8),
1732030784914:axis.title = element_text(size = 10),
1732030784915:plot.title = element_text(size = 11, face = "bold"),
1732030784915:plot.subtitle = element_text(size = 9)
1732030784915:) +
1732030784915:labs(
1732030784915:title = paste("PCA of benthic community composition -", year),
1732030784915:subtitle = paste0("Species shown as points (>1% abundance labeled, n=",
1732030784916:sum(site_scores$is_dominant), "), stations as arrows"),
1732030784916:x = paste0("PC1 (", var_explained[1], "%)"),
1732030784916:y = paste0("PC2 (", var_explained[2], "%)")
1732030784916:)
1732030784917:return(pca_plot)
1732030784917:}
1732030784917:# Create PCA plots for all years
1732030784917:years <- c(1999, 2013:2017)
1732030784918:pca_plots <- list()
1732030784918:for(year in years) {
1732030784918:pca_plots[[as.character(year)]] <- create_year_pca(year)
1732030784918:# Save individual plots
1732030784918:ggsave(
1732030784918:paste0("output/pca_biplot_", year, ".png"),
1732030784918:pca_plots[[as.character(year)]],
1732030784918:width = 10, height = 8,
1732030784918:dpi = 300,
1732030784918:bg = "white"
1732030784918:)
1732030784918:}
1732030788627:# Combine all plots
1732030788627:combined_plot <- wrap_plots(pca_plots, ncol = 2) +
1732030788627:plot_annotation(
1732030788628:title = "Temporal changes in community composition (1999, 2013-2017)",
1732030788628:subtitle = "Species shown as points, stations as arrows",
1732030788628:caption = "Based on species abundance data",
1732030788628:theme = theme(
1732030788628:plot.title = element_text(size = 14, face = "bold"),
1732030788628:plot.subtitle = element_text(size = 12),
1732030788628:plot.caption = element_text(size = 10, hjust = 0)
1732030788628:)
1732030788629:)
1732030788634:# Save combined plot
1732030788634:ggsave("output/pca_biplots_all_years.png",
1732030788634:combined_plot,
1732030788634:width = 20, height = 15,
1732030788635:dpi = 300,
1732030788635:bg = "white")
1732030791047:# After the PCA plots creation, add this section for results reporting
1732034036300:# skráin hans Jörundar
1732034036300:henda <- read_csv(
1732034036301:"data/processed/hendaB.csv",
1732034036301:col_types = cols(
1732034036301:Year = col_integer(),
1732034036301:Flokkun = col_character(),  # Ensure Flokkun is read as character
1732034036302:A7 = col_integer(),
1732034036302:B5 = col_integer(),
1732034036302:B8 = col_integer(),
1732034036302:C4 = col_integer(),
1732034036303:E3 = col_integer(),
1732034036303:E4 = col_integer()
1732034036303:),
1732034036303:na = c("", "NA")
1732034036303:) %>%
1732034036304:mutate(across(where(is.numeric), ~ replace_na(., 0)))  %>% # Replace NA with 0 for numeric columns
1732034036304:select(Flokkun:last_col())
1732034039853:# Transform henda from wide to long format
1732034039853:henda_long <- henda %>%
1732034039853:pivot_longer(cols = c("A7","B5", "B8",  "C4",  "E3", "E4") , # Select station columns
1732034039853:names_to = "station",                     # New column for station names
1732034039854:values_to = "adjusted_density") %>%       # New column for density values
1732034039854:rename(species = Flokkun,                              # Rename 'Flokkun' to 'species'
1732034039854:year = Year) %>%                                # Rename 'Year' to 'year'
1732034039854:select(station, year, species, adjusted_density)       # Select and order columns
1732034048970:# Required packages
1732034048971:library(dplyr)
1732034050724:library(stringr)
1732034054020:# Step 1: Remove " sp." from species names
1732034054021:henda_long_cleaned <- henda_long %>%
1732034054021:mutate(species = str_replace(species, " sp\\.", ""))
1732034058546:# Step 2: Match with reference dataset and remove non-matching species
1732034058546:henda_long_matched <- henda_long_cleaned %>%
1732034058546:semi_join(df, by = "species")
1732034060341:# Step 3: Quick validation check
1732034060341:cat("Data Cleaning Summary:\n",
1732034060341:"Original rows:", nrow(henda_long), "\n",
1732034060341:"Final rows:", nrow(henda_long_matched), "\n",
1732034060341:"Rows removed:", nrow(henda_long) - nrow(henda_long_matched), "\n")
1732034070594:# Step 4: View removed species for validation
1732034070594:removed_species <- henda_long_cleaned %>%
1732034070594:anti_join(df, by = "species") %>%
1732034070594:group_by(species) %>%
1732034070594:summarise(
1732034070594:observations = n(),
1732034070594:total_abundance = sum(adjusted_density),
1732034070595:years = paste(sort(unique(year)), collapse = ", "),
1732034070595:stations = paste(sort(unique(station)), collapse = ", ")
1732034070595:) %>%
1732034070595:arrange(desc(observations))
1732034072850:# Print removed species summary
1732034072850:print(removed_species, n = Inf, width = Inf)
1732034110772:# Prepare data for NMDS - exclude 1999 data
1732034110773:#species_matrix <- df %>% #Mín gögn
1732034110773:species_matrix <- henda_long_matched %>% #Gögn Jörundar
1732034110773:#filter(year >= 2013) %>%  # Only include 2013-2017 data
1732034110773:select(station, year, species, adjusted_density) %>%
1732034110773:pivot_wider(
1732034110773:names_from = species,
1732034110774:values_from = adjusted_density,
1732034110774:values_fill = 0
1732034110774:) %>%
1732034110774:# Store station and year before removing them for NMDS
1732034110774:mutate(
1732034110775:station_temp = station,
1732034110775:year_temp = year
1732034110775:) %>%
1732034110775:select(-station, -year)
1732034111835:# Perform NMDS
1732034111836:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1732034113268:# Extract site scores and add metadata
1732034113268:site_scores <- as.data.frame(scores(nmds, display = "sites"))
1732034115408:site_scores$Station <- species_matrix$station_temp
1732034115991:site_scores$Year <- as.factor(species_matrix$year_temp)  # Convert Year to factor
1732034116413:# Extract species scores
1732034116413:species_scores <- as.data.frame(scores(nmds, display = "species"))
1732034117093:# Calculate species contributions (using relative abundance)
1732034117093:species_rel_abundance <- colSums(select(species_matrix, -station_temp, -year_temp)) /
1732034117094:sum(select(species_matrix, -station_temp, -year_temp))
1732034117828:important_species <- names(sort(species_rel_abundance[species_rel_abundance > 0.01], decreasing = TRUE))
1732034118836:# Filter species scores to only show important species
1732034118836:species_scores_filtered <- species_scores[rownames(species_scores) %in% important_species, ]
1732034119683:env_data <- readRDS("data/raw/sediment_env_data.rds") %>%
1732034119684:select(station, year,
1732034119684:organic_content, depth,
1732034119684:grain_20um, grain_63um, grain_125um,
1732034119684:grain_250um, grain_1000um) %>%
1732034119684:distinct()
1732034121961:sig_env_vectors <- scores(env_fit, "vectors") %>%
1732034121962:as.data.frame() %>%
1732034121962:mutate(variable = rownames(.)) %>%
1732034121962:filter(env_fit$vectors$pvals < 0.05)
1732034127209:# Create the plot
1732034127209:nmds_plot <- ggplot() +
1732034127210:# Add points for sites
1732034127210:geom_point(data = site_scores,
1732034127210:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1732034127210:size = 3) +
1732034127210:# Add smaller ellipses around years with solid lines
1732034127210:# stat_ellipse(data = site_scores,
1732034127210:#              aes(x = NMDS1, y = NMDS2, group = Year),
1732034127211:#              type = "norm",
1732034127211:#              level = 0.7,
1732034127211:#              linetype = 1,
1732034127211:#              size = 0.5) +
1732034127211:# Add significant environmental vectors
1732034127211:# geom_segment(data = sig_env_vectors,
1732034127212:#              aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1732034127212:#              arrow = arrow(length = unit(0.2, "cm")),
1732034127212:#              color = "darkgrey") +
1732034127212:# geom_text(data = sig_env_vectors,
1732034127212:#           aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1732034127213:#           size = 3, color = "darkgrey") +
1732034127213:theme_bw() +
1732034127213:theme(
1732034127213:panel.background = element_rect(fill = "white"),
1732034127213:axis.text = element_text(size = 12, color = "black"),  # Larger axis text
1732034127214:axis.title = element_text(size = 14),                  # Larger axis titles
1732034127214:legend.text = element_text(size = 12),                 # Larger legend text
1732034127214:legend.title = element_text(size = 12, face = "bold"), # Larger legend titles
1732034127214:plot.title = element_text(size = 16, face = "bold")    # Larger plot title
1732034127214:) +
1732034127214:labs(title = "NMDS of Community Composition (1999 and 2013-2017)",
1732034127215:caption = "") +
1732034127215:guides(color = guide_legend("Station"),
1732034127215:shape = guide_legend("Year"))
1732034131044:# Save with higher resolution and size
1732034131044:ggsave("output/nmds_plot_1999_an-hringja.png",
1732034131044:nmds_plot,
1732034131044:width = 12,      # Increased width
1732034131044:height = 10,     # Increased height
1732034131044:dpi = 300,       # Higher resolution
1732034131045:bg = "white")
1732098035473:nmds
1732098058785:num_taxa <- ncol(species_matrix) - 2  # Excluding station_temp and year_temp
1732098058792:num_samples <- nrow(species_matrix)
1732098062581:num_taxa
1732098066303:num_samples
1732098086542:sig_env_vectors <- scores(env_fit, "vectors") %>%
1732098086545:as.data.frame() %>%
1732098086545:mutate(variable = rownames(.)) %>%
1732098086546:filter(env_fit$vectors$pvals < 0.05)
1732098090784:sig_env_vectors
1732099218276:dominant_species <- species_matrix %>%
1732099218277:select(where(is.numeric)) %>%
1732099218277:select(-year_temp, -year) %>%    # Exclude ALL year columns
1732099218277:summarise(across(everything(), sum)) %>%
1732099218277:pivot_longer(everything(),
1732099218278:names_to = "species",
1732099218278:values_to = "total_abundance") %>%
1732099218278:arrange(desc(total_abundance)) %>%
1732099218279:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1732099218279:filter(relative_abundance > 0.01)
1732099269216:str(species_matrix )
1732099308328:temporal_patterns <- species_matrix %>%
1732099308328:select(where(is.numeric)) %>%
1732099308328:select(-year) %>%
1732099308328:group_by(year_temp) %>%          # Group by year first
1732099308328:summarise(across(everything(), sum)) %>%  # Sum across stations
1732099308329:pivot_longer(-year_temp,
1732099308329:names_to = "species",
1732099308329:values_to = "abundance") %>%
1732099308329:filter(species %in% dominant_species$species) %>%
1732099308329:arrange(year_temp, desc(abundance))
1732099342856:str(henda_long_matched)
1732099412834:dominant_species <- species_matrix %>%
1732099412834:select(where(is.numeric)) %>%
1732099412834:select(-year_temp, -year) %>%    # Exclude ALL year columns
1732099412834:summarise(across(everything(), sum)) %>%
1732099412834:pivot_longer(everything(),
1732099412834:names_to = "species",
1732099412835:values_to = "total_abundance") %>%
1732099412835:arrange(desc(total_abundance)) %>%
1732099412835:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1732099412835:filter(relative_abundance > 0.01)
1732099443408:# Calculate abundances for key species by year
1732099443409:temporal_abundances <- henda_long_matched %>%
1732099443409:group_by(year, species) %>%
1732099443409:summarise(total_abundance = sum(adjusted_density)) %>%
1732099443409:pivot_wider(names_from = year,
1732099443409:values_from = total_abundance,
1732099443409:values_fill = 0)
1732099443501:# Get Capitella capitata abundances
1732099443501:capitella_data <- henda_long_matched %>%
1732099443502:filter(species == "Capitella capitata") %>%
1732099443502:group_by(year) %>%
1732099443502:summarise(abundance = sum(adjusted_density))
1732099443507:# Get other key species abundances
1732099443507:key_species <- c("Polydora", "Ophelina acuminata", "Macoma calcarea", "Scalibregma inflatum", "Scoloplos armiger")
1732099443507:key_species_data <- henda_long_matched %>%
1732099443508:filter(species %in% key_species) %>%
1732099443508:group_by(year, species) %>%
1732099443508:summarise(abundance = sum(adjusted_density))
1732099443559:# Calculate total abundance for percentage calculations
1732099443559:total_abundance <- sum(henda_long_matched$adjusted_density)
1732099458421:temporal_abundances
1732099496709:str(temporal_abundances )
1732099505593:capitella_data
1732099821153:dominant_species
1732099873966:species_nmds_scores <- as.data.frame(scores(nmds, display = "species"))
1732099877568:species_nmds_scores
1732099979154:# Extract NMDS scores for all species
1732099979155:species_nmds_scores <- as.data.frame(scores(nmds, display = "species"))
1732099979155:# Calculate relative abundances and NMDS positions
1732099979156:species_analysis <- data.frame(
1732099979156:species = rownames(species_nmds_scores),
1732099979156:NMDS1 = species_nmds_scores$NMDS1,
1732099979156:NMDS2 = species_nmds_scores$NMDS2
1732099979156:) %>%
1732099979157:inner_join(
1732099979157:henda_long_matched %>%
1732099979157:group_by(species) %>%
1732099979157:summarise(total_abundance = sum(adjusted_density)) %>%
1732099979157:mutate(relative_abundance = (total_abundance / sum(total_abundance)) * 100),
1732099979157:by = "species"
1732099979158:) %>%
1732099979158:arrange(desc(relative_abundance))
1732099979184:# Find species with strong NMDS positions (e.g., in extreme quartiles)
1732099979184:nmds_significant <- species_analysis %>%
1732099979184:filter(
1732099979184:relative_abundance > 1 &  # Only include species with >1% relative abundance
1732099979184:(abs(NMDS1) > quantile(abs(NMDS1), 0.75) |  # Strong position on NMDS1
1732099979184:abs(NMDS2) > quantile(abs(NMDS2), 0.75))   # Strong position on NMDS2
1732099979185:) %>%
1732099979185:arrange(NMDS1)  # Sort by NMDS1 position
1732099979192:print(nmds_significant)
1732100025874:# Extract NMDS scores for all species
1732100025874:species_nmds_scores <- as.data.frame(scores(nmds, display = "species"))
1732100025874:# Calculate relative abundances and NMDS positions
1732100025875:species_analysis <- data.frame(
1732100025875:species = rownames(species_nmds_scores),
1732100025875:NMDS1 = species_nmds_scores$NMDS1,
1732100025875:NMDS2 = species_nmds_scores$NMDS2
1732100025875:) %>%
1732100025875:inner_join(
1732100025876:henda_long_matched %>%
1732100025876:group_by(species) %>%
1732100025876:summarise(total_abundance = sum(adjusted_density)) %>%
1732100025876:mutate(relative_abundance = (total_abundance / sum(total_abundance)) * 100),
1732100025876:by = "species"
1732100025877:) %>%
1732100025877:arrange(desc(relative_abundance))
1732100025888:# Get top species (>1% relative abundance) with distinct NMDS positions
1732100025888:significant_species <- species_analysis %>%
1732100025888:filter(relative_abundance > 1) %>%
1732100025888:# Group species by their position in NMDS space
1732100025888:mutate(
1732100025888:position_group = case_when(
1732100025888:NMDS1 < -0.5 ~ "negative_NMDS1",
1732100025889:NMDS1 > 0.5 & NMDS2 > 0.5 ~ "positive_both",
1732100025889:NMDS1 > 0.5 & abs(NMDS2) < 0.5 ~ "positive_NMDS1_neutral_NMDS2",
1732100025889:TRUE ~ "other"
1732100025889:)
1732100025889:) %>%
1732100025889:arrange(desc(relative_abundance)) %>%
1732100025890:head(10)  # Get top 10 species for a comprehensive view
1732100025896:print(significant_species)
1732100159455:# Refine position grouping based on actual data patterns
1732100159456:significant_species <- species_analysis %>%
1732100159456:filter(relative_abundance > 1) %>%
1732100159456:mutate(
1732100159456:position_group = case_when(
1732100159456:NMDS1 > 1.5 ~ "strong_positive_NMDS1",
1732100159456:NMDS1 < -0.6 ~ "strong_negative_NMDS1",
1732100159457:abs(NMDS1) < 0.5 & abs(NMDS2) < 0.2 ~ "neutral_position",
1732100159457:NMDS2 > 0.25 ~ "positive_NMDS2",
1732100159457:TRUE ~ "other"
1732100159457:)
1732100159457:) %>%
1732100159457:arrange(desc(relative_abundance))
1732100159463:# Calculate mean NMDS scores for each group
1732100159464:group_patterns <- significant_species %>%
1732100159464:group_by(position_group) %>%
1732100159464:summarise(
1732100159464:species_count = n(),
1732100159464:mean_abundance = mean(relative_abundance),
1732100159464:species_list = paste(species, collapse = ", ")
1732100159464:)
1732100159471:print(group_patterns)
1732100182729:# Refine position grouping based on actual data patterns
1732100182729:significant_species <- species_analysis %>%
1732100182730:filter(relative_abundance > 1) %>%
1732100182730:mutate(
1732100182730:position_group = case_when(
1732100182730:NMDS1 > 1.5 ~ "strong_positive_NMDS1",
1732100182730:NMDS1 < -0.6 ~ "strong_negative_NMDS1",
1732100182730:abs(NMDS1) < 0.5 & abs(NMDS2) < 0.2 ~ "neutral_position",
1732100182730:NMDS2 > 0.25 ~ "positive_NMDS2",
1732100182730:TRUE ~ "other"
1732100182731:)
1732100182731:) %>%
1732100182731:arrange(desc(relative_abundance))
1732100182736:# Calculate mean NMDS scores for each group
1732100182736:group_patterns <- significant_species %>%
1732100182737:group_by(position_group) %>%
1732100182737:summarise(
1732100182737:species_count = n(),
1732100182737:mean_abundance = mean(relative_abundance),
1732100182737:species_list = paste(species, collapse = ", ")
1732100182737:)
1732100182741:print(group_patterns)
1732100606474:# Calculate station trajectories
1732100606474:station_trajectories <- site_scores %>%
1732100606474:group_by(Station) %>%
1732100606474:arrange(Year) %>%
1732100606475:summarise(
1732100606475:# Total path length (sum of segment lengths)
1732100606475:total_length = sum(sqrt(diff(NMDS1)^2 + diff(NMDS2)^2)),
1732100606475:# Net displacement (straight-line distance from start to end)
1732100606475:net_displacement = sqrt(
1732100606476:(last(NMDS1) - first(NMDS1))^2 +
1732100606476:(last(NMDS2) - first(NMDS2))^2
1732100606476:),
1732100606476:# Initial direction (in degrees)
1732100606476:initial_direction = atan2(
1732100606477:NMDS2[2] - NMDS1[1],
1732100606477:NMDS1[2] - NMDS1[1]
1732100606477:) * (180/pi)
1732100606477:) %>%
1732100606477:arrange(desc(total_length))
1732100606497:# Calculate year-to-year movement magnitudes
1732100606497:yearly_movements <- site_scores %>%
1732100606497:group_by(Station) %>%
1732100606497:arrange(Year) %>%
1732100606497:mutate(
1732100606497:movement = sqrt(
1732100606498:(lead(NMDS1) - NMDS1)^2 +
1732100606498:(lead(NMDS2) - NMDS2)^2
1732100606498:)
1732100606498:) %>%
1732100606498:group_by(Year) %>%
1732100606498:summarise(
1732100606498:mean_movement = mean(movement, na.rm = TRUE),
1732100606499:sd_movement = sd(movement, na.rm = TRUE)
1732100606499:)
1732100606515:print("Station Trajectories:")
1732100606515:print(station_trajectories)
1732100606548:print("\nYearly Movements:")
1732100606548:print(yearly_movements)
1732101370616:# Calculate year-to-year movements with 1999 at the end
1732101370617:yearly_movements_reordered <- site_scores %>%
1732101370617:mutate(Year = factor(Year, levels = c("2013", "2014", "2015", "2016", "2017", "1999"))) %>%
1732101370617:group_by(Station) %>%
1732101370617:arrange(Year) %>%
1732101370617:mutate(
1732101370617:movement = sqrt(
1732101370618:(lead(NMDS1) - NMDS1)^2 +
1732101370618:(lead(NMDS2) - NMDS2)^2
1732101370618:)
1732101370618:) %>%
1732101370618:group_by(Year) %>%
1732101370619:summarise(
1732101370619:mean_movement = mean(movement, na.rm = TRUE),
1732101370619:sd_movement = sd(movement, na.rm = TRUE)
1732101370619:)
1732101370637:print("Yearly Movements (with 1999 as endpoint):")
1732101370638:print(yearly_movements_reordered)
1732101623530:# Test temporal gradient
1732101623531:temporal_test <- envfit(nmds, data.frame(Year = as.numeric(as.character(site_scores$Year))))
1732101623807:# Multivariate dispersion tests
1732101623807:year_disp <- betadisper(vegdist(select(species_matrix, -station_temp, -year_temp), "bray"),
1732101623808:species_matrix$year_temp)
1732101623993:year_anova <- anova(year_disp)
1732101624009:station_disp <- betadisper(vegdist(select(species_matrix, -station_temp, -year_temp), "bray"),
1732101624009:species_matrix$station_temp)
1732101624085:station_anova <- anova(station_disp)
1732101624087:# Environmental correlation (organic matter)
1732101624087:env_fit <- envfit(nmds, env_data[, c("organic_content")])
1732101639881:env_data$organic_content
1732101662231:str(nmds)
1732101849138:# Merge environmental data with site scores
1732101849138:nmds_env <- site_scores %>%
1732101849139:left_join(env_data, by = c("Station" = "station", "Year" = "year"))
1732101849142:# Test temporal gradient
1732101849142:temporal_test <- envfit(nmds, data.frame(Year = as.numeric(as.character(site_scores$Year))))
1732101849229:# Multivariate dispersion tests
1732101849229:year_disp <- betadisper(vegdist(select(species_matrix, -station_temp, -year_temp), "bray"),
1732101849230:species_matrix$year_temp)
1732101849320:year_anova <- anova(year_disp)
1732101849323:station_disp <- betadisper(vegdist(select(species_matrix, -station_temp, -year_temp), "bray"),
1732101849323:species_matrix$station_temp)
1732101849441:station_anova <- anova(station_disp)
1732101849443:# Environmental correlation (organic matter) - using matched data
1732101849444:env_fit <- envfit(nmds, nmds_env[, "organic_content", drop = FALSE])
1732101901625:# Test temporal gradient
1732101901625:temporal_test <- envfit(nmds, data.frame(Year = as.numeric(as.character(site_scores$Year))))
1732101903222:# Multivariate dispersion tests
1732101903222:year_disp <- betadisper(vegdist(select(species_matrix, -station_temp, -year_temp), "bray"),
1732101903222:species_matrix$year_temp)
1732101903286:year_anova <- anova(year_disp)
1732101903289:station_disp <- betadisper(vegdist(select(species_matrix, -station_temp, -year_temp), "bray"),
1732101903289:species_matrix$station_temp)
1732101903395:station_anova <- anova(station_disp)
1732101903397:print("Temporal gradient test:")
1732101903398:print(temporal_test)
1732101903405:print("\nMultivariate dispersion tests:")
1732101903405:print("Years:")
1732101903406:print(year_anova)
1732101903408:print("Stations:")
1732101903408:print(station_anova)
1732101916573:# Create subset for 2013-2017 data only
1732101916573:species_matrix_recent <- species_matrix %>%
1732101916573:filter(year_temp >= 2013)
1732101916576:nmds_recent <- metaMDS(select(species_matrix_recent, -station_temp, -year_temp), distance = "bray")
1732101916734:# Match environmental data with recent NMDS
1732101916734:nmds_env_recent <- data.frame(
1732101916735:scores(nmds_recent, display = "sites"),
1732101916735:Station = species_matrix_recent$station_temp,
1732101916735:Year = species_matrix_recent$year_temp
1732101916735:) %>%
1732101916735:left_join(env_data, by = c("Station" = "station", "Year" = "year"))
1732101925260:rlang::last_trace()
1732102045154:# Create subset for 2013-2017 data only
1732102045154:species_matrix_recent <- species_matrix %>%
1732102045154:filter(year_temp >= 2013)
1732102045157:nmds_recent <- metaMDS(select(species_matrix_recent, -station_temp, -year_temp), distance = "bray")
1732102045229:# Convert year to character in both datasets
1732102045229:nmds_env_recent <- data.frame(
1732102045230:scores(nmds_recent, display = "sites"),
1732102045230:Station = species_matrix_recent$station_temp,
1732102045230:Year = as.character(species_matrix_recent$year_temp)  # Convert to character
1732102045230:) %>%
1732102045230:left_join(
1732102045230:env_data %>%
1732102045230:mutate(year = as.character(year)),  # Convert to character
1732102045230:by = c("Station" = "station", "Year" = "year")
1732102045230:)
1732102045234:# Environmental correlation for 2013-2017 only
1732102045234:env_fit_recent <- envfit(nmds_recent, nmds_env_recent[, "organic_content", drop = FALSE])
1732102045311:print("\nOrganic matter correlation (2013-2017 only):")
1732102045311:print(env_fit_recent)
1732102332227:# Create subset excluding 1999 data
1732102332227:species_matrix_no1999 <- species_matrix %>%
1732102332227:filter(year_temp >= 2013)
1732102332231:nmds_no1999 <- metaMDS(select(species_matrix_no1999, -station_temp, -year_temp), distance = "bray")
1732102332294:# Tests for 2013-2017 only
1732102332294:temporal_test_no1999 <- envfit(nmds_no1999,
1732102332294:data.frame(Year = as.numeric(as.character(species_matrix_no1999$year_temp))))
1732102332410:year_disp_no1999 <- betadisper(
1732102332410:vegdist(select(species_matrix_no1999, -station_temp, -year_temp), "bray"),
1732102332410:species_matrix_no1999$year_temp)
1732102332449:year_anova_no1999 <- anova(year_disp_no1999)
1732102332451:station_disp_no1999 <- betadisper(
1732102332451:vegdist(select(species_matrix_no1999, -station_temp, -year_temp), "bray"),
1732102332451:species_matrix_no1999$station_temp)
1732102332520:station_anova_no1999 <- anova(station_disp_no1999)
1732102332522:print("Results excluding 1999:")
1732102332522:print(temporal_test_no1999)
1732102332528:print(year_anova_no1999)
1732102332531:print(station_anova_no1999)
1732104145573:# Calculate pairwise station similarities
1732104145573:station_similarities <- vegdist(select(species_matrix, -station_temp, -year_temp), "bray") %>%
1732104145573:as.matrix()
1732104145583:# Create station pairs comparison
1732104145583:station_pairs <- site_scores %>%
1732104145583:group_by(Year) %>%
1732104145583:summarize(
1732104145583:E3_E4_dist = vegdist(subset(species_matrix,
1732104145583:station_temp %in% c("E3", "E4")), "bray"),
1732104145584:# Add other station pairs as needed
1732104145584:)
1732104152847:rlang::last_trace()
1732104181213:# Create a function to calculate mean Bray-Curtis dissimilarity between stations
1732104181213:station_dissimilarity <- function(data, station1, station2) {
1732104181214:data %>%
1732104181214:filter(station_temp %in% c(station1, station2)) %>%
1732104181214:select(-station_temp, -year_temp) %>%
1732104181214:vegdist(method = "bray") %>%
1732104181214:mean()
1732104181214:}
1732104181214:# Create all possible station pairs
1732104181215:station_pairs <- expand.grid(
1732104181215:station1 = c("E3", "E4", "A7", "B5", "B8", "C4"),
1732104181215:station2 = c("E3", "E4", "A7", "B5", "B8", "C4")
1732104181215:) %>%
1732104181215:filter(station1 < station2)  # Remove duplicates and self-comparisons
1732104181282:# Calculate mean dissimilarity for each pair
1732104181282:station_distances <- station_pairs %>%
1732104181282:rowwise() %>%
1732104181282:mutate(
1732104181282:mean_dissimilarity = station_dissimilarity(
1732104181282:species_matrix,
1732104181282:station1,
1732104181283:station2
1732104181283:)
1732104181283:) %>%
1732104181283:arrange(mean_dissimilarity)
1732104181299:print("Mean dissimilarity between station pairs:")
1732104181300:print(station_distances)
1732104211893:# Convert stations to character and create pairs
1732104211894:station_pairs <- expand.grid(
1732104211894:station1 = as.character(c("E3", "E4", "A7", "B5", "B8", "C4")),
1732104211894:station2 = as.character(c("E3", "E4", "A7", "B5", "B8", "C4"))
1732104211894:) %>%
1732104211894:filter(as.character(station1) < as.character(station2))
1732104211896:# Create a matrix of Bray-Curtis dissimilarities
1732104211896:species_matrix_wide <- species_matrix %>%
1732104211897:select(-year_temp) %>%
1732104211897:group_by(station_temp) %>%
1732104211897:summarise(across(everything(), mean)) %>%
1732104211897:column_to_rownames("station_temp")
1732104211921:# Calculate dissimilarity matrix
1732104211921:station_dist_matrix <- vegdist(species_matrix_wide, method = "bray") %>%
1732104211921:as.matrix()
1732104211921:print("Station dissimilarity matrix:")
1732104211922:print(round(station_dist_matrix, 3))
1732104211922:# Calculate mean dissimilarity for E3-E4 specifically
1732104211922:e3e4_dist <- station_dist_matrix["E3", "E4"]
1732104211923:print("\nE3-E4 dissimilarity:")
1732104211923:print(e3e4_dist)
1732104211923:# Compare to mean of all other pairs
1732104211923:other_pairs <- station_dist_matrix[lower.tri(station_dist_matrix)]
1732104211923:other_pairs <- other_pairs[other_pairs != e3e4_dist]
1732104211923:print("\nMean dissimilarity of other station pairs:")
1732104211923:print(mean(other_pairs))
1732104366838:# Calculate dissimilarity matrices for each year
1732104366838:yearly_patterns <- species_matrix %>%
1732104366838:group_by(year_temp) %>%
1732104366838:group_split() %>%
1732104366838:lapply(function(year_data) {
1732104366838:year_matrix <- year_data %>%
1732104366839:select(-year_temp) %>%
1732104366839:column_to_rownames("station_temp")
1732104366839:dist_matrix <- vegdist(year_matrix, method = "bray") %>%
1732104366839:as.matrix()
1732104366840:# Get E3-E4 dissimilarity for this year
1732104366840:e3e4 <- dist_matrix["E3", "E4"]
1732104366840:other_mean <- mean(dist_matrix[lower.tri(dist_matrix)][dist_matrix[lower.tri(dist_matrix)] != e3e4])
1732104366840:return(data.frame(
1732104366840:year = unique(year_data$year_temp),
1732104366841:e3e4_dist = e3e4,
1732104366841:other_mean_dist = other_mean
1732104366841:))
1732104366841:}) %>%
1732104366842:bind_rows()
1732104366868:print("Yearly patterns of E3-E4 similarity:")
1732104366868:print(yearly_patterns)
1732104567030:# Station Similarity Analysis
1732104567030:# Analyzes spatial patterns and temporal changes in community similarity between stations
1732104567030:# Load required packages
1732104567030:library(vegan)
1732104567032:library(dplyr)
1732104567032:library(tidyr)
1732104567033:library(ggplot2)
1732104567033:# Function to calculate station similarities
1732104567033:calculate_station_similarities <- function(species_data) {
1732104567033:# Create dissimilarity matrix
1732104567034:species_matrix_wide <- species_data %>%
1732104567034:select(-year_temp) %>%
1732104567034:group_by(station_temp) %>%
1732104567034:summarise(across(everything(), mean)) %>%
1732104567034:column_to_rownames("station_temp")
1732104567034:# Calculate Bray-Curtis dissimilarity
1732104567035:station_dist_matrix <- vegdist(species_matrix_wide, method = "bray") %>%
1732104567035:as.matrix()
1732104567035:return(station_dist_matrix)
1732104567035:}
1732104567036:# Function to analyze temporal patterns
1732104567036:analyze_temporal_patterns <- function(species_data) {
1732104567036:species_data %>%
1732104567036:group_by(year_temp) %>%
1732104567036:group_split() %>%
1732104567037:lapply(function(year_data) {
1732104567037:year_matrix <- year_data %>%
1732104567037:select(-year_temp) %>%
1732104567037:column_to_rownames("station_temp")
1732104567038:dist_matrix <- vegdist(year_matrix, method = "bray") %>%
1732104567038:as.matrix()
1732104567038:# Calculate E3-E4 and mean other distances
1732104567038:e3e4 <- dist_matrix["E3", "E4"]
1732104567038:other_pairs <- dist_matrix[lower.tri(dist_matrix)]
1732104567039:other_mean <- mean(other_pairs[other_pairs != e3e4])
1732104567039:data.frame(
1732104567039:year = unique(year_data$year_temp),
1732104567039:e3e4_dist = e3e4,
1732104567039:other_mean_dist = other_mean
1732104567040:)
1732104567040:}) %>%
1732104567040:bind_rows()
1732104567040:}
1732104567041:# Calculate overall station similarities
1732104567041:station_dist_matrix <- calculate_station_similarities(species_matrix)
1732104567070:# Calculate temporal patterns
1732104567070:yearly_patterns <- analyze_temporal_patterns(species_matrix)
1732104567128:# Create summary of station pairs
1732104567128:station_pairs_summary <- data.frame(
1732104567128:pair = c("E3-E4", "A7-B8", "B5-C4", "E3-A7", "E3-B8", "E4-B8"),
1732104567128:dissimilarity = c(
1732104567128:station_dist_matrix["E3", "E4"],
1732104567128:station_dist_matrix["A7", "B8"],
1732104567128:station_dist_matrix["B5", "C4"],
1732104567128:station_dist_matrix["E3", "A7"],
1732104567129:station_dist_matrix["E3", "B8"],
1732104567129:station_dist_matrix["E4", "B8"]
1732104567129:)
1732104567129:) %>%
1732104567129:arrange(dissimilarity)
1732104567131:# Create visualization of temporal patterns
1732104567132:temporal_plot <- ggplot(yearly_patterns, aes(x = year)) +
1732104567132:geom_line(aes(y = e3e4_dist, color = "E3-E4")) +
1732104567132:geom_line(aes(y = other_mean_dist, color = "Other Pairs Mean")) +
1732104567132:labs(
1732104567132:title = "Station Similarity Patterns Over Time",
1732104567132:x = "Year",
1732104567132:y = "Bray-Curtis Dissimilarity",
1732104567132:color = "Station Pairs"
1732104567132:) +
1732104567132:theme_minimal() +
1732104567132:theme(
1732104567132:panel.background = element_rect(fill = "white"),
1732104567133:legend.position = "bottom"
1732104567133:)
1732104567155:# Save results
1732104567155:write.csv(station_pairs_summary, "output/station_pairs_summary.csv", row.names = FALSE)
1732104567162:write.csv(yearly_patterns, "output/yearly_similarity_patterns.csv", row.names = FALSE)
1732104567175:ggsave("output/temporal_similarity_patterns.png", temporal_plot, width = 8, height = 6, dpi = 300)
1732104567880:# Print summary statistics
1732104567880:cat("\nOverall Station Pair Summary:\n")
1732104567880:print(station_pairs_summary)
1732104567881:cat("\nTemporal Patterns Summary:\n")
1732104567881:print(yearly_patterns)
1732111819666:# Create the plot
1732111819668:nmds_plot <- ggplot() +
1732111819673:# Add points for sites
1732111819673:geom_point(data = site_scores,
1732111819674:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1732111819675:size = 4) +
1732111819675:# Add smaller ellipses around years with solid lines
1732111819676:# stat_ellipse(data = site_scores,
1732111819676:#              aes(x = NMDS1, y = NMDS2, group = Year),
1732111819676:#              type = "norm",
1732111819676:#              level = 0.7,
1732111819677:#              linetype = 1,
1732111819677:#              size = 0.5) +
1732111819678:# Add significant environmental vectors
1732111819678:# geom_segment(data = sig_env_vectors,
1732111819680:#              aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
1732111819681:#              arrow = arrow(length = unit(0.2, "cm")),
1732111819681:#              color = "darkgrey") +
1732111819681:# geom_text(data = sig_env_vectors,
1732111819681:#           aes(x = NMDS1*1.1, y = NMDS2*1.1, label = variable),
1732111819681:#           size = 3, color = "darkgrey") +
1732111819682:theme_bw() +
1732111819682:theme(
1732111819682:panel.background = element_rect(fill = "white"),
1732111819683:axis.text = element_text(size = 16, color = "black"),     # Increased from 12
1732111819683:axis.title = element_text(size = 18),                     # Increased from 14
1732111819684:legend.text = element_text(size = 16),                    # Increased from 12
1732111819684:legend.title = element_text(size = 16, face = "bold"),    # Increased from 12
1732111819685:plot.title = element_text(size = 20, face = "bold"),      # Increased from 16
1732111819685:legend.position = "right"
1732111819686:) +
1732111819686:labs(title = "NMDS of Community Composition (1999 and 2013-2017)",
1732111819687:caption = "") +
1732111819688:guides(color = guide_legend("Station"),
1732111819688:shape = guide_legend("Year"))
1732111821783:# Save with higher resolution and size
1732111821783:ggsave("output/nmds_plot_1999_an-hringja.png",
1732111821783:nmds_plot,
1732111821783:width = 12,      # Increased width
1732111821784:height = 10,     # Increased height
1732111821784:dpi = 300,       # Higher resolution
1732111821784:bg = "white")
1732114332258:# Combine all plots
1732114332259:combined_plot <- wrap_plots(pca_plots, ncol = 2) +
1732114332261:plot_annotation(
1732114332261:title = "Temporal changes in community composition (1999, 2013-2017)",
1732114332261:subtitle = "Species shown as points, stations as arrows",
1732114332261:caption = "Based on species abundance data",
1732114332262:theme = theme(
1732114332262:plot.title = element_text(size = 18, face = "bold"),
1732114332262:axis.text = element_text(size = 16, color = "black"),
1732114332262:axis.title = element_text(size = 18),
1732114332263:plot.subtitle = element_text(size = 14),
1732114332263:plot.caption = element_text(size = 10, hjust = 0)
1732114332263:)
1732114332263:)
1732114333243:# Save combined plot
1732114333243:ggsave("output/pca_biplots_all_years.png",
1732114333243:combined_plot,
1732114333243:width = 20, height = 15,
1732114333244:dpi = 300,
1732114333244:bg = "white")
1732114450370:# Create PCA plot
1732114450370:pca_plot <- ggplot() +
1732114450371:# Add points for all species
1732114450371:geom_point(data = site_scores,
1732114450371:aes(x = PC1, y = PC2),
1732114450371:size = 2,
1732114450371:shape = 19,
1732114450371:color = "black") +
1732114450372:# Add arrows for stations
1732114450372:geom_segment(data = species_loadings,
1732114450372:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732114450372:arrow = arrow(length = unit(0.2, "cm")),
1732114450372:color = "darkgrey") +
1732114450372:# Add station labels
1732114450373:geom_text_repel(data = species_loadings,
1732114450373:aes(x = PC1, y = PC2, label = Station),
1732114450373:size = 3.5,
1732114450373:fontface = "bold",
1732114450373:box.padding = 0.5,
1732114450374:point.padding = 0.3) +
1732114450374:# Add labels only for dominant species
1732114450374:geom_text_repel(data = filter(site_scores, is_dominant),
1732114450374:aes(x = PC1, y = PC2, label = Species),
1732114450374:size = 2.8,
1732114450374:fontface = "italic",
1732114450375:color = "grey30",
1732114450375:box.padding = 0.5,
1732114450375:point.padding = 0.3) +
1732114450375:coord_fixed() +
1732114450375:theme_bw() +
1732114450375:theme(
1732114450376:panel.grid.minor = element_blank(),
1732114450376:panel.grid.major = element_line(color = "grey95"),
1732114450376:axis.text = element_text(size = 14, color = "black"),     # Increased from 12
1732114450376:axis.title = element_text(size = 16),
1732114450376:plot.title = element_text(size = 12, face = "bold"),
1732114450377:plot.subtitle = element_text(size = 10)
1732114450377:) +
1732114450377:labs(
1732114450377:title = paste("PCA of benthic community composition -", year),
1732114450378:subtitle = paste0("Species shown as points (>1% abundance labeled, n=",
1732114450378:sum(site_scores$is_dominant), "), stations as arrows"),
1732114450378:x = paste0("PC1 (", var_explained[1], "%)"),
1732114450378:y = paste0("PC2 (", var_explained[2], "%)")
1732114450378:)
1732114453748:# Function to process and create PCA for one year
1732114453748:create_year_pca <- function(year, data = henda) {
1732114453748:# Calculate dominant species for this specific year
1732114453748:year_dominant_species <- data %>%
1732114453748:filter(Year == year) %>%
1732114453748:pivot_longer(cols = c(A7, B5, B8, C4, E3, E4),
1732114453749:names_to = "Station",
1732114453749:values_to = "abundance") %>%
1732114453749:group_by(Flokkun) %>%
1732114453749:summarise(total_abundance = sum(abundance)) %>%
1732114453749:ungroup() %>%
1732114453749:mutate(relative_abundance = total_abundance/sum(total_abundance)) %>%
1732114453750:filter(relative_abundance > 0.01) %>%  # Keep species with >1% relative abundance
1732114453750:rename(Species = Flokkun)
1732114453750:# Filter data for specific year and prepare
1732114453750:year_data <- data %>%
1732114453750:filter(Year == year) %>%
1732114453751:select(-Year) %>%
1732114453751:as.data.frame()
1732114453751:# Prepare data for PCA
1732114453751:rownames(year_data) <- year_data$Flokkun
1732114453751:year_data <- year_data %>% select(-Flokkun)
1732114453752:# Handle NAs
1732114453752:year_data[is.na(year_data)] <- 0
1732114453752:# Run PCA
1732114453752:species_pca <- rda(scale(year_data))
1732114453753:# Extract scores
1732114453753:site_scores <- data.frame(
1732114453753:scores(species_pca, display = "sites"),
1732114453753:Species = rownames(scores(species_pca, display = "sites"))
1732114453753:) %>%
1732114453754:# Add indicator for dominant species
1732114453754:mutate(is_dominant = Species %in% year_dominant_species$Species)
1732114453754:species_loadings <- data.frame(
1732114453754:scores(species_pca, display = "species"),
1732114453755:Station = colnames(year_data)
1732114453755:)
1732114453755:# Calculate variance explained
1732114453755:var_explained <- round(summary(species_pca)$cont$importance[2,1:2] * 100, 1)
1732114453756:# Create PCA plot
1732114453756:pca_plot <- ggplot() +
1732114453756:# Add points for all species
1732114453756:geom_point(data = site_scores,
1732114453756:aes(x = PC1, y = PC2),
1732114453757:size = 2,
1732114453757:shape = 19,
1732114453757:color = "black") +
1732114453757:# Add arrows for stations
1732114453757:geom_segment(data = species_loadings,
1732114453758:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732114453758:arrow = arrow(length = unit(0.2, "cm")),
1732114453758:color = "darkgrey") +
1732114453758:# Add station labels
1732114453759:geom_text_repel(data = species_loadings,
1732114453759:aes(x = PC1, y = PC2, label = Station),
1732114453759:size = 3.5,
1732114453759:fontface = "bold",
1732114453760:box.padding = 0.5,
1732114453760:point.padding = 0.3) +
1732114453760:# Add labels only for dominant species
1732114453761:geom_text_repel(data = filter(site_scores, is_dominant),
1732114453761:aes(x = PC1, y = PC2, label = Species),
1732114453761:size = 2.8,
1732114453761:fontface = "italic",
1732114453762:color = "grey30",
1732114453762:box.padding = 0.5,
1732114453762:point.padding = 0.3) +
1732114453763:coord_fixed() +
1732114453763:theme_bw() +
1732114453763:theme(
1732114453763:panel.grid.minor = element_blank(),
1732114453764:panel.grid.major = element_line(color = "grey95"),
1732114453764:axis.text = element_text(size = 14, color = "black"),     # Increased from 12
1732114453764:axis.title = element_text(size = 16),
1732114453765:plot.title = element_text(size = 12, face = "bold"),
1732114453765:plot.subtitle = element_text(size = 10)
1732114453765:) +
1732114453765:labs(
1732114453766:title = paste("PCA of benthic community composition -", year),
1732114453766:subtitle = paste0("Species shown as points (>1% abundance labeled, n=",
1732114453766:sum(site_scores$is_dominant), "), stations as arrows"),
1732114453767:x = paste0("PC1 (", var_explained[1], "%)"),
1732114453767:y = paste0("PC2 (", var_explained[2], "%)")
1732114453767:)
1732114453768:return(pca_plot)
1732114453768:}
1732114456289:# Create PCA plots for all years
1732114456289:years <- c(1999, 2013:2017)
1732114456732:pca_plots <- list()
1732114457802:for(year in years) {
1732114457802:pca_plots[[as.character(year)]] <- create_year_pca(year)
1732114457802:# Save individual plots
1732114457803:ggsave(
1732114457803:paste0("output/pca_biplot_", year, ".png"),
1732114457803:pca_plots[[as.character(year)]],
1732114457803:width = 10, height = 8,
1732114457803:dpi = 300,
1732114457803:bg = "white"
1732114457804:)
1732114457804:}
1732118985547:library(readr)
1732118985549:merged_data_allt <- read_csv("data/processed/merged_data_allt.csv")
1732118986172:View(merged_data_allt)
1732119929347:# Add feeding guild information to henda_long_matched
1732119929348:henda_long_matched_with_guilds <- henda_long_matched %>%
1732119929348:left_join(
1732119929348:merged_data_allt %>% select(Flokkun, `Feeding guild`),
1732119929348:by = c("species" = "Flokkun")
1732119929348:)
1732119929446:# Validate the merge
1732119929446:cat("Merge Summary:\n",
1732119929446:"Original species count:", n_distinct(henda_long_matched$species), "\n",
1732119929446:"Species with guild data:", n_distinct(henda_long_matched_with_guilds$species[!is.na(henda_long_matched_with_guilds$`Feeding guild`)]), "\n",
1732119929446:"Species missing guild data:", n_distinct(henda_long_matched_with_guilds$species[is.na(henda_long_matched_with_guilds$`Feeding guild`)]), "\n")
1732119929450:# Show species missing guild data if any
1732119929450:if(any(is.na(henda_long_matched_with_guilds$`Feeding guild`))) {
1732119929450:cat("\nSpecies missing feeding guild data:\n")
1732119929450:henda_long_matched_with_guilds %>%
1732119929450:filter(is.na(`Feeding guild`)) %>%
1732119929450:distinct(species) %>%
1732119929450:pull(species) %>%
1732119929451:print()
1732119929451:}
1732120109887:# Calculate proportion of feeding guilds per station and year
1732120109887:feeding_guild_summary <- henda_long_matched_with_guilds %>%
1732120109887:group_by(station, year, `Feeding guild`) %>%
1732120109887:summarise(
1732120109888:total_abundance = sum(adjusted_density),
1732120109888:.groups = "drop"
1732120109888:) %>%
1732120109888:group_by(station, year) %>%
1732120109888:mutate(proportion = total_abundance / sum(total_abundance)) %>%
1732120109888:ungroup()
1732120109902:# Add feeding guild information to NMDS plot
1732120109902:# Extract feeding guild centroids in NMDS space
1732120109902:guild_centroids <- henda_long_matched_with_guilds %>%
1732120109903:group_by(species, `Feeding guild`) %>%
1732120109903:summarise(
1732120109903:NMDS1 = mean(species_scores[species, "NMDS1"]),
1732120109903:NMDS2 = mean(species_scores[species, "NMDS2"]),
1732120109903:.groups = "drop"
1732120109903:) %>%
1732120109903:filter(!is.na(`Feeding guild`))
1732120109917:# Create enhanced NMDS plot with feeding guilds
1732120109917:nmds_plot_with_guilds <- ggplot() +
1732120109917:# Original site points
1732120109917:geom_point(data = site_scores,
1732120109917:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1732120109917:size = 3) +
1732120109917:# Add feeding guild centroids
1732120109917:geom_label(data = guild_centroids,
1732120109918:aes(x = NMDS1, y = NMDS2, label = `Feeding guild`, fill = `Feeding guild`),
1732120109918:alpha = 0.7,
1732120109918:size = 3) +
1732120109918:theme_bw() +
1732120109918:theme(
1732120109918:panel.background = element_rect(fill = "white"),
1732120109918:axis.text = element_text(size = 12, color = "black"),
1732120109919:axis.title = element_text(size = 14),
1732120109919:legend.text = element_text(size = 12),
1732120109919:legend.title = element_text(size = 12, face = "bold"),
1732120109919:plot.title = element_text(size = 16, face = "bold")
1732120109919:) +
1732120109919:labs(title = "NMDS of Community Composition with Feeding Guilds")
1732120109933:# Save the enhanced plot
1732120109933:ggsave("output/nmds_plot_with_feeding_guilds.png",
1732120109933:nmds_plot_with_guilds,
1732120109933:width = 12,
1732120109933:height = 10,
1732120109933:dpi = 300,
1732120109933:bg = "white")
1732120111187:# Statistical analysis of feeding guild patterns
1732120111187:# Test for differences in feeding guild composition between stations
1732120111187:guild_permanova <- adonis2(
1732120111187:total_abundance ~ station + year,
1732120111187:data = feeding_guild_summary,
1732120111187:method = "bray",
1732120111187:permutations = 999
1732120111187:)
1732120385169:# Load required packages
1732120385169:library(vegan)
1732120385704:library(ggplot2)
1732120386445:library(dplyr)
1732120386743:library(tidyr)
1732120388590:library(ggrepel)
1732120389758:library(patchwork)
1732120413887:# Load the data with feeding guilds
1732120413887:henda_long_matched_with_guilds <- henda_long_matched %>%
1732120413887:left_join(
1732120413887:merged_data_allt %>% select(Flokkun, `Feeding guild`),
1732120413888:by = c("species" = "Flokkun")
1732120413888:)
1732120519062:# Check for duplicates in merged_data_allt
1732120519062:merged_data_check <- merged_data_allt %>%
1732120519062:select(Flokkun, `Feeding guild`) %>%
1732120519062:group_by(Flokkun) %>%
1732120519063:summarise(
1732120519063:n = n(),
1732120519063:unique_guilds = n_distinct(`Feeding guild`)
1732120519064:) %>%
1732120519064:filter(n > 1)  # Show species with multiple entries
1732120519076:print("Species with multiple feeding guild assignments:")
1732120519076:print(merged_data_check)
1732120519123:# Clean the feeding guild data before joining
1732120519124:merged_data_clean <- merged_data_allt %>%
1732120519124:select(Flokkun, `Feeding guild`) %>%
1732120519124:distinct(Flokkun, .keep_all = TRUE)  # Keep only unique species entries
1732120519126:# Now perform the join with cleaned data
1732120519126:henda_long_matched_with_guilds <- henda_long_matched %>%
1732120519126:left_join(
1732120519126:merged_data_clean,
1732120519126:by = c("species" = "Flokkun")
1732120519126:)
1732120519128:# Verify the row counts
1732120519128:cat("\nRow counts comparison:\n",
1732120519128:"henda_long_matched rows:", nrow(henda_long_matched), "\n",
1732120519129:"henda_long_matched_with_guilds rows:", nrow(henda_long_matched_with_guilds), "\n")
1732120519129:# Check for any species that got duplicated in the join
1732120519129:duplicates_check <- henda_long_matched_with_guilds %>%
1732120519129:group_by(station, year, species) %>%
1732120519129:filter(n() > 1)
1732120519147:if(nrow(duplicates_check) > 0) {
1732120519147:print("\nDuplicated entries after join:")
1732120519147:print(duplicates_check)
1732120519147:}
1732120571832:# Prepare data for NMDS
1732120571832:species_matrix <- henda_long_matched_with_guilds %>%
1732120571832:select(station, year, species, adjusted_density) %>%
1732120571832:pivot_wider(
1732120571832:names_from = species,
1732120571832:values_from = adjusted_density,
1732120571833:values_fill = 0
1732120571833:) %>%
1732120571833:mutate(
1732120571833:station_temp = station,
1732120571833:year_temp = year
1732120571833:) %>%
1732120571834:select(-station, -year)
1732120582174:# Perform NMDS
1732120582174:nmds <- metaMDS(select(species_matrix, -station_temp, -year_temp), distance = "bray")
1732120583974:# Extract site scores and add metadata
1732120583974:site_scores <- as.data.frame(scores(nmds, display = "sites"))
1732120584664:site_scores$Station <- species_matrix$station_temp
1732120585392:site_scores$Year <- as.factor(species_matrix$year_temp)
1732120586450:# Extract species scores and add feeding guild information
1732120586451:species_scores <- as.data.frame(scores(nmds, display = "species"))
1732120586855:species_scores$species <- rownames(species_scores)
1732120587262:species_scores <- species_scores %>%
1732120587262:left_join(
1732120587263:henda_long_matched_with_guilds %>%
1732120587263:select(species, `Feeding guild`) %>%
1732120587263:distinct(),
1732120587263:by = "species"
1732120587263:)
1732120588958:# Calculate centroids for feeding guilds
1732120588958:guild_centroids <- species_scores %>%
1732120588958:group_by(`Feeding guild`) %>%
1732120588958:summarise(
1732120588958:NMDS1 = mean(NMDS1),
1732120588958:NMDS2 = mean(NMDS2),
1732120588959:n = n()
1732120588959:) %>%
1732120588959:filter(!is.na(`Feeding guild`))
1732120590238:# Create enhanced NMDS plot with feeding guilds
1732120590239:nmds_guild_plot <- ggplot() +
1732120590239:# Add points for sites
1732120590239:geom_point(data = site_scores,
1732120590239:aes(x = NMDS1, y = NMDS2, color = Station, shape = Year),
1732120590239:size = 3) +
1732120590240:# Add feeding guild centroids
1732120590240:geom_label(data = guild_centroids,
1732120590240:aes(x = NMDS1, y = NMDS2,
1732120590240:label = paste0(`Feeding guild`, "\n(n=", n, ")")),
1732120590240:alpha = 0.7,
1732120590240:size = 3) +
1732120590241:theme_bw() +
1732120590241:theme(
1732120590241:panel.background = element_rect(fill = "white"),
1732120590241:axis.text = element_text(size = 12, color = "black"),
1732120590241:axis.title = element_text(size = 14),
1732120590241:legend.text = element_text(size = 12),
1732120590241:legend.title = element_text(size = 12, face = "bold")
1732120590242:) +
1732120590242:labs(title = "NMDS of Community Composition with Feeding Guilds")
1732120593710:# Save NMDS plot
1732120593710:ggsave("output/nmds_feeding_guilds.png",
1732120593710:nmds_guild_plot,
1732120593710:width = 12,
1732120593710:height = 10,
1732120593710:dpi = 300,
1732120593711:bg = "white")
1732120634829:# Prepare data for PCA by feeding guild
1732120634830:guild_abundances <- henda_long_matched_with_guilds %>%
1732120634830:group_by(station, year, `Feeding guild`) %>%
1732120634830:summarise(total_abundance = sum(adjusted_density), .groups = "drop") %>%
1732120634830:pivot_wider(
1732120634830:names_from = `Feeding guild`,
1732120634831:values_from = total_abundance,
1732120634831:values_fill = 0
1732120634831:)
1732120635877:# Perform PCA on feeding guild composition
1732120635877:pca_data <- guild_abundances %>%
1732120635878:select(-station, -year) %>%
1732120635878:scale()
1732120637501:pca_result <- rda(pca_data)
1732120639022:# Extract PCA scores
1732120639022:pca_site_scores <- data.frame(
1732120639022:scores(pca_result, display = "sites"),
1732120639022:Station = guild_abundances$station,
1732120639022:Year = factor(guild_abundances$year)
1732120639023:)
1732120640181:pca_guild_scores <- data.frame(
1732120640182:scores(pca_result, display = "species"),
1732120640182:Guild = colnames(select(guild_abundances, -station, -year))
1732120640182:)
1732120641233:# Calculate variance explained
1732120641234:var_explained <- summary(pca_result)$cont$importance[2,1:2] * 100
1732120643054:# Create PCA plot
1732120643054:pca_guild_plot <- ggplot() +
1732120643054:geom_point(data = pca_site_scores,
1732120643054:aes(x = PC1, y = PC2, color = Station, shape = Year),
1732120643055:size = 3) +
1732120643055:geom_segment(data = pca_guild_scores,
1732120643055:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732120643055:arrow = arrow(length = unit(0.2, "cm")),
1732120643055:color = "darkgrey") +
1732120643055:geom_text_repel(data = pca_guild_scores,
1732120643055:aes(x = PC1, y = PC2, label = Guild),
1732120643056:size = 4) +
1732120643056:theme_bw() +
1732120643056:theme(
1732120643056:panel.background = element_rect(fill = "white"),
1732120643056:axis.text = element_text(size = 12),
1732120643056:axis.title = element_text(size = 14)
1732120643056:) +
1732120643056:labs(
1732120643057:title = "PCA of Feeding Guild Composition",
1732120643057:x = sprintf("PC1 (%.1f%%)", var_explained[1]),
1732120643057:y = sprintf("PC2 (%.1f%%)", var_explained[2])
1732120643057:)
1732120644503:# Save PCA plot
1732120644503:ggsave("output/pca_feeding_guilds.png",
1732120644503:pca_guild_plot,
1732120644503:width = 12,
1732120644503:height = 10,
1732120644504:dpi = 300,
1732120644504:bg = "white")
1732120674084:# Statistical analysis of feeding guild patterns
1732120674085:# PERMANOVA test
1732120674085:guild_permanova <- adonis2(
1732120674085:pca_data ~ Station + Year,
1732120674085:data = guild_abundances,
1732120674085:permutations = 999
1732120674085:)
1732120684228:pca_data
1732120714517:str(pca_data)
1732120794238:# Prepare data for PCA and PERMANOVA by feeding guild
1732120794238:guild_abundances <- henda_long_matched_with_guilds %>%
1732120794238:group_by(station, year, `Feeding guild`) %>%
1732120794239:summarise(total_abundance = sum(adjusted_density), .groups = "drop") %>%
1732120794239:pivot_wider(
1732120794239:names_from = `Feeding guild`,
1732120794239:values_from = total_abundance,
1732120794239:values_fill = 0
1732120794239:)
1732120795150:# Create abundance matrix for PERMANOVA (non-scaled)
1732120795151:guild_matrix <- guild_abundances %>%
1732120795151:select(-station, -year)  # Keep raw abundances for PERMANOVA
1732120796325:# Perform PERMANOVA on raw abundances
1732120796326:guild_permanova <- adonis2(
1732120796326:guild_matrix ~ station + year,
1732120796326:data = guild_abundances,
1732120796326:method = "bray",
1732120796326:permutations = 999
1732120796326:)
1732120797268:# For PCA, scale the data separately
1732120797268:pca_data <- scale(guild_matrix)
1732120797976:pca_result <- rda(pca_data)
1732120798732:# Extract PCA scores
1732120798732:pca_site_scores <- data.frame(
1732120798732:scores(pca_result, display = "sites"),
1732120798732:Station = guild_abundances$station,
1732120798733:Year = factor(guild_abundances$year)
1732120798733:)
1732120800373:pca_guild_scores <- data.frame(
1732120800374:scores(pca_result, display = "species"),
1732120800374:Guild = colnames(select(guild_abundances, -station, -year))
1732120800374:)
1732120800998:# Calculate variance explained
1732120800998:var_explained <- summary(pca_result)$cont$importance[2,1:2] * 100
1732120801846:# Create PCA plot
1732120801846:pca_guild_plot <- ggplot() +
1732120801846:geom_point(data = pca_site_scores,
1732120801846:aes(x = PC1, y = PC2, color = Station, shape = Year),
1732120801846:size = 3) +
1732120801846:geom_segment(data = pca_guild_scores,
1732120801847:aes(x = 0, y = 0, xend = PC1, yend = PC2),
1732120801847:arrow = arrow(length = unit(0.2, "cm")),
1732120801847:color = "darkgrey") +
1732120801847:geom_text_repel(data = pca_guild_scores,
1732120801847:aes(x = PC1, y = PC2, label = Guild),
1732120801847:size = 4) +
1732120801847:theme_bw() +
1732120801848:theme(
1732120801848:panel.background = element_rect(fill = "white"),
1732120801848:axis.text = element_text(size = 12),
1732120801848:axis.title = element_text(size = 14)
1732120801848:) +
1732120801848:labs(
1732120801849:title = "PCA of Feeding Guild Composition",
1732120801849:x = sprintf("PC1 (%.1f%%)", var_explained[1]),
1732120801849:y = sprintf("PC2 (%.1f%%)", var_explained[2])
1732120801849:)
1732120802903:# Save PCA plot
1732120802903:ggsave("output/pca_feeding_guilds.png",
1732120802904:pca_guild_plot,
1732120802904:width = 12,
1732120802904:height = 10,
1732120802904:dpi = 300,
1732120802904:bg = "white")
1732120824925:# Save PERMANOVA results
1732120824925:sink("output/feeding_guild_analysis.txt")
1732120826150:cat("Feeding Guild Analysis Results\n")
1732120827242:cat("============================\n\n")
1732120828296:cat("1. PERMANOVA Results\n")
1732120828600:cat("-----------------\n")
1732120828967:print(guild_permanova)
1732120829425:cat("\n2. Feeding Guild Composition\n")
1732120829602:cat("-------------------------\n")
1732120829749:guild_summary <- henda_long_matched_with_guilds %>%
1732120829750:group_by(`Feeding guild`) %>%
1732120829750:summarise(
1732120829750:n_species = n_distinct(species),
1732120829750:total_abundance = sum(adjusted_density),
1732120829750:relative_abundance = total_abundance / sum(henda_long_matched_with_guilds$adjusted_density)
1732120829751:) %>%
1732120829751:arrange(desc(relative_abundance))
1732120829907:print(guild_summary)
1732120830966:sink()
